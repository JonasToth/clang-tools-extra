
















































































































































/project/git/Source/kwsys/Glob.cxx:200:28: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      realname = dir + "/" + fname;
                           ^
/project/git/Source/kwsys/Glob.cxx:223:47: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
                        "' failed! Reason: '" + realPathErrorMessage + "'"));
                                              ^
/project/git/Source/kwsys/Glob.cxx:253:42: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          message += canonicalPath + "/" + fname;
                                         ^








/project/git/Source/kwsys/Glob.cxx:305:28: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      realname = dir + "/" + fname;
                           ^






























































































































































/project/git/Source/kwsys/SystemTools.cxx:1993:25: warning: 'find_first_of' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  if (ret.find_first_of(" ") != std::string::npos) {
                        ^~~
                        ' '
/project/git/Source/kwsys/SystemTools.cxx:2068:17: warning: local copy 'source_name' of the variable 'source' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
    std::string source_name = source;
                ^
    const      &
/project/git/Source/kwsys/SystemTools.cxx:2212:19: warning: local copy 'source_name' of the variable 'source' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
      std::string source_name = source;
                  ^
      const      &
/project/git/Source/kwsys/SystemTools.cxx:3050:49: warning: 'rfind' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    std::string::size_type slashPos = dir.rfind("/");
                                                ^~~
                                                '/'
/project/git/Source/kwsys/SystemTools.cxx:3207:32: warning: std::move of the const expression has no effect; remove std::move() [performance-move-const-arg]
      out_components.push_back(std::move(*i));
                               ^~~~~~~~~~  ~
/project/git/Source/kwsys/SystemTools.cxx:3638:15: warning: local copy 'data' of the variable 'str' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
  std::string data(str);
              ^
  const      &
/project/git/Source/kwsys/SystemTools.cxx:3688:47: warning: 'rfind' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  std::string::size_type slash_pos = fn.rfind("/");
                                              ^~~
                                              '/'




























/project/git/Source/kwsys/SystemInformation.cxx:1340:28: warning: 'rfind' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    size_t at = file.rfind("/");
                           ^~~
                           '/'
/project/git/Source/kwsys/SystemInformation.cxx:3354:23: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    pos = buffer.find(":", pos);
                      ^~~
                      ':'
/project/git/Source/kwsys/SystemInformation.cxx:3355:31: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    size_t pos2 = buffer.find("\n", pos);
                              ^~~~
                              '\n'
/project/git/Source/kwsys/SystemInformation.cxx:4605:43: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    size_t pos2 = this->SysCtlBuffer.find("\n", pos);
                                          ^~~~
                                          '\n'
/project/git/Source/kwsys/SystemInformation.cxx:5407:29: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  while ((pos = output.find("\r", pos)) != std::string::npos) {
                            ^~~~
                            '\r'
/project/git/Source/kwsys/SystemInformation.cxx:5413:29: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  while ((pos = output.find("\n", pos)) != std::string::npos) {
                            ^~~~
                            '\n'


















































































































































































































































































































































































































































































































































































/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp:1998:53: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
































Value& CharReaderBuilder::operator[](JSONCPP_STRING key)
                                                    ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp:278:18: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
Value::CZString::CZString(CZString&& other)
                 ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp:302:35: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
Value::CZString& Value::CZString::operator=(CZString&& other) {
                                  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp:490:8: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
Value::Value(Value&& other) {
       ^








/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp:649:55: warning: parameter 'indentation' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    : document_(NULL), rightMargin_(74), indentation_(indentation),
                                                      ^
                                                      std::move( )
/project/git/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp:1226:55: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
Value& StreamWriterBuilder::operator[](JSONCPP_STRING key)
                                                      ^




















/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &




















/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/CTest/cmCTestBuildHandler.cxx:387:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        srcdirrep = "/..." + srcdirrep;
        ^
/project/git/Source/CTest/cmCTestBuildHandler.cxx:401:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        bindirrep = "/..." + bindirrep;
        ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^










































/project/git/Source/CTest/cmParseBlanketJSCoverage.cxx:113:74: warning: the parameter 'files' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
bool cmParseBlanketJSCoverage::LoadCoverageData(std::vector<std::string> files)
                                                                         ^
                                                const                   &






/project/git/Source/CTest/cmParseCoberturaCoverage.cxx:85:42: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              finalpath = filePath + "/" + filename;
                                         ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
































/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/CTest/cmCTestLaunch.cxx:496:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]




















      line = "[CTest: warning suppressed] " + line;
      ^
/project/git/Source/CTest/cmCTestLaunch.cxx:498:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      line = "[CTest: warning matched] " + line;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Source/CTest/cmCTestSubmitHandler.cxx:202:40: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        local_file = localprefix + "/" + file;
                                       ^








/project/git/Source/CTest/cmCTestSubmitHandler.cxx:205:19: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        url + "/" + remoteprefix + cmSystemTools::GetFilenameName(file);
                  ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:399:40: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        local_file = localprefix + "/" + file;
                                       ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:432:21: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        "FileName=" + ofile;
                    ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:752:20: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        "xmlfile=" + ofile;
                   ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:839:36: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = url + "/" + remoteprefix + file;
                                   ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:839:51: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = url + "/" + remoteprefix + file;
                                                  ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:927:44: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = destination + "/" + remoteprefix + file;
                                           ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:927:59: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = destination + "/" + remoteprefix + file;
                                                          ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/CTest/cmCTestScriptHandler.cxx:951:61: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string fullPath = directoryPath + std::string("/") + path;
                                                            ^
























/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






































































































/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




































































/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
























/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]




















    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]












































    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^










/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
























/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmExportInstallFileGenerator.cxx:416:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      obj = value + obj;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
























    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^








/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^














/project/git/Source/cmExtraCodeLiteGenerator.cxx:127:46: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      std::string filename = outputDir + "/" + targetName + ".project";
                                             ^
/project/git/Source/cmExtraCodeLiteGenerator.cxx:137:11: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          visualname = "lib" + visualname;
          ^
/project/git/Source/cmExtraCodeLiteGenerator.cxx:167:44: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string filename = outputDir + "/" + projectName + ".project";
                                           ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^








                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmExtraCodeBlocksGenerator.cxx:183:51: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    xml.Attribute("filename", fsPath + path + "/" + f);
                                                  ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmExtraSublimeTextGenerator.cxx:269:27: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        flagsString + " " + definesString + " " + includesString;
                          ^
/project/git/Source/cmExtraSublimeTextGenerator.cxx:269:49: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        flagsString + " " + definesString + " " + includesString;
                                                ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^




























                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)




















                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
















    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmGeneratorExpressionNode.cxx:1061:77: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      depString += sep + "$<TARGET_PROPERTY:" + std::move(uniqueName) + "," +
                                                                            ^
/project/git/Source/cmGeneratorExpressionNode.cxx:1462:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        o = obj_dir + o;
        ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmInstallDirectoryGenerator.cxx:76:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      d = mf.GetCurrentSourceDirectory() + "/" + d;
      ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]




















  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




















/project/git/Source/cmInstallTargetGenerator.cxx:367:5: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    o = computeInstallObjectDir(this->Target, config) + "/" + o;
    ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]




































  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






















/project/git/Source/cmLocalGenerator.cxx:1746:38: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      "CMAKE_" + lang + *stdIt + "_" + type + "_COMPILE_OPTION";
                                     ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmMakefileExecutableTargetGenerator.cxx:252:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      real_link_command = launcher + real_link_command;
      ^
/project/git/Source/cmMakefileExecutableTargetGenerator.cxx:628:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      real_link_command = launcher + real_link_command;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &








/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmMakefileLibraryTargetGenerator.cxx:396:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      real_link_command = launcher + real_link_command;
      ^
/project/git/Source/cmMakefileLibraryTargetGenerator.cxx:918:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        real_link_command = launcher + real_link_command;
        ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]












    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmLocalUnixMakefileGenerator3.cxx:964:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        cmd = "./" + cmd;
        ^
/project/git/Source/cmLocalUnixMakefileGenerator3.cxx:1027:11: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          cmd = "call " + cmd;
          ^
/project/git/Source/cmLocalUnixMakefileGenerator3.cxx:1029:11: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          cmd = "echo >nul && " + cmd;
          ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmMakefileTargetGenerator.cxx:773:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      compileCommand = launcher + compileCommand;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
















  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmMakefile.cxx:2345:13: warning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]
  for (auto entry : sdkDatabase) {
            ^
       const  &
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
































/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Source/cmRST.cxx:344:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      line = " " + line;
      ^


/project/git/Source/cmUuid.cxx:130:5: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    result = c + result;
    ^






/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


















/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmSystemTools.cxx:931:34: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string path = dir + "/" + file;
                                 ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^














/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^




































/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^










/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
























/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
















/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]












  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]




















    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^




















/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
























    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^














/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmCoreTryCompile.cxx:476:63: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      std::string rulesOverrideLang = rulesOverrideBase + "_" + li;
                                                              ^
/project/git/Source/cmCoreTryCompile.cxx:528:70: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string const langFlagsCfg = "CMAKE_" + li + "_FLAGS_" + cfg;
                                                                     ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &




















/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
















/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
















/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
























/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


















/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]




















  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
















                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]












  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &




















/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmListCommand.cxx:1054:55: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        std::string error = messageHint + "option \"" + option +
                                                      ^
/project/git/Source/cmListCommand.cxx:1066:56: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string error = messageHint + "value \"" + argument +
                                                       ^
/project/git/Source/cmListCommand.cxx:1067:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            "\" for option \"" + option + "\" is invalid.";
                               ^
/project/git/Source/cmListCommand.cxx:1073:58: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          messageHint + "missing argument for option \"" + option + "\".";
                                                         ^
/project/git/Source/cmListCommand.cxx:1080:55: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        std::string error = messageHint + "option \"" + option +
                                                      ^
/project/git/Source/cmListCommand.cxx:1092:56: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string error = messageHint + "value \"" + argument +
                                                       ^
/project/git/Source/cmListCommand.cxx:1093:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            "\" for option \"" + option + "\" is invalid.";
                               ^
/project/git/Source/cmListCommand.cxx:1099:58: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          messageHint + "missing argument for option \"" + option + "\".";
                                                         ^
/project/git/Source/cmListCommand.cxx:1106:55: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        std::string error = messageHint + "option \"" + option +
                                                      ^
/project/git/Source/cmListCommand.cxx:1118:56: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string error = messageHint + "value \"" + argument +
                                                       ^
















/project/git/Source/cmListCommand.cxx:1119:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            "\" for option \"" + option + "\" is invalid.";
                               ^
/project/git/Source/cmListCommand.cxx:1125:58: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          messageHint + "missing argument for option \"" + option + "\".";
                                                         ^
/project/git/Source/cmListCommand.cxx:1131:35: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        messageHint + "option \"" + option + "\" is unknown.";
                                  ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]












  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmOutputRequiredFilesCommand.cxx:220:13: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            path = path + "/";
            ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:221:13: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            path = path + cxxFile;
            ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:232:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + "/";
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:233:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + cxxFile;
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:245:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + "/";
              ^








/project/git/Source/cmOutputRequiredFilesCommand.cxx:246:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + cxxFile;
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:258:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + "/";
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:259:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + cxxFile;
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:344:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              incpath = incpath + "/";
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:346:13: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            incpath = incpath + path;
            ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:425:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        path = path + "/";
        ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:427:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      path = path + fname;
      ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]




























  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
























/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


















/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmSourceGroupCommand.cxx:58:62: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      error = "ROOT: " + root + " is not a prefix of file: " + file;
                                                             ^
















/project/git/Source/cmSourceGroupCommand.cxx:82:5: warning: 'push_back' is called inside a loop; consider pre-allocating the vector capacity before the loop [performance-inefficient-vector-operation]
    prepared.push_back(prepareFilePathForTree(filePath, currentSourceDir));
    ^
/project/git/Source/cmSourceGroupCommand.cxx:99:49: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      tokenizedPath = tokenizePath(prefix + '/' + sgFilesPath);
                                                ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
























    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetIncludeDirectoriesCommand.cxx:44:28: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      dirs += sep + prefix + it;
                           ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






















/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &




















/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]




























  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^






/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
























/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &








/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^














/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmNinjaTargetGenerator.cxx:522:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      i = launcher + i;
      ^












/project/git/Source/cmNinjaTargetGenerator.cxx:744:5: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    i = launcher + i;
    ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmNinjaNormalTargetGenerator.cxx:252:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      linkCmd = launcher + linkCmd;
      ^
/project/git/Source/cmNinjaNormalTargetGenerator.cxx:376:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      linkCmd = launcher + linkCmd;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




































/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^










/project/git/Source/cmGlobalNinjaGenerator.cxx:257:15: warning: local copy 'cmd' of the variable 'command' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
  std::string cmd = command; // NOLINT(clang-tidy)
              ^
  const      &
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^










































/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




















































/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^




































/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
































/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^














/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^


/project/git/Source/cmJsonObjects.cxx:503:45: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          installPath = installPrefix + '/' + dest;
                                            ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]




  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
