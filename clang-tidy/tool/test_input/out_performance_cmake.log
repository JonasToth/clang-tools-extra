nice docker run --rm clang-tidy-cmake -m performance -b ninja -t 'ctest -j16'
 in dir /fast_data2/clang-tidy-bb/buildmaster/workers/workstation/cmake/build (timeout 1200 secs)
 watching logfiles {}
 argv: [b'nice', b'docker', b'run', b'--rm', b'clang-tidy-cmake', b'-m', b'performance', b'-b', b'ninja', b'-t', b'ctest -j16']
 environment:
  AUTOFEATURE=true autotest
  BASH_IT=/home/jonas/.bash_it
  BASH_IT_THEME=bakke
  DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
  EDITOR=vim
  GIT_HOSTING=git@gitolite
  GPGKEY=7B144D7A
  GREP_COLOR=1;33
  HISTCONTROL=ignoreboth
  HISTSIZE=1000
  HOME=/home/jonas
  IRC_CLIENT=irssi
  LANG=de_DE.UTF-8
  LESSCLOSE=/usr/bin/lesspipe %s %s
  LESSOPEN=| /usr/bin/lesspipe %s
  LOGNAME=jonas
  LSCOLORS=Gxfxcxdxdxegedabagacad
  LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:
  MAIL=/var/mail/jonas
  OLDPWD=/fast_data2/clang-tidy-bb
  PATH=/home/jonas/.cargo/bin:/home/jonas/bin:/home/jonas/.local/bin:/home/jonas/.cargo/bin:/home/jonas/.cargo/bin:/home/jonas/bin:/home/jonas/.local/bin:/home/jonas/.cargo/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin
  PWD=/fast_data2/clang-tidy-bb/buildmaster/workers/workstation/cmake/build
  SCM_CHECK=true
  SHELL=/bin/bash
  SHLVL=2
  SHORT_TERM_LINE=true
  SSH_CLIENT=192.168.10.35 41798 22
  SSH_CONNECTION=192.168.10.35 41798 192.168.10.37 22
  SSH_TTY=/dev/pts/0
  S_COLORS=auto
  TERM=xterm-256color
  THEME_CLOCK_FORMAT=%H:%M:%S
  THEME_SHOW_CLOCK=true
  TMUX=/tmp/tmux-1000/default,28172,0
  TMUX_PANE=%19
  USER=jonas
  XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop
  XDG_RUNTIME_DIR=/run/user/1000
  XDG_SESSION_ID=124
  _=/usr/local/bin/buildbot
 using PTY: False
['run-clang-tidy.py', '-checks=-*,performance-*', '-fix', '/project/git/']
Is Shell: False
Enabled checks:
    performance-faster-string-find
    performance-for-range-copy
    performance-implicit-conversion-in-loop
    performance-inefficient-algorithm
    performance-inefficient-string-concatenation
    performance-inefficient-vector-operation
    performance-move-const-arg
    performance-move-constructor-init
    performance-noexcept-move-constructor
    performance-type-promotion-in-math-fn
    performance-unnecessary-copy-initialization
    performance-unnecessary-value-param

clang-apply-replacements version 8.0.0
3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

47 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpppfIM2.yaml -p=/project/git /project/git/Source/kwsys/testConfigure.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBz9KFo.yaml -p=/project/git /project/git/Source/kwsys/String.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwYAJyI.yaml -p=/project/git /project/git/Source/kwsys/Terminal.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcDtcaj.yaml -p=/project/git /project/git/Source/kwsys/System.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYMoDlm.yaml -p=/project/git /project/git/Source/kwsys/DynamicLoader.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLGz91h.yaml -p=/project/git /project/git/Source/kwsys/Directory.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQ1RU_U.yaml -p=/project/git /project/git/Source/kwsys/Base64.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbYcUOl.yaml -p=/project/git /project/git/Source/kwsys/EncodingC.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3w7Eiw.yaml -p=/project/git /project/git/Source/kwsys/ProcessUNIX.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7Ib0te.yaml -p=/project/git /project/git/Source/kwsys/MD5.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_t_2eS.yaml -p=/project/git /project/git/Source/kwsys/EncodingCXX.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNMctvA.yaml -p=/project/git /project/git/Source/kwsys/testCommandLineArguments.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTcCFB8.yaml -p=/project/git /project/git/Source/kwsys/testDynload.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpu_ithk.yaml -p=/project/git /project/git/Source/kwsys/testDynamicLoader.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpABV9RW.yaml -p=/project/git /project/git/Source/kwsys/testSystemInformation.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSOPOU8.yaml -p=/project/git /project/git/Source/kwsys/testFStream.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw67Eqw.yaml -p=/project/git /project/git/Source/kwsys/Base64.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbb8gyH.yaml -p=/project/git /project/git/Source/kwsys/EncodingC.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxrPeLs.yaml -p=/project/git /project/git/Source/kwsys/MD5.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTfIb6c.yaml -p=/project/git /project/git/Source/kwsys/Terminal.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0jFrRI.yaml -p=/project/git /project/git/Source/kwsys/String.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6obiol.yaml -p=/project/git /project/git/Source/kwsys/testEncoding.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKDKUFl.yaml -p=/project/git /project/git/Source/kwsys/testDirectory.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWd9iv1.yaml -p=/project/git /project/git/Source/kwsys/testConsoleBuf.cxx

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpm2N9IV.yaml -p=/project/git /project/git/Source/kwsys/System.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4JfRZJ.yaml -p=/project/git /project/git/Source/kwsys/ProcessUNIX.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_mWJ46.yaml -p=/project/git /project/git/Utilities/KWIML/test/test.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppNkHoG.yaml -p=/project/git /project/git/Source/kwsys/testTerminal.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1sF8Bl.yaml -p=/project/git /project/git/Source/kwsys/testProcess.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHXF0dE.yaml -p=/project/git /project/git/Utilities/KWIML/test/test_abi_C.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmFBMH8.yaml -p=/project/git /project/git/Source/kwsys/testEncode.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdKst3V.yaml -p=/project/git /project/git/Utilities/KWIML/test/test_int_C.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4GN549.yaml -p=/project/git /project/git/Utilities/KWIML/test/test_include_C.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzLjplE.yaml -p=/project/git /project/git/Utilities/KWIML/test/test_abi_CXX.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpA5caxd.yaml -p=/project/git /project/git/Source/kwsys/RegularExpression.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSKyp0G.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/algorithms.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3Ot8tU.yaml -p=/project/git /project/git/Utilities/KWIML/test/test_int_CXX.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpayNRFk.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/byte_order.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_NB6IY.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/hex.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpm6TGU6.yaml -p=/project/git /project/git/Source/kwsys/testCommandLineArguments1.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmMQCl4.yaml -p=/project/git /project/git/Source/kwsys/testSystemTools.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5DLCkx.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/md5.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHLZkCB.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/sha1.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZbqS_R.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/rhash.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpG9Gjm3.yaml -p=/project/git /project/git/Utilities/cmzlib/compress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkOuqEp.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/sha3.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCqs2Oi.yaml -p=/project/git /project/git/Utilities/cmzlib/adler32.c

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUkpW4R.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/sha256.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRQrY6X.yaml -p=/project/git /project/git/Utilities/cmlibrhash/librhash/sha512.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaoTp6d.yaml -p=/project/git /project/git/Utilities/cmzlib/crc32.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNtvavQ.yaml -p=/project/git /project/git/Utilities/cmzlib/deflate.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7vRcfI.yaml -p=/project/git /project/git/Utilities/cmzlib/gzio.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw_eTOK.yaml -p=/project/git /project/git/Utilities/cmzlib/uncompr.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpupYHFy.yaml -p=/project/git /project/git/Utilities/cmzlib/inftrees.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpD1Q0BN.yaml -p=/project/git /project/git/Utilities/cmzlib/zutil.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphtYI0z.yaml -p=/project/git /project/git/Source/kwsys/IOStream.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9JeamW.yaml -p=/project/git /project/git/Utilities/cmzlib/inflate.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpEcOnwp.yaml -p=/project/git /project/git/Utilities/cmzlib/inffast.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIreha3.yaml -p=/project/git /project/git/Utilities/cmzlib/trees.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4WF3HO.yaml -p=/project/git /project/git/Utilities/cmcurl/curltest.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1X6qV7.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/timeval.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzuTpxa.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/file.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1xZW9f.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/base64.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpk6aB2v.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/progress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpFodo5b.yaml -p=/project/git /project/git/Source/kwsys/Glob.cxx
/project/git/Source/kwsys/Glob.cxx:200:28: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      realname = dir + "/" + fname;
                           ^
/project/git/Source/kwsys/Glob.cxx:223:47: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
                        "' failed! Reason: '" + realPathErrorMessage + "'"));
                                              ^
/project/git/Source/kwsys/Glob.cxx:253:42: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          message += canonicalPath + "/" + fname;
                                         ^
19 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/kwsys/Glob.cxx:305:28: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      realname = dir + "/" + fname;
                           ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHewKmM.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hostip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpm1iavt.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/formdata.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLiO9_M.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/cookie.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpi6R1Zl.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/sendf.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp85qB7_.yaml -p=/project/git /project/git/Utilities/KWIML/test/test_include_CXX.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCQ0cUK.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5jiu1b.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/dict.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfMXUS4.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/speedcheck.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwa5Xyg.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/ldap.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3gjM4U.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/if2ip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpEQBZtl.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/getenv.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQy3xqz.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/version.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyckto7.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/ftp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBv6tRD.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/escape.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGsHf_Q.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/url.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_B6bDk.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/telnet.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6VcV0t.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/mprintf.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpR8bBdo.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/netrc.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCXi9fr.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/getinfo.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2IMgft.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/strcase.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwUf3nr.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/easy.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9KaDOU.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/security.c

45 warnings generated.
Suppressed 45 warnings (45 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_kiofc.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_fnmatch.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAc0EE6.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/transfer.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvG1Kbk.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/fileinfo.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkDn3kg.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/wildcard.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpeDSMRX.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/krb5.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpJgWhRg.yaml -p=/project/git /project/git/Source/kwsys/testConsoleBufChild.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNd1ZSn.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/memdebug.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRrydbK.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/strtok.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpa78AAn.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/ftplistparser.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKQHu1L.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http_chunks.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWwqITm.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/llist.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCJfQyZ.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hash.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPCCJ90.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/connect.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbEAvu1.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/md4.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpef6WVZ.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/multi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpVYJnx9.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/share.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmplegce0.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http_digest.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHjnYaE.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/content_encoding.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2aXftA.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/md5.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxeEfca.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/inet_pton.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBk1pvW.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http_negotiate.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnTHKWP.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/strtoofft.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpH1GcQJ.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/amigaos.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnyfuHo.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/strerror.c

62 warnings generated.
Suppressed 62 warnings (62 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcoRFBx.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hostip6.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvMVxXu.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hostasyn.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRN0wx8.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/inet_ntop.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpakqTTu.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/splay.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptbI6K4.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/parsedate.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphnzg2C.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hostip4.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpJ2snXd.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/strdup.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6n4wwJ.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hostsyn.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBurXQN.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/tftp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw92Bbr.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/select.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4qqgSw.yaml -p=/project/git /project/git/Source/kwsys/CommandLineArguments.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9ExA5e.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/ssh.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_7RFFL.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/ssh-libssh.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpoI_Zvc.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/socks.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQ2X_UB.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_addrinfo.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8UR1dI.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/socks_gssapi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpARIvu0.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/socks_sspi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMwiDm6.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/slist.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpS1kWAA.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_sspi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphYfaSI.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/nonblock.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8PGI7g.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/pop3.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmps4PZte.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/imap.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYRgPpd.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_memrchr.c

47 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

99 warnings generated.
Suppressed 88 warnings (88 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNpafsg.yaml -p=/project/git /project/git/Source/kwsys/FStream.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprVdM5w.yaml -p=/project/git /project/git/Source/kwsys/SystemTools.cxx
/project/git/Source/kwsys/SystemTools.cxx:1993:25: warning: 'find_first_of' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  if (ret.find_first_of(" ") != std::string::npos) {
                        ^~~
                        ' '
/project/git/Source/kwsys/SystemTools.cxx:2068:17: warning: local copy 'source_name' of the variable 'source' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
    std::string source_name = source;
                ^
    const      &
/project/git/Source/kwsys/SystemTools.cxx:2212:19: warning: local copy 'source_name' of the variable 'source' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
      std::string source_name = source;
                  ^
      const      &
/project/git/Source/kwsys/SystemTools.cxx:3050:49: warning: 'rfind' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    std::string::size_type slashPos = dir.rfind("/");
                                                ^~~
                                                '/'
/project/git/Source/kwsys/SystemTools.cxx:3207:32: warning: std::move of the const expression has no effect; remove std::move() [performance-move-const-arg]
      out_components.push_back(std::move(*i));
                               ^~~~~~~~~~  ~
/project/git/Source/kwsys/SystemTools.cxx:3638:15: warning: local copy 'data' of the variable 'str' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
  std::string data(str);
              ^
  const      &
/project/git/Source/kwsys/SystemTools.cxx:3688:47: warning: 'rfind' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  std::string::size_type slash_pos = fn.rfind("/");
                                              ^~~
                                              '/'

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp68Sipr.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/smtp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNLyStn.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_threads.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAJVlgC.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/rtsp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKmSmCW.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/warnless.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCjHb1O.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/openldap.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbsgsPW.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hmac.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6GB0oX.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/pingpong.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptgbEBo.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_gethostname.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDTFjgv.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_rtmp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpORo3pD.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/idn_win32.c

86 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYgbs0R.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/gopher.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0tHlaN.yaml -p=/project/git /project/git/Source/kwsys/SystemInformation.cxx
/project/git/Source/kwsys/SystemInformation.cxx:1340:28: warning: 'rfind' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    size_t at = file.rfind("/");
                           ^~~
                           '/'
/project/git/Source/kwsys/SystemInformation.cxx:3354:23: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    pos = buffer.find(":", pos);
                      ^~~
                      ':'
/project/git/Source/kwsys/SystemInformation.cxx:3355:31: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    size_t pos2 = buffer.find("\n", pos);
                              ^~~~
                              '\n'
/project/git/Source/kwsys/SystemInformation.cxx:4605:43: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
    size_t pos2 = this->SysCtlBuffer.find("\n", pos);
                                          ^~~~
                                          '\n'
/project/git/Source/kwsys/SystemInformation.cxx:5407:29: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  while ((pos = output.find("\r", pos)) != std::string::npos) {
                            ^~~~
                            '\r'
/project/git/Source/kwsys/SystemInformation.cxx:5413:29: warning: 'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character [performance-faster-string-find]
  while ((pos = output.find("\n", pos)) != std::string::npos) {
                            ^~~~
                            '\n'

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSipSiM.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/non-ascii.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXd5osz.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http_proxy.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpG6OTK3.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_gssapi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxQaA1h.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/asyn-thread.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpt9A02r.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/asyn-ares.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvRwqDW.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http_ntlm.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGT5eIT.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_ntlm_wb.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_Oez2O.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_ntlm_core.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpJgZUCq.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_multibyte.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_0cCvO.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/hostcheck.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmwoqRN.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/rand.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpExjrDa.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/dotdot.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmMr4oV.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/x509asn1.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3SIxkj.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/http2.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprfipwU.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_sasl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwfdjHk.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/pipeline.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXYuJ1K.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/conncache.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2z2ZNw.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/smb.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpOKvbFH.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_endian.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprNp1Hj.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/system_win32.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw9qIkW.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_des.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfgvFMd.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/sha256.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMsLqL_.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_ctype.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpArNxU_.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/psl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpt8zYkA.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_path.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptZFn6I.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/mime.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpb5u1JW.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/vauth.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpV93QUV.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/setopt.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp26Qsxn.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/curl_range.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpgKmSjJ.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/digest_sspi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNyktEL.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/krb5_gssapi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3Ece6J.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/cleartext.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpgCGd5r.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/cram.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAZmCWJ.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/krb5_sspi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptIRNuA.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/ntlm.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKMoMm3.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/ntlm_sspi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6V1qbU.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/digest.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5fyG9H.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/spnego_gssapi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZQfFOS.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/oauth2.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7NayIB.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vauth/spnego_sspi.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCor4qu.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/openssl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRoc8pA.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/gtls.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMMQiPD.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/nss.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAccF8v.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/polarssl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpn7hP5B.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/polarssl_threadlock.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpA8Gvfq.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/axtls.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpi_5xNM.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/cyassl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0TYOHA.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/vtls.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpg0_57s.yaml -p=/project/git /project/git/Utilities/cmexpat/lib/loadlibrary.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpp9JV2I.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/schannel.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpecGDJq.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/schannel_verify.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3LLB5K.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/gskit.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCRmQhp.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/mbedtls.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGfjo7l.yaml -p=/project/git /project/git/Utilities/cmcompress/cmcompress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp10_nwu.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/vtls/darwinssl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdwy0pw.yaml -p=/project/git /project/git/Utilities/cmexpat/lib/xmlrole.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2CRe43.yaml -p=/project/git /project/git/Utilities/cmexpat/lib/xmltok_impl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5vcP9N.yaml -p=/project/git /project/git/Utilities/cmexpat/lib/xmltok_ns.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9R16Fc.yaml -p=/project/git /project/git/Utilities/cmbzip2/crctable.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpM2egDH.yaml -p=/project/git /project/git/Utilities/cmbzip2/randtable.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpVJxtli.yaml -p=/project/git /project/git/Utilities/cmbzip2/huffman.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0I7JvL.yaml -p=/project/git /project/git/Utilities/cmbzip2/blocksort.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyVcPxq.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/check/check.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnUmQ69.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/check/crc32_fast.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpC0wXJE.yaml -p=/project/git /project/git/Utilities/cmbzip2/compress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpjEASpj.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/check/crc64_table.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAwKgF6.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/check/crc32_table.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8l7Inw.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/check/crc64_fast.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDRRvAC.yaml -p=/project/git /project/git/Utilities/cmbzip2/decompress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwxPD4T.yaml -p=/project/git /project/git/Utilities/cmbzip2/bzlib.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpH4zM2q.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/alone_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGtkivy.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/check/sha256.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLaRCnL.yaml -p=/project/git /project/git/Utilities/cmexpat/lib/xmlparse.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYLM6Yt.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/auto_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsZytKV.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/alone_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKcZksn.yaml -p=/project/git /project/git/Utilities/cmexpat/lib/xmltok.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpjRCwXJ.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_buffer_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp89BOwG.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_buffer_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpx1k2lu.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxn1r4n.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_header_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLhCRoG.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpa23rRy.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_header_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcwcwMy.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/block_util.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmrce0h.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/easy_buffer_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpk47Vnq.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/common.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9p6ITt.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/easy_decoder_memusage.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZWBIgt.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/easy_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpC1WQPK.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/easy_encoder_memusage.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp58q2fB.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/easy_preset.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpph9YJj.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_buffer_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWknLO6.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_buffer_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppkP1Wp.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_common.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmplvy0Go.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZQ2sAq.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3MfJuz.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_flags_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_8GVU6.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/filter_flags_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxtysum.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/index_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7s1_A5.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/index_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpp9_fBx.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_buffer_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfWlFLg.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/index_hash.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXeuihW.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/index.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYIRf6_.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_buffer_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptm2jxh.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdPCMkd.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyg7E7M.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_flags_common.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1MWoFE.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_flags_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1lvCbn.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/stream_flags_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzvU8FO.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/vli_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUptHZ_.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/vli_size.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBLmeM1.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/common/vli_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpt7kCdv.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/delta/delta_common.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPMFovI.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/delta/delta_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLqPwgE.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/delta/delta_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMIrjw7.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lz/lz_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSydUHw.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lz/lz_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmP9gij.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma2_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQAbrhj.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma2_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKsnifP.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/fastpos_table.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpgps9PN.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lz/lz_encoder_mf.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7ybOqO.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma_encoder_presets.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4DAk7F.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma_encoder_optimum_fast.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPpGTMV.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/armthumb.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxhvbdZ.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/ia64.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpFlVChQ.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpb8pIaI.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/rangecoder/price_table.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyzSsvj.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/arm.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQm0UU5.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma_encoder_optimum_normal.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDBgqbA.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/powerpc.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_OvlaM.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/simple_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnGTsHz.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/simple_coder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaM4uYn.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/lzma/lzma_decoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4JzcHY.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/simple_encoder.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTSWyIt.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/sparc.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnerFzr.yaml -p=/project/git /project/git/Utilities/cmliblzma/liblzma/simple/x86.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw7MfKW.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_digest.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpuod616.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_cryptor.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIuQfNJ.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_acl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCTNaMW.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_check_magic.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprOxqcz.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_cmdline.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppMpFo4.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry_copy_stat.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_OYAwX.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry_link_resolver.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6sgJ8_.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry_stat.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp97fyOA.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry_sparse.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTYUB45.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_hmac.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdn47TX.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry_strmode.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp557I6l.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_getdate.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvliI_y.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXqkX1W.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_entry_xattr.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpd9bCnc.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_pathmatch.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBolkfP.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_options.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYtlQPP.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_rb.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQk6wa1.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_pack_dev.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmYvXwi.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_match.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWkDBcH.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_random.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDMxb6o.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_ppmd7.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzhuKkE.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_add_passphrase.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMaF4bw.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_append_filter.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGhzHwZ.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7YfoEx.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_disk_set_standard_lookup.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8rY4sh.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_extract.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9W_Wur.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_extract2.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpD5mlnn.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_disk_entry_from_file.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmplCSKIX.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_open_fd.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLCBSJx.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_open_memory.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfVkKNk.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_open_file.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBks1lj.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_set_format.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUFflF_.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_open_filename.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYZrZWk.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_disk_posix.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCmeVQB.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_data_into_fd.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpul1t63.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_set_options.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHXVPQo.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_all.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpD5zT_P.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_bzip2.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMBwrSQ.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_compress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpuGvipU.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lrzip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp83SKCY.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_grzip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbp7UVI.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_gzip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHcqi0V.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lz4.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAOBJQi.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_none.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGO1uST.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_rpm.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1U6z8Z.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_lzop.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7YKUHU.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_program.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2QPvuc.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_zstd.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpg9c2Xr.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_uu.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpOsDkKP.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_all.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBccwl9.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_filter_xz.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpqBMAA_.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_ar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2VzAlz.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_by_code.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIcBbLw.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_empty.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLw0T8t.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_7zip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp55RkrA.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_cpio.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZkylwB.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_raw.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4ReWWe.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_cab.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXebEOv.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_warc.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYshbRa.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_mtree.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_cADK3.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_iso9660.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpiFQLPp.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_lha.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzqN97Q.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_xar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp55ekVv.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_string_sprintf.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphv0Xja.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_tar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4mVV4_.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_rar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbLtR1Y.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_read_support_format_zip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUYeyvz.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_util.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpn4GuyP.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_virtual.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw3e4pG.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_version_details.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpccfCiC.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaJ52Fq.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_open_fd.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprb3vjw.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_string.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWo794g.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_open_file.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp81bcnk.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_disk_set_standard_lookup.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7y8BzC.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_open_memory.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRhT_Uz.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_open_filename.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkAyVL8.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_b64encode.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4oAsK2.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_disk_posix.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpESFg4M.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6pIMW9.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_by_name.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6U0Xc9.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_bzip2.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpM1tqkd.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_compress.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpiH5X28.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_gzip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_a3TJH.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_grzip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpY0YRfm.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lz4.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp92dkiY.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lrzip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUoXJXR.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_none.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6FNAPL.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_lzop.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaDCp06.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_uuencode.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNVnhnv.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_zstd.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQOWg1N.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_xz.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpD0tveE.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_add_filter_program.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYqvMXP.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYQPnYF.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_by_name.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphXfjTb.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHL6iUH.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_ar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnFbu90.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_filter_by_ext.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpItQvuQ.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_cpio_newc.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpVhsbbU.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_7zip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzbI3kA.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_gnutar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPrZK1C.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_raw.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnqOFnR.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_ustar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaJUkn3.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_mtree.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpr5YFk0.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_warc.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmIqzDi.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_v7tar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUKxO6T.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/xxhash.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6f46nl.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_options.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMdy5DU.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_pax.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLcPw3M.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_shar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQH9r7Q.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_xar.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyRk61K.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_passphrase.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpniC8mP.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/filter_fork_posix.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNMC7JZ.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_zip.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpFxewUB.yaml -p=/project/git /project/git/Utilities/cmlibarchive/libarchive/archive_write_set_format_iso9660.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4Ak5lw.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/version.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmVUn2j.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/inet.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfFa7uH.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/uv-data-getter-setters.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw23VLr.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/fs-poll.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2RBHD2.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/threadpool.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpqAiR3M.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/uv-common.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaJVyPi.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/dl.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvlBNu6.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/getaddrinfo.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpF9J6nH.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/async.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5McdtZ.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/core.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTTWsBo.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/getnameinfo.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpm_DYAB.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/fs.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKdygyN.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/loop-watcher.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp021Vjm.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/loop.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWAkLPq.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/pipe.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8jxvZb.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/poll.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprr2kg2.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/process.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxxOxOp.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/tcp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmbk2Yd.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/signal.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2HUXx9.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/timer.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphMAdA_.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/thread.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYXI1eS.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/tty.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp23aPMl.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/stream.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5BtLPd.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/udp.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8YzT4d.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/linux-syscalls.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprySWsW.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/linux-core.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpoF1yEv.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/linux-inotify.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPs8Qqh.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/procfs-exepath.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpg52Zsq.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/proctitle.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2ZnAmR.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/sysinfo-memory.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpVOc0XS.yaml -p=/project/git /project/git/Utilities/cmlibuv/src/unix/sysinfo-loadavg.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcicl0B.yaml -p=/project/git /project/git/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_reader.cpp:1998:53: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
75 warnings generated.
Suppressed 71 warnings (71 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

64 warnings generated.
Suppressed 58 warnings (58 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

62 warnings generated.
Suppressed 62 warnings (62 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

90 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

67 warnings generated.
Suppressed 62 warnings (62 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

Value& CharReaderBuilder::operator[](JSONCPP_STRING key)
                                                    ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw7scTT.yaml -p=/project/git /project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp:278:18: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
Value::CZString::CZString(CZString&& other)
                 ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp:302:35: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
Value::CZString& Value::CZString::operator=(CZString&& other) {
                                  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_value.cpp:490:8: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
Value::Value(Value&& other) {
       ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7wawrd.yaml -p=/project/git /project/git/Source/CTest/cmCTestCoverageCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2AKZ7F.yaml -p=/project/git /project/git/Source/CTest/cmCTestCurl.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphkaCev.yaml -p=/project/git /project/git/Source/CTest/cmCTestConfigureHandler.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1RzhTe.yaml -p=/project/git /project/git/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^
/project/git/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp:649:55: warning: parameter 'indentation' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    : document_(NULL), rightMargin_(74), indentation_(indentation),
                                                      ^
                                                      std::move( )
/project/git/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp:1226:55: warning: the parameter 'key' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
Value& StreamWriterBuilder::operator[](JSONCPP_STRING key)
                                                      ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpu0dV1f.yaml -p=/project/git /project/git/Source/CTest/cmParseCacheCoverage.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNdl2zX.yaml -p=/project/git /project/git/Source/CTest/cmParseMumpsCoverage.cxx

62 warnings generated.
Suppressed 62 warnings (62 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

90 warnings generated.
Suppressed 85 warnings (85 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5JOnh4.yaml -p=/project/git /project/git/Source/CTest/cmProcess.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_pSXvM.yaml -p=/project/git /project/git/Source/CTest/cmCTestConfigureCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsfPbkS.yaml -p=/project/git /project/git/Source/CTest/cmCTestBuildCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcPn09l.yaml -p=/project/git /project/git/Source/CTest/cmCTestBuildAndTestHandler.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

116 warnings generated.
Suppressed 111 warnings (111 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxUE4re.yaml -p=/project/git /project/git/Source/CPack/cpack.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3QZ928.yaml -p=/project/git /project/git/Source/CTest/cmCTestBuildHandler.cxx
/project/git/Source/CTest/cmCTestBuildHandler.cxx:387:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        srcdirrep = "/..." + srcdirrep;
        ^
/project/git/Source/CTest/cmCTestBuildHandler.cxx:401:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        bindirrep = "/..." + bindirrep;
        ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTYR4oy.yaml -p=/project/git /project/git/Source/CTest/cmCTestEmptyBinaryDirectoryCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxyR7U0.yaml -p=/project/git /project/git/Source/CTest/cmParseJacocoCoverage.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSmOmte.yaml -p=/project/git /project/git/Source/CTest/cmParseBlanketJSCoverage.cxx
88 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

99 warnings generated.
Suppressed 99 warnings (99 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

88 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 87 warnings (87 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

104 warnings generated.
Suppressed 101 warnings (101 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

116 warnings generated.
Suppressed 111 warnings (111 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/CTest/cmParseBlanketJSCoverage.cxx:113:74: warning: the parameter 'files' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
bool cmParseBlanketJSCoverage::LoadCoverageData(std::vector<std::string> files)
                                                                         ^
                                                const                   &

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8lYLmq.yaml -p=/project/git /project/git/Source/CTest/cmParseGTMCoverage.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzcFj8t.yaml -p=/project/git /project/git/Source/CTest/cmParsePHPCoverage.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXA72HE.yaml -p=/project/git /project/git/Source/CTest/cmParseCoberturaCoverage.cxx
/project/git/Source/CTest/cmParseCoberturaCoverage.cxx:85:42: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              finalpath = filePath + "/" + filename;
                                         ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzrNlAs.yaml -p=/project/git /project/git/Source/CTest/cmParseDelphiCoverage.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkL5I2Y.yaml -p=/project/git /project/git/Source/CTest/cmCTestCoverageHandler.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbrZVaE.yaml -p=/project/git /project/git/Source/CTest/cmCTestGenericHandler.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppnKFzC.yaml -p=/project/git /project/git/Source/cmCTest.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3cIxid.yaml -p=/project/git /project/git/Source/CTest/cmCTestReadCustomFilesCommand.cxx

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

90 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

74 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHdoSEY.yaml -p=/project/git /project/git/Source/CTest/cmCTestHandlerCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPLRj2u.yaml -p=/project/git /project/git/Source/CTest/cmCTestSleepCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpijCRqX.yaml -p=/project/git /project/git/Source/CTest/cmCTestMemCheckHandler.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIJ2UYU.yaml -p=/project/git /project/git/Source/CTest/cmCTestMemCheckCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8uHLLb.yaml -p=/project/git /project/git/Source/CTest/cmCTestRunScriptCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRzWhRW.yaml -p=/project/git /project/git/Source/CTest/cmCTestRunTest.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbvNrnz.yaml -p=/project/git /project/git/Source/CTest/cmCTestTestCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8OCZUV.yaml -p=/project/git /project/git/Source/CTest/cmCTestLaunch.cxx
/project/git/Source/CTest/cmCTestLaunch.cxx:496:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
114 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

85 warnings generated.
Suppressed 82 warnings (82 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

109 warnings generated.
Suppressed 106 warnings (106 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

95 warnings generated.
Suppressed 95 warnings (95 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

90 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

      line = "[CTest: warning suppressed] " + line;
      ^
/project/git/Source/CTest/cmCTestLaunch.cxx:498:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      line = "[CTest: warning matched] " + line;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQk3QnC.yaml -p=/project/git /project/git/Source/CTest/cmCTestSubmitCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpiyzPRu.yaml -p=/project/git /project/git/Source/CTest/cmCTestStartCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfGl0RR.yaml -p=/project/git /project/git/Source/CTest/cmCTestMultiProcessHandler.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4Tgx8J.yaml -p=/project/git /project/git/Source/CTest/cmCTestUploadHandler.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpKmeqC1.yaml -p=/project/git /project/git/Source/CTest/cmCTestSubmitHandler.cxx
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:202:40: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        local_file = localprefix + "/" + file;
                                       ^
120 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

64 warnings generated.
Suppressed 64 warnings (64 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/CTest/cmCTestSubmitHandler.cxx:205:19: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        url + "/" + remoteprefix + cmSystemTools::GetFilenameName(file);
                  ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:399:40: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        local_file = localprefix + "/" + file;
                                       ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:432:21: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        "FileName=" + ofile;
                    ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:752:20: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        "xmlfile=" + ofile;
                   ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:839:36: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = url + "/" + remoteprefix + file;
                                   ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:839:51: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = url + "/" + remoteprefix + file;
                                                  ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:927:44: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = destination + "/" + remoteprefix + file;
                                           ^
/project/git/Source/CTest/cmCTestSubmitHandler.cxx:927:59: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string rfname = destination + "/" + remoteprefix + file;
                                                          ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmqX0KM.yaml -p=/project/git /project/git/Source/CTest/cmCTestVC.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUaI9uB.yaml -p=/project/git /project/git/Source/CTest/cmCTestScriptHandler.cxx
/project/git/Source/CTest/cmCTestScriptHandler.cxx:951:61: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string fullPath = directoryPath + std::string("/") + path;
                                                            ^
113 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

102 warnings generated.
Suppressed 102 warnings (102 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

64 warnings generated.
Suppressed 64 warnings (64 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSzQVxw.yaml -p=/project/git /project/git/Source/CTest/cmCTestUpdateCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbWWDjK.yaml -p=/project/git /project/git/Source/CTest/cmCTestUpdateHandler.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpixvS8G.yaml -p=/project/git /project/git/Source/CTest/cmCTestUploadCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6nV_BG.yaml -p=/project/git /project/git/Source/LexerParser/cmFortranLexer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTArM00.yaml -p=/project/git /project/git/Source/LexerParser/cmFortranParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6oZXDd.yaml -p=/project/git /project/git/Source/LexerParser/cmCommandArgumentLexer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprO_CsC.yaml -p=/project/git /project/git/Source/LexerParser/cmListFileLexer.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphyO24n.yaml -p=/project/git /project/git/Source/CTest/cmCTestGlobalVC.cxx

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

90 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

64 warnings generated.
Suppressed 64 warnings (64 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

99 warnings generated.
Suppressed 99 warnings (99 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

120 warnings generated.
Suppressed 115 warnings (115 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

58 warnings generated.
Suppressed 58 warnings (58 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSBDxPd.yaml -p=/project/git /project/git/Source/LexerParser/cmCommandArgumentParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppae72X.yaml -p=/project/git /project/git/Source/LexerParser/cmExprLexer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpb9i935.yaml -p=/project/git /project/git/Source/LexerParser/cmExprParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmponknXe.yaml -p=/project/git /project/git/Source/LexerParser/cmDependsJavaParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppblfK6.yaml -p=/project/git /project/git/Source/LexerParser/cmDependsJavaLexer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2I6A97.yaml -p=/project/git /project/git/Source/CTest/cmCTestCVS.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGfomPN.yaml -p=/project/git /project/git/Source/CTest/cmCTestBZR.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpD8Hf0k.yaml -p=/project/git /project/git/Source/CTest/cmCTestHG.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNmB_9l.yaml -p=/project/git /project/git/Source/cmBase32.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxp3JUW.yaml -p=/project/git /project/git/Source/CTest/cmCTestSVN.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYkoXa0.yaml -p=/project/git /project/git/Source/CTest/cmCTestGIT.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4K69Ng.yaml -p=/project/git /project/git/Source/CTest/cmCTestP4.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnu42gw.yaml -p=/project/git /project/git/Source/cmAffinity.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxYMXpV.yaml -p=/project/git /project/git/Source/CTest/cmCTestTestHandler.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpE5bYE_.yaml -p=/project/git /project/git/Source/cmArchiveWrite.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIMuiXw.yaml -p=/project/git /project/git/Source/cmCLocaleEnvironmentScope.cxx

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

30 warnings generated.
Suppressed 30 warnings (30 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

37 warnings generated.
Suppressed 37 warnings (37 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

89 warnings generated.
Suppressed 89 warnings (89 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

41 warnings generated.
Suppressed 41 warnings (41 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

99 warnings generated.
Suppressed 96 warnings (96 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

19 warnings generated.
Suppressed 19 warnings (19 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

9 warnings generated.
Suppressed 9 warnings (9 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

59 warnings generated.
Suppressed 59 warnings (59 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpVXSIT5.yaml -p=/project/git /project/git/Source/cmCurl.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpm0_KU5.yaml -p=/project/git /project/git/Source/cmComputeComponentGraph.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpM_XbMv.yaml -p=/project/git /project/git/Source/cmCPackPropertiesGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfvL6zU.yaml -p=/project/git /project/git/Source/cmCryptoHash.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWgDnPD.yaml -p=/project/git /project/git/Source/cmDefinitions.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpg88G2s.yaml -p=/project/git /project/git/Source/cmCacheManager.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRrrz0k.yaml -p=/project/git /project/git/Source/cmCommandArgumentParserHelper.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppIdI06.yaml -p=/project/git /project/git/Source/cmDependsJava.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCn1Rtk.yaml -p=/project/git /project/git/Source/cmDocumentationFormatter.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSqDZF3.yaml -p=/project/git /project/git/Source/cmCustomCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpFcMK1D.yaml -p=/project/git /project/git/Source/cmDocumentationSection.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0u9K1d.yaml -p=/project/git /project/git/Source/cmDynamicLoader.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpE7bCNp.yaml -p=/project/git /project/git/Source/cmDependsJavaParserHelper.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2GvifQ.yaml -p=/project/git /project/git/Source/cmCommonTargetGenerator.cxx
88 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

45 warnings generated.
Suppressed 45 warnings (45 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

110 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpoKyvop.yaml -p=/project/git /project/git/Source/cmCustomCommandGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXYxcGk.yaml -p=/project/git /project/git/Source/cmExprParserHelper.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpEG6txr.yaml -p=/project/git /project/git/Source/cmDepends.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7ugUBx.yaml -p=/project/git /project/git/Source/cmComputeLinkInformation.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
91 warnings generated.
Suppressed 86 warnings (86 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

89 warnings generated.
Suppressed 84 warnings (84 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

99 warnings generated.
Suppressed 99 warnings (99 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

96 warnings generated.
Suppressed 91 warnings (91 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpI6Br7c.yaml -p=/project/git /project/git/Source/cmComputeTargetDepends.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_vBsEw.yaml -p=/project/git /project/git/Source/cmDocumentation.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpj3e3I3.yaml -p=/project/git /project/git/Source/cmComputeLinkDepends.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpMSZkb6.yaml -p=/project/git /project/git/Source/cmELF.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphqkJxI.yaml -p=/project/git /project/git/Source/cmDependsC.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
112 warnings generated.
Suppressed 109 warnings (109 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

118 warnings generated.
Suppressed 115 warnings (115 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

70 warnings generated.
Suppressed 70 warnings (70 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

76 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

63 warnings generated.
Suppressed 63 warnings (63 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTzCf48.yaml -p=/project/git /project/git/Source/cmDependsFortran.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpP6DBNE.yaml -p=/project/git /project/git/Source/cmExternalMakefileProjectGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdA94la.yaml -p=/project/git /project/git/Source/cmFileLockResult.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpe9gvUW.yaml -p=/project/git /project/git/Source/cmExportSetMap.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbAtsOV.yaml -p=/project/git /project/git/Source/cmFileLock.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpoKAMdI.yaml -p=/project/git /project/git/Source/cmExportSet.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsFO1Hi.yaml -p=/project/git /project/git/Source/cmExportInstallAndroidMKGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDpIB22.yaml -p=/project/git /project/git/Source/cmExportBuildAndroidMKGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpouJqu5.yaml -p=/project/git /project/git/Source/cmFileLockPool.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpqyrmYV.yaml -p=/project/git /project/git/Source/cmFSPermissions.cxx

14 warnings generated.
Suppressed 14 warnings (14 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

110 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 82 warnings (82 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

27 warnings generated.
Suppressed 27 warnings (27 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmSFJLu.yaml -p=/project/git /project/git/Source/cmFileTimeComparison.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZTaraq.yaml -p=/project/git /project/git/Source/cmExportFileGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwRq5Fk.yaml -p=/project/git /project/git/Source/cmExportBuildFileGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8RFqo7.yaml -p=/project/git /project/git/Source/cmFortranParserImpl.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpeElpjB.yaml -p=/project/git /project/git/Source/cmExportInstallFileGenerator.cxx
/project/git/Source/cmExportInstallFileGenerator.cxx:416:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      obj = value + obj;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
114 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 82 warnings (82 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

37 warnings generated.
Suppressed 37 warnings (37 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

59 warnings generated.
Suppressed 59 warnings (59 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIslFWJ.yaml -p=/project/git /project/git/Source/cmExportTryCompileFileGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLwqMEp.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionLexer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpu36N2Z.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionContext.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9SC4PJ.yaml -p=/project/git /project/git/Source/cmGeneratedFileStream.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvQv0KG.yaml -p=/project/git /project/git/Source/cmExtraKateGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDWTvZ3.yaml -p=/project/git /project/git/Source/cmExtraCodeLiteGenerator.cxx
115 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmExtraCodeLiteGenerator.cxx:127:46: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      std::string filename = outputDir + "/" + targetName + ".project";
                                             ^
/project/git/Source/cmExtraCodeLiteGenerator.cxx:137:11: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          visualname = "lib" + visualname;
          ^
/project/git/Source/cmExtraCodeLiteGenerator.cxx:167:44: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string filename = outputDir + "/" + projectName + ".project";
                                           ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWibpze.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpj_nXlz.yaml -p=/project/git /project/git/Source/cmFilePathChecksum.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpf1JkeA.yaml -p=/project/git /project/git/Source/cmExtraEclipseCDT4Generator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

117 warnings generated.
Suppressed 111 warnings (111 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpapIH7e.yaml -p=/project/git /project/git/Source/cmExtraCodeBlocksGenerator.cxx
/project/git/Source/cmExtraCodeBlocksGenerator.cxx:183:51: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    xml.Attribute("filename", fsPath + path + "/" + f);
                                                  ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPnxMvU.yaml -p=/project/git /project/git/Source/cmExtraSublimeTextGenerator.cxx
/project/git/Source/cmExtraSublimeTextGenerator.cxx:269:27: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        flagsString + " " + definesString + " " + includesString;
                          ^
/project/git/Source/cmExtraSublimeTextGenerator.cxx:269:49: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        flagsString + " " + definesString + " " + includesString;
                                                ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
115 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

77 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

9 warnings generated.
Suppressed 9 warnings (9 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

74 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

37 warnings generated.
Suppressed 37 warnings (37 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpocqJCE.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionEvaluator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpznvKQg.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionDAGChecker.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwWYPOs.yaml -p=/project/git /project/git/Source/cmInstallScriptGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7gpJTS.yaml -p=/project/git /project/git/Source/cmGeneratorExpression.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppYny3B.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionEvaluationFile.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpx2BJpg.yaml -p=/project/git /project/git/Source/cmInstallFilesGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpd1phbw.yaml -p=/project/git /project/git/Source/cmGlobalCommonGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
76 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 70 warnings (70 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

95 warnings generated.
Suppressed 92 warnings (92 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmphuRETJ.yaml -p=/project/git /project/git/Source/cmInstallExportGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSBjzjm.yaml -p=/project/git /project/git/Source/cmGlobVerificationManager.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppxTrfC.yaml -p=/project/git /project/git/Source/cmInstallGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGosnK7.yaml -p=/project/git /project/git/Source/cmInstalledFile.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUlsSON.yaml -p=/project/git /project/git/Source/cmInstallSubdirectoryGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

92 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

37 warnings generated.
Suppressed 37 warnings (37 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0NGCw2.yaml -p=/project/git /project/git/Source/cmGeneratorExpressionNode.cxx
/project/git/Source/cmGeneratorExpressionNode.cxx:1061:77: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      depString += sep + "$<TARGET_PROPERTY:" + std::move(uniqueName) + "," +
                                                                            ^
/project/git/Source/cmGeneratorExpressionNode.cxx:1462:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        o = obj_dir + o;
        ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpu7fHdR.yaml -p=/project/git /project/git/Source/cmLinkItem.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSNY8NY.yaml -p=/project/git /project/git/Source/cmInstallDirectoryGenerator.cxx
/project/git/Source/cmInstallDirectoryGenerator.cxx:76:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      d = mf.GetCurrentSourceDirectory() + "/" + d;
      ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzk2PO6.yaml -p=/project/git /project/git/Source/cmGraphVizWriter.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
115 warnings generated.
Suppressed 110 warnings (110 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

113 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 70 warnings (70 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

33 warnings generated.
Suppressed 33 warnings (33 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpycjjiz.yaml -p=/project/git /project/git/Source/cmGlobalUnixMakefileGenerator3.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNfeSC_.yaml -p=/project/git /project/git/Source/cmLinkLineComputer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpEdgg9F.yaml -p=/project/git /project/git/Source/cmListFileCache.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzdeUf6.yaml -p=/project/git /project/git/Source/cmRulePlaceholderExpander.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpOiP6BH.yaml -p=/project/git /project/git/Source/cmInstallTargetGenerator.cxx
87 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

77 warnings generated.
Suppressed 75 warnings (75 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmInstallTargetGenerator.cxx:367:5: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    o = computeInstallObjectDir(this->Target, config) + "/" + o;
    ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp9tguV1.yaml -p=/project/git /project/git/Source/cmLinkLineDeviceComputer.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbZsnRe.yaml -p=/project/git /project/git/Source/cmLocalCommonGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpymxwfQ.yaml -p=/project/git /project/git/Source/cmNewLineStyle.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpssSorX.yaml -p=/project/git /project/git/Source/cmGlobalGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
125 warnings generated.
Suppressed 120 warnings (120 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

69 warnings generated.
Suppressed 69 warnings (69 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

76 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

104 warnings generated.
Suppressed 99 warnings (99 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

9 warnings generated.
Suppressed 9 warnings (9 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

74 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpliijnB.yaml -p=/project/git /project/git/Source/cmMSVC60LinkLineComputer.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcWr9Qz.yaml -p=/project/git /project/git/Source/cmProcessOutput.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpe5OUA5.yaml -p=/project/git /project/git/Source/cmMessenger.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7ki2ry.yaml -p=/project/git /project/git/Source/cmProperty.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnYy5jK.yaml -p=/project/git /project/git/Source/cmGeneratorTarget.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSeVouA.yaml -p=/project/git /project/git/Source/cmProcessTools.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7NmUJO.yaml -p=/project/git /project/git/Source/cmOutputConverter.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpJhk51H.yaml -p=/project/git /project/git/Source/cmPropertyDefinition.cxx

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

120 warnings generated.
Suppressed 114 warnings (114 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpb9SoZe.yaml -p=/project/git /project/git/Source/cmPropertyDefinitionMap.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdhTaBY.yaml -p=/project/git /project/git/Source/cmLocalGenerator.cxx
/project/git/Source/cmLocalGenerator.cxx:1746:38: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      "CMAKE_" + lang + *stdIt + "_" + type + "_COMPILE_OPTION";
                                     ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUpgJqA.yaml -p=/project/git /project/git/Source/cmOSXBundleGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmB5fWK.yaml -p=/project/git /project/git/Source/cmMakefileExecutableTargetGenerator.cxx
/project/git/Source/cmMakefileExecutableTargetGenerator.cxx:252:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      real_link_command = launcher + real_link_command;
      ^
/project/git/Source/cmMakefileExecutableTargetGenerator.cxx:628:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      real_link_command = launcher + real_link_command;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
114 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp6GRwXU.yaml -p=/project/git /project/git/Source/cmMakefileUtilityTargetGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAR6Bq8.yaml -p=/project/git /project/git/Source/cmMakefileLibraryTargetGenerator.cxx
/project/git/Source/cmMakefileLibraryTargetGenerator.cxx:396:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      real_link_command = launcher + real_link_command;
      ^
/project/git/Source/cmMakefileLibraryTargetGenerator.cxx:918:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        real_link_command = launcher + real_link_command;
        ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
114 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

117 warnings generated.
Suppressed 109 warnings (109 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLQuV26.yaml -p=/project/git /project/git/Source/cmLocalUnixMakefileGenerator3.cxx
/project/git/Source/cmLocalUnixMakefileGenerator3.cxx:964:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        cmd = "./" + cmd;
        ^
/project/git/Source/cmLocalUnixMakefileGenerator3.cxx:1027:11: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          cmd = "call " + cmd;
          ^
/project/git/Source/cmLocalUnixMakefileGenerator3.cxx:1029:11: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          cmd = "echo >nul && " + cmd;
          ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpuKpfut.yaml -p=/project/git /project/git/Source/cmPropertyMap.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsb6Wyy.yaml -p=/project/git /project/git/Source/cmMakefileTargetGenerator.cxx
/project/git/Source/cmMakefileTargetGenerator.cxx:773:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      compileCommand = launcher + compileCommand;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
114 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

69 warnings generated.
Suppressed 69 warnings (69 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

124 warnings generated.
Suppressed 118 warnings (118 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkC1AMw.yaml -p=/project/git /project/git/Source/cmPolicies.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIzfTK8.yaml -p=/project/git /project/git/Source/cmQtAutoGen.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxEsqfe.yaml -p=/project/git /project/git/Source/cmMakefile.cxx
/project/git/Source/cmMakefile.cxx:2345:13: warning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]
  for (auto entry : sdkDatabase) {
            ^
       const  &
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzSKtdf.yaml -p=/project/git /project/git/Source/cmOrderDirectories.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
81 warnings generated.
Suppressed 76 warnings (76 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

12 warnings generated.
Suppressed 12 warnings (12 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

101 warnings generated.
Suppressed 100 warnings (100 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

8 warnings generated.
Suppressed 7 warnings (7 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

76 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmXt3vf.yaml -p=/project/git /project/git/Source/cmSourceGroup.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpg_won4.yaml -p=/project/git /project/git/Source/cmScriptGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpq6okxK.yaml -p=/project/git /project/git/Source/cmRST.cxx
/project/git/Source/cmRST.cxx:344:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      line = " " + line;
      ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWyBP47.yaml -p=/project/git /project/git/Source/cmUuid.cxx
/project/git/Source/cmUuid.cxx:130:5: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    result = c + result;
    ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1FxMp2.yaml -p=/project/git /project/git/Source/cmStateDirectory.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSCZcjQ.yaml -p=/project/git /project/git/Source/cmVersion.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpy8eMmd.yaml -p=/project/git /project/git/Source/cmStateSnapshot.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPKBkdm.yaml -p=/project/git /project/git/Source/cmQtAutoGeneratorRcc.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSmtlrw.yaml -p=/project/git /project/git/Source/cmQtAutoGenerator.cxx
112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

96 warnings generated.
Suppressed 95 warnings (95 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

81 warnings generated.
Suppressed 78 warnings (78 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLbbZK3.yaml -p=/project/git /project/git/Source/cmSourceFileLocation.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTcwWGQ.yaml -p=/project/git /project/git/Source/cmSystemTools.cxx
/project/git/Source/cmSystemTools.cxx:931:34: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    std::string path = dir + "/" + file;
                                 ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpx4ln_2.yaml -p=/project/git /project/git/Source/cmState.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

77 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

119 warnings generated.
Suppressed 114 warnings (114 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNMYIkD.yaml -p=/project/git /project/git/Source/cmSourceFile.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGV2B13.yaml -p=/project/git /project/git/Source/cmTargetPropertyComputer.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpD7bkHn.yaml -p=/project/git /project/git/Source/cmQtAutoGenInitializer.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpe4EDPz.yaml -p=/project/git /project/git/Source/cmQtAutoGeneratorMocUic.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
93 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

7 warnings generated.
Suppressed 7 warnings (7 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

49 warnings generated.
Suppressed 46 warnings (46 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

45 warnings generated.
Suppressed 45 warnings (45 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

71 warnings generated.
Suppressed 71 warnings (71 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

50 warnings generated.
Suppressed 50 warnings (50 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyYP6c8.yaml -p=/project/git /project/git/Source/cmUVHandlePtr.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpynAXz4.yaml -p=/project/git /project/git/Source/cmTestGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWkAy5R.yaml -p=/project/git /project/git/Source/cmVariableWatch.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpL7mJUf.yaml -p=/project/git /project/git/Source/cmXMLSafe.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpf3sKFN.yaml -p=/project/git /project/git/Source/cmWorkingDirectory.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmvrQeB.yaml -p=/project/git /project/git/Source/cmXMLParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpjyWvII.yaml -p=/project/git /project/git/Source/cmTest.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1gHNWd.yaml -p=/project/git /project/git/Source/cmXMLWriter.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLsRVW8.yaml -p=/project/git /project/git/Source/cmTarget.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
88 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

45 warnings generated.
Suppressed 45 warnings (45 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUreoQO.yaml -p=/project/git /project/git/Source/cmCommands.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbwFWyc.yaml -p=/project/git /project/git/Source/cmAddCompileDefinitionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpjZjj3T.yaml -p=/project/git /project/git/Source/cmAddCompileOptionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdHWLFK.yaml -p=/project/git /project/git/Source/cmAddLinkOptionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8bJmiw.yaml -p=/project/git /project/git/Source/cmAddDefinitionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRu1tWi.yaml -p=/project/git /project/git/Source/cmAddDependenciesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7mWa_g.yaml -p=/project/git /project/git/Source/cmAddTestCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptZDglp.yaml -p=/project/git /project/git/Source/cmAddSubDirectoryCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpGMmTKo.yaml -p=/project/git /project/git/Source/cmAddCustomTargetCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQtMi9i.yaml -p=/project/git /project/git/Source/cmAddExecutableCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

87 warnings generated.
Suppressed 82 warnings (82 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppTxt3e.yaml -p=/project/git /project/git/Source/cmAddCustomCommandCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvPMG04.yaml -p=/project/git /project/git/Source/cmAuxSourceDirectoryCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAcFKas.yaml -p=/project/git /project/git/Source/cmAddLibraryCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

12 warnings generated.
Suppressed 12 warnings (12 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmplvemya.yaml -p=/project/git /project/git/Source/cmCommandArgumentsHelper.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpEQTsDs.yaml -p=/project/git /project/git/Source/cmBreakCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpJkXkMC.yaml -p=/project/git /project/git/Source/cmCMakeHostSystemInformationCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptV5sP_.yaml -p=/project/git /project/git/Source/cmCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpjazIPw.yaml -p=/project/git /project/git/Source/cmake.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
114 warnings generated.
Suppressed 109 warnings (109 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHUKl_9.yaml -p=/project/git /project/git/Source/cmBuildNameCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpgvN49K.yaml -p=/project/git /project/git/Source/cmCMakeMinimumRequired.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpwiA0cw.yaml -p=/project/git /project/git/Source/cmBuildCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpiW4QHq.yaml -p=/project/git /project/git/Source/cmExpandedCommandArgument.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZZMwII.yaml -p=/project/git /project/git/Source/cmCMakePolicyCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWqm9X3.yaml -p=/project/git /project/git/Source/cmConfigureFileCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHDa1YC.yaml -p=/project/git /project/git/Source/cmConditionEvaluator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXbY3BS.yaml -p=/project/git /project/git/Source/cmContinueCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpySP7KE.yaml -p=/project/git /project/git/Source/cmEnableLanguageCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAPXwxB.yaml -p=/project/git /project/git/Source/cmDisallowedCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpradHaf.yaml -p=/project/git /project/git/Source/cmDefinePropertyCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8v68U3.yaml -p=/project/git /project/git/Source/cmCreateTestSourceList.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIksv16.yaml -p=/project/git /project/git/Source/cmEnableTestingCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpy9XLZw.yaml -p=/project/git /project/git/Source/cmCoreTryCompile.cxx
/project/git/Source/cmCoreTryCompile.cxx:476:63: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      std::string rulesOverrideLang = rulesOverrideBase + "_" + li;
                                                              ^
/project/git/Source/cmCoreTryCompile.cxx:528:70: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string const langFlagsCfg = "CMAKE_" + li + "_FLAGS_" + cfg;
                                                                     ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
88 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

19 warnings generated.
Suppressed 19 warnings (19 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpqY1CJN.yaml -p=/project/git /project/git/Source/cmFindFileCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpiy0DeL.yaml -p=/project/git /project/git/Source/cmExecProgramCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppQbrAj.yaml -p=/project/git /project/git/Source/cmExecuteProcessCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZZHCXI.yaml -p=/project/git /project/git/Source/cmFLTKWrapUICommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnvFaUU.yaml -p=/project/git /project/git/Source/cmExportCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpw8CgI3.yaml -p=/project/git /project/git/Source/cmFindBase.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4kow4G.yaml -p=/project/git /project/git/Source/cmExportLibraryDependenciesCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpK75fec.yaml -p=/project/git /project/git/Source/cmFindCommon.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpYvkXSh.yaml -p=/project/git /project/git/Source/cmFindPathCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8zxHg3.yaml -p=/project/git /project/git/Source/cmFindProgramCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyMXW3i.yaml -p=/project/git /project/git/Source/cmForEachCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPJDRZR.yaml -p=/project/git /project/git/Source/cmFindLibraryCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4msFQ0.yaml -p=/project/git /project/git/Source/cmFileCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1zGKiN.yaml -p=/project/git /project/git/Source/cmFunctionCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUDhB8i.yaml -p=/project/git /project/git/Source/cmHexFileConverter.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpszsGV4.yaml -p=/project/git /project/git/Source/cmIncludeExternalMSProjectCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpRILk0s.yaml -p=/project/git /project/git/Source/cmGetFilenameComponentCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpFPL76M.yaml -p=/project/git /project/git/Source/cmGetDirectoryPropertyCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

113 warnings generated.
Suppressed 110 warnings (110 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzeml8K.yaml -p=/project/git /project/git/Source/cmGetCMakePropertyCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpchGeBe.yaml -p=/project/git /project/git/Source/cmGetSourceFilePropertyCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpl0Uwel.yaml -p=/project/git /project/git/Source/cmFindPackageCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpOl8zYq.yaml -p=/project/git /project/git/Source/cmGetTargetPropertyCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWZLg4w.yaml -p=/project/git /project/git/Source/cmGetPropertyCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

19 warnings generated.
Suppressed 19 warnings (19 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3ej8RA.yaml -p=/project/git /project/git/Source/cmInstallCommandArguments.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpK6KKcQ.yaml -p=/project/git /project/git/Source/cmGetTestPropertyCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLUvL_Q.yaml -p=/project/git /project/git/Source/cmIfCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbOIh3w.yaml -p=/project/git /project/git/Source/cmIncludeDirectoryCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkzE8BF.yaml -p=/project/git /project/git/Source/cmIncludeCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpg3OY7O.yaml -p=/project/git /project/git/Source/cmIncludeRegularExpressionCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpasqSBa.yaml -p=/project/git /project/git/Source/cmIncludeGuardCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpyHxjSH.yaml -p=/project/git /project/git/Source/cmLinkLibrariesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpr_SixH.yaml -p=/project/git /project/git/Source/cmLinkDirectoriesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaq9wYO.yaml -p=/project/git /project/git/Source/cmInstallFilesCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfRo89g.yaml -p=/project/git /project/git/Source/cmInstallCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3qj7dY.yaml -p=/project/git /project/git/Source/cmInstallProgramsCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

110 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8yX40a.yaml -p=/project/git /project/git/Source/cmInstallTargetsCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpevcGjP.yaml -p=/project/git /project/git/Source/cmPathLabel.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8HB3Bd.yaml -p=/project/git /project/git/Source/cmMakeDirectoryCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7OfDvZ.yaml -p=/project/git /project/git/Source/cmLoadCacheCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5pZAZH.yaml -p=/project/git /project/git/Source/cmMacroCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpS1HXAD.yaml -p=/project/git /project/git/Source/cmListCommand.cxx
/project/git/Source/cmListCommand.cxx:1054:55: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        std::string error = messageHint + "option \"" + option +
                                                      ^
/project/git/Source/cmListCommand.cxx:1066:56: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string error = messageHint + "value \"" + argument +
                                                       ^
/project/git/Source/cmListCommand.cxx:1067:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            "\" for option \"" + option + "\" is invalid.";
                               ^
/project/git/Source/cmListCommand.cxx:1073:58: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          messageHint + "missing argument for option \"" + option + "\".";
                                                         ^
/project/git/Source/cmListCommand.cxx:1080:55: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        std::string error = messageHint + "option \"" + option +
                                                      ^
/project/git/Source/cmListCommand.cxx:1092:56: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string error = messageHint + "value \"" + argument +
                                                       ^
/project/git/Source/cmListCommand.cxx:1093:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            "\" for option \"" + option + "\" is invalid.";
                               ^
/project/git/Source/cmListCommand.cxx:1099:58: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          messageHint + "missing argument for option \"" + option + "\".";
                                                         ^
/project/git/Source/cmListCommand.cxx:1106:55: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        std::string error = messageHint + "option \"" + option +
                                                      ^
/project/git/Source/cmListCommand.cxx:1118:56: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          std::string error = messageHint + "value \"" + argument +
                                                       ^
97 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmListCommand.cxx:1119:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            "\" for option \"" + option + "\" is invalid.";
                               ^
/project/git/Source/cmListCommand.cxx:1125:58: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          messageHint + "missing argument for option \"" + option + "\".";
                                                         ^
/project/git/Source/cmListCommand.cxx:1131:35: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        messageHint + "option \"" + option + "\" is unknown.";
                                  ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsk959y.yaml -p=/project/git /project/git/Source/cmMarkAsAdvancedCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpiOntTS.yaml -p=/project/git /project/git/Source/cmMathCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2F7QMc.yaml -p=/project/git /project/git/Source/cmReturnCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmproErcF.yaml -p=/project/git /project/git/Source/cmLoadCommandCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
87 warnings generated.
Suppressed 82 warnings (82 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZHIv3b.yaml -p=/project/git /project/git/Source/cmOptionCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpezn1bU.yaml -p=/project/git /project/git/Source/cmMessageCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpOV7tL7.yaml -p=/project/git /project/git/Source/cmOutputRequiredFilesCommand.cxx
/project/git/Source/cmOutputRequiredFilesCommand.cxx:220:13: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            path = path + "/";
            ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:221:13: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            path = path + cxxFile;
            ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:232:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + "/";
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:233:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + cxxFile;
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:245:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + "/";
              ^
124 warnings generated.
Suppressed 109 warnings (109 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmOutputRequiredFilesCommand.cxx:246:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + cxxFile;
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:258:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + "/";
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:259:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              path = path + cxxFile;
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:344:15: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
              incpath = incpath + "/";
              ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:346:13: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
            incpath = incpath + path;
            ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:425:9: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        path = path + "/";
        ^
/project/git/Source/cmOutputRequiredFilesCommand.cxx:427:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      path = path + fname;
      ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpx71c5u.yaml -p=/project/git /project/git/Source/cmProjectCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmplMGqzZ.yaml -p=/project/git /project/git/Source/cmParseArgumentsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

3 warnings generated.
Suppressed 3 warnings (3 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNeV0eg.yaml -p=/project/git /project/git/Source/cmQTWrapCPPCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpXhqctY.yaml -p=/project/git /project/git/Source/cmQTWrapUICommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdmbfR_.yaml -p=/project/git /project/git/Source/cmRemoveCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnoJFwt.yaml -p=/project/git /project/git/Source/cmRemoveDefinitionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQEUY63.yaml -p=/project/git /project/git/Source/cmSearchPath.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8Ie468.yaml -p=/project/git /project/git/Source/cmSubdirDependsCommand.cxx

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0Pjd5p.yaml -p=/project/git /project/git/Source/cmSetDirectoryPropertiesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpno5bbE.yaml -p=/project/git /project/git/Source/cmSeparateArgumentsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpvzstzH.yaml -p=/project/git /project/git/Source/cmSetCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpH4AJPh.yaml -p=/project/git /project/git/Source/cmSetSourceFilesPropertiesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpfLOGsH.yaml -p=/project/git /project/git/Source/cmSetTargetPropertiesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpohfYAs.yaml -p=/project/git /project/git/Source/cmSetTestsPropertiesCommand.cxx
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpy0fUQq.yaml -p=/project/git /project/git/Source/cmSiteNameCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzpSJE_.yaml -p=/project/git /project/git/Source/cmSetPropertyCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpb1a9cQ.yaml -p=/project/git /project/git/Source/cmStringReplaceHelper.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppkGSmv.yaml -p=/project/git /project/git/Source/cmSourceGroupCommand.cxx
/project/git/Source/cmSourceGroupCommand.cxx:58:62: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      error = "ROOT: " + root + " is not a prefix of file: " + file;
                                                             ^
90 warnings generated.
Suppressed 84 warnings (84 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmSourceGroupCommand.cxx:82:5: warning: 'push_back' is called inside a loop; consider pre-allocating the vector capacity before the loop [performance-inefficient-vector-operation]
    prepared.push_back(prepareFilePathForTree(filePath, currentSourceDir));
    ^
/project/git/Source/cmSourceGroupCommand.cxx:99:49: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      tokenizedPath = tokenizePath(prefix + '/' + sgFilesPath);
                                                ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0fMTGi.yaml -p=/project/git /project/git/Source/cmSubdirCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpqEk7_3.yaml -p=/project/git /project/git/Source/cmTargetCompileDefinitionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp24IUGw.yaml -p=/project/git /project/git/Source/cmStringCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpuo1VeT.yaml -p=/project/git /project/git/Source/cmTargetCompileFeaturesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

85 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpweQnXe.yaml -p=/project/git /project/git/Source/cmTimestamp.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpu6L_VD.yaml -p=/project/git /project/git/Source/cmTargetCompileOptionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsfFtxB.yaml -p=/project/git /project/git/Source/cmTargetLinkOptionsCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptMEfRs.yaml -p=/project/git /project/git/Source/cm_get_date.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpxjHMGY.yaml -p=/project/git /project/git/Source/cmTargetLinkDirectoriesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcLUBhw.yaml -p=/project/git /project/git/Source/cmTargetIncludeDirectoriesCommand.cxx
/project/git/Source/cmTargetIncludeDirectoriesCommand.cxx:44:28: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      dirs += sep + prefix + it;
                           ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

59 warnings generated.
Suppressed 59 warnings (59 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpUcCwjQ.yaml -p=/project/git /project/git/Source/cm_utf8.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7q_I87.yaml -p=/project/git /project/git/Source/cmDuration.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpcRbT5w.yaml -p=/project/git /project/git/Source/cmTryCompileCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpI0eHiq.yaml -p=/project/git /project/git/Source/cmTargetSourcesCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmplllATc.yaml -p=/project/git /project/git/Source/cmTargetLinkLibrariesCommand.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdYqJtd.yaml -p=/project/git /project/git/Source/cmUseMangledMesaCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpuq0yZw.yaml -p=/project/git /project/git/Source/cmTargetPropCommandBase.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

109 warnings generated.
Suppressed 106 warnings (106 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

7 warnings generated.
Suppressed 7 warnings (7 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbFy5q3.yaml -p=/project/git /project/git/Source/cmTryRunCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQaUp_p.yaml -p=/project/git /project/git/Source/cm_codecvt.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp5QzxoM.yaml -p=/project/git /project/git/Source/cmUnexpectedCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHbfqFa.yaml -p=/project/git /project/git/Source/cmUnsetCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpI5w6Ij.yaml -p=/project/git /project/git/Source/cmVariableRequiresCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

84 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 80 warnings (80 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

109 warnings generated.
Suppressed 106 warnings (106 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

15 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpJZy28u.yaml -p=/project/git /project/git/Source/cmUtilitySourceCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpybrJKk.yaml -p=/project/git /project/git/Source/cmVariableWatchCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDZdr1k.yaml -p=/project/git /project/git/Source/cmWhileCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaLtYG8.yaml -p=/project/git /project/git/Source/cmWriteFileCommand.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpPtDB0u.yaml -p=/project/git /project/git/Source/CPack/cmCPackComponentGroup.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTeIYZx.yaml -p=/project/git /project/git/Source/CPack/cmCPackArchiveGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpnGYmX5.yaml -p=/project/git /project/git/Source/cmGlobalWatcomWMakeGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

77 warnings generated.
Suppressed 75 warnings (75 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

59 warnings generated.
Suppressed 59 warnings (59 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

88 warnings generated.
Suppressed 88 warnings (88 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

73 warnings generated.
Suppressed 73 warnings (73 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

86 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpaN1rbw.yaml -p=/project/git /project/git/Source/cmNinjaLinkLineComputer.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp29erwQ.yaml -p=/project/git /project/git/Source/CPack/cmCPackLog.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzVb2VU.yaml -p=/project/git /project/git/Source/CPack/cmCPackDebGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1YkaGU.yaml -p=/project/git /project/git/Source/CPack/cmCPackGeneratorFactory.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpZl6W2U.yaml -p=/project/git /project/git/Source/cmakemain.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQKogW0.yaml -p=/project/git /project/git/Source/cmNinjaUtilityTargetGenerator.cxx
113 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

109 warnings generated.
Suppressed 106 warnings (106 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

118 warnings generated.
Suppressed 113 warnings (113 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpFr0e9E.yaml -p=/project/git /project/git/Source/CPack/cmCPackExtGenerator.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpBgB5F1.yaml -p=/project/git /project/git/Source/cmLocalNinjaGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpk_qfol.yaml -p=/project/git /project/git/Source/cmNinjaTargetGenerator.cxx
/project/git/Source/cmNinjaTargetGenerator.cxx:522:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      i = launcher + i;
      ^
115 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

115 warnings generated.
Suppressed 108 warnings (108 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

83 warnings generated.
Suppressed 83 warnings (83 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmNinjaTargetGenerator.cxx:744:5: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
    i = launcher + i;
    ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp7g7l2y.yaml -p=/project/git /project/git/Source/cmNinjaNormalTargetGenerator.cxx
/project/git/Source/cmNinjaNormalTargetGenerator.cxx:252:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      linkCmd = launcher + linkCmd;
      ^
/project/git/Source/cmNinjaNormalTargetGenerator.cxx:376:7: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
      linkCmd = launcher + linkCmd;
      ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpVxbAwd.yaml -p=/project/git /project/git/Source/CPack/cmCPackSTGZGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp0f3b3d.yaml -p=/project/git /project/git/Source/cmcmd.cxx
114 warnings generated.
Suppressed 109 warnings (109 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

69 warnings generated.
Suppressed 69 warnings (69 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

88 warnings generated.
Suppressed 88 warnings (88 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

126 warnings generated.
Suppressed 120 warnings (120 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpui_8Jv.yaml -p=/project/git /project/git/Source/CPack/cmCPackNuGetGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp1fODC1.yaml -p=/project/git /project/git/Source/CPack/cmCPackNSISGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpmSn2gC.yaml -p=/project/git /project/git/Source/CPack/cmCPackTGZGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpsu9w2R.yaml -p=/project/git /project/git/Source/CPack/cmCPackTXZGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpa37OJo.yaml -p=/project/git /project/git/Source/cmGlobalNinjaGenerator.cxx
/project/git/Source/cmGlobalNinjaGenerator.cxx:257:15: warning: local copy 'cmd' of the variable 'command' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
  std::string cmd = command; // NOLINT(clang-tidy)
              ^
  const      &
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptjKyC8.yaml -p=/project/git /project/git/Source/CPack/cmCPackTarBZip2Generator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIBAGUu.yaml -p=/project/git /project/git/Source/CPack/cmCPackTarCompressGenerator.cxx

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

112 warnings generated.
Suppressed 107 warnings (107 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

18 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

65 warnings generated.
Suppressed 65 warnings (65 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

18 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

57 warnings generated.
Suppressed 57 warnings (57 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

90 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpm297qv.yaml -p=/project/git /project/git/Source/CPack/cmCPackZIPGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8mTe9E.yaml -p=/project/git /project/git/Source/CPack/cmCPack7zGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpkPAbyS.yaml -p=/project/git /project/git/Source/CPack/cmCPackGenerator.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_gIoId.yaml -p=/project/git /project/git/Source/cmConnection.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_s4E6A.yaml -p=/project/git /project/git/Source/CPack/IFW/cmCPackIFWCommon.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpdIb7eX.yaml -p=/project/git /project/git/Source/cmPipeConnection.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmprCXEX8.yaml -p=/project/git /project/git/Source/CPack/cmCPackRPMGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp983NoB.yaml -p=/project/git /project/git/Source/CPack/IFW/cmCPackIFWInstaller.cxx

90 warnings generated.
Suppressed 90 warnings (90 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

18 warnings generated.
Suppressed 15 warnings (15 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

47 warnings generated.
Suppressed 47 warnings (47 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

29 warnings generated.
Suppressed 29 warnings (29 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

69 warnings generated.
Suppressed 69 warnings (69 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

61 warnings generated.
Suppressed 61 warnings (61 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

91 warnings generated.
Suppressed 91 warnings (91 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

93 warnings generated.
Suppressed 93 warnings (93 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

45 warnings generated.
Suppressed 45 warnings (45 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

21 warnings generated.
Suppressed 21 warnings (21 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

63 warnings generated.
Suppressed 63 warnings (63 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp_Qgz7d.yaml -p=/project/git /project/git/Source/CPack/IFW/cmCPackIFWRepository.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLwJmd3.yaml -p=/project/git /project/git/Source/cmServerConnection.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpHdRVyw.yaml -p=/project/git /project/git/Tests/CMakeLib/testUTF8.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpL22K3y.yaml -p=/project/git /project/git/Tests/CMakeLib/testEncoding.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpCMLlJk.yaml -p=/project/git /project/git/Tests/CMakeLib/testAffinity.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpLahyPE.yaml -p=/project/git /project/git/Source/cmFileMonitor.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQRXof1.yaml -p=/project/git /project/git/Tests/RunCMake/pseudo_cppcheck.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmppb6MGh.yaml -p=/project/git /project/git/Source/ctest.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIJEG4R.yaml -p=/project/git /project/git/Tests/RunCMake/pseudo_emulator.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzrQD_7.yaml -p=/project/git /project/git/Source/CPack/IFW/cmCPackIFWGenerator.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNc30x7.yaml -p=/project/git /project/git/Tests/RunCMake/exit_code.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpzNG_EG.yaml -p=/project/git /project/git/Tests/RunCMake/pseudo_emulator_custom_command.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp2W3pvK.yaml -p=/project/git /project/git/Tests/RunCMake/pseudo_tidy.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbJzlK8.yaml -p=/project/git /project/git/Tests/RunCMake/pseudo_iwyu.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp4dBOO6.yaml -p=/project/git /project/git/Source/CPack/IFW/cmCPackIFWPackage.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpDCtw4H.yaml -p=/project/git /project/git/Tests/RunCMake/pseudo_cpplint.c

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmptn3Rez.yaml -p=/project/git /project/git/Tests/CMakeLib/testXMLSafe.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpNxjtFB.yaml -p=/project/git /project/git/Tests/CMakeLib/testXMLParser.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp8EJX97.yaml -p=/project/git /project/git/Tests/CMakeLib/testRST.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpWA1xu_.yaml -p=/project/git /project/git/Source/cmServer.cxx
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
109 warnings generated.
Suppressed 106 warnings (106 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

59 warnings generated.
Suppressed 59 warnings (59 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

33 warnings generated.
Suppressed 33 warnings (33 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

45 warnings generated.
Suppressed 45 warnings (45 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

62 warnings generated.
Suppressed 62 warnings (62 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

25 warnings generated.
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

25 warnings generated.
Suppressed 25 warnings (25 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

79 warnings generated.
Suppressed 74 warnings (74 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpoZh3bw.yaml -p=/project/git /project/git/Tests/CMakeLib/testGeneratedFileStream.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpTHT6TG.yaml -p=/project/git /project/git/Tests/CMakeLib/testSystemTools.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpIRhATj.yaml -p=/project/git /project/git/Tests/CMakeLib/testFindPackageCommand.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpQ3woX7.yaml -p=/project/git /project/git/Tests/CMakeLib/run_compile_commands.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmp3NTbWM.yaml -p=/project/git /project/git/Tests/CMakeLib/testUVRAII.cxx

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpSXJWqn.yaml -p=/project/git /project/git/Tests/CMakeServerLib/testServerBuffering.cpp

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpbGK8J0.yaml -p=/project/git /project/git/Source/cmServerProtocol.cxx
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,performance-* -export-fixes /tmp/tmp76TKXA/tmpAGEJNL.yaml -p=/project/git /project/git/Source/cmJsonObjects.cxx
/project/git/Source/cmJsonObjects.cxx:503:45: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
          installPath = installPrefix + '/' + dest;
                                            ^
/project/git/Source/cmTargetDepend.h:34:40: warning: the parameter 'l' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                       ^
                        const         &
/project/git/Source/cmTargetDepend.h:34:58: warning: the parameter 'r' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
87 warnings generated.
Suppressed 81 warnings (81 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
                                                         ^
                                          const         &
/project/git/Utilities/cmjsoncpp/include/json/value.h:235:5: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
    CZString(CZString&& other);
    ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:241:15: warning: move assignment operators should be marked noexcept [performance-noexcept-move-constructor]
    CZString& operator=(CZString&& other);
              ^
/project/git/Utilities/cmjsoncpp/include/json/value.h:326:3: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
  Value(Value&& other);
  ^

Applying fixes ...
ninja
Is Shell: True
[1/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGlobalCommonGenerator.cxx.o
[2/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmParseBlanketJSCoverage.cxx.o
[3/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestBuildCommand.cxx.o
[4/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestConfigureCommand.cxx.o
[5/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestLaunch.cxx.o
[6/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestBuildAndTestHandler.cxx.o
[7/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCommonTargetGenerator.cxx.o
[8/103] Building CXX object Source/CMakeFiles/cpack.dir/CPack/cpack.cxx.o
[9/103] Building CXX object Source/kwsys/CMakeFiles/cmsys.dir/SystemInformation.cxx.o
[10/103] Building CXX object Utilities/cmjsoncpp/CMakeFiles/cmjsoncpp.dir/src/lib_json/json_writer.cpp.o
[11/103] Linking CXX static library Utilities/cmjsoncpp/libcmjsoncpp.a
[12/103] Building CXX object Source/kwsys/CMakeFiles/cmsys.dir/SystemTools.cxx.o
[13/103] Linking CXX static library Source/kwsys/libcmsys.a
[14/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestScriptHandler.cxx.o
[15/103] Linking CXX executable Source/kwsys/cmsysTestsCxx
[16/103] Linking CXX executable Source/kwsys/testConsoleBufChild
[17/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmComputeTargetDepends.cxx.o
[18/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExportBuildFileGenerator.cxx.o
[19/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExportInstallFileGenerator.cxx.o
[20/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmComputeLinkDepends.cxx.o
[21/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExportTryCompileFileGenerator.cxx.o
[22/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExtraKateGenerator.cxx.o
[23/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExtraSublimeTextGenerator.cxx.o
[24/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExtraCodeLiteGenerator.cxx.o
[25/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGeneratorExpressionEvaluationFile.cxx.o
[26/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGeneratorExpressionNode.cxx.o
[27/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmComputeLinkInformation.cxx.o
[28/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExtraCodeBlocksGenerator.cxx.o
[29/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExtraEclipseCDT4Generator.cxx.o
[30/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmLinkLineDeviceComputer.cxx.o
[31/103] Building CXX object Source/CMakeFiles/CTestLib.dir/cmCTest.cxx.o
[32/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmInstallTargetGenerator.cxx.o
[33/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGraphVizWriter.cxx.o
[34/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestCoverageHandler.cxx.o
[35/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmMakefileUtilityTargetGenerator.cxx.o
[36/103] Building CXX object Source/CMakeFiles/CTestLib.dir/CTest/cmCTestTestHandler.cxx.o
[37/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmMakefileExecutableTargetGenerator.cxx.o
[38/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGlobalUnixMakefileGenerator3.cxx.o
[39/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmSourceFile.cxx.o
[40/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmSourceFileLocation.cxx.o
[41/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmQtAutoGenerator.cxx.o
[42/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmMakefileLibraryTargetGenerator.cxx.o
[43/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmOrderDirectories.cxx.o
[44/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmAddExecutableCommand.cxx.o
[45/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmAddCustomCommandCommand.cxx.o
[46/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmAddCustomTargetCommand.cxx.o
[47/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmAddLibraryCommand.cxx.o
[48/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmBuildCommand.cxx.o
[49/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmLocalUnixMakefileGenerator3.cxx.o
[50/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExportLibraryDependenciesCommand.cxx.o
[51/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmMakefileTargetGenerator.cxx.o
[52/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmExportCommand.cxx.o
[53/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGetCMakePropertyCommand.cxx.o
[54/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGetDirectoryPropertyCommand.cxx.o
[55/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmIncludeCommand.cxx.o
[56/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmQtAutoGenInitializer.cxx.o
[57/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmFindLibraryCommand.cxx.o
[58/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmCoreTryCompile.cxx.o
[59/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGetPropertyCommand.cxx.o
[60/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmInstallFilesCommand.cxx.o
[61/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmTarget.cxx.o
[62/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmInstallProgramsCommand.cxx.o
[63/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmInstallTargetsCommand.cxx.o
[64/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmLocalGenerator.cxx.o
[65/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmSetPropertyCommand.cxx.o
[66/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGlobalGenerator.cxx.o
[67/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmTargetLinkLibrariesCommand.cxx.o
[68/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmTargetPropCommandBase.cxx.o
[69/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmake.cxx.o
[70/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGlobalWatcomWMakeGenerator.cxx.o
[71/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmInstallCommand.cxx.o
[72/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmSourceGroupCommand.cxx.o
[73/103] Linking CXX executable Tests/CMakeLib/testEncoding
[74/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmNinjaLinkLineComputer.cxx.o
[75/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmLoadCommandCommand.cxx.o
[76/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmNinjaUtilityTargetGenerator.cxx.o
[77/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmMakefile.cxx.o
[78/103] Building CXX object Source/CMakeFiles/cmake.dir/cmakemain.cxx.o
[79/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmFileCommand.cxx.o
[80/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGeneratorTarget.cxx.o
[81/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmLocalNinjaGenerator.cxx.o
[82/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmNinjaNormalTargetGenerator.cxx.o
[83/103] Building CXX object Source/CMakeFiles/cmake.dir/cmcmd.cxx.o
[84/103] Building CXX object Source/CMakeFiles/CMakeServerLib.dir/cmServerProtocol.cxx.o
[85/103] Building CXX object Source/CMakeFiles/CMakeServerLib.dir/cmJsonObjects.cxx.o
[86/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmNinjaTargetGenerator.cxx.o
[87/103] Building CXX object Source/CMakeFiles/CMakeLib.dir/cmGlobalNinjaGenerator.cxx.o
[88/103] Linking CXX static library Source/libCMakeLib.a
[89/103] Linking CXX static library Source/libCMakeServerLib.a
[90/103] Linking CXX static library Source/libCTestLib.a
[91/103] Linking CXX executable Tests/CMakeLib/PseudoMemcheck/purify
[92/103] Linking CXX executable Tests/CMakeLib/PseudoMemcheck/memcheck_fail
[93/103] Linking CXX executable Tests/CMakeLib/testAffinity
[94/103] Linking CXX executable Tests/CMakeLib/PseudoMemcheck/valgrind
[95/103] Linking CXX executable Tests/CMakeLib/PseudoMemcheck/BC
[96/103] Linking CXX executable Tests/CMakeLib/runcompilecommands
[97/103] Linking CXX executable Tests/CMakeServerLib/CMakeServerLibTests
[98/103] Linking CXX executable bin/ctest
[99/103] Linking CXX executable bin/cmake
[100/103] Linking CXX executable Tests/CMakeLib/CMakeLibTests
[101/103] Building CXX object Source/CMakeFiles/CPackLib.dir/CPack/cmCPackGenerator.cxx.o
[102/103] Linking CXX static library Source/libCPackLib.a
[103/103] Linking CXX executable bin/cpack
ctest -j16
Is Shell: True
Test project /project/build
Guessing configuration NoConfig
        Start   5: kwsys.testSystemTools
        Start  88: LinkFlags-prepare
        Start 163: wrapping
        Start 235: CTestTestTimeout
        Start 146: complexOneConfig
        Start 173: linkorder1
        Start 185: CTestTestNoBuild
        Start 302: RunCMake.Ninja
        Start 231: CTestTestScheduler
        Start 227: CTestLimitDashJ
        Start 436: RunCMake.CPack_DEB
        Start 307: RunCMake.Byproducts
        Start 233: CTestTestStopTime
        Start 184: CTest.UpdateGIT
        Start 405: RunCMake.CTestTimeoutAfterMatch
        Start 425: RunCMake.IfacePaths_INCLUDE_DIRECTORIES
  1/477 Test #185: CTestTestNoBuild .......................................   Passed    0.91 sec
  2/477 Test   #5: kwsys.testSystemTools ..................................***Failed    1.12 sec
  3/477 Test #173: linkorder1 .............................................   Passed    1.22 sec
  4/477 Test  #88: LinkFlags-prepare ......................................   Passed    1.22 sec
        Start  89: LinkFlags-lib
        Start 329: RunCMake.ObjectLibrary
        Start 401: RunCMake.alias_targets
        Start 444: RunCMake.CPack_Ext
  5/477 Test #163: wrapping ...............................................   Passed    1.22 sec
  6/477 Test #146: complexOneConfig .......................................   Passed    1.72 sec
  7/477 Test  #89: LinkFlags-lib ..........................................   Passed    1.31 sec
        Start  90: LinkFlags-dll
        Start 164: qtwrapping
        Start  19: kwsys.testProcess-6
  8/477 Test #164: qtwrapping .............................................   Passed    0.60 sec
  9/477 Test  #90: LinkFlags-dll ..........................................   Passed    1.41 sec
        Start  91: LinkFlags-mod
        Start 165: testdriver1
 10/477 Test #165: testdriver1 ............................................   Passed    0.60 sec
 11/477 Test  #91: LinkFlags-mod ..........................................   Passed    1.41 sec
        Start  92: LinkFlags-exe
        Start 166: testdriver2
 12/477 Test #166: testdriver2 ............................................   Passed    0.60 sec
 13/477 Test  #92: LinkFlags-exe ..........................................   Passed    1.41 sec
        Start  93: LinkFlags-lib_config
        Start 277: RunCMake.CMP0022
 14/477 Test  #93: LinkFlags-lib_config ...................................   Passed    1.51 sec
        Start  94: LinkFlags-dll_config
 15/477 Test  #94: LinkFlags-dll_config ...................................   Passed    1.50 sec
        Start  95: LinkFlags-mod_config
 16/477 Test #425: RunCMake.IfacePaths_INCLUDE_DIRECTORIES ................   Passed    9.95 sec
 17/477 Test  #95: LinkFlags-mod_config ...................................   Passed    1.40 sec
        Start  96: LinkFlags-exe_config
        Start 412: RunCMake.CheckModules
 18/477 Test #401: RunCMake.alias_targets .................................   Passed   11.15 sec
 19/477 Test #329: RunCMake.ObjectLibrary .................................   Passed   11.25 sec
 20/477 Test  #96: LinkFlags-exe_config ...................................   Passed    1.30 sec
        Start  97: LinkFlags-lib_flags
        Start 439: RunCMake.CPack_TGZ
        Start  16: kwsys.testProcess-3
 21/477 Test  #19: kwsys.testProcess-6 ....................................   Passed   10.00 sec
 22/477 Test #405: RunCMake.CTestTimeoutAfterMatch ........................   Passed   12.52 sec
 23/477 Test #235: CTestTestTimeout .......................................   Passed   13.09 sec
 24/477 Test #184: CTest.UpdateGIT ........................................   Passed   13.08 sec
 25/477 Test  #97: LinkFlags-lib_flags ....................................   Passed    1.22 sec
        Start  98: LinkFlags-dll_flags
        Start 408: RunCMake.target_link_libraries
        Start 339: RunCMake.WriteCompilerDetectionHeader
        Start 426: RunCMake.IfacePaths_SOURCES
        Start 414: RunCMake.CommandLine
 26/477 Test #444: RunCMake.CPack_Ext .....................................   Passed   13.38 sec
 27/477 Test  #98: LinkFlags-dll_flags ....................................   Passed    1.41 sec
        Start  99: LinkFlags-mod_flags
        Start 363: RunCMake.ctest_submit
 28/477 Test #233: CTestTestStopTime ......................................   Passed   15.60 sec
 29/477 Test  #99: LinkFlags-mod_flags ....................................   Passed    1.40 sec
        Start 100: LinkFlags-exe_flags
        Start 318: RunCMake.GenerateExportHeader
 30/477 Test #307: RunCMake.Byproducts ....................................   Passed   16.91 sec
 31/477 Test #100: LinkFlags-exe_flags ....................................   Passed    1.40 sec
        Start 101: LinkFlags-lib_flags_config
        Start 325: RunCMake.GoogleTest
 32/477 Test #277: RunCMake.CMP0022 .......................................   Passed   11.77 sec
 33/477 Test #101: LinkFlags-lib_flags_config .............................   Passed    1.40 sec
        Start 102: LinkFlags-dll_flags_config
        Start 337: RunCMake.CompileFeatures
 34/477 Test #102: LinkFlags-dll_flags_config .............................   Passed    1.51 sec
        Start 103: LinkFlags-mod_flags_config
 35/477 Test #412: RunCMake.CheckModules ..................................   Passed    9.87 sec
 36/477 Test #103: LinkFlags-mod_flags_config .............................   Passed    1.40 sec
        Start 418: RunCMake.CPackConfig
        Start 416: RunCMake.install
 37/477 Test #414: RunCMake.CommandLine ...................................   Passed    8.53 sec
 38/477 Test #426: RunCMake.IfacePaths_SOURCES ............................   Passed    8.54 sec
 39/477 Test #436: RunCMake.CPack_DEB .....................................   Passed   22.33 sec
 40/477 Test #363: RunCMake.ctest_submit ..................................   Passed    7.73 sec
 41/477 Test  #16: kwsys.testProcess-3 ....................................   Passed   10.57 sec
 42/477 Test #439: RunCMake.CPack_TGZ .....................................   Passed   10.76 sec
        Start 319: RunCMake.GeneratorExpression
        Start 224: CTestTestSerialInDepends
        Start 333: RunCMake.TargetSources
        Start 278: RunCMake.CMP0026
        Start 394: RunCMake.try_compile
        Start 343: RunCMake.CompatibleInterface
 43/477 Test #339: RunCMake.WriteCompilerDetectionHeader ..................   Passed   10.24 sec
 44/477 Test #408: RunCMake.target_link_libraries .........................   Passed   10.24 sec
        Start  28: FindPackageTest
        Start 350: RunCMake.add_library
 45/477 Test #318: RunCMake.GenerateExportHeader ..........................   Passed    8.63 sec
        Start  29: FindModulesExecuteAll
 46/477 Test #325: RunCMake.GoogleTest ....................................   Passed    8.63 sec
        Start 306: RunCMake.BuildDepends
 47/477 Test #337: RunCMake.CompileFeatures ...............................   Passed    8.92 sec
 48/477 Test #227: CTestLimitDashJ ........................................   Passed   28.94 sec
        Start  21: kwsys.testProcess-9
        Start 411: RunCMake.target_compile_features
 49/477 Test #224: CTestTestSerialInDepends ...............................   Passed    6.93 sec
 50/477 Test #319: RunCMake.GeneratorExpression ...........................   Passed    7.14 sec
 51/477 Test #418: RunCMake.CPackConfig ...................................   Passed    8.24 sec
        Start  62: ExportImport
        Start 326: RunCMake.TargetPropertyGeneratorExpressions
        Start 237: CTestTestZeroTimeout
 52/477 Test #394: RunCMake.try_compile ...................................   Passed    7.23 sec
 53/477 Test #416: RunCMake.install .......................................   Passed    8.33 sec
 54/477 Test  #29: FindModulesExecuteAll ..................................   Passed    4.59 sec
 55/477 Test #333: RunCMake.TargetSources .................................   Passed    7.81 sec
 56/477 Test  #62: ExportImport ...........................................   Passed    1.27 sec
        Start 217: Server
        Start 341: RunCMake.PositionIndependentCode
        Start 117: BuildDepends
        Start 419: RunCMake.CPackInstallProperties
        Start 281: RunCMake.CMP0037
 57/477 Test #278: RunCMake.CMP0026 .......................................   Passed    8.62 sec
 58/477 Test  #28: FindPackageTest ........................................   Passed    7.65 sec
 59/477 Test #231: CTestTestScheduler .....................................   Passed   32.58 sec
 60/477 Test #343: RunCMake.CompatibleInterface ...........................   Passed    9.35 sec
        Start 232: CTestTestCostSerial
        Start 431: RunCMake.Cpplint
        Start 342: RunCMake.VisibilityPreset
        Start 187: CTestTestUpload
 61/477 Test #350: RunCMake.add_library ...................................   Passed    9.00 sec
        Start 406: RunCMake.File_Generate
 62/477 Test #306: RunCMake.BuildDepends ..................................   Passed    7.09 sec
 63/477 Test #237: CTestTestZeroTimeout ...................................   Passed    5.17 sec
 64/477 Test  #21: kwsys.testProcess-9 ....................................   Passed    6.49 sec
        Start 369: RunCMake.file
        Start 427: RunCMake.CrosscompilingEmulator
        Start 264: CMakeOnly.AllFindModules
 65/477 Test #117: BuildDepends ...........................................   Passed    4.50 sec
 66/477 Test #187: CTestTestUpload ........................................   Passed    3.21 sec
 67/477 Test #411: RunCMake.target_compile_features .......................   Passed    7.09 sec
 68/477 Test #341: RunCMake.PositionIndependentCode .......................   Passed    4.70 sec
 69/477 Test #326: RunCMake.TargetPropertyGeneratorExpressions ............   Passed    6.38 sec
 70/477 Test #217: Server .................................................   Passed    5.11 sec
        Start 280: RunCMake.CMP0028
        Start 435: RunCMake.ctest_labels_for_subprojects
        Start 285: RunCMake.CMP0041
        Start  70: StagingPrefix
        Start 442: RunCMake.CPack_ZIP
        Start 443: RunCMake.CPack_STGZ
 71/477 Test #419: RunCMake.CPackInstallProperties ........................   Passed    5.22 sec
 72/477 Test #431: RunCMake.Cpplint .......................................   Passed    4.54 sec
        Start 288: RunCMake.CMP0046
        Start 284: RunCMake.CMP0040
 73/477 Test #281: RunCMake.CMP0037 .......................................   Passed    6.53 sec
 74/477 Test #342: RunCMake.VisibilityPreset ..............................   Passed    5.34 sec
 75/477 Test #232: CTestTestCostSerial ....................................   Passed    6.15 sec
        Start 236: CTestTestRerunFailed
        Start 413: RunCMake.CheckIPOSupported
        Start 354: RunCMake.export
 76/477 Test #443: RunCMake.CPack_STGZ ....................................   Passed    3.12 sec
 77/477 Test  #70: StagingPrefix ..........................................   Passed    3.22 sec
 78/477 Test #406: RunCMake.File_Generate .................................   Passed    5.54 sec
 79/477 Test #427: RunCMake.CrosscompilingEmulator ........................   Passed    4.64 sec
 80/477 Test #280: RunCMake.CMP0028 .......................................   Passed    3.85 sec
        Start 432: RunCMake.Cppcheck
        Start 113: CommandLength
        Start 438: RunCMake.CPack_TBZ2
        Start  31: TryCompile
        Start 261: CMakeOnly.CheckStructHasMember
 81/477 Test #264: CMakeOnly.AllFindModules ...............................   Passed    5.17 sec
 82/477 Test #442: RunCMake.CPack_ZIP .....................................   Passed    4.25 sec
 83/477 Test #285: RunCMake.CMP0041 .......................................   Passed    4.56 sec
 84/477 Test #369: RunCMake.file ..........................................   Passed    5.88 sec
 85/477 Test #435: RunCMake.ctest_labels_for_subprojects ..................   Passed    4.86 sec
        Start 428: RunCMake.LinkWhatYouUse
        Start  81: Module.CheckTypeSize
        Start 429: RunCMake.ClangTidy
        Start 380: RunCMake.include_directories
        Start 171: Plugin
 86/477 Test #284: RunCMake.CMP0040 .......................................   Passed    3.66 sec
 87/477 Test #288: RunCMake.CMP0046 .......................................   Passed    4.26 sec
 88/477 Test  #81: Module.CheckTypeSize ...................................   Passed    1.11 sec
        Start 433: RunCMake.MultiLint
        Start 344: RunCMake.Syntax
        Start 430: RunCMake.IncludeWhatYouUse
 89/477 Test #413: RunCMake.CheckIPOSupported .............................   Passed    3.76 sec
 90/477 Test #171: Plugin .................................................   Passed    1.51 sec
 91/477 Test  #31: TryCompile .............................................   Passed    2.82 sec
 92/477 Test #438: RunCMake.CPack_TBZ2 ....................................   Passed    2.82 sec
 93/477 Test #236: CTestTestRerunFailed ...................................   Passed    4.26 sec
 94/477 Test #113: CommandLength ..........................................   Passed    3.13 sec
 95/477 Test #432: RunCMake.Cppcheck ......................................   Passed    3.33 sec
        Start 440: RunCMake.CPack_TXZ
        Start 441: RunCMake.CPack_TZ
        Start 434: RunCMake.CompilerLauncher
        Start 299: RunCMake.CMP0069
        Start 282: RunCMake.CMP0038
        Start 283: RunCMake.CMP0039
        Start 254: CMakeLib.testUVRAII
 96/477 Test #354: RunCMake.export ........................................   Passed    4.47 sec
 97/477 Test #261: CMakeOnly.CheckStructHasMember .........................   Passed    3.64 sec
 98/477 Test #429: RunCMake.ClangTidy .....................................   Passed    2.93 sec
 99/477 Test #428: RunCMake.LinkWhatYouUse ................................   Passed    3.33 sec
        Start  27: CommandLineTest
        Start 301: RunCMake.CMP0065
        Start 437: RunCMake.CPack_7Z
        Start 385: RunCMake.option
100/477 Test #380: RunCMake.include_directories ...........................   Passed    3.94 sec
101/477 Test #433: RunCMake.MultiLint .....................................   Passed    3.33 sec
        Start 145: complex
        Start  46: ObjectLibrary
102/477 Test #430: RunCMake.IncludeWhatYouUse .............................   Passed    3.63 sec
103/477 Test #254: CMakeLib.testUVRAII ....................................   Passed    2.72 sec
104/477 Test #283: RunCMake.CMP0039 .......................................   Passed    2.72 sec
105/477 Test #282: RunCMake.CMP0038 .......................................   Passed    2.92 sec
106/477 Test #299: RunCMake.CMP0069 .......................................   Passed    2.92 sec
107/477 Test #344: RunCMake.Syntax ........................................   Passed    3.84 sec
108/477 Test #434: RunCMake.CompilerLauncher ..............................   Passed    3.13 sec
109/477 Test #441: RunCMake.CPack_TZ ......................................   Passed    3.13 sec
110/477 Test  #27: CommandLineTest ........................................   Passed    2.02 sec
111/477 Test #440: RunCMake.CPack_TXZ .....................................   Passed    3.24 sec
        Start 291: RunCMake.CMP0051
        Start 292: RunCMake.CMP0053
        Start 290: RunCMake.CMP0050
        Start 279: RunCMake.CMP0027
        Start 332: RunCMake.TargetObjects
        Start 143: CMakeTestMultipleConfigures
        Start  72: InterfaceLibrary
        Start 304: RunCMake.ctest_memcheck
        Start 114: EmptyDepends
        Start  86: Module.WriteCompilerDetectionHeader
112/477 Test  #46: ObjectLibrary ..........................................   Passed    1.14 sec
113/477 Test #301: RunCMake.CMP0065 .......................................   Passed    2.84 sec
114/477 Test  #86: Module.WriteCompilerDetectionHeader ....................   Passed    1.00 sec
115/477 Test #145: complex ................................................   Passed    1.64 sec
116/477 Test #114: EmptyDepends ...........................................   Passed    1.00 sec
117/477 Test  #72: InterfaceLibrary .......................................   Passed    1.01 sec
        Start 245: IncludeDirectories
        Start 310: RunCMake.Configure
        Start  69: AliasTarget
        Start 297: RunCMake.CMP0060
        Start 168: Dependency
        Start  22: kwsys.testProcess-10
118/477 Test #385: RunCMake.option ........................................   Passed    3.05 sec
119/477 Test #437: RunCMake.CPack_7Z ......................................   Passed    3.36 sec
120/477 Test #168: Dependency .............................................   Passed    0.71 sec
121/477 Test  #69: AliasTarget ............................................   Passed    1.01 sec
122/477 Test #245: IncludeDirectories .....................................   Passed    1.11 sec
        Start 127: CPackComponentsForAll-ZIP-default
        Start 128: CPackComponentsForAll-ZIP-OnePackPerGroup
        Start 129: CPackComponentsForAll-ZIP-IgnoreGroup
        Start 107: LibName
        Start 139: CPackTestAllGenerators
123/477 Test #279: RunCMake.CMP0027 .......................................   Passed    2.52 sec
124/477 Test #107: LibName ................................................   Passed    0.38 sec
125/477 Test #290: RunCMake.CMP0050 .......................................   Passed    2.62 sec
126/477 Test #292: RunCMake.CMP0053 .......................................   Passed    2.62 sec
127/477 Test #291: RunCMake.CMP0051 .......................................   Passed    2.62 sec
128/477 Test #129: CPackComponentsForAll-ZIP-IgnoreGroup ..................   Passed    0.49 sec
129/477 Test #304: RunCMake.ctest_memcheck ................................   Passed    2.77 sec
130/477 Test #128: CPackComponentsForAll-ZIP-OnePackPerGroup ..............   Passed    0.74 sec
131/477 Test #127: CPackComponentsForAll-ZIP-default ......................   Passed    0.84 sec
        Start 108: CustComDepend
        Start 137: CPackComponentsDEB-components-depend2
        Start  73: SourcesProperty
        Start 300: RunCMake.CMP0081
        Start 289: RunCMake.CMP0049
        Start 109: ArgumentExpansion
        Start 110: GeneratorExpression
        Start  50: ExternalOBJ
        Start 159: TutorialStep5
132/477 Test #139: CPackTestAllGenerators .................................   Passed    0.85 sec
133/477 Test #143: CMakeTestMultipleConfigures ............................   Passed    2.98 sec
134/477 Test #332: RunCMake.TargetObjects .................................   Passed    2.98 sec
135/477 Test #109: ArgumentExpansion ......................................   Passed    0.03 sec
136/477 Test  #22: kwsys.testProcess-10 ...................................   Passed    2.09 sec
137/477 Test  #73: SourcesProperty ........................................   Passed    0.23 sec
138/477 Test #110: GeneratorExpression ....................................   Passed    0.30 sec
139/477 Test #108: CustComDepend ..........................................   Passed    0.41 sec
140/477 Test  #50: ExternalOBJ ............................................   Passed    0.50 sec
141/477 Test #297: RunCMake.CMP0060 .......................................   Passed    2.46 sec
142/477 Test #310: RunCMake.Configure .....................................   Passed    2.49 sec
143/477 Test #159: TutorialStep5 ..........................................   Passed    0.52 sec
        Start 130: CPackComponentsForAll-ZIP-AllInOne
        Start 115: CustomCommandWorkingDirectory
        Start 141: X11
        Start 111: CustomCommand
        Start  76: CxxDialect
        Start  87: PositionIndependentTargets
        Start 105: Framework
        Start  77: CrossCompile
        Start  78: BundleUtilities
        Start 160: TutorialStep6
        Start 286: RunCMake.CMP0043
        Start 287: RunCMake.CMP0045
144/477 Test #115: CustomCommandWorkingDirectory ..........................   Passed    0.52 sec
145/477 Test  #77: CrossCompile ...........................................   Passed    0.62 sec
146/477 Test  #78: BundleUtilities ........................................   Passed    0.67 sec
147/477 Test #137: CPackComponentsDEB-components-depend2 ..................   Passed    1.22 sec
148/477 Test #105: Framework ..............................................   Passed    0.97 sec
149/477 Test #160: TutorialStep6 ..........................................   Passed    0.97 sec
150/477 Test #130: CPackComponentsForAll-ZIP-AllInOne .....................   Passed    0.98 sec
        Start 328: RunCMake.LinkStatic
        Start 131: CPackComponentsDEB-components-lintian-dpkgdeb-checks
        Start 379: RunCMake.include
        Start 234: CTestTestSubdir
        Start 386: RunCMake.project
        Start 161: TutorialStep7
        Start 112: CustomCommandByproducts
151/477 Test  #87: PositionIndependentTargets .............................   Passed    0.99 sec
152/477 Test  #76: CxxDialect .............................................   Passed    0.99 sec
153/477 Test #111: CustomCommand ..........................................   Passed    0.99 sec
154/477 Test #141: X11 ....................................................   Passed    1.00 sec
155/477 Test #234: CTestTestSubdir ........................................   Passed    0.41 sec
156/477 Test #112: CustomCommandByproducts ................................   Passed    0.40 sec
157/477 Test #131: CPackComponentsDEB-components-lintian-dpkgdeb-checks ...   Passed    0.81 sec
158/477 Test #328: RunCMake.LinkStatic ....................................   Passed    0.90 sec
        Start 338: RunCMake.PolicyScope
        Start 420: RunCMake.ExternalProject
        Start 242: CTestTestFdSetSize
        Start 122: CPackComponents
        Start  37: Simple
        Start 106: TargetName
        Start 349: RunCMake.add_executable
        Start  43: IPO
159/477 Test #106: TargetName .............................................   Passed    0.16 sec
160/477 Test  #37: Simple .................................................   Passed    0.18 sec
161/477 Test #122: CPackComponents ........................................   Passed    0.27 sec
162/477 Test #289: RunCMake.CMP0049 .......................................   Passed    2.69 sec
163/477 Test #161: TutorialStep7 ..........................................   Passed    1.16 sec
164/477 Test  #43: IPO ....................................................   Passed    0.26 sec
165/477 Test #300: RunCMake.CMP0081 .......................................   Passed    2.69 sec
166/477 Test #242: CTestTestFdSetSize .....................................   Passed    0.37 sec
167/477 Test #287: RunCMake.CMP0045 .......................................   Passed    2.44 sec
168/477 Test #286: RunCMake.CMP0043 .......................................   Passed    2.45 sec
169/477 Test #379: RunCMake.include .......................................   Passed    1.47 sec
        Start 274: CMakeOnly.MajorVersionSelection-Qt_3
        Start 275: CMakeOnly.MajorVersionSelection-Qt_4
        Start  30: StringFileTest
        Start 409: RunCMake.add_link_options
        Start 410: RunCMake.target_link_options
        Start 144: LoadedCommandOneConfig
        Start 175: SubDir
        Start 176: CheckCompilerRelatedVariables
        Start 177: WarnUnusedUnusedViaSet
        Start 156: TutorialStep2
        Start 157: TutorialStep3
170/477 Test  #30: StringFileTest .........................................   Passed    0.51 sec
171/477 Test #386: RunCMake.project .......................................   Passed    2.28 sec
172/477 Test #157: TutorialStep3 ..........................................   Passed    0.70 sec
173/477 Test #420: RunCMake.ExternalProject ...............................   Passed    1.39 sec
174/477 Test #176: CheckCompilerRelatedVariables ..........................   Passed    0.80 sec
175/477 Test #156: TutorialStep2 ..........................................   Passed    0.80 sec
176/477 Test #177: WarnUnusedUnusedViaSet .................................   Passed    0.80 sec
177/477 Test #338: RunCMake.PolicyScope ...................................   Passed    1.49 sec
178/477 Test #175: SubDir .................................................   Passed    0.81 sec
        Start 158: TutorialStep4
        Start 366: RunCMake.ctest_skipped_test
        Start 368: RunCMake.ctest_fixtures
        Start  55: MacroTest
        Start 132: CPackComponentsDEB-components-description1
        Start 133: CPackComponentsDEB-components-description2
        Start  85: Module.FindDependency
        Start 134: CPackComponentsDEB-components-source
        Start 135: CPackComponentsDEB-components-shlibdeps1
179/477 Test #349: RunCMake.add_executable ................................   Passed    1.50 sec
180/477 Test #144: LoadedCommandOneConfig .................................   Passed    0.83 sec
181/477 Test #275: CMakeOnly.MajorVersionSelection-Qt_4 ...................   Passed    1.16 sec
182/477 Test #274: CMakeOnly.MajorVersionSelection-Qt_3 ...................   Passed    1.17 sec
183/477 Test #132: CPackComponentsDEB-components-description1 .............   Passed    0.35 sec
184/477 Test  #55: MacroTest ..............................................   Passed    0.35 sec
185/477 Test #158: TutorialStep4 ..........................................   Passed    0.65 sec
186/477 Test #135: CPackComponentsDEB-components-shlibdeps1 ...............   Passed    0.81 sec
187/477 Test  #85: Module.FindDependency ..................................   Passed    0.82 sec
        Start 382: RunCMake.list
        Start 225: CTestTestMissingDependsExe
        Start 421: RunCMake.FetchContent
        Start 202: CTestConfig.Dashboard.Release
        Start 208: CMakeCommands.target_link_libraries
        Start 308: RunCMake.CompilerChange
        Start  51: LoadCommand
        Start 116: OutOfSource
        Start  66: CompileDefinitions
188/477 Test #410: RunCMake.target_link_options ...........................   Passed    1.85 sec
189/477 Test #133: CPackComponentsDEB-components-description2 .............   Passed    1.13 sec
190/477 Test #202: CTestConfig.Dashboard.Release ..........................   Passed    0.31 sec
191/477 Test #225: CTestTestMissingDependsExe .............................   Passed    0.41 sec
192/477 Test #368: RunCMake.ctest_fixtures ................................   Passed    1.40 sec
193/477 Test #134: CPackComponentsDEB-components-source ...................   Passed    1.59 sec
194/477 Test  #51: LoadCommand ............................................   Passed    0.77 sec
195/477 Test  #66: CompileDefinitions .....................................   Passed    0.76 sec
196/477 Test #116: OutOfSource ............................................   Passed    0.77 sec
        Start  38: PreOrder
        Start 123: CPackComponentsForAll-DEB-default
        Start 238: CTestTestDepends
        Start 239: CTestTestCycle
        Start 263: CMakeOnly.CompilerIdCXX
        Start 200: CTestConfig.Dashboard.MinSizeRel
        Start 203: CTestConfig.Script.RelWithDebInfo
        Start 211: CMakeCommands.target_compile_options
        Start 212: CMakeCommands.target_sources
197/477 Test #208: CMakeCommands.target_link_libraries ....................   Passed    0.89 sec
198/477 Test #200: CTestConfig.Dashboard.MinSizeRel .......................   Passed    0.13 sec
199/477 Test #409: RunCMake.add_link_options ..............................   Passed    2.56 sec
200/477 Test #203: CTestConfig.Script.RelWithDebInfo ......................   Passed    0.13 sec
201/477 Test #239: CTestTestCycle .........................................   Passed    0.24 sec
202/477 Test #238: CTestTestDepends .......................................   Passed    0.34 sec
203/477 Test #123: CPackComponentsForAll-DEB-default ......................   Passed    0.44 sec
204/477 Test #366: RunCMake.ctest_skipped_test ............................   Passed    2.14 sec
205/477 Test  #38: PreOrder ...............................................   Passed    0.54 sec
206/477 Test #211: CMakeCommands.target_compile_options ...................   Passed    0.53 sec
207/477 Test #212: CMakeCommands.target_sources ...........................   Passed    0.53 sec
        Start  34: CompileFeatures
        Start 162: testing
        Start 147: Environment
        Start 209: CMakeCommands.target_include_directories
        Start 210: CMakeCommands.target_compile_definitions
        Start 218: CTestTestCrash
        Start 136: CPackComponentsDEB-components-depend1
        Start  67: CompileOptions
        Start  68: CompatibleInterface
        Start  56: FunctionTest
        Start  52: LinkDirectory
208/477 Test #218: CTestTestCrash .........................................   Passed    0.25 sec
209/477 Test #210: CMakeCommands.target_compile_definitions ...............   Passed    0.25 sec
210/477 Test #209: CMakeCommands.target_include_directories ...............   Passed    0.25 sec
211/477 Test #263: CMakeOnly.CompilerIdCXX ................................   Passed    0.79 sec
212/477 Test #147: Environment ............................................   Passed    0.31 sec
213/477 Test #162: testing ................................................   Passed    0.41 sec
214/477 Test #382: RunCMake.list ..........................................   Passed    1.74 sec
215/477 Test  #67: CompileOptions .........................................   Passed    0.61 sec
216/477 Test  #52: LinkDirectory ..........................................   Passed    0.60 sec
217/477 Test  #56: FunctionTest ...........................................   Passed    0.60 sec
218/477 Test  #68: CompatibleInterface ....................................   Passed    0.60 sec
        Start 118: MissingInstall
        Start 219: CTestTestBadExe
        Start 387: RunCMake.project_injected
        Start  80: CMakeDoubleProject
        Start  42: CxxSubdirC
        Start  47: NewlineArgs
        Start 226: CTestTestSerialOrder
        Start 351: RunCMake.add_subdirectory
        Start 260: CMakeOnly.CheckLanguage
        Start 330: RunCMake.RuntimePath
        Start 124: CPackComponentsForAll-DEB-OnePackPerGroup
219/477 Test #308: RunCMake.CompilerChange ................................   Passed    1.95 sec
220/477 Test #136: CPackComponentsDEB-components-depend1 ..................   Passed    0.62 sec
221/477 Test  #42: CxxSubdirC .............................................   Passed    0.13 sec
222/477 Test  #80: CMakeDoubleProject .....................................   Passed    0.13 sec
223/477 Test #219: CTestTestBadExe ........................................   Passed    0.23 sec
224/477 Test #421: RunCMake.FetchContent ..................................   Passed    2.17 sec
225/477 Test #118: MissingInstall .........................................   Passed    0.23 sec
226/477 Test  #34: CompileFeatures ........................................   Passed    0.85 sec
227/477 Test #124: CPackComponentsForAll-DEB-OnePackPerGroup ..............   Passed    0.42 sec
228/477 Test #330: RunCMake.RuntimePath ...................................   Passed    0.46 sec
229/477 Test #226: CTestTestSerialOrder ...................................   Passed    0.46 sec
        Start 125: CPackComponentsForAll-DEB-IgnoreGroup
        Start 148: QtAutomocNoQt
        Start  60: SourceGroups
        Start  61: Preprocess
        Start  53: LinkLanguage
        Start 126: CPackComponentsForAll-DEB-AllInOne
        Start  20: kwsys.testProcess-7
        Start 221: CTestTestParallel
        Start 222: CTestTestVerboseOutput
        Start  82: Module.CheckIPOSupported-C
        Start  44: OutDir
230/477 Test  #47: NewlineArgs ............................................   Passed    0.78 sec
231/477 Test  #61: Preprocess .............................................   Passed    0.24 sec
232/477 Test  #60: SourceGroups ...........................................   Passed    0.24 sec
233/477 Test #148: QtAutomocNoQt ..........................................   Passed    0.34 sec
234/477 Test #125: CPackComponentsForAll-DEB-IgnoreGroup ..................   Passed    0.34 sec
235/477 Test #221: CTestTestParallel ......................................   Passed    0.34 sec
236/477 Test  #44: OutDir .................................................   Passed    0.33 sec
237/477 Test #351: RunCMake.add_subdirectory ..............................   Passed    1.01 sec
238/477 Test  #82: Module.CheckIPOSupported-C .............................   Passed    0.43 sec
239/477 Test #222: CTestTestVerboseOutput .................................   Passed    0.43 sec
240/477 Test #260: CMakeOnly.CheckLanguage ................................   Passed    1.11 sec
        Start 197: CTestConfig.Script.Debug
        Start 198: CTestConfig.Dashboard.Debug
        Start 257: CMakeOnly.CheckSymbolExists
        Start 258: CMakeOnly.CheckCXXSymbolExists
        Start  32: SystemInformation
        Start 169: JumpWithLibOut
        Start 170: JumpNoLibOut
        Start 151: ExternalProjectSourceSubdir
        Start 172: RuntimePath
        Start 348: RunCMake.add_dependencies
        Start  57: ReturnTest
241/477 Test #126: CPackComponentsForAll-DEB-AllInOne .....................   Passed    0.56 sec
242/477 Test  #53: LinkLanguage ...........................................   Passed    0.56 sec
243/477 Test #169: JumpWithLibOut .........................................   Passed    0.15 sec
244/477 Test #387: RunCMake.project_injected ..............................   Passed    1.27 sec
245/477 Test  #57: ReturnTest .............................................   Passed    0.44 sec
246/477 Test #198: CTestConfig.Dashboard.Debug ............................   Passed    0.46 sec
247/477 Test #197: CTestConfig.Script.Debug ...............................   Passed    0.56 sec
248/477 Test #172: RuntimePath ............................................   Passed    0.65 sec
249/477 Test #151: ExternalProjectSourceSubdir ............................   Passed    0.65 sec
250/477 Test  #20: kwsys.testProcess-7 ....................................   Passed    1.20 sec
        Start 230: CTestTestResourceLock
        Start  48: SetLang
        Start  49: EmptyProperty
        Start 340: RunCMake.SourceProperties
        Start 138: CPackComponentsDEB-compression
        Start 199: CTestConfig.Script.MinSizeRel
        Start 445: RunCMake.AutoExportDll
        Start 204: CTestConfig.Dashboard.RelWithDebInfo
        Start 206: CMakeCommands.add_compile_definitions
        Start 155: TutorialStep1
251/477 Test #199: CTestConfig.Script.MinSizeRel ..........................   Passed    0.05 sec
252/477 Test #170: JumpNoLibOut ...........................................   Passed    0.82 sec
253/477 Test  #49: EmptyProperty ..........................................   Passed    0.26 sec
254/477 Test  #32: SystemInformation ......................................   Passed    0.97 sec
255/477 Test #258: CMakeOnly.CheckCXXSymbolExists .........................   Passed    1.04 sec
256/477 Test #257: CMakeOnly.CheckSymbolExists ............................   Passed    1.04 sec
257/477 Test  #48: SetLang ................................................   Passed    0.37 sec
258/477 Test #230: CTestTestResourceLock ..................................   Passed    0.37 sec
259/477 Test #204: CTestConfig.Dashboard.RelWithDebInfo ...................   Passed    0.46 sec
260/477 Test #348: RunCMake.add_dependencies ..............................   Passed    1.13 sec
261/477 Test #155: TutorialStep1 ..........................................   Passed    0.46 sec
262/477 Test #206: CMakeCommands.add_compile_definitions ..................   Passed    0.46 sec
        Start 181: TestsWorkingDirectory
        Start 400: RunCMake.TargetPolicies
        Start 395: RunCMake.try_run
        Start  39: MissingSourceFile
        Start  40: COnly
        Start 336: RunCMake.CompileDefinitions
        Start 446: RunCMake.AndroidMK
        Start 259: CMakeOnly.CheckCXXCompilerFlag
        Start 447: FindThreads.C-only
        Start 448: FindThreads.CXX-only
        Start 269: CMakeOnly.ProjectInclude
        Start 270: CMakeOnly.MajorVersionSelection-PythonLibs_2
263/477 Test #138: CPackComponentsDEB-compression .........................   Passed    0.74 sec
264/477 Test  #39: MissingSourceFile ......................................   Passed    0.11 sec
265/477 Test #340: RunCMake.SourceProperties ..............................   Passed    0.74 sec
266/477 Test #181: TestsWorkingDirectory ..................................   Passed    0.32 sec
267/477 Test #447: FindThreads.C-only .....................................   Passed    0.51 sec
268/477 Test #448: FindThreads.CXX-only ...................................   Passed    0.71 sec
269/477 Test #445: RunCMake.AutoExportDll .................................   Passed    1.44 sec
270/477 Test #336: RunCMake.CompileDefinitions ............................   Passed    0.81 sec
        Start  58: Properties
        Start  59: Assembler
        Start  74: SourceFileProperty
        Start  75: SourceFileIncludeDirProperty
        Start 223: CTestTestSkipReturnCode
        Start 246: InterfaceLinkLibraries
        Start  83: Module.CheckIPOSupported-CXX
        Start 334: RunCMake.ToolchainFile
271/477 Test  #40: COnly ..................................................   Passed    0.83 sec
272/477 Test #223: CTestTestSkipReturnCode ................................   Passed    0.21 sec
273/477 Test #395: RunCMake.try_run .......................................   Passed    1.04 sec
274/477 Test #400: RunCMake.TargetPolicies ................................   Passed    1.04 sec
275/477 Test  #75: SourceFileIncludeDirProperty ...........................   Passed    0.21 sec
276/477 Test  #74: SourceFileProperty .....................................   Passed    0.21 sec
277/477 Test #446: RunCMake.AndroidMK .....................................   Passed    1.13 sec
278/477 Test  #59: Assembler ..............................................   Passed    0.31 sec
279/477 Test #259: CMakeOnly.CheckCXXCompilerFlag .........................   Passed    1.21 sec
280/477 Test #270: CMakeOnly.MajorVersionSelection-PythonLibs_2 ...........   Passed    1.21 sec
281/477 Test  #58: Properties .............................................   Passed    0.40 sec
282/477 Test #269: CMakeOnly.ProjectInclude ...............................   Passed    1.21 sec
        Start 178: WarnUnusedUnusedViaUnset
        Start  41: CxxOnly
        Start  33: MathTest
        Start 335: RunCMake.find_dependency
        Start 179: WarnUnusedCliUsed
        Start 180: WarnUninitialized
        Start  35: CMakeCommands.target_compile_features
        Start 216: CMakeCommands.target_link_directories
        Start  71: ImportedSameName
        Start  54: LinkLine
        Start  36: MSManifest
        Start 364: RunCMake.ctest_test
283/477 Test  #83: Module.CheckIPOSupported-CXX ...........................   Passed    0.61 sec
284/477 Test #246: InterfaceLinkLibraries .................................   Passed    0.61 sec
285/477 Test #180: WarnUninitialized ......................................   Passed    0.11 sec
286/477 Test #179: WarnUnusedCliUsed ......................................   Passed    0.11 sec
287/477 Test #335: RunCMake.find_dependency ...............................   Passed    0.14 sec
288/477 Test  #33: MathTest ...............................................   Passed    0.21 sec
289/477 Test  #41: CxxOnly ................................................   Passed    0.21 sec
290/477 Test #178: WarnUnusedUnusedViaUnset ...............................   Passed    0.32 sec
291/477 Test #216: CMakeCommands.target_link_directories ..................   Passed    0.31 sec
292/477 Test  #71: ImportedSameName .......................................   Passed    0.30 sec
293/477 Test  #54: LinkLine ...............................................   Passed    0.30 sec
294/477 Test  #36: MSManifest .............................................   Passed    0.50 sec
        Start 402: RunCMake.interface_library
        Start 390: RunCMake.set_property
        Start 391: RunCMake.string
        Start 392: RunCMake.test_include_dirs
        Start  79: CMakeBuildTest
        Start 241: CTestTestShowOnly
        Start   1: SystemInformationNew
        Start 201: CTestConfig.Script.Release
        Start 207: CMakeCommands.add_compile_options
        Start 271: CMakeOnly.MajorVersionSelection-PythonLibs_3
        Start 372: RunCMake.find_package
        Start  65: EmptyLibrary
295/477 Test  #35: CMakeCommands.target_compile_features ..................   Passed    0.53 sec
296/477 Test #241: CTestTestShowOnly ......................................   Passed    0.11 sec
297/477 Test  #79: CMakeBuildTest .........................................   Passed    0.15 sec
298/477 Test #201: CTestConfig.Script.Release .............................   Passed    0.45 sec
299/477 Test  #65: EmptyLibrary ...........................................   Passed    0.74 sec
300/477 Test #372: RunCMake.find_package ..................................   Passed    0.74 sec
301/477 Test #334: RunCMake.ToolchainFile .................................   Passed    1.77 sec
302/477 Test #364: RunCMake.ctest_test ....................................   Passed    1.26 sec
303/477 Test #207: CMakeCommands.add_compile_options ......................   Passed    0.75 sec
        Start 377: RunCMake.get_property
        Start  63: Unset
        Start 404: RunCMake.configure_file
        Start  64: PolicyScope
        Start 272: CMakeOnly.MajorVersionSelection-PythonInterp_2
        Start  45: OutName
        Start 422: RunCMake.CTestCommandLine
        Start 265: CMakeOnly.SelectLibraryConfigurations
        Start 247: CMakeLib.testGeneratedFileStream
304/477 Test   #1: SystemInformationNew ...................................   Passed    0.96 sec
305/477 Test  #45: OutName ................................................   Passed    0.19 sec
306/477 Test #272: CMakeOnly.MajorVersionSelection-PythonInterp_2 .........   Passed    0.19 sec
307/477 Test #392: RunCMake.test_include_dirs .............................   Passed    1.04 sec
308/477 Test #391: RunCMake.string ........................................   Passed    1.04 sec
309/477 Test #390: RunCMake.set_property ..................................   Passed    1.04 sec
310/477 Test  #64: PolicyScope ............................................   Passed    0.28 sec
311/477 Test #271: CMakeOnly.MajorVersionSelection-PythonLibs_3 ...........   Passed    1.23 sec
312/477 Test #404: RunCMake.configure_file ................................   Passed    0.48 sec
313/477 Test #265: CMakeOnly.SelectLibraryConfigurations ..................   Passed    0.47 sec
314/477 Test  #63: Unset ..................................................   Passed    0.48 sec
315/477 Test #247: CMakeLib.testGeneratedFileStream .......................   Passed    0.57 sec
        Start 266: CMakeOnly.TargetScope
        Start 346: RunCMake.add_custom_command
        Start 378: RunCMake.if
        Start 358: RunCMake.ctest_build
        Start 367: RunCMake.ctest_upload
        Start 174: linkorder2
        Start 407: RunCMake.ExportWithoutLanguage
        Start 295: RunCMake.CMP0057
        Start 423: RunCMake.CacheNewline
        Start  26: CMake.Copyright
        Start 244: CompileCommandOutput
        Start 424: RunCMake.CPackSymlinks
316/477 Test #422: RunCMake.CTestCommandLine ..............................   Passed    0.60 sec
317/477 Test #407: RunCMake.ExportWithoutLanguage .........................   Passed    0.02 sec
318/477 Test #367: RunCMake.ctest_upload ..................................   Passed    0.13 sec
319/477 Test #358: RunCMake.ctest_build ...................................   Passed    0.19 sec
320/477 Test #378: RunCMake.if ............................................   Passed    0.19 sec
321/477 Test #266: CMakeOnly.TargetScope ..................................   Passed    0.30 sec
322/477 Test #402: RunCMake.interface_library .............................   Passed    1.65 sec
323/477 Test #423: RunCMake.CacheNewline ..................................   Passed    0.39 sec
324/477 Test #244: CompileCommandOutput ...................................   Passed    0.38 sec
325/477 Test #424: RunCMake.CPackSymlinks .................................   Passed    0.38 sec
326/477 Test  #26: CMake.Copyright ........................................   Passed    0.38 sec
327/477 Test #377: RunCMake.get_property ..................................   Passed    0.99 sec
328/477 Test #295: RunCMake.CMP0057 .......................................   Passed    0.39 sec
        Start 457: CMake.File
        Start 458: CMake.ImplicitLinkInfo
        Start 255: CMakeServerLib.testServerBuffering
        Start 312: RunCMake.ExternalData
        Start 359: RunCMake.ctest_cmake_error
        Start 273: CMakeOnly.MajorVersionSelection-PythonInterp_3
        Start 248: CMakeLib.testRST
        Start 373: RunCMake.find_path
        Start  24: kwiml.test
        Start 374: RunCMake.find_program
        Start 365: RunCMake.ctest_disabled_test
        Start 327: RunCMake.Languages
        Start 323: RunCMake.GetPrerequisites
329/477 Test #248: CMakeLib.testRST .......................................   Passed    0.01 sec
330/477 Test #273: CMakeOnly.MajorVersionSelection-PythonInterp_3 .........   Passed    0.04 sec
331/477 Test #174: linkorder2 .............................................   Passed    0.45 sec
332/477 Test #359: RunCMake.ctest_cmake_error .............................   Passed    0.05 sec
333/477 Test #255: CMakeServerLib.testServerBuffering .....................   Passed    0.15 sec
334/477 Test #458: CMake.ImplicitLinkInfo .................................   Passed    0.35 sec
335/477 Test #457: CMake.File .............................................   Passed    0.35 sec
336/477 Test #374: RunCMake.find_program ..................................   Passed    0.44 sec
337/477 Test #323: RunCMake.GetPrerequisites ..............................   Passed    0.43 sec
338/477 Test #365: RunCMake.ctest_disabled_test ...........................   Passed    0.44 sec
339/477 Test  #24: kwiml.test .............................................   Passed    0.44 sec
340/477 Test #373: RunCMake.find_path .....................................   Passed    0.44 sec
        Start 324: RunCMake.GNUInstallDirs
        Start 188: CTestCoverageCollectGCOV
        Start 267: CMakeOnly.find_library
        Start 167: testdriver3
        Start 398: RunCMake.while
        Start 360: RunCMake.ctest_configure
        Start 381: RunCMake.include_guard
        Start 256: CMakeOnly.LinkInterfaceLoop
        Start 104: LinkFlags-exe_flags_config
        Start 417: RunCMake.CPackCommandLine
        Start 249: CMakeLib.testSystemTools
        Start 393: RunCMake.BundleUtilities
341/477 Test #360: RunCMake.ctest_configure ...............................   Passed    0.07 sec
342/477 Test #398: RunCMake.while .........................................   Passed    0.10 sec
343/477 Test #167: testdriver3 ............................................   Passed    0.15 sec
344/477 Test #267: CMakeOnly.find_library .................................   Passed    0.15 sec
345/477 Test #346: RunCMake.add_custom_command ............................   Passed    1.21 sec
346/477 Test #327: RunCMake.Languages .....................................   Passed    0.80 sec
347/477 Test #324: RunCMake.GNUInstallDirs ................................   Passed    0.36 sec
348/477 Test #256: CMakeOnly.LinkInterfaceLoop ............................   Passed    0.45 sec
349/477 Test #381: RunCMake.include_guard .................................   Passed    0.45 sec
350/477 Test #417: RunCMake.CPackCommandLine ..............................   Passed    0.44 sec
351/477 Test #393: RunCMake.BundleUtilities ...............................   Passed    0.44 sec
352/477 Test #249: CMakeLib.testSystemTools ...............................   Passed    0.44 sec
353/477 Test #104: LinkFlags-exe_flags_config .............................   Passed    0.45 sec
        Start  84: Module.ExternalData
        Start 303: RunCMake.CTest
        Start 250: CMakeLib.testUTF8
        Start 296: RunCMake.CMP0059
        Start 309: RunCMake.CompilerNotFound
        Start 268: CMakeOnly.find_path
        Start 345: RunCMake.WorkingDirectory
        Start 193: CTestCoberturaCoverage
        Start 194: CTestJacocoCoverage
        Start 195: CTestJavascriptCoverage
        Start 196: CTestDelphiCoverage
        Start 461: CMake.If
        Start 463: CMake.Math
354/477 Test #345: RunCMake.WorkingDirectory ..............................   Passed    0.06 sec
355/477 Test #268: CMakeOnly.find_path ....................................   Passed    0.07 sec
356/477 Test #296: RunCMake.CMP0059 .......................................   Passed    0.17 sec
357/477 Test #312: RunCMake.ExternalData ..................................   Passed    1.09 sec
358/477 Test #188: CTestCoverageCollectGCOV ...............................   Passed    0.70 sec
359/477 Test #250: CMakeLib.testUTF8 ......................................   Passed    0.24 sec
360/477 Test #303: RunCMake.CTest .........................................   Passed    0.24 sec
361/477 Test  #84: Module.ExternalData ....................................   Passed    0.35 sec
362/477 Test #194: CTestJacocoCoverage ....................................   Passed    0.33 sec
363/477 Test #461: CMake.If ...............................................   Passed    0.33 sec
364/477 Test #196: CTestDelphiCoverage ....................................   Passed    0.33 sec
365/477 Test #463: CMake.Math .............................................   Passed    0.33 sec
366/477 Test #193: CTestCoberturaCoverage .................................   Passed    0.34 sec
367/477 Test #195: CTestJavascriptCoverage ................................   Passed    0.33 sec
        Start 470: CMake.FileDownload
        Start  17: kwsys.testProcess-4
        Start 220: CTestTestBadGenerator
        Start 228: CTestTestPrintLabels
        Start 229: CTestTestLabelRegExp
        Start  25: curl
        Start 262: CMakeOnly.CompilerIdC
        Start 347: RunCMake.add_custom_target
        Start 477: CMake.CheckSourceTree
        Start  18: kwsys.testProcess-5
        Start 213: CMakeCommands.add_link_options
        Start 214: CMakeCommands.target_link_options
        Start 215: CMakeCommands.link_directories
        Start 189: CTestTestEmptyBinaryDirectory
368/477 Test #309: RunCMake.CompilerNotFound ..............................   Passed    0.65 sec
369/477 Test #229: CTestTestLabelRegExp ...................................   Passed    0.30 sec
370/477 Test #228: CTestTestPrintLabels ...................................   Passed    0.30 sec
371/477 Test #220: CTestTestBadGenerator ..................................   Passed    0.30 sec
372/477 Test  #17: kwsys.testProcess-4 ....................................   Passed    0.30 sec
373/477 Test #470: CMake.FileDownload .....................................   Passed    0.30 sec
374/477 Test #347: RunCMake.add_custom_target .............................   Passed    0.39 sec
375/477 Test #214: CMakeCommands.target_link_options ......................   Passed    0.39 sec
376/477 Test #213: CMakeCommands.add_link_options .........................   Passed    0.39 sec
377/477 Test #189: CTestTestEmptyBinaryDirectory ..........................   Passed    0.38 sec
378/477 Test #477: CMake.CheckSourceTree ..................................***Failed    0.39 sec
379/477 Test  #18: kwsys.testProcess-5 ....................................   Passed    0.39 sec
380/477 Test #215: CMakeCommands.link_directories .........................   Passed    0.38 sec
        Start 313: RunCMake.FeatureSummary
        Start 191: CTestCacheCoverage
        Start 192: CTestPythonCoverage
        Start 182: CTest.NoNewline
        Start 183: CTest.BuildCommand.ProjectInSubdir
        Start   2: kwsys.testEncode
        Start   3: kwsys.testTerminal
        Start 190: CTestGTMCoverage
        Start 399: RunCMake.CMP0004
        Start   4: kwsys.testConfigure
        Start 205: CTestConfig.ScriptWithArgs
        Start 361: RunCMake.ctest_coverage
        Start 388: RunCMake.return
381/477 Test #262: CMakeOnly.CompilerIdC ..................................   Passed    0.42 sec
382/477 Test  #25: curl ...................................................   Passed    0.42 sec
383/477 Test   #3: kwsys.testTerminal .....................................   Passed    0.01 sec
384/477 Test   #2: kwsys.testEncode .......................................   Passed    0.01 sec
385/477 Test #183: CTest.BuildCommand.ProjectInSubdir .....................   Passed    0.04 sec
386/477 Test #182: CTest.NoNewline ........................................   Passed    0.04 sec
387/477 Test #361: RunCMake.ctest_coverage ................................   Passed    0.06 sec
388/477 Test #192: CTestPythonCoverage ....................................   Passed    0.07 sec
389/477 Test #191: CTestCacheCoverage .....................................   Passed    0.07 sec
390/477 Test #190: CTestGTMCoverage .......................................   Passed    0.27 sec
391/477 Test #399: RunCMake.CMP0004 .......................................   Passed    0.26 sec
392/477 Test   #4: kwsys.testConfigure ....................................   Passed    0.26 sec
393/477 Test #205: CTestConfig.ScriptWithArgs .............................   Passed    0.26 sec
394/477 Test #388: RunCMake.return ........................................   Passed    0.26 sec
        Start 362: RunCMake.ctest_start
        Start 389: RunCMake.separate_arguments
        Start 375: RunCMake.foreach
        Start 251: CMakeLib.testXMLParser
        Start 276: RunCMake.CMP0019
        Start 356: RunCMake.cmake_parse_arguments
        Start 471: CMake.FileDownloadBadHash
        Start   9: kwsys.testEncoding
        Start 472: CMake.FileUpload
        Start 316: RunCMake.FindLua
        Start 317: RunCMake.FindOpenGL
        Start  11: kwsys.testConsoleBuf
        Start  12: kwsys.testSystemInformation
        Start 186: CTestTestNoExe
395/477 Test #471: CMake.FileDownloadBadHash ..............................   Passed    0.01 sec
396/477 Test #276: RunCMake.CMP0019 .......................................   Passed    0.12 sec
397/477 Test #251: CMakeLib.testXMLParser .................................   Passed    0.12 sec
398/477 Test #375: RunCMake.foreach .......................................   Passed    0.12 sec
399/477 Test #389: RunCMake.separate_arguments ............................   Passed    0.12 sec
400/477 Test #472: CMake.FileUpload .......................................   Passed    0.21 sec
401/477 Test #313: RunCMake.FeatureSummary ................................   Passed    0.60 sec
402/477 Test   #9: kwsys.testEncoding .....................................   Passed    0.31 sec
403/477 Test #186: CTestTestNoExe .........................................   Passed    0.40 sec
404/477 Test  #11: kwsys.testConsoleBuf ...................................   Passed    0.41 sec
405/477 Test #317: RunCMake.FindOpenGL ....................................   Passed    0.41 sec
406/477 Test  #12: kwsys.testSystemInformation ............................   Passed    0.40 sec
        Start 150: ExternalProjectSubdir
        Start 370: RunCMake.find_file
        Start 449: CMake.List
        Start 355: RunCMake.cmake_minimum_required
        Start 305: RunCMake.AndroidTestUtilities
        Start 252: CMakeLib.testXMLSafe
        Start 311: RunCMake.DisallowedCommands
        Start 253: CMakeLib.testFindPackageCommand
        Start 462: CMake.String
        Start 415: RunCMake.CommandLineTar
        Start 453: CMake.Toolchain
        Start 454: CMake.GetFilenameComponentRealpath
407/477 Test #356: RunCMake.cmake_parse_arguments .........................   Passed    0.54 sec
408/477 Test #252: CMakeLib.testXMLSafe ...................................   Passed    0.11 sec
409/477 Test #305: RunCMake.AndroidTestUtilities ..........................   Passed    0.12 sec
410/477 Test #355: RunCMake.cmake_minimum_required ........................   Passed    0.12 sec
411/477 Test #449: CMake.List .............................................   Passed    0.12 sec
412/477 Test #362: RunCMake.ctest_start ...................................   Passed    0.55 sec
413/477 Test #370: RunCMake.find_file .....................................   Passed    0.12 sec
414/477 Test #150: ExternalProjectSubdir ..................................   Passed    0.23 sec
415/477 Test #253: CMakeLib.testFindPackageCommand ........................   Passed    0.22 sec
416/477 Test #316: RunCMake.FindLua .......................................   Passed    0.64 sec
417/477 Test #453: CMake.Toolchain ........................................   Passed    0.31 sec
418/477 Test #454: CMake.GetFilenameComponentRealpath .....................   Passed    0.31 sec
419/477 Test #462: CMake.String ...........................................   Passed    0.35 sec
        Start 460: CMake.GetProperty
        Start  13: kwsys.testDynamicLoader
        Start  14: kwsys.testProcess-1
        Start  15: kwsys.testProcess-2
        Start 383: RunCMake.math
        Start 140: CPackComponentsPrefix
        Start 376: RunCMake.get_filename_component
        Start 298: RunCMake.CMP0064
        Start 293: RunCMake.CMP0054
        Start 352: RunCMake.build_command
        Start 357: RunCMake.continue
        Start 353: RunCMake.execute_process
        Start 294: RunCMake.CMP0055
420/477 Test #311: RunCMake.DisallowedCommands ............................   Passed    0.38 sec
421/477 Test #376: RunCMake.get_filename_component ........................   Passed    0.04 sec
422/477 Test #140: CPackComponentsPrefix ..................................   Passed    0.07 sec
423/477 Test #383: RunCMake.math ..........................................   Passed    0.11 sec
424/477 Test  #15: kwsys.testProcess-2 ....................................   Passed    0.11 sec
425/477 Test  #14: kwsys.testProcess-1 ....................................   Passed    0.18 sec
426/477 Test  #13: kwsys.testDynamicLoader ................................   Passed    0.18 sec
427/477 Test #460: CMake.GetProperty ......................................   Passed    0.18 sec
428/477 Test #298: RunCMake.CMP0064 .......................................   Passed    0.27 sec
429/477 Test #293: RunCMake.CMP0054 .......................................   Passed    0.27 sec
430/477 Test #357: RunCMake.continue ......................................   Passed    0.27 sec
431/477 Test #415: RunCMake.CommandLineTar ................................   Passed    0.64 sec
432/477 Test #352: RunCMake.build_command .................................   Passed    0.27 sec
433/477 Test #294: RunCMake.CMP0055 .......................................   Passed    0.27 sec
434/477 Test #353: RunCMake.execute_process ...............................   Passed    0.27 sec
        Start 314: RunCMake.FPHSA
        Start 473: CMake.ELF
        Start 474: CMake.EndStuff
        Start 320: RunCMake.GeneratorInstance
        Start 475: CMake.GetPrerequisites
        Start 455: CMake.Version
        Start 456: CMake.Message
        Start 464: CMake.CMakeMinimumRequired
        Start 465: CMake.CompilerIdVendor
        Start  23: kwsys.testSharedForward
        Start 119: CPackUseDefaultVersion
        Start 466: CMake.ProcessorCount
        Start 120: CPackUseProjectVersion
        Start 467: CMake.PushCheckState
        Start 240: CTestTestRunScript
435/477 Test #456: CMake.Message ..........................................   Passed    0.01 sec
436/477 Test #455: CMake.Version ..........................................   Passed    0.02 sec
437/477 Test #475: CMake.GetPrerequisites .................................   Passed    0.08 sec
438/477 Test #320: RunCMake.GeneratorInstance .............................   Passed    0.08 sec
439/477 Test #474: CMake.EndStuff .........................................   Passed    0.08 sec
440/477 Test #473: CMake.ELF ..............................................   Passed    0.08 sec
441/477 Test #119: CPackUseDefaultVersion .................................   Passed    0.07 sec
442/477 Test #464: CMake.CMakeMinimumRequired .............................   Passed    0.17 sec
443/477 Test #465: CMake.CompilerIdVendor .................................   Passed    0.17 sec
444/477 Test #120: CPackUseProjectVersion .................................   Passed    0.16 sec
445/477 Test #240: CTestTestRunScript .....................................   Passed    0.16 sec
446/477 Test #466: CMake.ProcessorCount ...................................   Passed    0.17 sec
447/477 Test #467: CMake.PushCheckState ...................................   Passed    0.26 sec
448/477 Test  #23: kwsys.testSharedForward ................................   Passed    0.27 sec
        Start 384: RunCMake.message
        Start 371: RunCMake.find_library
        Start 396: RunCMake.set
        Start 315: RunCMake.FindBoost
        Start 476: CMake.PolicyCheck
        Start 468: CMake.While
        Start   6: kwsys.testCommandLineArguments
        Start 121: CPackUseShortProjectVersion
        Start 403: RunCMake.no_install_prefix
        Start 469: CMake.CMakeHostSystemInformation
        Start   7: kwsys.testCommandLineArguments1
        Start 450: CMake.VariableWatch
        Start   8: kwsys.testDirectory
        Start 451: CMake.Include
449/477 Test   #6: kwsys.testCommandLineArguments .........................   Passed    0.02 sec
450/477 Test #468: CMake.While ............................................   Passed    0.02 sec
451/477 Test #315: RunCMake.FindBoost .....................................   Passed    0.12 sec
452/477 Test #396: RunCMake.set ...........................................   Passed    0.12 sec
453/477 Test #371: RunCMake.find_library ..................................   Passed    0.12 sec
454/477 Test #384: RunCMake.message .......................................   Passed    0.12 sec
455/477 Test   #7: kwsys.testCommandLineArguments1 ........................   Passed    0.11 sec
456/477 Test #121: CPackUseShortProjectVersion ............................   Passed    0.21 sec
457/477 Test #403: RunCMake.no_install_prefix .............................   Passed    0.21 sec
458/477 Test #450: CMake.VariableWatch ....................................   Passed    0.21 sec
459/477 Test #469: CMake.CMakeHostSystemInformation .......................   Passed    0.21 sec
460/477 Test #314: RunCMake.FPHSA .........................................   Passed    0.51 sec
461/477 Test #451: CMake.Include ..........................................   Passed    0.20 sec
462/477 Test   #8: kwsys.testDirectory ....................................   Passed    0.21 sec
        Start 452: CMake.FindBase
        Start  10: kwsys.testFStream
        Start 397: RunCMake.variable_watch
        Start 321: RunCMake.GeneratorPlatform
        Start 322: RunCMake.GeneratorToolset
        Start 459: CMake.ModuleNotices
        Start 331: RunCMake.Swift
463/477 Test #331: RunCMake.Swift .........................................   Passed    0.02 sec
464/477 Test #459: CMake.ModuleNotices ....................................   Passed    0.03 sec
465/477 Test #476: CMake.PolicyCheck ......................................   Passed    0.26 sec
466/477 Test #322: RunCMake.GeneratorToolset ..............................   Passed    0.05 sec
467/477 Test #321: RunCMake.GeneratorPlatform .............................   Passed    0.05 sec
468/477 Test #397: RunCMake.variable_watch ................................   Passed    0.08 sec
469/477 Test  #10: kwsys.testFStream ......................................   Passed    0.08 sec
470/477 Test #452: CMake.FindBase .........................................   Passed    0.08 sec
471/477 Test #302: RunCMake.Ninja .........................................   Passed   81.30 sec
        Start 153: ExternalProjectUpdateSetup
472/477 Test #153: ExternalProjectUpdateSetup .............................   Passed    0.58 sec
        Start 243: BootstrapTest
473/477 Test #243: BootstrapTest ..........................................   Passed   25.75 sec
        Start 154: ExternalProjectUpdate
474/477 Test #154: ExternalProjectUpdate ..................................   Passed    4.59 sec
        Start 142: CMakeTestAllGenerators
475/477 Test #142: CMakeTestAllGenerators .................................   Passed    0.39 sec
        Start 149: ExternalProject
476/477 Test #149: ExternalProject ........................................   Passed    1.07 sec
        Start 152: ExternalProjectLocal
477/477 Test #152: ExternalProjectLocal ...................................   Passed    0.66 sec

99% tests passed, 2 tests failed out of 477

Label Time Summary:
Label1    =   0.30 sec*proc (1 test)
Label2    =   0.30 sec*proc (1 test)

Total Test time (real) = 114.38 sec

The following tests FAILED:
	  5 - kwsys.testSystemTools (Failed)
	477 - CMake.CheckSourceTree (Failed)
Errors while running CTest
Running clang-tidy returned non-zero!
['git', 'diff']
Is Shell: False
diff --git a/Source/CTest/cmParseBlanketJSCoverage.cxx b/Source/CTest/cmParseBlanketJSCoverage.cxx
index 308e6f7a3..532f119c8 100644
--- a/Source/CTest/cmParseBlanketJSCoverage.cxx
+++ b/Source/CTest/cmParseBlanketJSCoverage.cxx
@@ -110,7 +110,7 @@ cmParseBlanketJSCoverage::cmParseBlanketJSCoverage(
 {
 }
 
-bool cmParseBlanketJSCoverage::LoadCoverageData(std::vector<std::string> files)
+bool cmParseBlanketJSCoverage::LoadCoverageData(const std::vector<std::string>& files)
 {
   cmCTestOptionalLog(this->CTest, HANDLER_VERBOSE_OUTPUT,
                      "Found " << files.size() << " Files" << std::endl,
diff --git a/Source/CTest/cmParseBlanketJSCoverage.h b/Source/CTest/cmParseBlanketJSCoverage.h
index 696121f21..71c725853 100644
--- a/Source/CTest/cmParseBlanketJSCoverage.h
+++ b/Source/CTest/cmParseBlanketJSCoverage.h
@@ -29,7 +29,7 @@ class cmParseBlanketJSCoverage
 public:
   cmParseBlanketJSCoverage(cmCTestCoverageHandlerContainer& cont,
                            cmCTest* ctest);
-  bool LoadCoverageData(std::vector<std::string> files);
+  bool LoadCoverageData(const std::vector<std::string>& files);
   //  Read the JSON output
   bool ReadJSONFile(std::string const& file);
 
diff --git a/Source/cmGlobalNinjaGenerator.cxx b/Source/cmGlobalNinjaGenerator.cxx
index 8c69f42ee..6ded079dd 100644
--- a/Source/cmGlobalNinjaGenerator.cxx
+++ b/Source/cmGlobalNinjaGenerator.cxx
@@ -254,7 +254,7 @@ void cmGlobalNinjaGenerator::WriteCustomCommandBuild(
   bool restat, const cmNinjaDeps& outputs, const cmNinjaDeps& deps,
   const cmNinjaDeps& orderOnly)
 {
-  std::string cmd = command; // NOLINT(clang-tidy)
+  const std::string& cmd = command; // NOLINT(clang-tidy)
 #ifdef _WIN32
   if (cmd.empty())
     // TODO Shouldn't an empty command be handled by ninja?
diff --git a/Source/cmMakefile.cxx b/Source/cmMakefile.cxx
index 0a69d0930..c2be127ac 100644
--- a/Source/cmMakefile.cxx
+++ b/Source/cmMakefile.cxx
@@ -2342,7 +2342,7 @@ cmMakefile::AppleSDK cmMakefile::GetAppleSDKType() const
     { "watchsimulator", AppleSDK::WatchSimulator },
   };
 
-  for (auto entry : sdkDatabase) {
+  for (const auto& entry : sdkDatabase) {
     if (sdkRoot.find(entry.name) == 0 ||
         sdkRoot.find(std::string("/") + entry.name) != std::string::npos) {
       return entry.sdk;
diff --git a/Source/cmSourceGroupCommand.cxx b/Source/cmSourceGroupCommand.cxx
index c3df313e1..9af3b5586 100644
--- a/Source/cmSourceGroupCommand.cxx
+++ b/Source/cmSourceGroupCommand.cxx
@@ -78,7 +78,8 @@ std::vector<std::string> prepareFilesPathsForTree(
 {
   std::vector<std::string> prepared;
 
-  for (auto const& filePath : filesPaths) {
+  prepared.reserve(filesPaths.size());
+for (auto const& filePath : filesPaths) {
     prepared.push_back(prepareFilePathForTree(filePath, currentSourceDir));
   }
 
diff --git a/Source/cmTargetDepend.h b/Source/cmTargetDepend.h
index 5ea008523..9045719de 100644
--- a/Source/cmTargetDepend.h
+++ b/Source/cmTargetDepend.h
@@ -31,7 +31,7 @@ public:
   operator cmGeneratorTarget const*() const { return this->Target; }
   cmGeneratorTarget const* operator->() const { return this->Target; }
   cmGeneratorTarget const& operator*() const { return *this->Target; }
-  friend bool operator<(cmTargetDepend l, cmTargetDepend r)
+  friend bool operator<(const cmTargetDepend& l, const cmTargetDepend& r)
   {
     return l.Target < r.Target;
   }
diff --git a/Source/kwsys/SystemInformation.cxx b/Source/kwsys/SystemInformation.cxx
index d368fa29f..8e467c7c5 100644
--- a/Source/kwsys/SystemInformation.cxx
+++ b/Source/kwsys/SystemInformation.cxx
@@ -1337,7 +1337,7 @@ std::string SymbolProperties::GetFileName(const std::string& path) const
 {
   std::string file(path);
   if (!this->ReportPath) {
-    size_t at = file.rfind("/");
+    size_t at = file.rfind('/');
     if (at != std::string::npos) {
       file = file.substr(at + 1);
     }
@@ -3351,8 +3351,8 @@ std::string SystemInformationImplementation::ExtractValueFromCpuInfoFile(
   size_t pos = buffer.find(word, init);
   if (pos != std::string::npos) {
     this->CurrentPositionInFile = pos;
-    pos = buffer.find(":", pos);
-    size_t pos2 = buffer.find("\n", pos);
+    pos = buffer.find(':', pos);
+    size_t pos2 = buffer.find('\n', pos);
     if (pos != std::string::npos && pos2 != std::string::npos) {
       // It may happen that the beginning matches, but this is still not the
       // requested key.
@@ -4602,7 +4602,7 @@ std::string SystemInformationImplementation::ExtractValueFromSysCtl(
   size_t pos = this->SysCtlBuffer.find(word);
   if (pos != std::string::npos) {
     pos = this->SysCtlBuffer.find(": ", pos);
-    size_t pos2 = this->SysCtlBuffer.find("\n", pos);
+    size_t pos2 = this->SysCtlBuffer.find('\n', pos);
     if (pos != std::string::npos && pos2 != std::string::npos) {
       return this->SysCtlBuffer.substr(pos + 2, pos2 - pos - 2);
     }
@@ -5404,13 +5404,13 @@ void SystemInformationImplementation::TrimNewline(std::string& output)
 {
   // remove \r
   std::string::size_type pos = 0;
-  while ((pos = output.find("\r", pos)) != std::string::npos) {
+  while ((pos = output.find('\r', pos)) != std::string::npos) {
     output.erase(pos);
   }
 
   // remove \n
   pos = 0;
-  while ((pos = output.find("\n", pos)) != std::string::npos) {
+  while ((pos = output.find('\n', pos)) != std::string::npos) {
     output.erase(pos);
   }
 }
diff --git a/Source/kwsys/SystemTools.cxx b/Source/kwsys/SystemTools.cxx
index 0a4ad7aac..9549f18c0 100644
--- a/Source/kwsys/SystemTools.cxx
+++ b/Source/kwsys/SystemTools.cxx
@@ -1990,7 +1990,7 @@ std::string SystemTools::ConvertToUnixOutputPath(const std::string& path)
     ret.erase(pos, 1);
   }
   // escape spaces and () in the path
-  if (ret.find_first_of(" ") != std::string::npos) {
+  if (ret.find_first_of(' ') != std::string::npos) {
     std::string result;
     char lastch = 1;
     for (const char* ch = ret.c_str(); *ch != '\0'; ++ch) {
@@ -2065,7 +2065,7 @@ bool SystemTools::CopyFileIfDifferent(const std::string& source,
     std::string new_destination = destination;
     SystemTools::ConvertToUnixSlashes(new_destination);
     new_destination += '/';
-    std::string source_name = source;
+    const std::string& source_name = source;
     new_destination += SystemTools::GetFilenameName(source_name);
     if (SystemTools::FilesDiffer(source, new_destination)) {
       return SystemTools::CopyFileAlways(source, destination);
@@ -2209,7 +2209,7 @@ bool SystemTools::CopyFileAlways(const std::string& source,
       destination_dir = real_destination;
       SystemTools::ConvertToUnixSlashes(real_destination);
       real_destination += '/';
-      std::string source_name = source;
+      const std::string& source_name = source;
       real_destination += SystemTools::GetFilenameName(source_name);
     } else {
       destination_dir = SystemTools::GetFilenamePath(destination);
@@ -3047,7 +3047,7 @@ bool SystemTools::SplitProgramPath(const std::string& in_name,
   SystemTools::ConvertToUnixSlashes(dir);
 
   if (!SystemTools::FileIsDirectory(dir)) {
-    std::string::size_type slashPos = dir.rfind("/");
+    std::string::size_type slashPos = dir.rfind('/');
     if (slashPos != std::string::npos) {
       file = dir.substr(slashPos + 1);
       dir = dir.substr(0, slashPos);
@@ -3204,7 +3204,7 @@ static void SystemToolsAppendComponents(
       }
     } else if (!i->empty() && *i != cur) {
 #if __cplusplus >= 201103L || (defined(_MSVC_LANG) && _MSVC_LANG >= 201103L)
-      out_components.push_back(std::move(*i));
+      out_components.push_back(*i);
 #else
       out_components.push_back(*i);
 #endif
@@ -3635,7 +3635,7 @@ bool SystemTools::ComparePath(const std::string& c1, const std::string& c2)
 bool SystemTools::Split(const std::string& str,
                         std::vector<std::string>& lines, char separator)
 {
-  std::string data(str);
+  const std::string& data(str);
   std::string::size_type lpos = 0;
   while (lpos < data.length()) {
     std::string::size_type rpos = data.find_first_of(separator, lpos);
@@ -3685,7 +3685,7 @@ std::string SystemTools::GetFilenamePath(const std::string& filename)
   std::string fn = filename;
   SystemTools::ConvertToUnixSlashes(fn);
 
-  std::string::size_type slash_pos = fn.rfind("/");
+  std::string::size_type slash_pos = fn.rfind('/');
   if (slash_pos != std::string::npos) {
     std::string ret = fn.substr(0, slash_pos);
     if (ret.size() == 2 && ret[1] == ':') {
diff --git a/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp b/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
index 6e6e57e1f..7f2d76081 100644
--- a/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
+++ b/Utilities/cmjsoncpp/src/lib_json/json_writer.cpp
@@ -646,7 +646,7 @@ bool StyledWriter::hasCommentForValue(const Value& value) {
 // //////////////////////////////////////////////////////////////////
 
 StyledStreamWriter::StyledStreamWriter(JSONCPP_STRING indentation)
-    : document_(NULL), rightMargin_(74), indentation_(indentation),
+    : document_(NULL), rightMargin_(74), indentation_(std::move(indentation)),
       addChildValues_() {}
 
 void StyledStreamWriter::write(JSONCPP_OSTREAM& out, const Value& root) {
program finished with exit code 1
elapsedTime=193.005618