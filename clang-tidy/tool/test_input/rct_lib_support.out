Enabled checks:
    android-cloexec-accept
    android-cloexec-accept4
    android-cloexec-creat
    android-cloexec-dup
    android-cloexec-epoll-create
    android-cloexec-epoll-create1
    android-cloexec-fopen
    android-cloexec-inotify-init
    android-cloexec-inotify-init1
    android-cloexec-memfd-create
    android-cloexec-open
    android-cloexec-socket
    boost-use-to-string
    bugprone-argument-comment
    bugprone-assert-side-effect
    bugprone-bool-pointer-implicit-conversion
    bugprone-copy-constructor-init
    bugprone-dangling-handle
    bugprone-fold-init-type
    bugprone-forward-declaration-namespace
    bugprone-inaccurate-erase
    bugprone-integer-division
    bugprone-misplaced-operator-in-strlen-in-alloc
    bugprone-move-forwarding-reference
    bugprone-multiple-statement-macro
    bugprone-string-constructor
    bugprone-suspicious-memset-usage
    bugprone-undefined-memory-manipulation
    bugprone-use-after-move
    bugprone-virtual-near-miss
    cert-dcl03-c
    cert-dcl21-cpp
    cert-dcl50-cpp
    cert-dcl54-cpp
    cert-dcl58-cpp
    cert-dcl59-cpp
    cert-env33-c
    cert-err09-cpp
    cert-err34-c
    cert-err52-cpp
    cert-err58-cpp
    cert-err60-cpp
    cert-err61-cpp
    cert-fio38-c
    cert-flp30-c
    cert-msc30-c
    cert-msc50-cpp
    cert-oop11-cpp
    clang-analyzer-apiModeling.google.GTest
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-cplusplus.NewDelete
    clang-analyzer-cplusplus.NewDeleteLeaks
    clang-analyzer-cplusplus.SelfAssignment
    clang-analyzer-deadcode.DeadStores
    clang-analyzer-llvm.Conventions
    clang-analyzer-nullability.NullPassedToNonnull
    clang-analyzer-nullability.NullReturnedFromNonnull
    clang-analyzer-nullability.NullableDereferenced
    clang-analyzer-nullability.NullablePassedToNonnull
    clang-analyzer-nullability.NullableReturnedFromNonnull
    clang-analyzer-optin.cplusplus.VirtualCall
    clang-analyzer-optin.mpi.MPI-Checker
    clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
    clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
    clang-analyzer-optin.performance.Padding
    clang-analyzer-optin.portability.UnixAPI
    clang-analyzer-osx.API
    clang-analyzer-osx.NumberObjectConversion
    clang-analyzer-osx.ObjCProperty
    clang-analyzer-osx.SecKeychainAPI
    clang-analyzer-osx.cocoa.AtSync
    clang-analyzer-osx.cocoa.ClassRelease
    clang-analyzer-osx.cocoa.Dealloc
    clang-analyzer-osx.cocoa.IncompatibleMethodTypes
    clang-analyzer-osx.cocoa.Loops
    clang-analyzer-osx.cocoa.MissingSuperCall
    clang-analyzer-osx.cocoa.NSAutoreleasePool
    clang-analyzer-osx.cocoa.NSError
    clang-analyzer-osx.cocoa.NilArg
    clang-analyzer-osx.cocoa.NonNilReturnValue
    clang-analyzer-osx.cocoa.ObjCGenerics
    clang-analyzer-osx.cocoa.RetainCount
    clang-analyzer-osx.cocoa.SelfInit
    clang-analyzer-osx.cocoa.SuperDealloc
    clang-analyzer-osx.cocoa.UnusedIvars
    clang-analyzer-osx.cocoa.VariadicMethodTypes
    clang-analyzer-osx.coreFoundation.CFError
    clang-analyzer-osx.coreFoundation.CFNumber
    clang-analyzer-osx.coreFoundation.CFRetainRelease
    clang-analyzer-osx.coreFoundation.containers.OutOfBounds
    clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
    clang-analyzer-security.FloatLoopCounter
    clang-analyzer-security.insecureAPI.UncheckedReturn
    clang-analyzer-security.insecureAPI.getpw
    clang-analyzer-security.insecureAPI.gets
    clang-analyzer-security.insecureAPI.mkstemp
    clang-analyzer-security.insecureAPI.mktemp
    clang-analyzer-security.insecureAPI.rand
    clang-analyzer-security.insecureAPI.strcpy
    clang-analyzer-security.insecureAPI.vfork
    clang-analyzer-unix.API
    clang-analyzer-unix.Malloc
    clang-analyzer-unix.MallocSizeof
    clang-analyzer-unix.MismatchedDeallocator
    clang-analyzer-unix.StdCLibraryFunctions
    clang-analyzer-unix.Vfork
    clang-analyzer-unix.cstring.BadSizeArg
    clang-analyzer-unix.cstring.NullArg
    clang-analyzer-valist.CopyToSelf
    clang-analyzer-valist.Uninitialized
    clang-analyzer-valist.Unterminated
    cppcoreguidelines-c-copy-assignment-signature
    cppcoreguidelines-interfaces-global-init
    cppcoreguidelines-no-malloc
    cppcoreguidelines-owning-memory
    cppcoreguidelines-pro-bounds-array-to-pointer-decay
    cppcoreguidelines-pro-bounds-constant-array-index
    cppcoreguidelines-pro-bounds-pointer-arithmetic
    cppcoreguidelines-pro-type-const-cast
    cppcoreguidelines-pro-type-cstyle-cast
    cppcoreguidelines-pro-type-member-init
    cppcoreguidelines-pro-type-reinterpret-cast
    cppcoreguidelines-pro-type-static-cast-downcast
    cppcoreguidelines-pro-type-union-access
    cppcoreguidelines-pro-type-vararg
    cppcoreguidelines-slicing
    cppcoreguidelines-special-member-functions
    fuchsia-default-arguments
    fuchsia-overloaded-operator
    fuchsia-virtual-inheritance
    google-build-explicit-make-pair
    google-build-namespaces
    google-build-using-namespace
    google-default-arguments
    google-explicit-constructor
    google-global-names-in-headers
    google-objc-avoid-throwing-exception
    google-objc-global-variable-declaration
    google-readability-braces-around-statements
    google-readability-casting
    google-readability-function-size
    google-readability-namespace-comments
    google-readability-redundant-smartptr-get
    google-readability-todo
    google-runtime-int
    google-runtime-member-string-references
    google-runtime-operator
    google-runtime-references
    hicpp-braces-around-statements
    hicpp-deprecated-headers
    hicpp-exception-baseclass
    hicpp-explicit-conversions
    hicpp-function-size
    hicpp-invalid-access-moved
    hicpp-member-init
    hicpp-move-const-arg
    hicpp-named-parameter
    hicpp-new-delete-operators
    hicpp-no-array-decay
    hicpp-no-assembler
    hicpp-no-malloc
    hicpp-noexcept-move
    hicpp-signed-bitwise
    hicpp-special-member-functions
    hicpp-static-assert
    hicpp-undelegated-constructor
    hicpp-use-auto
    hicpp-use-emplace
    hicpp-use-equals-default
    hicpp-use-equals-delete
    hicpp-use-noexcept
    hicpp-use-nullptr
    hicpp-use-override
    hicpp-vararg
    llvm-header-guard
    llvm-include-order
    llvm-namespace-comment
    llvm-twine-local
    misc-definitions-in-headers
    misc-forwarding-reference-overload
    misc-incorrect-roundings
    misc-lambda-function-name
    misc-macro-parentheses
    misc-macro-repeated-side-effects
    misc-misplaced-const
    misc-misplaced-widening-cast
    misc-new-delete-overloads
    misc-non-copyable-objects
    misc-redundant-expression
    misc-sizeof-container
    misc-sizeof-expression
    misc-static-assert
    misc-string-compare
    misc-string-integer-assignment
    misc-string-literal-with-embedded-nul
    misc-suspicious-enum-usage
    misc-suspicious-missing-comma
    misc-suspicious-semicolon
    misc-suspicious-string-compare
    misc-swapped-arguments
    misc-throw-by-value-catch-by-reference
    misc-unconventional-assign-operator
    misc-undelegated-constructor
    misc-uniqueptr-reset-release
    misc-unused-alias-decls
    misc-unused-parameters
    misc-unused-raii
    misc-unused-using-decls
    modernize-avoid-bind
    modernize-deprecated-headers
    modernize-loop-convert
    modernize-make-shared
    modernize-make-unique
    modernize-pass-by-value
    modernize-raw-string-literal
    modernize-redundant-void-arg
    modernize-replace-auto-ptr
    modernize-replace-random-shuffle
    modernize-return-braced-init-list
    modernize-shrink-to-fit
    modernize-unary-static-assert
    modernize-use-auto
    modernize-use-bool-literals
    modernize-use-default-member-init
    modernize-use-emplace
    modernize-use-equals-default
    modernize-use-equals-delete
    modernize-use-noexcept
    modernize-use-nullptr
    modernize-use-override
    modernize-use-transparent-functors
    modernize-use-using
    mpi-buffer-deref
    mpi-type-mismatch
    objc-avoid-nserror-init
    objc-avoid-spinlock
    objc-forbidden-subclassing
    objc-property-declaration
    performance-faster-string-find
    performance-for-range-copy
    performance-implicit-conversion-in-loop
    performance-inefficient-algorithm
    performance-inefficient-string-concatenation
    performance-inefficient-vector-operation
    performance-move-const-arg
    performance-move-constructor-init
    performance-noexcept-move-constructor
    performance-type-promotion-in-math-fn
    performance-unnecessary-copy-initialization
    performance-unnecessary-value-param
    readability-avoid-const-params-in-decls
    readability-braces-around-statements
    readability-container-size-empty
    readability-delete-null-pointer
    readability-deleted-default
    readability-else-after-return
    readability-function-size
    readability-identifier-naming
    readability-implicit-bool-conversion
    readability-inconsistent-declaration-parameter-name
    readability-misleading-indentation
    readability-misplaced-array-index
    readability-named-parameter
    readability-non-const-parameter
    readability-redundant-control-flow
    readability-redundant-declaration
    readability-redundant-function-ptr-dereference
    readability-redundant-member-init
    readability-redundant-smartptr-get
    readability-redundant-string-cstr
    readability-redundant-string-init
    readability-simplify-boolean-expr
    readability-static-accessed-through-instance
    readability-static-definition-in-anonymous-namespace
    readability-uniqueptr-delete-release

clang-apply-replacements version 6.0.0
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:13:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:16:7: warning: constructor does not initialize these fields: Attr [cppcoreguidelines-pro-type-member-init]
const struct {
      ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:70:2: warning: anonymous namespace not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:15:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:74:11: warning: invalid case style for function 'AttrTypeAsString' [readability-identifier-naming]
StringRef AttrTypeAsString(unsigned Attr, bool HasTagPrefix) {
          ^~~~~~~~~~~~~~~~~
          attrTypeAsString
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:78:11: warning: invalid case style for function 'AttrTypeAsString' [readability-identifier-naming]
StringRef AttrTypeAsString(AttrType Attr, bool HasTagPrefix) {
          ^~~~~~~~~~~~~~~~~
          attrTypeAsString
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:79:65: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  for (unsigned TI = 0, TE = sizeof(ARMAttributeTags) / sizeof(*ARMAttributeTags);
                                                                ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:80:23: warning: statement should be inside braces [google-readability-braces-around-statements]
       TI != TE; ++TI)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:81:9: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (ARMAttributeTags[TI].Attr == Attr) {
        ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:82:22: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      auto TagName = ARMAttributeTags[TI].TagName;
                     ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:88:5: warning: invalid case style for function 'AttrTypeFromString' [readability-identifier-naming]
int AttrTypeFromString(StringRef Tag) {
    ^~~~~~~~~~~~~~~~~~~
    attrTypeFromString
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:91:57: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                TE = sizeof(ARMAttributeTags) / sizeof(*ARMAttributeTags);
                                                        ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:93:20: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    auto TagName = ARMAttributeTags[TI].TagName;
                   ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:95:14: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      return ARMAttributeTags[TI].Attr;
             ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:100:2: warning: namespace 'ARMBuildAttrs' not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace ARMBuildAttrs
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:73:11: note: namespace 'ARMBuildAttrs' starts here
namespace ARMBuildAttrs {
          ^
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:101:2: warning: namespace 'llvm' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace llvm
/home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp:72:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/Allocator.cpp:32:6: warning: invalid case style for function 'PrintRecyclerStats' [readability-identifier-naming]
void PrintRecyclerStats(size_t Size,
     ^~~~~~~~~~~~~~~~~~~
     printRecyclerStats
/home/jonas/opt/llvm/lib/Support/Allocator.cpp:40:2: warning: namespace 'llvm' not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace llvm
/home/jonas/opt/llvm/lib/Support/Allocator.cpp:17:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:19:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:21:1: warning: constructor does not initialize these fields: IsUnsigned [cppcoreguidelines-pro-type-member-init]
APSInt::APSInt(StringRef Str) {
^
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:22:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!Str.empty() && "Invalid string length");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:29:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (MinBits > 0 && MinBits < NumBits)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:35:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ActiveBits > 0 && ActiveBits < NumBits)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:40:14: warning: invalid case style for function 'Profile' [readability-identifier-naming]
void APSInt::Profile(FoldingSetNodeID& ID) const {
             ^~~~~~~~
             profile
/home/jonas/opt/llvm/lib/Support/APSInt.cpp:41:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ID.AddInteger((unsigned) (IsUnsigned ? 1 : 0));
                ^~~~~~~~~~~~
                static_cast<unsigned>
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:16:31: warning: invalid case style for function 'SavedRegisterMask' [readability-identifier-naming]
std::pair<uint16_t, uint32_t> SavedRegisterMask(const RuntimeFunction &RF) {
                              ^~~~~~~~~~~~~~~~~~
                              savedRegisterMask
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:18:26: warning: implicit conversion bool -> 'uint8_t' (aka 'unsigned char') [readability-implicit-bool-conversion]
  uint8_t RegistersVFP = RF.R();
                         ^~    ~
                         static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:19:26: warning: implicit conversion bool -> 'uint8_t' (aka 'unsigned char') [readability-implicit-bool-conversion]
  uint8_t LinkRegister = RF.L();
                         ^~    ~
                         static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:20:26: warning: implicit conversion bool -> 'uint8_t' (aka 'unsigned char') [readability-implicit-bool-conversion]
  uint8_t ChainedFrame = RF.C();
                         ^~    ~
                         static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:22:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint16_t GPRMask = (ChainedFrame << 11) | (LinkRegister << 14);
                     ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:22:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint16_t GPRMask = (ChainedFrame << 11) | (LinkRegister << 14);
                      ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:22:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint16_t GPRMask = (ChainedFrame << 11) | (LinkRegister << 14);
                                             ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:25:7: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  if (RegistersVFP)
      ^           ~
                   != 0u
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:25:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (RegistersVFP)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:26:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    VFPMask |= (((1 << ((NumRegisters + 1) % 8)) - 1) << 8);
                ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:26:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    VFPMask |= (((1 << ((NumRegisters + 1) % 8)) - 1) << 8);
                  ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:27:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:28:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    GPRMask |= (((1 << (NumRegisters + 1)) - 1) << 4);
                ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:28:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    GPRMask |= (((1 << (NumRegisters + 1)) - 1) << 4);
                  ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:30:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (PrologueFolding(RF))
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:31:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    GPRMask |= (((1 << (NumRegisters + 1)) - 1) << (~RF.StackAdjust() & 0x3));
                ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:31:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    GPRMask |= (((1 << (NumRegisters + 1)) - 1) << (~RF.StackAdjust() & 0x3));
                  ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:31:53: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    GPRMask |= (((1 << (NumRegisters + 1)) - 1) << (~RF.StackAdjust() & 0x3));
                                                    ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:35:2: warning: namespace 'WinEH' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace WinEH
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:15:11: note: namespace 'WinEH' starts here
namespace WinEH {
          ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:36:2: warning: namespace 'ARM' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace ARM
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:14:11: note: namespace 'ARM' starts here
namespace ARM {
          ^
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:37:2: warning: namespace 'llvm' not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace llvm
/home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp:13:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamError.cpp:13:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:13:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:14:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::support;
^
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:66:2: warning: anonymous namespace not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:16:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:82:50: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = checkOffsetForRead(Offset, Size))
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:89:47: warning: statement should be inside braces [readability-braces-around-statements]
  if (auto EC = checkOffsetForRead(Offset, 1))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:93:81: warning: statement should be inside braces [google-readability-braces-around-statements]
          BorrowedImpl->readLongestContiguousChunk(ViewOffset + Offset, Buffer))
                                                                                ^
                                                                                 {
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:99:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Buffer.size() > MaxLength)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp:120:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = checkOffsetForWrite(Offset, Data.size()))
                                                         ^
                                                          {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/BinaryStreamReader.h:262:3: warning: function 'llvm::BinaryStreamReader::split' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  split(uint32_t Offset) const;
  ^              ~~~~~~~
                 Off
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:139:21: note: the definition seen here
BinaryStreamReader::split(uint32_t Off) const {
                    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/BinaryStreamReader.h:262:3: note: differing parameters are named here: ('Offset'), in definition: ('Off')
  split(uint32_t Offset) const;
  ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:15:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:18:40: warning: pass by value and use std::move [modernize-pass-by-value]
BinaryStreamReader::BinaryStreamReader(BinaryStreamRef Ref) : Stream(Ref) {}
                                       ^                             ~~~~
                                                                     std::move()
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:18:70: warning: parameter 'Ref' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
BinaryStreamReader::BinaryStreamReader(BinaryStreamRef Ref) : Stream(Ref) {}
                                                                     ^~~~
                                                                     std::move()
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:31:67: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = Stream.readLongestContiguousChunk(Offset, Buffer))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:38:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = Stream.readBytes(Offset, Size, Buffer))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:50:54: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (auto EC = readLongestContiguousChunk(Buffer))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:52:17: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    StringRef S(reinterpret_cast<const char *>(Buffer.begin()), Buffer.size());
                ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:53:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t Pos = S.find_first_of('\0');
                 ^
../include/llvm/ADT/StringRef.h:395:34: note: default parameter was declared here
    size_t find_first_of(char C, size_t From = 0) const {
                                 ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:59:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(FoundOffset >= OriginalOffset);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:64:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = readFixedString(Dest, Length))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:77:33: warning: statement should be inside braces [readability-braces-around-statements]
    if (auto EC = readObject(C))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:79:9: warning: Dereference of undefined pointer value [clang-analyzer-core.NullDereference]
    if (*C == 0x0000)
        ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:76:3: note: Loop condition is true.  Entering loop body
  while (true) {
  ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:77:5: note: Taking false branch
    if (auto EC = readObject(C))
    ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:79:9: note: Dereference of undefined pointer value
    if (*C == 0x0000)
        ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:79:22: warning: statement should be inside braces [readability-braces-around-statements]
    if (*C == 0x0000)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:86:41: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (auto EC = readArray(Dest, Length))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:94:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = readBytes(Bytes, Length))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:96:20: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  Dest = StringRef(reinterpret_cast<const char *>(Bytes.begin()), Bytes.size());
                   ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:105:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (bytesRemaining() < Length)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:119:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Amount > bytesRemaining())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:126:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  uint32_t NewOffset = alignTo(Offset, Align);
                       ^
../include/llvm/Support/MathExtras.h:685:57: note: default parameter was declared here
inline uint64_t alignTo(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:133:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!EC && "Cannot peek an empty buffer!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp:140:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(getLength() >= Off);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:19:1: warning: cannot overload 'operator*=' [fuchsia-overloaded-operator]
BlockFrequency &BlockFrequency::operator*=(BranchProbability Prob) {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:24:1: warning: cannot overload 'operator*' [fuchsia-overloaded-operator]
BlockFrequency BlockFrequency::operator*(BranchProbability Prob) const {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:30:1: warning: cannot overload 'operator/=' [fuchsia-overloaded-operator]
BlockFrequency &BlockFrequency::operator/=(BranchProbability Prob) {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:35:1: warning: cannot overload 'operator/' [fuchsia-overloaded-operator]
BlockFrequency BlockFrequency::operator/(BranchProbability Prob) const {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:41:1: warning: cannot overload 'operator+=' [fuchsia-overloaded-operator]
BlockFrequency &BlockFrequency::operator+=(BlockFrequency Freq) {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:46:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Frequency < Before)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:52:1: warning: cannot overload 'operator+' [fuchsia-overloaded-operator]
BlockFrequency BlockFrequency::operator+(BlockFrequency Freq) const {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:58:1: warning: cannot overload 'operator-=' [fuchsia-overloaded-operator]
BlockFrequency &BlockFrequency::operator-=(BlockFrequency Freq) {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:60:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Frequency <= Freq.Frequency)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:62:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:67:1: warning: cannot overload 'operator-' [fuchsia-overloaded-operator]
BlockFrequency BlockFrequency::operator-(BlockFrequency Freq) const {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:73:1: warning: cannot overload 'operator>>=' [fuchsia-overloaded-operator]
BlockFrequency &BlockFrequency::operator>>=(const unsigned count) {
^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:73:60: warning: invalid case style for parameter 'count' [readability-identifier-naming]
BlockFrequency &BlockFrequency::operator>>=(const unsigned count) {
                                                           ^~~~~~
                                                           Count
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:75:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Frequency != 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp:81:16: warning: implicit conversion bool -> 'unsigned long' [readability-implicit-bool-conversion]
  Frequency |= Frequency == 0;
               ^~~~~~~~~     ~
               static_cast<unsigned long>( )
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/BinaryStreamWriter.h:114:9: warning: function 'llvm::BinaryStreamWriter::writeStreamRef' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  Error writeStreamRef(BinaryStreamRef Ref, uint32_t Size);
        ^                                            ~~~~~
                                                     Length
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:53:27: note: the definition seen here
Error BinaryStreamWriter::writeStreamRef(BinaryStreamRef Ref, uint32_t Length) {
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/BinaryStreamWriter.h:114:9: note: differing parameters are named here: ('Size'), in definition: ('Length')
  Error writeStreamRef(BinaryStreamRef Ref, uint32_t Size);
        ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:18:40: warning: pass by value and use std::move [modernize-pass-by-value]
BinaryStreamWriter::BinaryStreamWriter(WritableBinaryStreamRef Ref)
                                       ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:19:14: warning: parameter 'Ref' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    : Stream(Ref) {}
             ^~~~
             std::move()
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:29:51: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = Stream.writeBytes(Offset, Buffer))
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:36:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = writeFixedString(Str))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:38:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = writeObject('\0'))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:49:58: warning: the parameter 'Ref' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
Error BinaryStreamWriter::writeStreamRef(BinaryStreamRef Ref) {
                                         ~~~~~~~~~~~~~~~ ^
                                         const &
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:53:58: warning: the parameter 'Ref' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
Error BinaryStreamWriter::writeStreamRef(BinaryStreamRef Ref, uint32_t Length) {
                                         ~~~~~~~~~~~~~~~ ^
                                         const &
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:62:63: warning: statement should be inside braces [readability-braces-around-statements]
    if (auto EC = SrcReader.readLongestContiguousChunk(Chunk))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:64:37: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (auto EC = writeBytes(Chunk))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:72:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(getLength() >= Off);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:84:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  uint32_t NewOffset = alignTo(Offset, Align);
                       ^
../include/llvm/Support/MathExtras.h:685:57: note: default parameter was declared here
inline uint64_t alignTo(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:85:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NewOffset > getLength())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:87:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (Offset < NewOffset)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp:88:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (auto EC = writeInteger('\0'))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:26:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isUnknown())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:31:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  double Percent = rint(((double)N / D) * 100.0 * 100.0) / 100.0;
                         ^~~~~~~~~
                         static_cast<double>()
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:41:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Denominator > 0 && "Denominator cannot be 0!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:42:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Numerator <= Denominator && "Probability cannot be bigger than 1!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:43:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Denominator == D)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:55:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Numerator <= Denominator && "Probability cannot be bigger than 1!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:62:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return BranchProbability(Numerator >> Scale, Denominator);
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~                      ~~
         {                                                }
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:62:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return BranchProbability(Numerator >> Scale, Denominator);
                           ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:70:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ConstD > 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:73:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(D && "divide by 0");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:76:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Num || D == N)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:80:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t ProductHigh = (Num >> 32) * N;
                          ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:84:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t Upper32 = ProductHigh >> 32;
                     ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:87:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t Mid32 = Mid32Partial + (ProductLow >> 32);
                                   ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:93:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Upper32 >= D)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:96:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t Rem = (uint64_t(Upper32) << 32) | Mid32;
                  ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:100:27: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (UpperQ > UINT32_MAX)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:103:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Rem = ((Rem % D) << 32) | Lower32;
         ^
/home/jonas/opt/llvm/lib/Support/BranchProbability.cpp:105:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t Q = (UpperQ << 32) + LowerQ;
                ^
/home/jonas/opt/llvm/lib/Support/circular_raw_ostream.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/circular_raw_ostream.cpp:30:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Cur += Bytes;
        ^
/home/jonas/opt/llvm/lib/Support/circular_raw_ostream.cpp:31:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Cur == BufferArray + BufferSize) {
                           ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::AMDGPU;
^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::AMDGPU::HSAMD;
^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:31:31: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, AccessQualifier &EN) {
                              ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:31:53: warning: non-const reference parameter 'EN', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, AccessQualifier &EN) {
                                                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:41:31: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, AddressSpaceQualifier &EN) {
                              ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:41:59: warning: non-const reference parameter 'EN', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, AddressSpaceQualifier &EN) {
                                                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:53:31: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, ValueKind &EN) {
                              ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:53:47: warning: non-const reference parameter 'EN', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, ValueKind &EN) {
                                              ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:74:31: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, ValueType &EN) {
                              ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:74:47: warning: non-const reference parameter 'EN', make it const or use a pointer [google-runtime-references]
  static void enumeration(IO &YIO, ValueType &EN) {
                                              ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:92:27: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::Attrs::Metadata &MD) {
                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:92:57: warning: non-const reference parameter 'MD', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::Attrs::Metadata &MD) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:93:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Attrs::Key::ReqdWorkGroupSize,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:95:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Attrs::Key::WorkGroupSizeHint,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:97:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Attrs::Key::VecTypeHint,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:99:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    YIO.mapOptional(Kernel::Attrs::Key::RuntimeHandle, MD.mRuntimeHandle,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:106:27: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::Arg::Metadata &MD) {
                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:106:55: warning: non-const reference parameter 'MD', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::Arg::Metadata &MD) {
                                                      ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:107:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::Name, MD.mName, std::string());
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:108:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::TypeName, MD.mTypeName, std::string());
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:109:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::Arg::Key::Size, MD.mSize);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:110:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::Arg::Key::Align, MD.mAlign);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:111:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::Arg::Key::ValueKind, MD.mValueKind);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:112:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::Arg::Key::ValueType, MD.mValueType);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:113:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    YIO.mapOptional(Kernel::Arg::Key::PointeeAlign, MD.mPointeeAlign,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:115:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::AddrSpaceQual, MD.mAddrSpaceQual,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:117:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::AccQual, MD.mAccQual,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:119:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::ActualAccQual, MD.mActualAccQual,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:121:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::IsConst, MD.mIsConst, false);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:122:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::IsRestrict, MD.mIsRestrict, false);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:123:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::IsVolatile, MD.mIsVolatile, false);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:124:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Arg::Key::IsPipe, MD.mIsPipe, false);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:130:27: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::CodeProps::Metadata &MD) {
                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:130:61: warning: non-const reference parameter 'MD', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::CodeProps::Metadata &MD) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:131:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::CodeProps::Key::KernargSegmentSize,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:133:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::CodeProps::Key::GroupSegmentFixedSize,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:135:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::CodeProps::Key::PrivateSegmentFixedSize,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:137:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::CodeProps::Key::KernargSegmentAlign,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:139:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::CodeProps::Key::WavefrontSize,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:141:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::NumSGPRs,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:143:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::NumVGPRs,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:145:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::MaxFlatWorkGroupSize,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:147:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::IsDynamicCallStack,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:149:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::IsXNACKEnabled,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:151:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::NumSpilledSGPRs,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:153:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::CodeProps::Key::NumSpilledVGPRs,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:160:27: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::DebugProps::Metadata &MD) {
                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:160:62: warning: non-const reference parameter 'MD', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::DebugProps::Metadata &MD) {
                                                             ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:161:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::DebugProps::Key::DebuggerABIVersion,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:163:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::DebugProps::Key::ReservedNumVGPRs,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:165:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::DebugProps::Key::ReservedFirstVGPR,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:167:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::DebugProps::Key::PrivateSegmentBufferSGPR,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:169:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    YIO.mapOptional(Kernel::DebugProps::Key::WavefrontPrivateSegmentOffsetSGPR,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:176:27: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::Metadata &MD) {
                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:176:50: warning: non-const reference parameter 'MD', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, Kernel::Metadata &MD) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:177:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::Key::Name, MD.mName);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:178:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapRequired(Kernel::Key::SymbolName, MD.mSymbolName);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:179:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Key::Language, MD.mLanguage, std::string());
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:180:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Kernel::Key::LanguageVersion, MD.mLanguageVersion,
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:182:49: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!MD.mAttrs.empty() || !YIO.outputting())
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:183:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      YIO.mapOptional(Kernel::Key::Attrs, MD.mAttrs);
                      ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:184:48: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!MD.mArgs.empty() || !YIO.outputting())
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:185:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      YIO.mapOptional(Kernel::Key::Args, MD.mArgs);
                      ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:186:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!MD.mCodeProps.empty() || !YIO.outputting())
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:187:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      YIO.mapOptional(Kernel::Key::CodeProps, MD.mCodeProps);
                      ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:188:54: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!MD.mDebugProps.empty() || !YIO.outputting())
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:189:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      YIO.mapOptional(Kernel::Key::DebugProps, MD.mDebugProps);
                      ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:195:27: warning: non-const reference parameter 'YIO', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, HSAMD::Metadata &MD) {
                          ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:195:49: warning: non-const reference parameter 'MD', make it const or use a pointer [google-runtime-references]
  static void mapping(IO &YIO, HSAMD::Metadata &MD) {
                                                ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:196:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    YIO.mapRequired(Key::Version, MD.mVersion);
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:197:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    YIO.mapOptional(Key::Printf, MD.mPrintf, std::vector<std::string>());
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:198:51: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!MD.mKernels.empty() || !YIO.outputting())
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:199:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      YIO.mapOptional(Key::Kernels, MD.mKernels);
                      ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:208:40: warning: the parameter 'String' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
std::error_code fromString(std::string String, Metadata &HSAMetadata) {
                           ~~~         ^
                           const      &
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:209:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  yaml::Input YamlInput(String);
              ^
../include/llvm/Support/YAMLTraits.h:1214:9: note: default parameter was declared here
        void *Ctxt = nullptr,
        ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:218:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:228:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    Stream << Twine(I == PALMetadata.begin() ? " 0x" : ",0x");
                    ^
/home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp:232:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:28:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:38:3: warning: cannot overload 'operator<' [fuchsia-overloaded-operator]
  bool operator<(const FileInfo &Other) const {
  ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:39:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Time < Other.Time)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:41:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else if (Other.Time < Time)
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:41:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (Other.Time < Time)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:43:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Other.Size < Size)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:45:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else if (Size < Other.Size)
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:45:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (Size < Other.Size)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:60:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Duration.empty())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:66:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NumStr.getAsInteger(0, Num))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:72:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return std::chrono::seconds(Num);
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:74:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return std::chrono::minutes(Num);
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:76:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return std::chrono::hours(Num);
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:95:26: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (!DurationOrErr)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:100:26: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!DurationOrErr)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:104:31: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Value.back() != '%')
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:107:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef SizeStr = Value.drop_back();
                          ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:109:41: warning: statement should be inside braces [readability-braces-around-statements]
      if (SizeStr.getAsInteger(0, Size))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:112:22: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Size > 100)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:122:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Value = Value.drop_back();
                ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:126:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Value = Value.drop_back();
                ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:130:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Value = Value.drop_back();
                ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:134:39: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Value.getAsInteger(0, Size))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:139:54: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Value.getAsInteger(0, Policy.MaxSizeFiles))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:148:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Policy;
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:153:3: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
  using namespace std::chrono;
  ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:155:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Path.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:158:8: warning: invalid case style for variable 'isPathDir' [readability-identifier-naming]
  bool isPathDir;
       ^~~~~~~~~~
       IsPathDir
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:159:46: warning: statement should be inside braces [readability-braces-around-statements]
  if (sys::fs::is_directory(Path, isPathDir))
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:162:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!isPathDir)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:178:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::path::append(TimestampFile, "llvmcache.timestamp");
  ^
../include/llvm/Support/Path.h:178:42: note: default parameter was declared here
                                         const Twine &b = "",
                                         ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:181:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (auto EC = sys::fs::status(TimestampFile, FileStatus)) {
                ^
../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:190:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (!Policy.Interval)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:218:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::path::native(Path, CachePathNative);
  ^
../include/llvm/Support/Path.h:210:13: note: default parameter was declared here
            Style style = Style::native);
            ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:220:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  for (sys::fs::directory_iterator File(CachePathNative, EC), FileEnd;
                                   ^
../include/llvm/Support/FileSystem.h:1179:31: note: default parameter was declared here
                              bool follow_symlinks = true)
                              ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:226:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (!sys::path::filename(File->path()).startswith("llvmcache-"))
         ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:226:69: warning: statement should be inside braces [readability-braces-around-statements]
    if (!sys::path::filename(File->path()).startswith("llvmcache-"))
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:244:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      sys::fs::remove(File->path());
      ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:258:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::fs::remove(FileInfo->Path);
    ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:269:7: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (Policy.MaxSizeFiles)
      ^                  ~
                          != 0u
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:269:27: warning: statement should be inside braces [readability-braces-around-statements]
  if (Policy.MaxSizeFiles)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:270:43: warning: statement should be inside braces [google-readability-braces-around-statements]
    while (NumFiles > Policy.MaxSizeFiles)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:277:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      report_fatal_error("Can't get available size");
      ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:282:55: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Policy.MaxSizePercentageOfAvailableSpace == 0)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:284:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Policy.MaxSizeBytes == 0)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/CachePruning.cpp:296:71: warning: statement should be inside braces [google-readability-braces-around-statements]
    while (TotalSize > TotalSizeTarget && FileInfo != FileInfos.end())
                                                                      ^
                                                                       {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Chrono.h:64:15: warning: function 'llvm::format_provider<std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long, std::ratio<1, 1000000000> > >, void>::format' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static void format(const sys::TimePoint<> &TP, llvm::raw_ostream &OS,
              ^                              ~~~
                                             T
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:54:36: note: the definition seen here
void format_provider<TimePoint<>>::format(const TimePoint<> &T, raw_ostream &OS,
                                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Chrono.h:64:15: note: differing parameters are named here: ('TP'), in definition: ('T')
  static void format(const sys::TimePoint<> &TP, llvm::raw_ostream &OS,
              ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sys;
^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:19:50: warning: invalid case style for variable 'value' [readability-identifier-naming]
const char llvm::detail::unit<std::ratio<3600>>::value[] = "h";
                                                 ^~~~~~
                                                 Value
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:20:48: warning: invalid case style for variable 'value' [readability-identifier-naming]
const char llvm::detail::unit<std::ratio<60>>::value[] = "m";
                                               ^~~~~~
                                               Value
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:21:47: warning: invalid case style for variable 'value' [readability-identifier-naming]
const char llvm::detail::unit<std::ratio<1>>::value[] = "s";
                                              ^~~~~~
                                              Value
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:22:44: warning: invalid case style for variable 'value' [readability-identifier-naming]
const char llvm::detail::unit<std::milli>::value[] = "ms";
                                           ^~~~~~
                                           Value
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:23:44: warning: invalid case style for variable 'value' [readability-identifier-naming]
const char llvm::detail::unit<std::micro>::value[] = "us";
                                           ^~~~~~
                                           Value
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:24:43: warning: invalid case style for variable 'value' [readability-identifier-naming]
const char llvm::detail::unit<std::nano>::value[] = "ns";
                                          ^~~~~~
                                          Value
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:27:3: warning: uninitialized record type: 'Storage' [cppcoreguidelines-pro-type-member-init]
  struct tm Storage;
  ^                ~
                   {}
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:32:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(LT);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:44:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &operator<<(raw_ostream &OS, TimePoint<> TP) {
^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:47:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  strftime(Buffer, sizeof(Buffer), "%Y-%m-%d %H:%M:%S", &LT);
           ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:48:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  return OS << Buffer << '.'
               ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:50:23: warning: consider replacing 'long' with 'int64' [google-runtime-int]
                      long((TP.time_since_epoch() % std::chrono::seconds(1))
                      ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:56:3: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
  using namespace std::chrono;
  ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:61:21: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Style.empty()) Style = "%Y-%m-%d %H:%M:%S.%N";
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:65:49: warning: statement should be inside braces [readability-braces-around-statements]
    if (Style[I] == '%' && Style.size() > I + 1) switch (Style[I + 1]) {
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:68:24: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
              "%.3lu", (long)duration_cast<milliseconds>(Fractional).count());
                       ^~~~~~~~~~~~~~~~~~~                                  ~
                       static_cast<long>(                                   )
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:68:25: warning: consider replacing 'long' with 'int64' [google-runtime-int]
              "%.3lu", (long)duration_cast<milliseconds>(Fractional).count());
                        ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:73:24: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
              "%.6lu", (long)duration_cast<microseconds>(Fractional).count());
                       ^~~~~~~~~~~~~~~~~~~                                  ~
                       static_cast<long>(                                   )
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:73:25: warning: consider replacing 'long' with 'int64' [google-runtime-int]
              "%.6lu", (long)duration_cast<microseconds>(Fractional).count());
                        ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:78:24: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
              "%.6lu", (long)duration_cast<nanoseconds>(Fractional).count());
                       ^~~~~~~~~~~~~~~~~~~                                 ~
                       static_cast<long>(                                  )
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:78:25: warning: consider replacing 'long' with 'int64' [google-runtime-int]
              "%.6lu", (long)duration_cast<nanoseconds>(Fractional).count());
                        ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:90:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  size_t Len = strftime(Buffer, sizeof(Buffer), Format.c_str(), &LT);
                        ^
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:91:10: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  OS << (Len ? Buffer : "BAD-DATE-FORMAT");
         ^
             != 0u
/home/jonas/opt/llvm/lib/Support/Chrono.cpp:91:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  OS << (Len ? Buffer : "BAD-DATE-FORMAT");
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:184:8: warning: function 'llvm::APInt::fromString' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void fromString(unsigned numBits, StringRef str, uint8_t radix);
       ^                   ~~~~~~~~
                           numbits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1953:13: note: the definition seen here
void APInt::fromString(unsigned numbits, StringRef str, uint8_t radix) {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:184:8: note: differing parameters are named here: ('numBits'), in definition: ('numbits')
  void fromString(unsigned numBits, StringRef str, uint8_t radix);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:200:8: warning: function 'llvm::APInt::initFromArray' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void initFromArray(ArrayRef<uint64_t> array);
       ^                                ~~~~~~
                                        bigVal
/home/jonas/opt/llvm/lib/Support/APInt.cpp:92:13: note: the definition seen here
void APInt::initFromArray(ArrayRef<uint64_t> bigVal) {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:200:8: note: differing parameters are named here: ('array'), in definition: ('bigVal')
  void initFromArray(ArrayRef<uint64_t> array);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:318:3: warning: function 'llvm::APInt::APInt' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  APInt(unsigned numBits, StringRef str, uint8_t radix);
  ^              ~~~~~~~~           ~~~~
                 numbits            Str
/home/jonas/opt/llvm/lib/Support/APInt.cpp:119:8: note: the definition seen here
APInt::APInt(unsigned numbits, StringRef Str, uint8_t radix)
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:318:3: note: differing parameters are named here: ('numBits', 'str'), in definition: ('numbits', 'Str')
  APInt(unsigned numBits, StringRef str, uint8_t radix);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:338:7: warning: Attempt to free released memory [clang-analyzer-cplusplus.NewDelete]
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1003:15: note: Calling 'rotateModulo'
  return rotr(rotateModulo(BitWidth, rotateAmt));
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Calling copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:323:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Calling 'getMemory'
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Returned allocated memory
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Returned allocated memory
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Returning from copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:982:3: note: Taking false branch
  if (rotBitWidth < BitWidth) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:3: note: Calling move assignment operator for 'APInt'
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:3: note: Returning; memory was released
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:988:38: note: Calling '~APInt'
  return rot.getLimitedValue(BitWidth);
                                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:337:5: note: Taking true branch
    if (needsCleanup())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:338:7: note: Attempt to free released memory
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:353:8: warning: function 'llvm::APInt::Profile' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void Profile(FoldingSetNodeID &id) const;
       ^                         ~~~
                                 ID
/home/jonas/opt/llvm/lib/Support/APInt.cpp:160:13: note: the definition seen here
void APInt::Profile(FoldingSetNodeID& ID) const {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:353:8: note: differing parameters are named here: ('id'), in definition: ('ID')
  void Profile(FoldingSetNodeID &id) const;
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: warning: Attempt to free released memory [clang-analyzer-cplusplus.NewDelete]
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1003:15: note: Calling 'rotateModulo'
  return rotr(rotateModulo(BitWidth, rotateAmt));
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Calling copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:323:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Calling 'getMemory'
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Returned allocated memory
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Returned allocated memory
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Returning from copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:982:3: note: Taking true branch
  if (rotBitWidth < BitWidth) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:985:5: note: Calling move assignment operator for 'APInt'
    rot = rotateAmt.zext(BitWidth);
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:985:5: note: Returning; memory was released
    rot = rotateAmt.zext(BitWidth);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:3: note: Calling move assignment operator for 'APInt'
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Attempt to free released memory
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:780:17: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
      U.pVal[0] = RHS;
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1754:3: note: Calling 'APInt::reallocate'
  Quotient.reallocate(BitWidth);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:127:3: note: Taking false branch
  if (getNumWords() == getNumWords(NewBitWidth)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:133:3: note: Taking false branch
  if (!isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:140:3: note: Taking true branch
  if (!isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:141:14: note: Calling 'getMemory'
    U.pVal = getMemory(getNumWords());
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:141:14: note: Returned allocated memory
    U.pVal = getMemory(getNumWords());
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1754:3: note: Returned allocated memory
  Quotient.reallocate(BitWidth);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:7: note: Assuming 'lhsWords' is not equal to 1
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:3: note: Taking false branch
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Returned allocated memory
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:27: note: Left side of '||' is true
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1740:5: note: Calling move assignment operator for 'APInt'
    Quotient = APInt(BitWidth, 0);    // X / Y ===> 0, iff X < Y
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1740:5: note: Returning; memory was released
    Quotient = APInt(BitWidth, 0);    // X / Y ===> 0, iff X < Y
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Returning; memory was released
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:7: note: Assuming 'lhsWords' is equal to 1
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:3: note: Taking true branch
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1761:5: note: Calling 'APInt::operator='
    Quotient = lhsValue / rhsValue;
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:776:5: note: Taking false branch
    if (isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:780:17: note: Use of memory after it is freed
      U.pVal[0] = RHS;
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:923:10: warning: function 'llvm::APInt::operator<<=' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  APInt &operator<<=(const APInt &ShiftAmt);
         ^                        ~~~~~~~~~
                                  shiftAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:967:15: note: the definition seen here
APInt &APInt::operator<<=(const APInt &shiftAmt) {
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:923:10: note: differing parameters are named here: ('ShiftAmt'), in definition: ('shiftAmt')
  APInt &operator<<=(const APInt &ShiftAmt);
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1027:8: warning: function 'llvm::APInt::lshrInPlace' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void lshrInPlace(const APInt &ShiftAmt);
       ^                        ~~~~~~~~~
                                shiftAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:955:13: note: the definition seen here
void APInt::lshrInPlace(const APInt &shiftAmt) {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1027:8: note: differing parameters are named here: ('ShiftAmt'), in definition: ('shiftAmt')
  void lshrInPlace(const APInt &ShiftAmt);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1105:9: warning: function 'llvm::APInt::sshl_ov' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  APInt sshl_ov(const APInt &Amt, bool &Overflow) const;
        ^                    ~~~~
                             ShAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1927:14: note: the definition seen here
APInt APInt::sshl_ov(const APInt &ShAmt, bool &Overflow) const {
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1105:9: note: differing parameters are named here: ('Amt'), in definition: ('ShAmt')
  APInt sshl_ov(const APInt &Amt, bool &Overflow) const;
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1106:9: warning: function 'llvm::APInt::ushl_ov' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  APInt ushl_ov(const APInt &Amt, bool &Overflow) const;
        ^                    ~~~~
                             ShAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1940:14: note: the definition seen here
APInt APInt::ushl_ov(const APInt &ShAmt, bool &Overflow) const {
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1106:9: note: differing parameters are named here: ('Amt'), in definition: ('ShAmt')
  APInt ushl_ov(const APInt &Amt, bool &Overflow) const;
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1346:9: warning: function 'llvm::APInt::sext' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  APInt sext(unsigned width) const;
        ^             ~~~~~~
                      Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:834:14: note: the definition seen here
APInt APInt::sext(unsigned Width) const {
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1346:9: note: differing parameters are named here: ('width'), in definition: ('Width')
  APInt sext(unsigned width) const;
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1493:8: warning: function 'llvm::APInt::insertBits' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void insertBits(const APInt &SubBits, unsigned bitPosition);
       ^                       ~~~~~~~~
                               subBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:346:13: note: the definition seen here
void APInt::insertBits(const APInt &subBits, unsigned bitPosition) {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1493:8: note: differing parameters are named here: ('SubBits'), in definition: ('subBits')
  void insertBits(const APInt &SubBits, unsigned bitPosition);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1561:12: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
    return U.pVal[0];
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1003:15: note: Calling 'rotateModulo'
  return rotr(rotateModulo(BitWidth, rotateAmt));
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Calling copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:323:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Calling 'getMemory'
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Returned allocated memory
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Returned allocated memory
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Returning from copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:982:3: note: Taking false branch
  if (rotBitWidth < BitWidth) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:3: note: Calling move assignment operator for 'APInt'
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:3: note: Returning; memory was released
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:988:10: note: Calling 'APInt::getLimitedValue'
  return rot.getLimitedValue(BitWidth);
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:483:12: note: Calling 'APInt::ugt'
    return ugt(Limit) ? Limit : getZExtValue();
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1259:13: note: Left side of '&&' is true
    return (!isSingleWord() && getActiveBits() > 64) || getZExtValue() > RHS;
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1259:12: note: Left side of '||' is false
    return (!isSingleWord() && getActiveBits() > 64) || getZExtValue() > RHS;
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1259:57: note: Calling 'APInt::getZExtValue'
    return (!isSingleWord() && getActiveBits() > 64) || getZExtValue() > RHS;
                                                        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1558:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1561:12: note: Use of memory after it is freed
    return U.pVal[0];
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1861:19: warning: function 'llvm::APInt::tcAdd' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static WordType tcAdd(WordType *, const WordType *,
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2286:24: note: the definition seen here
APInt::WordType APInt::tcAdd(WordType *dst, const WordType *rhs,
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1861:19: note: differing parameters are named here: ('carry'), in definition: ('c')
  static WordType tcAdd(WordType *, const WordType *,
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1867:19: warning: function 'llvm::APInt::tcSubtract' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static WordType tcSubtract(WordType *, const WordType *,
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2321:24: note: the definition seen here
APInt::WordType APInt::tcSubtract(WordType *dst, const WordType *rhs,
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1867:19: note: differing parameters are named here: ('carry'), in definition: ('c')
  static WordType tcSubtract(WordType *, const WordType *,
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1908:14: warning: function 'llvm::APInt::tcDivide' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static int tcDivide(WordType *lhs, const WordType *rhs,
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2506:12: note: the definition seen here
int APInt::tcDivide(WordType *lhs, const WordType *rhs,
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1908:14: note: differing parameters are named here: ('scratch'), in definition: ('srhs')
  static int tcDivide(WordType *lhs, const WordType *rhs,
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:32:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:38:51: warning: invalid case style for parameter 'numWords' [readability-identifier-naming]
inline static uint64_t* getClearedMemory(unsigned numWords) {
                                                  ^~~~~~~~~
                                                  NumWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:3: warning: initializing non-owner 'uint64_t *' (aka 'unsigned long *') with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  uint64_t *result = new uint64_t[numWords];
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:3: warning: use auto when initializing with new to avoid duplicating the type name [hicpp-use-auto]
  uint64_t *result = new uint64_t[numWords];
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:13: warning: invalid case style for variable 'result' [readability-identifier-naming]
  uint64_t *result = new uint64_t[numWords];
            ^~~~~~
            Result
/home/jonas/opt/llvm/lib/Support/APInt.cpp:46:44: warning: invalid case style for parameter 'numWords' [readability-identifier-naming]
inline static uint64_t* getMemory(unsigned numWords) {
                                           ^~~~~~~~~
                                           NumWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:3: warning: returning a newly created resource of type 'uint64_t *' (aka 'unsigned long *') or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  return new uint64_t[numWords];
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:51:38: warning: invalid case style for parameter 'cdigit' [readability-identifier-naming]
inline static unsigned getDigit(char cdigit, uint8_t radix) {
                                     ^~~~~~~
                                     Cdigit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:51:54: warning: invalid case style for parameter 'radix' [readability-identifier-naming]
inline static unsigned getDigit(char cdigit, uint8_t radix) {
                                                     ^~~~~~
                                                     Radix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:52:12: warning: invalid case style for variable 'r' [readability-identifier-naming]
  unsigned r;
           ^~
           R
/home/jonas/opt/llvm/lib/Support/APInt.cpp:56:16: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (r <= 9)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:60:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (r <= radix - 11U)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:64:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (r <= radix - 11U)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:71:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (r < radix)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:78:35: warning: invalid case style for parameter 'val' [readability-identifier-naming]
void APInt::initSlowCase(uint64_t val, bool isSigned) {
                                  ^~~~
                                  Val
/home/jonas/opt/llvm/lib/Support/APInt.cpp:78:45: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
void APInt::initSlowCase(uint64_t val, bool isSigned) {
                                            ^~~~~~~~~
                                            IsSigned
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:5: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  U.pVal = getClearedMemory(getNumWords());
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:80:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  U.pVal[0] = val;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:80:5: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  U.pVal[0] = val;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:80:13: warning: Use of zero-allocated memory [clang-analyzer-cplusplus.NewDelete]
  U.pVal[0] = val;
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2775:15: note: Calling 'APInt::urem'
    APInt T = V.abs().urem(A);
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1615:3: note: Taking false branch
  if (isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1629:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0)
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1629:3: note: Taking false branch
  if (lhsWords == 0)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1632:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1)
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1632:3: note: Taking false branch
  if (rhsBits == 1)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1635:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || this->ult(RHS))
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1635:3: note: Taking false branch
  if (lhsWords < rhsWords || this->ult(RHS))
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1638:3: note: Taking false branch
  if (*this == RHS)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1641:7: note: Assuming 'lhsWords' is not equal to 1
  if (lhsWords == 1)
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1641:3: note: Taking false branch
  if (lhsWords == 1)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1646:9: note: Calling constructor for 'APInt'
  APInt Remainder(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:281:5: note: Taking false branch
    if (isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Calling 'getClearedMemory'
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:22: note: Memory is allocated
  uint64_t *result = new uint64_t[numWords];
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Returned allocated memory
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:80:13: note: Use of zero-allocated memory
  U.pVal[0] = val;
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:81:36: warning: statement should be inside braces [readability-braces-around-statements]
  if (isSigned && int64_t(val) < 0)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:82:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 1; i < getNumWords(); ++i)
                  ^      ~                    ~~
                  I      I                    I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:82:49: warning: statement should be inside braces [readability-braces-around-statements]
    for (unsigned i = 1; i < getNumWords(); ++i)
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:83:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[i] = WORDTYPE_MAX;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:83:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[i] = WORDTYPE_MAX;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:87:39: warning: invalid case style for parameter 'that' [readability-identifier-naming]
void APInt::initSlowCase(const APInt& that) {
                                      ^~~~~
                                      That
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:5: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  U.pVal = getMemory(getNumWords());
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:89:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  memcpy(U.pVal, that.U.pVal, getNumWords() * APINT_WORD_SIZE);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:89:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  memcpy(U.pVal, that.U.pVal, getNumWords() * APINT_WORD_SIZE);
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:92:46: warning: invalid case style for parameter 'bigVal' [readability-identifier-naming]
void APInt::initFromArray(ArrayRef<uint64_t> bigVal) {
                                             ^~~~~~~
                                             BigVal
/home/jonas/opt/llvm/lib/Support/APInt.cpp:93:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth && "Bitwidth too small");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:94:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(bigVal.data() && "Null pointer detected!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:95:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:96:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL = bigVal[0];
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:99:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal = getClearedMemory(getNumWords());
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:101:14: warning: invalid case style for variable 'words' [readability-identifier-naming]
    unsigned words = std::min<unsigned>(bigVal.size(), getNumWords());
             ^~~~~
             Words
/home/jonas/opt/llvm/lib/Support/APInt.cpp:103:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    memcpy(U.pVal, bigVal.data(), words * APINT_WORD_SIZE);
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:109:1: warning: constructor does not initialize these fields: U [cppcoreguidelines-pro-type-member-init]
APInt::APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:109:23: warning: invalid case style for parameter 'numBits' [readability-identifier-naming]
APInt::APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)
                      ^~~~~~~~
                      NumBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:109:51: warning: invalid case style for parameter 'bigVal' [readability-identifier-naming]
APInt::APInt(unsigned numBits, ArrayRef<uint64_t> bigVal)
                                                  ^~~~~~~
                                                  BigVal
/home/jonas/opt/llvm/lib/Support/APInt.cpp:114:1: warning: constructor does not initialize these fields: U [cppcoreguidelines-pro-type-member-init]
APInt::APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:114:23: warning: invalid case style for parameter 'numBits' [readability-identifier-naming]
APInt::APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])
                      ^~~~~~~~
                      NumBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:114:41: warning: invalid case style for parameter 'numWords' [readability-identifier-naming]
APInt::APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])
                                        ^~~~~~~~~
                                        NumWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:114:66: warning: invalid case style for parameter 'bigVal' [readability-identifier-naming]
APInt::APInt(unsigned numBits, unsigned numWords, const uint64_t bigVal[])
                                                                 ^~~~~~~
                                                                 BigVal
/home/jonas/opt/llvm/lib/Support/APInt.cpp:119:1: warning: constructor does not initialize these fields: U [cppcoreguidelines-pro-type-member-init]
APInt::APInt(unsigned numbits, StringRef Str, uint8_t radix)
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:119:23: warning: invalid case style for parameter 'numbits' [readability-identifier-naming]
APInt::APInt(unsigned numbits, StringRef Str, uint8_t radix)
                      ^~~~~~~~
                      Numbits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:119:55: warning: invalid case style for parameter 'radix' [readability-identifier-naming]
APInt::APInt(unsigned numbits, StringRef Str, uint8_t radix)
                                                      ^~~~~~
                                                      Radix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:121:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth && "Bitwidth too small");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:133:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (!isSingleWord())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:134:5: warning: Attempt to free released memory [clang-analyzer-cplusplus.NewDelete]
    delete [] U.pVal;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1112:9: note: Calling constructor for 'APInt'
  APInt q(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:281:5: note: Taking false branch
    if (isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Calling 'getClearedMemory'
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:22: note: Memory is allocated
  uint64_t *result = new uint64_t[numWords];
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Returned allocated memory
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:81:16: note: Left side of '&&' is false
  if (isSigned && int64_t(val) < 0)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Returned allocated memory
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1112:9: note: Returning from constructor for 'APInt'
  APInt q(BitWidth, 0);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking true branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1745:5: note: Calling move assignment operator for 'APInt'
    Quotient  = APInt(BitWidth, 1);   // X / X ===> 1
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1745:5: note: Returning; memory was released
    Quotient  = APInt(BitWidth, 1);   // X / X ===> 1
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Returning; memory was released
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1754:3: note: Calling 'APInt::reallocate'
  Quotient.reallocate(BitWidth);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:127:3: note: Taking false branch
  if (getNumWords() == getNumWords(NewBitWidth)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:133:3: note: Taking true branch
  if (!isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:134:5: note: Attempt to free released memory
    delete [] U.pVal;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:134:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    delete [] U.pVal;
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:140:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!isSingleWord())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:141:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal = getMemory(getNumWords());
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:144:13: warning: invalid case style for function 'AssignSlowCase' [readability-identifier-naming]
void APInt::AssignSlowCase(const APInt& RHS) {
            ^~~~~~~~~~~~~~~
            assignSlowCase
/home/jonas/opt/llvm/lib/Support/APInt.cpp:146:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (this == &RHS)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:153:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:154:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL = RHS.U.VAL;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:154:19: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL = RHS.U.VAL;
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:155:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:156:5: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
    memcpy(U.pVal, RHS.U.pVal, getNumWords() * APINT_WORD_SIZE);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1027:7: note: Assuming 'magnitude' is > 5
  if (magnitude <= 5) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1027:3: note: Taking false branch
  if (magnitude <= 5) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1044:7: note: Assuming 'magnitude' is >= 52
  if (magnitude < 52) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1044:3: note: Taking false branch
  if (magnitude < 52) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1058:9: note: Calling constructor for 'APInt'
  APInt x_new(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:281:5: note: Taking false branch
    if (isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Calling 'getClearedMemory'
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:22: note: Memory is allocated
  uint64_t *result = new uint64_t[numWords];
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Returned allocated memory
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:81:16: note: Left side of '&&' is false
  if (isSigned && int64_t(val) < 0)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Returned allocated memory
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1058:9: note: Returning from constructor for 'APInt'
  APInt x_new(BitWidth, 0);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1062:3: note: Loop condition is true.  Entering loop body
  for (;; i += 2, testy = testy.shl(2))
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1063:9: note: Left side of '||' is false
    if (i >= nbits || this->ule(testy)) {
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1063:5: note: Taking true branch
    if (i >= nbits || this->ule(testy)) {
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1065:7: note:  Execution continues on line 1069
      break;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1069:3: note: Loop condition is true.  Entering loop body
  for (;;) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1070:5: note: Calling move assignment operator for 'APInt'
    x_new = (this->udiv(x_old) + x_old).udiv(two);
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1070:5: note: Returning; memory was released
    x_new = (this->udiv(x_old) + x_old).udiv(two);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1071:5: note: Taking false branch
    if (x_old.ule(x_new))
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1073:5: note: Calling copy assignment operator for 'APInt'
    x_old = x_new;
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:737:9: note: Left side of '&&' is true
    if (isSingleWord() && RHS.isSingleWord()) {
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:737:5: note: Taking false branch
    if (isSingleWord() && RHS.isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:743:5: note: Calling 'APInt::AssignSlowCase'
    AssignSlowCase(RHS);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:146:3: note: Taking false branch
  if (this == &RHS)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:153:3: note: Taking false branch
  if (isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:156:5: note: Use of memory after it is freed
    memcpy(U.pVal, RHS.U.pVal, getNumWords() * APINT_WORD_SIZE);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:156:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    memcpy(U.pVal, RHS.U.pVal, getNumWords() * APINT_WORD_SIZE);
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:156:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    memcpy(U.pVal, RHS.U.pVal, getNumWords() * APINT_WORD_SIZE);
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:160:13: warning: invalid case style for function 'Profile' [readability-identifier-naming]
void APInt::Profile(FoldingSetNodeID& ID) const {
            ^~~~~~~~
            profile
/home/jonas/opt/llvm/lib/Support/APInt.cpp:164:21: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    ID.AddInteger(U.VAL);
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:169:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < NumWords; ++i)
                ^      ~               ~~
                I      I               I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:169:42: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (unsigned i = 0; i < NumWords; ++i)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:170:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ID.AddInteger(U.pVal[i]);
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:170:21: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    ID.AddInteger(U.pVal[i]);
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:174:1: warning: cannot overload 'operator++' [fuchsia-overloaded-operator]
APInt& APInt::operator++() {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:175:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:176:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    ++U.VAL;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:177:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:178:19: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcIncrement(U.pVal, getNumWords());
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:183:1: warning: cannot overload 'operator--' [fuchsia-overloaded-operator]
APInt& APInt::operator--() {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:184:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:185:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    --U.VAL;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:186:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:187:19: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcDecrement(U.pVal, getNumWords());
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:194:1: warning: cannot overload 'operator+=' [fuchsia-overloaded-operator]
APInt& APInt::operator+=(const APInt& RHS) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:195:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:196:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:197:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL += RHS.U.VAL;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:197:20: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL += RHS.U.VAL;
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:198:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:199:5: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
    tcAdd(U.pVal, RHS.U.pVal, 0, getNumWords());
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1027:7: note: Assuming 'magnitude' is > 5
  if (magnitude <= 5) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1027:3: note: Taking false branch
  if (magnitude <= 5) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1044:7: note: Assuming 'magnitude' is >= 52
  if (magnitude < 52) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1044:3: note: Taking false branch
  if (magnitude < 52) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1057:9: note: Calling constructor for 'APInt'
  APInt x_old(BitWidth, 1);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:281:5: note: Taking false branch
    if (isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Calling 'getClearedMemory'
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:22: note: Memory is allocated
  uint64_t *result = new uint64_t[numWords];
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Returned allocated memory
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:81:16: note: Left side of '&&' is false
  if (isSigned && int64_t(val) < 0)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Returned allocated memory
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1057:9: note: Returning from constructor for 'APInt'
  APInt x_old(BitWidth, 1);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1062:3: note: Loop condition is true.  Entering loop body
  for (;; i += 2, testy = testy.shl(2))
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1063:9: note: Left side of '||' is false
    if (i >= nbits || this->ule(testy)) {
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1063:5: note: Taking true branch
    if (i >= nbits || this->ule(testy)) {
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1064:7: note: Calling move assignment operator for 'APInt'
      x_old = x_old.shl(i / 2);
      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1064:7: note: Returning; memory was released
      x_old = x_old.shl(i / 2);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1065:7: note:  Execution continues on line 1069
      break;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1069:3: note: Loop condition is true.  Entering loop body
  for (;;) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1070:14: note: Calling 'operator+'
    x_new = (this->udiv(x_old) + x_old).udiv(two);
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:2044:3: note: Calling 'APInt::operator+='
  a += b;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:196:3: note: Taking false branch
  if (isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:199:5: note: Use of memory after it is freed
    tcAdd(U.pVal, RHS.U.pVal, 0, getNumWords());
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:199:13: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcAdd(U.pVal, RHS.U.pVal, 0, getNumWords());
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:199:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcAdd(U.pVal, RHS.U.pVal, 0, getNumWords());
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:203:1: warning: cannot overload 'operator+=' [fuchsia-overloaded-operator]
APInt& APInt::operator+=(uint64_t RHS) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:204:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:205:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL += RHS;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:206:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:207:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcAddPart(U.pVal, RHS, getNumWords());
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:214:1: warning: cannot overload 'operator-=' [fuchsia-overloaded-operator]
APInt& APInt::operator-=(const APInt& RHS) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:215:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:216:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:217:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL -= RHS.U.VAL;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:217:20: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL -= RHS.U.VAL;
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:218:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:219:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcSubtract(U.pVal, RHS.U.pVal, 0, getNumWords());
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:219:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcSubtract(U.pVal, RHS.U.pVal, 0, getNumWords());
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:223:1: warning: cannot overload 'operator-=' [fuchsia-overloaded-operator]
APInt& APInt::operator-=(uint64_t RHS) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:224:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:225:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL -= RHS;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:226:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:227:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcSubtractPart(U.pVal, RHS, getNumWords());
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:231:1: warning: cannot overload 'operator*' [fuchsia-overloaded-operator]
APInt APInt::operator*(const APInt& RHS) const {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:232:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:233:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:234:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, U.VAL * RHS.U.VAL);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:234:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL * RHS.U.VAL);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:234:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL * RHS.U.VAL);
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:238:3: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
  tcMultiply(Result.U.pVal, U.pVal, RHS.U.pVal, getNumWords());
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1112:9: note: Calling constructor for 'APInt'
  APInt q(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:281:5: note: Taking false branch
    if (isSingleWord()) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Calling 'getClearedMemory'
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:39:22: note: Memory is allocated
  uint64_t *result = new uint64_t[numWords];
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:79:12: note: Returned allocated memory
  U.pVal = getClearedMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:81:16: note: Left side of '&&' is false
  if (isSigned && int64_t(val) < 0)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:285:7: note: Returned allocated memory
      initSlowCase(val, isSigned);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1112:9: note: Returning from constructor for 'APInt'
  APInt q(BitWidth, 0);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking true branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1745:5: note: Calling move assignment operator for 'APInt'
    Quotient  = APInt(BitWidth, 1);   // X / X ===> 1
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1745:5: note: Returning; memory was released
    Quotient  = APInt(BitWidth, 1);   // X / X ===> 1
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Returning; memory was released
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1121:13: note: Calling 'APInt::operator*'
    t[i] -= t[i^1] * q;
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:233:3: note: Taking false branch
  if (isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:238:3: note: Use of memory after it is freed
  tcMultiply(Result.U.pVal, U.pVal, RHS.U.pVal, getNumWords());
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:238:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcMultiply(Result.U.pVal, U.pVal, RHS.U.pVal, getNumWords());
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:238:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcMultiply(Result.U.pVal, U.pVal, RHS.U.pVal, getNumWords());
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:238:43: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcMultiply(Result.U.pVal, U.pVal, RHS.U.pVal, getNumWords());
                                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:244:13: warning: invalid case style for function 'AndAssignSlowCase' [readability-identifier-naming]
void APInt::AndAssignSlowCase(const APInt& RHS) {
            ^~~~~~~~~~~~~~~~~~
            andAssignSlowCase
/home/jonas/opt/llvm/lib/Support/APInt.cpp:245:11: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcAnd(U.pVal, RHS.U.pVal, getNumWords());
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:245:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcAnd(U.pVal, RHS.U.pVal, getNumWords());
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:248:13: warning: invalid case style for function 'OrAssignSlowCase' [readability-identifier-naming]
void APInt::OrAssignSlowCase(const APInt& RHS) {
            ^~~~~~~~~~~~~~~~~
            orAssignSlowCase
/home/jonas/opt/llvm/lib/Support/APInt.cpp:249:10: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcOr(U.pVal, RHS.U.pVal, getNumWords());
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:249:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcOr(U.pVal, RHS.U.pVal, getNumWords());
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:252:13: warning: invalid case style for function 'XorAssignSlowCase' [readability-identifier-naming]
void APInt::XorAssignSlowCase(const APInt& RHS) {
            ^~~~~~~~~~~~~~~~~~
            xorAssignSlowCase
/home/jonas/opt/llvm/lib/Support/APInt.cpp:253:11: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcXor(U.pVal, RHS.U.pVal, getNumWords());
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:253:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcXor(U.pVal, RHS.U.pVal, getNumWords());
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:256:1: warning: cannot overload 'operator*=' [fuchsia-overloaded-operator]
APInt& APInt::operator*=(const APInt& RHS) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:257:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:262:1: warning: cannot overload 'operator*=' [fuchsia-overloaded-operator]
APInt& APInt::operator*=(uint64_t RHS) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:264:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL *= RHS;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:267:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcMultiplyPart(U.pVal, U.pVal, RHS, 0, NumWords, NumWords, false);
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:267:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    tcMultiplyPart(U.pVal, U.pVal, RHS, 0, NumWords, NumWords, false);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:272:13: warning: invalid case style for function 'EqualSlowCase' [readability-identifier-naming]
bool APInt::EqualSlowCase(const APInt& RHS) const {
            ^~~~~~~~~~~~~~
            equalSlowCase
/home/jonas/opt/llvm/lib/Support/APInt.cpp:273:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return std::equal(U.pVal, U.pVal + getNumWords(), RHS.U.pVal);
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:273:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return std::equal(U.pVal, U.pVal + getNumWords(), RHS.U.pVal);
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:273:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return std::equal(U.pVal, U.pVal + getNumWords(), RHS.U.pVal);
                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:273:59: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return std::equal(U.pVal, U.pVal + getNumWords(), RHS.U.pVal);
                                                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:277:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be same for comparison");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:278:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:279:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.VAL < RHS.U.VAL ? -1 : U.VAL > RHS.U.VAL;
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:279:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.VAL < RHS.U.VAL ? -1 : U.VAL > RHS.U.VAL;
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:279:37: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    return U.VAL < RHS.U.VAL ? -1 : U.VAL > RHS.U.VAL;
                                    ^                ~
                                    static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:279:39: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.VAL < RHS.U.VAL ? -1 : U.VAL > RHS.U.VAL;
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:279:51: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.VAL < RHS.U.VAL ? -1 : U.VAL > RHS.U.VAL;
                                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:281:10: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
  return tcCompare(U.pVal, RHS.U.pVal, getNumWords());
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1003:15: note: Calling 'rotateModulo'
  return rotr(rotateModulo(BitWidth, rotateAmt));
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Calling copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:323:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Calling 'getMemory'
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Returned allocated memory
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Returned allocated memory
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:15: note: Returning from copy constructor for 'APInt'
  APInt rot = rotateAmt;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:982:3: note: Taking true branch
  if (rotBitWidth < BitWidth) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:985:5: note: Calling move assignment operator for 'APInt'
    rot = rotateAmt.zext(BitWidth);
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:985:5: note: Returning; memory was released
    rot = rotateAmt.zext(BitWidth);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:9: note: Calling 'APInt::urem'
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1615:3: note: Taking false branch
  if (isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1629:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0)
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1629:3: note: Taking false branch
  if (lhsWords == 0)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1632:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1)
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1632:3: note: Taking false branch
  if (rhsBits == 1)
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1635:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || this->ult(RHS))
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1635:30: note: Calling 'APInt::ult'
  if (lhsWords < rhsWords || this->ult(RHS))
                             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1179:45: note: Calling 'APInt::compare'
  bool ult(const APInt &RHS) const { return compare(RHS) < 0; }
                                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:278:3: note: Taking false branch
  if (isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:281:10: note: Use of memory after it is freed
  return tcCompare(U.pVal, RHS.U.pVal, getNumWords());
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:281:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return tcCompare(U.pVal, RHS.U.pVal, getNumWords());
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:281:34: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return tcCompare(U.pVal, RHS.U.pVal, getNumWords());
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:285:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be same for comparison");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:287:13: warning: invalid case style for variable 'lhsSext' [readability-identifier-naming]
    int64_t lhsSext = SignExtend64(U.VAL, BitWidth);
            ^~~~~~~
            LhsSext
/home/jonas/opt/llvm/lib/Support/APInt.cpp:287:38: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    int64_t lhsSext = SignExtend64(U.VAL, BitWidth);
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:288:13: warning: invalid case style for variable 'rhsSext' [readability-identifier-naming]
    int64_t rhsSext = SignExtend64(RHS.U.VAL, BitWidth);
            ^~~~~~~
            RhsSext
/home/jonas/opt/llvm/lib/Support/APInt.cpp:288:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    int64_t rhsSext = SignExtend64(RHS.U.VAL, BitWidth);
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:289:37: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    return lhsSext < rhsSext ? -1 : lhsSext > rhsSext;
                                    ^~~~~~~          ~
                                    static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:292:8: warning: invalid case style for variable 'lhsNeg' [readability-identifier-naming]
  bool lhsNeg = isNegative();
       ^~~~~~
       LhsNeg
/home/jonas/opt/llvm/lib/Support/APInt.cpp:293:8: warning: invalid case style for variable 'rhsNeg' [readability-identifier-naming]
  bool rhsNeg = RHS.isNegative();
       ^~~~~~
       RhsNeg
/home/jonas/opt/llvm/lib/Support/APInt.cpp:296:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsNeg != rhsNeg)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:301:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return tcCompare(U.pVal, RHS.U.pVal, getNumWords());
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:301:34: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return tcCompare(U.pVal, RHS.U.pVal, getNumWords());
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:304:38: warning: invalid case style for parameter 'loBit' [readability-identifier-naming]
void APInt::setBitsSlowCase(unsigned loBit, unsigned hiBit) {
                                     ^~~~~~
                                     LoBit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:304:54: warning: invalid case style for parameter 'hiBit' [readability-identifier-naming]
void APInt::setBitsSlowCase(unsigned loBit, unsigned hiBit) {
                                                     ^~~~~~
                                                     HiBit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:305:12: warning: invalid case style for variable 'loWord' [readability-identifier-naming]
  unsigned loWord = whichWord(loBit);
           ^~~~~~
           LoWord
/home/jonas/opt/llvm/lib/Support/APInt.cpp:306:12: warning: invalid case style for variable 'hiWord' [readability-identifier-naming]
  unsigned hiWord = whichWord(hiBit);
           ^~~~~~
           HiWord
/home/jonas/opt/llvm/lib/Support/APInt.cpp:309:12: warning: invalid case style for variable 'loMask' [readability-identifier-naming]
  uint64_t loMask = WORDTYPE_MAX << whichBit(loBit);
           ^~~~~~
           LoMask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:312:12: warning: invalid case style for variable 'hiShiftAmt' [readability-identifier-naming]
  unsigned hiShiftAmt = whichBit(hiBit);
           ^~~~~~~~~~
           HiShiftAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:315:14: warning: invalid case style for variable 'hiMask' [readability-identifier-naming]
    uint64_t hiMask = WORDTYPE_MAX >> (APINT_BITS_PER_WORD - hiShiftAmt);
             ^~~~~~
             HiMask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:318:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (hiWord == loWord)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:320:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:321:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[hiWord] |= hiMask;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:321:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[hiWord] |= hiMask;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:324:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  U.pVal[loWord] |= loMask;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:324:5: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  U.pVal[loWord] |= loMask;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:327:17: warning: invalid case style for variable 'word' [readability-identifier-naming]
  for (unsigned word = loWord + 1; word < hiWord; ++word)
                ^~~~               ~~~~             ~~~~~
                Word               Word             Word
/home/jonas/opt/llvm/lib/Support/APInt.cpp:327:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned word = loWord + 1; word < hiWord; ++word)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:328:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    U.pVal[word] = WORDTYPE_MAX;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:328:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal[word] = WORDTYPE_MAX;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:333:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcComplement(U.pVal, getNumWords());
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:340:30: warning: invalid case style for parameter 'bitPosition' [readability-identifier-naming]
void APInt::flipBit(unsigned bitPosition) {
                             ^~~~~~~~~~~~
                             BitPosition
/home/jonas/opt/llvm/lib/Support/APInt.cpp:341:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(bitPosition < BitWidth && "Out of the bit-width range!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:342:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((*this)[bitPosition]) clearBit(bitPosition);
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:343:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else setBit(bitPosition);
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:346:37: warning: invalid case style for parameter 'subBits' [readability-identifier-naming]
void APInt::insertBits(const APInt &subBits, unsigned bitPosition) {
                                    ^~~~~~~~
                                    SubBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:346:55: warning: invalid case style for parameter 'bitPosition' [readability-identifier-naming]
void APInt::insertBits(const APInt &subBits, unsigned bitPosition) {
                                                      ^~~~~~~~~~~~
                                                      BitPosition
/home/jonas/opt/llvm/lib/Support/APInt.cpp:347:12: warning: invalid case style for variable 'subBitWidth' [readability-identifier-naming]
  unsigned subBitWidth = subBits.getBitWidth();
           ^~~~~~~~~~~
           SubBitWidth
/home/jonas/opt/llvm/lib/Support/APInt.cpp:348:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(0 < subBitWidth && (subBitWidth + bitPosition) <= BitWidth &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:359:14: warning: invalid case style for variable 'mask' [readability-identifier-naming]
    uint64_t mask = WORDTYPE_MAX >> (APINT_BITS_PER_WORD - subBitWidth);
             ^~~~
             Mask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:360:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL &= ~(mask << bitPosition);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:361:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL |= (subBits.U.VAL << bitPosition);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:361:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL |= (subBits.U.VAL << bitPosition);
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:365:12: warning: invalid case style for variable 'loBit' [readability-identifier-naming]
  unsigned loBit = whichBit(bitPosition);
           ^~~~~
           LoBit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:366:12: warning: invalid case style for variable 'loWord' [readability-identifier-naming]
  unsigned loWord = whichWord(bitPosition);
           ^~~~~~
           LoWord
/home/jonas/opt/llvm/lib/Support/APInt.cpp:367:12: warning: invalid case style for variable 'hi1Word' [readability-identifier-naming]
  unsigned hi1Word = whichWord(bitPosition + subBitWidth - 1);
           ^~~~~~~
           Hi1Word
/home/jonas/opt/llvm/lib/Support/APInt.cpp:371:14: warning: invalid case style for variable 'mask' [readability-identifier-naming]
    uint64_t mask = WORDTYPE_MAX >> (APINT_BITS_PER_WORD - subBitWidth);
             ^~~~
             Mask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:372:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    U.pVal[loWord] &= ~(mask << loBit);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:372:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal[loWord] &= ~(mask << loBit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:373:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    U.pVal[loWord] |= (subBits.U.VAL << loBit);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:373:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal[loWord] |= (subBits.U.VAL << loBit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:373:34: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal[loWord] |= (subBits.U.VAL << loBit);
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:380:14: warning: invalid case style for variable 'numWholeSubWords' [readability-identifier-naming]
    unsigned numWholeSubWords = subBitWidth / APINT_BITS_PER_WORD;
             ^~~~~~~~~~~~~~~~
             NumWholeSubWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:381:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    memcpy(U.pVal + loWord, subBits.getRawData(),
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:381:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    memcpy(U.pVal + loWord, subBits.getRawData(),
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:385:14: warning: invalid case style for variable 'remainingBits' [readability-identifier-naming]
    unsigned remainingBits = subBitWidth % APINT_BITS_PER_WORD;
             ^~~~~~~~~~~~~
             RemainingBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:387:16: warning: invalid case style for variable 'mask' [readability-identifier-naming]
      uint64_t mask = WORDTYPE_MAX >> (APINT_BITS_PER_WORD - remainingBits);
               ^~~~
               Mask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:388:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[hi1Word] &= ~mask;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:388:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[hi1Word] &= ~mask;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:389:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[hi1Word] |= subBits.getWord(subBitWidth - 1);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:389:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[hi1Word] |= subBits.getWord(subBitWidth - 1);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:395:3: warning: missing username/bug in TODO [google-readability-todo]
  // TODO - there is scope for optimization here, but at the moment this code
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // TODO(jonas): - there is scope for optimization here, but at the moment this code
/home/jonas/opt/llvm/lib/Support/APInt.cpp:397:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != subBitWidth; ++i) {
                ^      ~                   ~~
                I      I                   I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:398:20: warning: statement should be inside braces [readability-braces-around-statements]
    if (subBits[i])
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:400:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:405:35: warning: invalid case style for parameter 'numBits' [readability-identifier-naming]
APInt APInt::extractBits(unsigned numBits, unsigned bitPosition) const {
                                  ^~~~~~~~
                                  NumBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:405:53: warning: invalid case style for parameter 'bitPosition' [readability-identifier-naming]
APInt APInt::extractBits(unsigned numBits, unsigned bitPosition) const {
                                                    ^~~~~~~~~~~~
                                                    BitPosition
/home/jonas/opt/llvm/lib/Support/APInt.cpp:406:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(numBits > 0 && "Can't extract zero bits");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:407:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(bitPosition < BitWidth && (numBits + bitPosition) <= BitWidth &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:410:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:411:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(numBits, U.VAL >> bitPosition);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:411:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(numBits, U.VAL >> bitPosition);
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:413:12: warning: invalid case style for variable 'loBit' [readability-identifier-naming]
  unsigned loBit = whichBit(bitPosition);
           ^~~~~
           LoBit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:414:12: warning: invalid case style for variable 'loWord' [readability-identifier-naming]
  unsigned loWord = whichWord(bitPosition);
           ^~~~~~
           LoWord
/home/jonas/opt/llvm/lib/Support/APInt.cpp:415:12: warning: invalid case style for variable 'hiWord' [readability-identifier-naming]
  unsigned hiWord = whichWord(bitPosition + numBits - 1);
           ^~~~~~
           HiWord
/home/jonas/opt/llvm/lib/Support/APInt.cpp:418:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (loWord == hiWord)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:419:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(numBits, U.pVal[loWord] >> loBit);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:419:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(numBits, U.pVal[loWord] >> loBit);
                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:419:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(numBits, U.pVal[loWord] >> loBit);
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:423:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (loBit == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:424:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(numBits, makeArrayRef(U.pVal + loWord, 1 + hiWord - loWord));
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:424:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(numBits, makeArrayRef(U.pVal + loWord, 1 + hiWord - loWord));
                                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:427:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Result(numBits, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:431:57: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  uint64_t *DestPtr = Result.isSingleWord() ? &Result.U.VAL : Result.U.pVal;
                                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:431:72: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  uint64_t *DestPtr = Result.isSingleWord() ? &Result.U.VAL : Result.U.pVal;
                                                                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:432:17: warning: invalid case style for variable 'word' [readability-identifier-naming]
  for (unsigned word = 0; word < NumDstWords; ++word) {
                ^~~~      ~~~~                  ~~~~~
                Word      Word                  Word
/home/jonas/opt/llvm/lib/Support/APInt.cpp:433:14: warning: invalid case style for variable 'w0' [readability-identifier-naming]
    uint64_t w0 = U.pVal[loWord + word];
             ^~
             W0
/home/jonas/opt/llvm/lib/Support/APInt.cpp:433:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t w0 = U.pVal[loWord + word];
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:433:21: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t w0 = U.pVal[loWord + word];
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:434:14: warning: invalid case style for variable 'w1' [readability-identifier-naming]
    uint64_t w1 =
             ^~
             W1
/home/jonas/opt/llvm/lib/Support/APInt.cpp:435:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        (loWord + word + 1) < NumSrcWords ? U.pVal[loWord + word + 1] : 0;
                                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:435:47: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        (loWord + word + 1) < NumSrcWords ? U.pVal[loWord + word + 1] : 0;
                                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:436:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    DestPtr[word] = (w0 >> loBit) | (w1 << (APINT_BITS_PER_WORD - loBit));
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:442:41: warning: invalid case style for parameter 'str' [readability-identifier-naming]
unsigned APInt::getBitsNeeded(StringRef str, uint8_t radix) {
                                        ^~~~
                                        Str
/home/jonas/opt/llvm/lib/Support/APInt.cpp:442:54: warning: invalid case style for parameter 'radix' [readability-identifier-naming]
unsigned APInt::getBitsNeeded(StringRef str, uint8_t radix) {
                                                     ^~~~~~
                                                     Radix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:443:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!str.empty() && "Invalid string length");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:444:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert((radix == 10 || radix == 8 || radix == 16 || radix == 2 ||
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:448:10: warning: invalid case style for variable 'slen' [readability-identifier-naming]
  size_t slen = str.size();
         ^~~~
         Slen
/home/jonas/opt/llvm/lib/Support/APInt.cpp:451:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = str.begin();
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APInt.cpp:452:12: warning: invalid case style for variable 'isNegative' [readability-identifier-naming]
  unsigned isNegative = *p == '-';
           ^~~~~~~~~~
           IsNegative
/home/jonas/opt/llvm/lib/Support/APInt.cpp:452:25: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  unsigned isNegative = *p == '-';
                        ^        ~
                        static_cast<unsigned int>( )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:456:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(slen && "String is only a sign, needs a value.");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:461:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (radix == 2)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:463:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (radix == 8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:465:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (radix == 16)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:478:12: warning: invalid case style for variable 'sufficient' [readability-identifier-naming]
  unsigned sufficient
           ^~~~~~~~~~
           Sufficient
/home/jonas/opt/llvm/lib/Support/APInt.cpp:483:9: warning: invalid case style for variable 'tmp' [readability-identifier-naming]
  APInt tmp(sufficient, StringRef(p, slen), radix);
        ^~~~
        Tmp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:487:12: warning: invalid case style for variable 'log' [readability-identifier-naming]
  unsigned log = tmp.logBase2();
           ^~~
           Log
/home/jonas/opt/llvm/lib/Support/APInt.cpp:488:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  if (log == (unsigned)-1) {
             ^~~~~~~~~~~ ~
             static_cast<unsigned>( )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:490:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else {
    ^~~~~~
/home/jonas/opt/llvm/lib/Support/APInt.cpp:495:17: warning: invalid case style for function 'hash_value' [readability-identifier-naming]
hash_code llvm::hash_value(const APInt &Arg) {
                ^~~~~~~~~~~
                hashValue
/home/jonas/opt/llvm/lib/Support/APInt.cpp:496:26: warning: statement should be inside braces [readability-braces-around-statements]
  if (Arg.isSingleWord())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:497:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return hash_combine(Arg.U.VAL);
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:499:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return hash_combine_range(Arg.U.pVal, Arg.U.pVal + Arg.getNumWords());
                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:499:47: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  return hash_combine_range(Arg.U.pVal, Arg.U.pVal + Arg.getNumWords());
                                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:499:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return hash_combine_range(Arg.U.pVal, Arg.U.pVal + Arg.getNumWords());
                                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:503:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(getBitWidth() % SplatSizeInBits == 0 &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:511:33: warning: invalid case style for parameter 'numBits' [readability-identifier-naming]
APInt APInt::getHiBits(unsigned numBits) const {
                                ^~~~~~~~
                                NumBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:516:33: warning: invalid case style for parameter 'numBits' [readability-identifier-naming]
APInt APInt::getLoBits(unsigned numBits) const {
                                ^~~~~~~~
                                NumBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:524:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NewLen >= V.getBitWidth() && "Can't splat to smaller bit width!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:527:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned I = V.getBitWidth(); I < NewLen; I <<= 1)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:535:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (int i = getNumWords()-1; i >= 0; --i) {
           ^                    ~         ~~
           I                    I         I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:536:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t V = U.pVal[i];
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:536:20: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t V = U.pVal[i];
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:537:16: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (V == 0)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:540:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Count += llvm::countLeadingZeros(V);
               ^
../include/llvm/Support/MathExtras.h:189:38: note: default parameter was declared here
std::size_t countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:551:12: warning: invalid case style for variable 'highWordBits' [readability-identifier-naming]
  unsigned highWordBits = BitWidth % APINT_BITS_PER_WORD;
           ^~~~~~~~~~~~
           HighWordBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:552:12: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned shift;
           ^~~~~~
           Shift
/home/jonas/opt/llvm/lib/Support/APInt.cpp:553:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!highWordBits) {
      ~^~~~~~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:559:7: warning: invalid case style for variable 'i' [readability-identifier-naming]
  int i = getNumWords() - 1;
      ^
      I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:560:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  unsigned Count = llvm::countLeadingOnes(U.pVal[i] << shift);
                   ^
../include/llvm/Support/MathExtras.h:462:39: note: default parameter was declared here
std::size_t countLeadingOnes(T Value, ZeroBehavior ZB = ZB_Width) {
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:560:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned Count = llvm::countLeadingOnes(U.pVal[i] << shift);
                                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:560:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  unsigned Count = llvm::countLeadingOnes(U.pVal[i] << shift);
                                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:563:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (U.pVal[i] == WORDTYPE_MAX)
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:563:13: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      if (U.pVal[i] == WORDTYPE_MAX)
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:563:37: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (U.pVal[i] == WORDTYPE_MAX)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:566:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Count += llvm::countLeadingOnes(U.pVal[i]);
                 ^
../include/llvm/Support/MathExtras.h:462:39: note: default parameter was declared here
std::size_t countLeadingOnes(T Value, ZeroBehavior ZB = ZB_Width) {
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:566:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Count += llvm::countLeadingOnes(U.pVal[i]);
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:566:43: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        Count += llvm::countLeadingOnes(U.pVal[i]);
                                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:576:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i = 0;
           ^
           I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:577:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (; i < getNumWords() && U.pVal[i] == 0; ++i)
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:577:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  for (; i < getNumWords() && U.pVal[i] == 0; ++i)
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:577:51: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (; i < getNumWords() && U.pVal[i] == 0; ++i)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:579:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (i < getNumWords())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:580:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Count += llvm::countTrailingZeros(U.pVal[i]);
             ^
../include/llvm/Support/MathExtras.h:120:39: note: default parameter was declared here
std::size_t countTrailingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:580:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Count += llvm::countTrailingZeros(U.pVal[i]);
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:580:41: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Count += llvm::countTrailingZeros(U.pVal[i]);
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:586:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i = 0;
           ^
           I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:587:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (; i < getNumWords() && U.pVal[i] == WORDTYPE_MAX; ++i)
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:587:33: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  for (; i < getNumWords() && U.pVal[i] == WORDTYPE_MAX; ++i)
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:587:62: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (; i < getNumWords() && U.pVal[i] == WORDTYPE_MAX; ++i)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:589:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (i < getNumWords())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:590:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Count += llvm::countTrailingOnes(U.pVal[i]);
             ^
../include/llvm/Support/MathExtras.h:478:40: note: default parameter was declared here
std::size_t countTrailingOnes(T Value, ZeroBehavior ZB = ZB_Width) {
                                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:590:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Count += llvm::countTrailingOnes(U.pVal[i]);
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:590:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Count += llvm::countTrailingOnes(U.pVal[i]);
                                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:591:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Count <= BitWidth);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:597:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < getNumWords(); ++i)
                ^      ~                    ~~
                I      I                    I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:597:47: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < getNumWords(); ++i)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:598:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Count += llvm::countPopulation(U.pVal[i]);
                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:598:38: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Count += llvm::countPopulation(U.pVal[i]);
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:603:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = getNumWords(); i != e; ++i)
                ^                         ~         ~~
                I                         I         I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:603:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = getNumWords(); i != e; ++i)
                       ^                       ~~
                       E                       E
/home/jonas/opt/llvm/lib/Support/APInt.cpp:603:55: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0, e = getNumWords(); i != e; ++i)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:604:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if ((U.pVal[i] & RHS.U.pVal[i]) != 0)
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:604:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    if ((U.pVal[i] & RHS.U.pVal[i]) != 0)
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:604:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if ((U.pVal[i] & RHS.U.pVal[i]) != 0)
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:604:28: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    if ((U.pVal[i] & RHS.U.pVal[i]) != 0)
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:604:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if ((U.pVal[i] & RHS.U.pVal[i]) != 0)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:611:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = getNumWords(); i != e; ++i)
                ^                         ~         ~~
                I                         I         I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:611:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = getNumWords(); i != e; ++i)
                       ^                       ~~
                       E                       E
/home/jonas/opt/llvm/lib/Support/APInt.cpp:611:55: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0, e = getNumWords(); i != e; ++i)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:612:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if ((U.pVal[i] & ~RHS.U.pVal[i]) != 0)
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:612:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    if ((U.pVal[i] & ~RHS.U.pVal[i]) != 0)
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:612:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if ((U.pVal[i] & ~RHS.U.pVal[i]) != 0)
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:612:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    if ((U.pVal[i] & ~RHS.U.pVal[i]) != 0)
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:612:43: warning: statement should be inside braces [hicpp-braces-around-statements]
    if ((U.pVal[i] & ~RHS.U.pVal[i]) != 0)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:619:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:620:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BitWidth == 16)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:621:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, ByteSwap_16(uint16_t(U.VAL)));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:621:51: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, ByteSwap_16(uint16_t(U.VAL)));
                                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:622:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (BitWidth == 32)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:623:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, ByteSwap_32(unsigned(U.VAL)));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:623:51: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, ByteSwap_32(unsigned(U.VAL)));
                                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:625:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    unsigned Tmp1 = unsigned(U.VAL >> 16);
    ^~~~~~~~
    auto
/home/jonas/opt/llvm/lib/Support/APInt.cpp:625:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    unsigned Tmp1 = unsigned(U.VAL >> 16);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:625:32: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    unsigned Tmp1 = unsigned(U.VAL >> 16);
                               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:627:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    uint16_t Tmp2 = uint16_t(U.VAL);
    ^~~~~~~~
    auto
/home/jonas/opt/llvm/lib/Support/APInt.cpp:627:32: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint16_t Tmp2 = uint16_t(U.VAL);
                               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:629:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, (uint64_t(Tmp2) << 32) | Tmp1);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:629:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return APInt(BitWidth, (uint64_t(Tmp2) << 32) | Tmp1);
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:631:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (BitWidth == 64)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:632:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, ByteSwap_64(U.VAL));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:632:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, ByteSwap_64(U.VAL));
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:634:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Result(getNumWords() * APINT_BITS_PER_WORD, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:635:55: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned I = 0, N = getNumWords(); I != N; ++I)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:636:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result.U.pVal[I] = ByteSwap_64(U.pVal[N - I - 1]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:636:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Result.U.pVal[I] = ByteSwap_64(U.pVal[N - I - 1]);
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:636:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result.U.pVal[I] = ByteSwap_64(U.pVal[N - I - 1]);
                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:636:38: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Result.U.pVal[I] = ByteSwap_64(U.pVal[N - I - 1]);
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:647:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, llvm::reverseBits<uint64_t>(U.VAL));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:647:58: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, llvm::reverseBits<uint64_t>(U.VAL));
                                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:649:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, llvm::reverseBits<uint32_t>(U.VAL));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:649:58: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, llvm::reverseBits<uint32_t>(U.VAL));
                                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:651:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, llvm::reverseBits<uint16_t>(U.VAL));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:651:58: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, llvm::reverseBits<uint16_t>(U.VAL));
                                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:653:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, llvm::reverseBits<uint8_t>(U.VAL));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:653:57: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, llvm::reverseBits<uint8_t>(U.VAL));
                                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:659:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Reversed(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:664:17: warning: implicit conversion bool -> 'uint64_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
    Reversed |= Val[0];
                ^~~   ~
                static_cast<uint64_t>( )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:672:23: warning: invalid case style for function 'GreatestCommonDivisor' [readability-identifier-naming]
APInt llvm::APIntOps::GreatestCommonDivisor(APInt A, APInt B) {
                      ^~~~~~~~~~~~~~~~~~~~~~
                      greatestCommonDivisor
/home/jonas/opt/llvm/lib/Support/APInt.cpp:674:14: warning: statement should be inside braces [readability-braces-around-statements]
  if (A == B) return A;
             ^
              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:677:10: warning: statement should be inside braces [readability-braces-around-statements]
  if (!A) return B;
         ^
          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:678:10: warning: statement should be inside braces [readability-braces-around-statements]
  if (!B) return A;
         ^
          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:683:14: warning: invalid case style for variable 'Pow2_A' [readability-identifier-naming]
    unsigned Pow2_A = A.countTrailingZeros();
             ^~~~~~
             Pow2A
/home/jonas/opt/llvm/lib/Support/APInt.cpp:684:14: warning: invalid case style for variable 'Pow2_B' [readability-identifier-naming]
    unsigned Pow2_B = B.countTrailingZeros();
             ^~~~~~
             Pow2B
/home/jonas/opt/llvm/lib/Support/APInt.cpp:715:23: warning: invalid case style for function 'RoundDoubleToAPInt' [readability-identifier-naming]
APInt llvm::APIntOps::RoundDoubleToAPInt(double Double, unsigned width) {
                      ^~~~~~~~~~~~~~~~~~~
                      roundDoubleToApInt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:715:66: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt llvm::APIntOps::RoundDoubleToAPInt(double Double, unsigned width) {
                                                                 ^~~~~~
                                                                 Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:716:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  uint64_t I = bit_cast<uint64_t>(Double);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/APInt.cpp:719:8: warning: invalid case style for variable 'isNeg' [readability-identifier-naming]
  bool isNeg = I >> 63;
       ^~~~~
       IsNeg
/home/jonas/opt/llvm/lib/Support/APInt.cpp:719:16: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  bool isNeg = I >> 63;
               ^      ~
               (      ) != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:719:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APInt.cpp:722:11: warning: invalid case style for variable 'exp' [readability-identifier-naming]
  int64_t exp = ((I >> 52) & 0x7ff) - 1023;
          ^~~
          Exp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:722:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  int64_t exp = ((I >> 52) & 0x7ff) - 1023;
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:722:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  int64_t exp = ((I >> 52) & 0x7ff) - 1023;
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:725:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (exp < 0)
              ^
               {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:726:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(width, 0u);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:729:12: warning: invalid case style for variable 'mantissa' [readability-identifier-naming]
  uint64_t mantissa = (I & (~0ULL >> 12)) | 1ULL << 52;
           ^~~~~~~~
           Mantissa
/home/jonas/opt/llvm/lib/Support/APInt.cpp:729:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t mantissa = (I & (~0ULL >> 12)) | 1ULL << 52;
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:729:45: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t mantissa = (I & (~0ULL >> 12)) | 1ULL << 52;
                                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:732:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (exp < 52)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:733:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return isNeg ? -APInt(width, mantissa >> (52 - exp)) :
                    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:733:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return isNeg ? -APInt(width, mantissa >> (52 - exp)) :
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:734:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                    APInt(width, mantissa >> (52 - exp));
                    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:734:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    APInt(width, mantissa >> (52 - exp));
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:738:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (width <= exp - 52)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:739:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(width, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:742:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Tmp(width, mantissa);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:743:11: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  Tmp <<= (unsigned)exp - 52;
          ^~~~~~~~~~~~~
          static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:754:34: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
double APInt::roundToDouble(bool isSigned) const {
                                 ^~~~~~~~~
                                 IsSigned
/home/jonas/opt/llvm/lib/Support/APInt.cpp:760:15: warning: invalid case style for variable 'sext' [readability-identifier-naming]
      int64_t sext = SignExtend64(getWord(0), BitWidth);
              ^~~~
              Sext
/home/jonas/opt/llvm/lib/Support/APInt.cpp:762:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else
      ^~~~
/home/jonas/opt/llvm/lib/Support/APInt.cpp:762:11: warning: statement should be inside braces [readability-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:767:8: warning: invalid case style for variable 'isNeg' [readability-identifier-naming]
  bool isNeg = isSigned ? (*this)[BitWidth-1] : false;
       ^~~~~
       IsNeg
/home/jonas/opt/llvm/lib/Support/APInt.cpp:773:12: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned n = Tmp.getActiveBits();
           ^
           N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:778:12: warning: invalid case style for variable 'exp' [readability-identifier-naming]
  uint64_t exp = n;
           ^~~
           Exp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:782:29: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!isSigned || !isNeg)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:784:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/APInt.cpp:784:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:791:12: warning: invalid case style for variable 'mantissa' [readability-identifier-naming]
  uint64_t mantissa;
           ^~~~~~~~~
           Mantissa
/home/jonas/opt/llvm/lib/Support/APInt.cpp:792:12: warning: invalid case style for variable 'hiWord' [readability-identifier-naming]
  unsigned hiWord = whichWord(n-1);
           ^~~~~~
           HiWord
/home/jonas/opt/llvm/lib/Support/APInt.cpp:794:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mantissa = Tmp.U.pVal[0];
               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:794:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    mantissa = Tmp.U.pVal[0];
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:795:16: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (n > 52)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:798:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(hiWord > 0 && "huh?");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:799:14: warning: invalid case style for variable 'hibits' [readability-identifier-naming]
    uint64_t hibits = Tmp.U.pVal[hiWord] << (52 - n % APINT_BITS_PER_WORD);
             ^~~~~~
             Hibits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:799:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t hibits = Tmp.U.pVal[hiWord] << (52 - n % APINT_BITS_PER_WORD);
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:799:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t hibits = Tmp.U.pVal[hiWord] << (52 - n % APINT_BITS_PER_WORD);
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:800:14: warning: invalid case style for variable 'lobits' [readability-identifier-naming]
    uint64_t lobits = Tmp.U.pVal[hiWord-1] >> (11 + n % APINT_BITS_PER_WORD);
             ^~~~~~
             Lobits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:800:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t lobits = Tmp.U.pVal[hiWord-1] >> (11 + n % APINT_BITS_PER_WORD);
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:800:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t lobits = Tmp.U.pVal[hiWord-1] >> (11 + n % APINT_BITS_PER_WORD);
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:805:12: warning: invalid case style for variable 'sign' [readability-identifier-naming]
  uint64_t sign = isNeg ? (1ULL << (APINT_BITS_PER_WORD - 1)) : 0;
           ^~~~
           Sign
/home/jonas/opt/llvm/lib/Support/APInt.cpp:806:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t I = sign | (exp << 52) | mantissa;
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:811:29: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt APInt::trunc(unsigned width) const {
                            ^~~~~~
                            Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:812:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(width < BitWidth && "Invalid APInt Truncate request");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:813:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(width && "Can't truncate to 0 bits");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:815:36: warning: statement should be inside braces [readability-braces-around-statements]
  if (width <= APINT_BITS_PER_WORD)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:816:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(width, getRawData()[0]);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:816:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(width, getRawData()[0]);
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:821:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i;
           ^~
           I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:822:53: warning: statement should be inside braces [readability-braces-around-statements]
  for (i = 0; i != width / APINT_BITS_PER_WORD; i++)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:823:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result.U.pVal[i] = U.pVal[i];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:823:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Result.U.pVal[i] = U.pVal[i];
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:823:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result.U.pVal[i] = U.pVal[i];
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:823:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Result.U.pVal[i] = U.pVal[i];
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:826:12: warning: invalid case style for variable 'bits' [readability-identifier-naming]
  unsigned bits = (0 - width) % APINT_BITS_PER_WORD;
           ^~~~
           Bits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:827:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (bits != 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:828:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result.U.pVal[i] = U.pVal[i] << bits >> bits;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:828:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Result.U.pVal[i] = U.pVal[i] << bits >> bits;
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:828:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result.U.pVal[i] = U.pVal[i] << bits >> bits;
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:828:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Result.U.pVal[i] = U.pVal[i] << bits >> bits;
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:835:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Width > BitWidth && "Invalid APInt SignExtend request");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:837:36: warning: statement should be inside braces [readability-braces-around-statements]
  if (Width <= APINT_BITS_PER_WORD)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:838:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(Width, SignExtend64(U.VAL, BitWidth));
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:838:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(Width, SignExtend64(U.VAL, BitWidth));
                                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:843:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memcpy(Result.U.pVal, getRawData(), getNumWords() * APINT_WORD_SIZE);
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:846:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Result.U.pVal[getNumWords() - 1] =
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:846:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  Result.U.pVal[getNumWords() - 1] =
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:847:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      SignExtend64(Result.U.pVal[getNumWords() - 1],
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:847:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      SignExtend64(Result.U.pVal[getNumWords() - 1],
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:851:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memset(Result.U.pVal + getNumWords(), isNegative() ? -1 : 0,
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:851:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(Result.U.pVal + getNumWords(), isNegative() ? -1 : 0,
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:858:28: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt APInt::zext(unsigned width) const {
                           ^~~~~~
                           Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:859:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(width > BitWidth && "Invalid APInt ZeroExtend request");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:861:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (width <= APINT_BITS_PER_WORD)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:862:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(width, U.VAL);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:862:27: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(width, U.VAL);
                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:867:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memcpy(Result.U.pVal, getRawData(), getNumWords() * APINT_WORD_SIZE);
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:870:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memset(Result.U.pVal + getNumWords(), 0,
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:870:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(Result.U.pVal + getNumWords(), 0,
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:876:35: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt APInt::zextOrTrunc(unsigned width) const {
                                  ^~~~~~
                                  Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:877:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (BitWidth < width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:879:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (BitWidth > width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:884:35: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt APInt::sextOrTrunc(unsigned width) const {
                                  ^~~~~~
                                  Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:885:24: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (BitWidth < width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:887:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BitWidth > width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:892:34: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt APInt::zextOrSelf(unsigned width) const {
                                 ^~~~~~
                                 Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:893:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BitWidth < width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:898:34: warning: invalid case style for parameter 'width' [readability-identifier-naming]
APInt APInt::sextOrSelf(unsigned width) const {
                                 ^~~~~~
                                 Width
/home/jonas/opt/llvm/lib/Support/APInt.cpp:899:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BitWidth < width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:906:38: warning: invalid case style for parameter 'shiftAmt' [readability-identifier-naming]
void APInt::ashrInPlace(const APInt &shiftAmt) {
                                     ^~~~~~~~~
                                     ShiftAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:907:15: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  ashrInPlace((unsigned)shiftAmt.getLimitedValue(BitWidth));
              ^~~~~~~~~~~~~~~~~~                          ~
              static_cast<unsigned>(                      )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:914:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!ShiftAmt)
      ~^~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:914:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!ShiftAmt)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:927:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    U.pVal[getNumWords() - 1] = SignExtend64(
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:927:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal[getNumWords() - 1] = SignExtend64(
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:928:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        U.pVal[getNumWords() - 1], ((BitWidth - 1) % APINT_BITS_PER_WORD) + 1);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:928:11: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        U.pVal[getNumWords() - 1], ((BitWidth - 1) % APINT_BITS_PER_WORD) + 1);
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:932:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      std::memmove(U.pVal, U.pVal + WordShift, WordsToMove * APINT_WORD_SIZE);
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:932:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      std::memmove(U.pVal, U.pVal + WordShift, WordsToMove * APINT_WORD_SIZE);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:932:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      std::memmove(U.pVal, U.pVal + WordShift, WordsToMove * APINT_WORD_SIZE);
                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:935:21: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (unsigned i = 0; i != WordsToMove - 1; ++i)
                    ^      ~                       ~~
                    I      I                       I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:935:54: warning: statement should be inside braces [google-readability-braces-around-statements]
      for (unsigned i = 0; i != WordsToMove - 1; ++i)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:936:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        U.pVal[i] = (U.pVal[i + WordShift] >> BitShift) |
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:936:11: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        U.pVal[i] = (U.pVal[i + WordShift] >> BitShift) |
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:936:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        U.pVal[i] = (U.pVal[i + WordShift] >> BitShift) |
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:936:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
        U.pVal[i] = (U.pVal[i + WordShift] >> BitShift) |
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:937:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    (U.pVal[i + WordShift + 1] << (APINT_BITS_PER_WORD - BitShift));
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:937:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                    (U.pVal[i + WordShift + 1] << (APINT_BITS_PER_WORD - BitShift));
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:940:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[WordsToMove - 1] = U.pVal[WordShift + WordsToMove - 1] >> BitShift;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:940:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[WordsToMove - 1] = U.pVal[WordShift + WordsToMove - 1] >> BitShift;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:940:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[WordsToMove - 1] = U.pVal[WordShift + WordsToMove - 1] >> BitShift;
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:940:35: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[WordsToMove - 1] = U.pVal[WordShift + WordsToMove - 1] >> BitShift;
                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:942:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      U.pVal[WordsToMove - 1] =
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:942:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      U.pVal[WordsToMove - 1] =
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:943:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          SignExtend64(U.pVal[WordsToMove - 1], APINT_BITS_PER_WORD - BitShift);
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:943:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
          SignExtend64(U.pVal[WordsToMove - 1], APINT_BITS_PER_WORD - BitShift);
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:948:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memset(U.pVal + WordsToMove, Negative ? -1 : 0,
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:948:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(U.pVal + WordsToMove, Negative ? -1 : 0,
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:955:38: warning: invalid case style for parameter 'shiftAmt' [readability-identifier-naming]
void APInt::lshrInPlace(const APInt &shiftAmt) {
                                     ^~~~~~~~~
                                     ShiftAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:956:15: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  lshrInPlace((unsigned)shiftAmt.getLimitedValue(BitWidth));
              ^~~~~~~~~~~~~~~~~~                          ~
              static_cast<unsigned>(                      )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:962:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcShiftRight(U.pVal, getNumWords(), ShiftAmt);
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:967:1: warning: cannot overload 'operator<<=' [fuchsia-overloaded-operator]
APInt &APInt::operator<<=(const APInt &shiftAmt) {
^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:967:40: warning: invalid case style for parameter 'shiftAmt' [readability-identifier-naming]
APInt &APInt::operator<<=(const APInt &shiftAmt) {
                                       ^~~~~~~~~
                                       ShiftAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:969:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  *this <<= (unsigned)shiftAmt.getLimitedValue(BitWidth);
            ^~~~~~~~~~~~~~~~~~                          ~
            static_cast<unsigned>(                      )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:974:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  tcShiftLeft(U.pVal, getNumWords(), ShiftAmt);
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:979:62: warning: invalid case style for parameter 'rotateAmt' [readability-identifier-naming]
static unsigned rotateModulo(unsigned BitWidth, const APInt &rotateAmt) {
                                                             ^~~~~~~~~~
                                                             RotateAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:980:12: warning: invalid case style for variable 'rotBitWidth' [readability-identifier-naming]
  unsigned rotBitWidth = rotateAmt.getBitWidth();
           ^~~~~~~~~~~
           RotBitWidth
/home/jonas/opt/llvm/lib/Support/APInt.cpp:981:9: warning: invalid case style for variable 'rot' [readability-identifier-naming]
  APInt rot = rotateAmt;
        ^~~
        Rot
/home/jonas/opt/llvm/lib/Support/APInt.cpp:987:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  rot = rot.urem(APInt(rot.getBitWidth(), BitWidth));
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:991:32: warning: invalid case style for parameter 'rotateAmt' [readability-identifier-naming]
APInt APInt::rotl(const APInt &rotateAmt) const {
                               ^~~~~~~~~~
                               RotateAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:995:28: warning: invalid case style for parameter 'rotateAmt' [readability-identifier-naming]
APInt APInt::rotl(unsigned rotateAmt) const {
                           ^~~~~~~~~~
                           RotateAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:997:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (rotateAmt == 0)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1002:32: warning: invalid case style for parameter 'rotateAmt' [readability-identifier-naming]
APInt APInt::rotr(const APInt &rotateAmt) const {
                               ^~~~~~~~~~
                               RotateAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1006:28: warning: invalid case style for parameter 'rotateAmt' [readability-identifier-naming]
APInt APInt::rotr(unsigned rotateAmt) const {
                           ^~~~~~~~~~
                           RotateAmt
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1008:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (rotateAmt == 0)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1023:12: warning: invalid case style for variable 'magnitude' [readability-identifier-naming]
  unsigned magnitude = getActiveBits();
           ^~~~~~~~~
           Magnitude
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1028:26: warning: invalid case style for variable 'results' [readability-identifier-naming]
    static const uint8_t results[32] = {
                         ^~~~~~~~
                         Results
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1037:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, results[ (isSingleWord() ? U.VAL : U.pVal[0]) ]);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1037:28: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    return APInt(BitWidth, results[ (isSingleWord() ? U.VAL : U.pVal[0]) ]);
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1037:57: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, results[ (isSingleWord() ? U.VAL : U.pVal[0]) ]);
                                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1037:63: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(BitWidth, results[ (isSingleWord() ? U.VAL : U.pVal[0]) ]);
                                                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1037:65: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, results[ (isSingleWord() ? U.VAL : U.pVal[0]) ]);
                                                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1045:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth,
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1046:68: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                 uint64_t(::round(::sqrt(double(isSingleWord() ? U.VAL
                                                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1047:66: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                                                               : U.pVal[0])))));
                                                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1047:68: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
                                                               : U.pVal[0])))));
                                                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1055:12: warning: invalid case style for variable 'nbits' [readability-identifier-naming]
  unsigned nbits = BitWidth, i = 4;
           ^~~~~
           Nbits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1055:30: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned nbits = BitWidth, i = 4;
                             ^
                             I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1056:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt testy(BitWidth, 16);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1056:9: warning: invalid case style for variable 'testy' [readability-identifier-naming]
  APInt testy(BitWidth, 16);
        ^~~~~~
        Testy
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1057:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt x_old(BitWidth, 1);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1057:9: warning: invalid case style for variable 'x_old' [readability-identifier-naming]
  APInt x_old(BitWidth, 1);
        ^~~~~~
        XOld
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1058:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt x_new(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1058:9: warning: invalid case style for variable 'x_new' [readability-identifier-naming]
  APInt x_new(BitWidth, 0);
        ^~~~~~
        XNew
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1059:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt two(BitWidth, 2);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1059:9: warning: invalid case style for variable 'two' [readability-identifier-naming]
  APInt two(BitWidth, 2);
        ^~~~
        Two
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1062:40: warning: statement should be inside braces [readability-braces-around-statements]
  for (;; i += 2, testy = testy.shl(2))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1071:26: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (x_old.ule(x_new))
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1082:9: warning: invalid case style for variable 'square' [readability-identifier-naming]
  APInt square(x_old * x_old);
        ^~~~~~~
        Square
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1083:9: warning: invalid case style for variable 'nextSquare' [readability-identifier-naming]
  APInt nextSquare((x_old + 1) * (x_old +1));
        ^~~~~~~~~~~
        NextSquare
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1084:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (this->ult(square))
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1086:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(this->ule(nextSquare) && "Error in APInt::sqrt computation");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1087:9: warning: invalid case style for variable 'midpoint' [readability-identifier-naming]
  APInt midpoint((nextSquare - square).udiv(two));
        ^~~~~~~~~
        Midpoint
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1088:9: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  APInt offset(*this - square);
        ^~~~~~~
        Offset
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1089:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (offset.ult(midpoint))
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1099:49: warning: invalid case style for parameter 'modulo' [readability-identifier-naming]
APInt APInt::multiplicativeInverse(const APInt& modulo) const {
                                                ^~~~~~~
                                                Modulo
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1100:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(ult(modulo) && "This APInt must be smaller than the modulo");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1110:9: warning: invalid case style for variable 'r' [readability-identifier-naming]
  APInt r[2] = { modulo, *this };
        ^~
        R
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1111:9: warning: invalid case style for variable 't' [readability-identifier-naming]
  APInt t[2] = { APInt(BitWidth, 0), APInt(BitWidth, 1) };
        ^~
        T
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1111:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt t[2] = { APInt(BitWidth, 0), APInt(BitWidth, 1) };
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1111:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt t[2] = { APInt(BitWidth, 0), APInt(BitWidth, 1) };
                                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1112:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt q(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1112:9: warning: invalid case style for variable 'q' [readability-identifier-naming]
  APInt q(BitWidth, 0);
        ^~
        Q
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1114:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i;
           ^~
           I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  for (i = 0; r[i^1] != 0; i ^= 1) {
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  for (i = 0; r[i^1] != 0; i ^= 1) {
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:13: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    udivrem(r[i], r[i^1], q, r[i]);
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:19: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    udivrem(r[i], r[i^1], q, r[i]);
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    udivrem(r[i], r[i^1], q, r[i]);
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:30: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    udivrem(r[i], r[i^1], q, r[i]);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1121:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    t[i] -= t[i^1] * q;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1121:13: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    t[i] -= t[i^1] * q;
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1121:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    t[i] -= t[i^1] * q;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1128:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  if (r[i] != 1)
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1128:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (r[i] != 1)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1129:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1135:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  if (t[i].isNegative())
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1135:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (t[i].isNegative())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1136:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    t[i] += modulo;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1138:20: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return std::move(t[i]);
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1146:16: warning: invalid case style for variable 'd' [readability-identifier-naming]
  const APInt& d = *this;
               ^
               D
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1147:12: warning: invalid case style for variable 'p' [readability-identifier-naming]
  unsigned p;
           ^~
           P
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:9: warning: invalid case style for variable 'ad' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
        ^~~
        Ad
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:13: warning: invalid case style for variable 'anc' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
            ^~~~
            Anc
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:18: warning: invalid case style for variable 'delta' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
                 ^~~~~~
                 Delta
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:25: warning: invalid case style for variable 'q1' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
                        ^~~
                        Q1
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:29: warning: invalid case style for variable 'r1' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
                            ^~~
                            R1
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:33: warning: invalid case style for variable 'q2' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
                                ^~~
                                Q2
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:37: warning: invalid case style for variable 'r2' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
                                    ^~~
                                    R2
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1148:41: warning: invalid case style for variable 't' [readability-identifier-naming]
  APInt ad, anc, delta, q1, r1, q2, r2, t;
                                        ^~
                                        T
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1149:9: warning: invalid case style for variable 'signedMin' [readability-identifier-naming]
  APInt signedMin = APInt::getSignedMinValue(d.getBitWidth());
        ^~~~~~~~~
        SignedMin
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1150:13: warning: invalid case style for variable 'mag' [readability-identifier-naming]
  struct ms mag;
            ^~~~
            Mag
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1178:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (d.isNegative()) mag.m = -mag.m;   // resulting magic number
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1190:16: warning: invalid case style for variable 'd' [readability-identifier-naming]
  const APInt& d = *this;
               ^
               D
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1191:12: warning: invalid case style for variable 'p' [readability-identifier-naming]
  unsigned p;
           ^~
           P
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1192:9: warning: invalid case style for variable 'nc' [readability-identifier-naming]
  APInt nc, delta, q1, r1, q2, r2;
        ^~~
        Nc
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1192:13: warning: invalid case style for variable 'delta' [readability-identifier-naming]
  APInt nc, delta, q1, r1, q2, r2;
            ^~~~~~
            Delta
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1192:20: warning: invalid case style for variable 'q1' [readability-identifier-naming]
  APInt nc, delta, q1, r1, q2, r2;
                   ^~~
                   Q1
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1192:24: warning: invalid case style for variable 'r1' [readability-identifier-naming]
  APInt nc, delta, q1, r1, q2, r2;
                       ^~~
                       R1
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1192:28: warning: invalid case style for variable 'q2' [readability-identifier-naming]
  APInt nc, delta, q1, r1, q2, r2;
                           ^~~
                           Q2
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1192:32: warning: invalid case style for variable 'r2' [readability-identifier-naming]
  APInt nc, delta, q1, r1, q2, r2;
                               ^~~
                               R2
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1193:13: warning: invalid case style for variable 'magu' [readability-identifier-naming]
  struct mu magu;
            ^~~~~
            Magu
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1194:12: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
  magu.a = 0;               // initialize "add" indicator
           ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1194:12: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1195:9: warning: invalid case style for variable 'allOnes' [readability-identifier-naming]
  APInt allOnes = APInt::getAllOnesValue(d.getBitWidth()).lshr(LeadingZeros);
        ^~~~~~~
        AllOnes
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1196:9: warning: invalid case style for variable 'signedMin' [readability-identifier-naming]
  APInt signedMin = APInt::getSignedMinValue(d.getBitWidth());
        ^~~~~~~~~
        SignedMin
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1197:9: warning: invalid case style for variable 'signedMax' [readability-identifier-naming]
  APInt signedMax = APInt::getSignedMaxValue(d.getBitWidth());
        ^~~~~~~~~
        SignedMax
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1216:29: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (q2.uge(signedMax)) magu.a = 1;
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1216:39: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
      if (q2.uge(signedMax)) magu.a = 1;
                                      ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1216:39: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1221:29: warning: statement should be inside braces [readability-braces-around-statements]
      if (q2.uge(signedMin)) magu.a = 1;
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1221:39: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
      if (q2.uge(signedMin)) magu.a = 1;
                                      ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1221:39: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1237:13: warning: invalid case style for function 'KnuthDiv' [readability-identifier-naming]
static void KnuthDiv(uint32_t *u, uint32_t *v, uint32_t *q, uint32_t* r,
            ^~~~~~~~~
            knuthDiv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1237:32: warning: invalid case style for parameter 'u' [readability-identifier-naming]
static void KnuthDiv(uint32_t *u, uint32_t *v, uint32_t *q, uint32_t* r,
                               ^~
                               U
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1237:45: warning: invalid case style for parameter 'v' [readability-identifier-naming]
static void KnuthDiv(uint32_t *u, uint32_t *v, uint32_t *q, uint32_t* r,
                                            ^~
                                            V
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1237:58: warning: invalid case style for parameter 'q' [readability-identifier-naming]
static void KnuthDiv(uint32_t *u, uint32_t *v, uint32_t *q, uint32_t* r,
                                                         ^~
                                                         Q
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1237:71: warning: invalid case style for parameter 'r' [readability-identifier-naming]
static void KnuthDiv(uint32_t *u, uint32_t *v, uint32_t *q, uint32_t* r,
                                                                      ^~
                                                                      R
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1238:31: warning: invalid case style for parameter 'm' [readability-identifier-naming]
                     unsigned m, unsigned n) {
                              ^~
                              M
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1238:43: warning: invalid case style for parameter 'n' [readability-identifier-naming]
                     unsigned m, unsigned n) {
                                          ^~
                                          N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1239:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(u && "Must provide dividend");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1240:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(v && "Must provide divisor");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1241:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(q && "Must provide quotient");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1242:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(u != v && u != q && v != q && "Must use different memory");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1243:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(n>1 && "n must be > 1");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1246:18: warning: invalid case style for variable 'b' [readability-identifier-naming]
  const uint64_t b = uint64_t(1) << 32;
                 ^
                 B
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1246:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  const uint64_t b = uint64_t(1) << 32;
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1270:12: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned shift = countLeadingZeros(v[n-1]);
           ^~~~~
           Shift
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1270:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  unsigned shift = countLeadingZeros(v[n-1]);
                   ^
../include/llvm/Support/MathExtras.h:189:38: note: default parameter was declared here
std::size_t countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1270:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned shift = countLeadingZeros(v[n-1]);
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1271:12: warning: invalid case style for variable 'v_carry' [readability-identifier-naming]
  uint32_t v_carry = 0;
           ^~~~~~~
           VCarry
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1272:12: warning: invalid case style for variable 'u_carry' [readability-identifier-naming]
  uint32_t u_carry = 0;
           ^~~~~~~
           UCarry
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1273:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (shift) {
      ^    ~
            != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1274:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i < m+n; ++i) {
                  ^      ~          ~~
                  I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1275:16: warning: invalid case style for variable 'u_tmp' [readability-identifier-naming]
      uint32_t u_tmp = u[i] >> (32 - shift);
               ^~~~~
               UTmp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1275:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      uint32_t u_tmp = u[i] >> (32 - shift);
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1276:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      u[i] = (u[i] << shift) | u_carry;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1276:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      u[i] = (u[i] << shift) | u_carry;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1279:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i < n; ++i) {
                  ^      ~        ~~
                  I      I        I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1280:16: warning: invalid case style for variable 'v_tmp' [readability-identifier-naming]
      uint32_t v_tmp = v[i] >> (32 - shift);
               ^~~~~
               VTmp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1280:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      uint32_t v_tmp = v[i] >> (32 - shift);
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1281:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      v[i] = (v[i] << shift) | v_carry;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1281:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      v[i] = (v[i] << shift) | v_carry;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1285:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  u[m+n] = u_carry;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1294:7: warning: invalid case style for variable 'j' [readability-identifier-naming]
  int j = m;
      ^
      J
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1305:14: warning: invalid case style for variable 'dividend' [readability-identifier-naming]
    uint64_t dividend = Make_64(u[j+n], u[j+n-1]);
             ^~~~~~~~
             Dividend
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1305:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t dividend = Make_64(u[j+n], u[j+n-1]);
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1305:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t dividend = Make_64(u[j+n], u[j+n-1]);
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1307:14: warning: invalid case style for variable 'qp' [readability-identifier-naming]
    uint64_t qp = dividend / v[n-1];
             ^~
             Qp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1307:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t qp = dividend / v[n-1];
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1308:14: warning: invalid case style for variable 'rp' [readability-identifier-naming]
    uint64_t rp = dividend % v[n-1];
             ^~
             Rp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1308:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t rp = dividend % v[n-1];
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1309:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (qp == b || qp*v[n-2] > b*rp + u[j+n-2]) {
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1309:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (qp == b || qp*v[n-2] > b*rp + u[j+n-2]) {
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1311:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      rp += v[n-1];
            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1312:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (rp < b && (qp == b || qp*v[n-2] > b*rp + u[j+n-2]))
                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1312:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (rp < b && (qp == b || qp*v[n-2] > b*rp + u[j+n-2]))
                                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1312:62: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (rp < b && (qp == b || qp*v[n-2] > b*rp + u[j+n-2]))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1325:13: warning: invalid case style for variable 'borrow' [readability-identifier-naming]
    int64_t borrow = 0;
            ^~~~~~
            Borrow
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1326:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i < n; ++i) {
                  ^      ~        ~~
                  I      I        I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1327:16: warning: invalid case style for variable 'p' [readability-identifier-naming]
      uint64_t p = uint64_t(qp) * uint64_t(v[i]);
               ^
               P
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1327:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      uint64_t p = uint64_t(qp) * uint64_t(v[i]);
                                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1328:15: warning: invalid case style for variable 'subres' [readability-identifier-naming]
      int64_t subres = int64_t(u[j+i]) - borrow - Lo_32(p);
              ^~~~~~
              Subres
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1328:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      int64_t subres = int64_t(u[j+i]) - borrow - Lo_32(p);
                               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1329:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      u[j+i] = Lo_32(subres);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1334:10: warning: invalid case style for variable 'isNeg' [readability-identifier-naming]
    bool isNeg = u[j+n] < borrow;
         ^~~~~
         IsNeg
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1334:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    bool isNeg = u[j+n] < borrow;
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1335:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    u[j+n] -= Lo_32(borrow);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1343:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    q[j] = Lo_32(qp);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1348:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      q[j]--;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1352:12: warning: invalid case style for variable 'carry' [readability-identifier-naming]
      bool carry = false;
           ^~~~~
           Carry
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1353:21: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (unsigned i = 0; i < n; i++) {
                    ^      ~      ~~~
                    I      I      I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1354:18: warning: invalid case style for variable 'limit' [readability-identifier-naming]
        uint32_t limit = std::min(u[j+i],v[i]);
                 ^~~~~
                 Limit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1354:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        uint32_t limit = std::min(u[j+i],v[i]);
                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1354:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        uint32_t limit = std::min(u[j+i],v[i]);
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1355:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        u[j+i] += v[i] + carry;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1355:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        u[j+i] += v[i] + carry;
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1355:26: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
        u[j+i] += v[i] + carry;
                         ^~~~~~
                         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1356:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        carry = u[j+i] < limit || (carry && u[j+i] == limit);
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1356:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        carry = u[j+i] < limit || (carry && u[j+i] == limit);
                                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1358:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      u[j+n] += carry;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1358:17: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      u[j+n] += carry;
                ^~~~~~
                static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1374:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> bool [readability-implicit-bool-conversion]
  if (r) {
      ^~
        != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1378:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (shift) {
        ^    ~
              != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1379:16: warning: invalid case style for variable 'carry' [readability-identifier-naming]
      uint32_t carry = 0;
               ^~~~~
               Carry
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1381:16: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (int i = n-1; i >= 0; i--) {
               ^        ~       ~~~
               I        I       I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1382:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        r[i] = (u[i] >> shift) | carry;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1382:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        r[i] = (u[i] >> shift) | carry;
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1383:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        carry = u[i] << (32 - shift);
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1387:16: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (int i = n-1; i >= 0; i--) {
               ^        ~       ~~~
               I        I       I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1388:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        r[i] = u[i];
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1388:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        r[i] = u[i];
               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1397:50: warning: invalid case style for parameter 'lhsWords' [readability-identifier-naming]
void APInt::divide(const WordType *LHS, unsigned lhsWords, const WordType *RHS,
                                                 ^~~~~~~~~
                                                 LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1398:29: warning: invalid case style for parameter 'rhsWords' [readability-identifier-naming]
                   unsigned rhsWords, WordType *Quotient, WordType *Remainder) {
                            ^~~~~~~~~
                            RhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1399:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(lhsWords >= rhsWords && "Fractional result");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1408:12: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned n = rhsWords * 2;
           ^
           N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1409:12: warning: invalid case style for variable 'm' [readability-identifier-naming]
  unsigned m = (lhsWords * 2) - n;
           ^
           M
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1418:8: warning: implicit conversion 'llvm::APInt::WordType *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
  if ((Remainder?4:3)*n+2*m+1 <= 128) {
       ^        ~
                 != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1420:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    V = &SPACE[m+n+1];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1421:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    Q = &SPACE[(m+n+1) + n];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1422:9: warning: implicit conversion 'llvm::APInt::WordType *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
    if (Remainder)
        ^        ~
                  != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1422:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Remainder)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1423:12: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      R = &SPACE[(m+n+1) + n + (m+n)];
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1425:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'uint32_t *' (aka 'unsigned int *') [cppcoreguidelines-owning-memory]
    U = new uint32_t[m + n + 1];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1426:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'uint32_t *' (aka 'unsigned int *') [cppcoreguidelines-owning-memory]
    V = new uint32_t[n];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1427:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'uint32_t *' (aka 'unsigned int *') [cppcoreguidelines-owning-memory]
    Q = new uint32_t[m+n];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1428:9: warning: implicit conversion 'llvm::APInt::WordType *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
    if (Remainder)
        ^        ~
                  != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1428:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Remainder)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1429:7: warning: assigning newly created 'gsl::owner<>' to non-owner 'uint32_t *' (aka 'unsigned int *') [cppcoreguidelines-owning-memory]
      R = new uint32_t[n];
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1434:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < lhsWords; ++i) {
                ^      ~               ~~
                I      I               I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1435:14: warning: invalid case style for variable 'tmp' [readability-identifier-naming]
    uint64_t tmp = LHS[i];
             ^~~
             Tmp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1435:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t tmp = LHS[i];
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1436:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    U[i * 2] = Lo_32(tmp);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1437:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    U[i * 2 + 1] = Hi_32(tmp);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1439:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  U[m+n] = 0; // this extra word is for "spill" in the Knuth algorithm.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1443:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < rhsWords; ++i) {
                ^      ~               ~~
                I      I               I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1444:14: warning: invalid case style for variable 'tmp' [readability-identifier-naming]
    uint64_t tmp = RHS[i];
             ^~~
             Tmp
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1444:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t tmp = RHS[i];
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1445:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    V[i * 2] = Lo_32(tmp);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1446:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    V[i * 2 + 1] = Hi_32(tmp);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1451:7: warning: implicit conversion 'llvm::APInt::WordType *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
  if (Remainder)
      ^        ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1451:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Remainder)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1458:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = n; i > 0 && V[i-1] == 0; i--) {
                ^      ~          ~~         ~~~
                I      I          I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1458:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (unsigned i = n; i > 0 && V[i-1] == 0; i--) {
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1462:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = m+n; i > 0 && U[i-1] == 0; i--)
                ^        ~          ~~         ~~~
                I        I          I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1462:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (unsigned i = m+n; i > 0 && U[i-1] == 0; i--)
                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1462:52: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = m+n; i > 0 && U[i-1] == 0; i--)
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1471:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(n != 0 && "Divide by zero?");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1473:14: warning: invalid case style for variable 'divisor' [readability-identifier-naming]
    uint32_t divisor = V[0];
             ^~~~~~~
             Divisor
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1473:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint32_t divisor = V[0];
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1474:14: warning: invalid case style for variable 'remainder' [readability-identifier-naming]
    uint32_t remainder = 0;
             ^~~~~~~~~
             Remainder
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1475:14: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (int i = m; i >= 0; i--) {
             ^      ~       ~~~
             I      I       I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1476:16: warning: invalid case style for variable 'partial_dividend' [readability-identifier-naming]
      uint64_t partial_dividend = Make_64(remainder, U[i]);
               ^~~~~~~~~~~~~~~~
               PartialDividend
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1476:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      uint64_t partial_dividend = Make_64(remainder, U[i]);
                                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1478:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Q[i] = 0;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1481:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Q[i] = 0;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1484:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Q[i] = 1;
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1487:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Q[i] = Lo_32(partial_dividend / divisor);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1488:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        remainder = Lo_32(partial_dividend - (Q[i] * divisor));
                                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1491:9: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> bool [readability-implicit-bool-conversion]
    if (R)
        ^~
          != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1491:11: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (R)
          ^
           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1492:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      R[0] = remainder;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1500:7: warning: implicit conversion 'llvm::APInt::WordType *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
  if (Quotient) {
      ^       ~
               != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1501:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i < lhsWords; ++i)
                  ^      ~               ~~
                  I      I               I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1501:44: warning: statement should be inside braces [hicpp-braces-around-statements]
    for (unsigned i = 0; i < lhsWords; ++i)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1502:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Quotient[i] = Make_64(Q[i*2+1], Q[i*2]);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1502:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Quotient[i] = Make_64(Q[i*2+1], Q[i*2]);
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1502:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Quotient[i] = Make_64(Q[i*2+1], Q[i*2]);
                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1506:7: warning: implicit conversion 'llvm::APInt::WordType *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
  if (Remainder) {
      ^        ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1507:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i < rhsWords; ++i)
                  ^      ~               ~~
                  I      I               I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1507:44: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (unsigned i = 0; i < rhsWords; ++i)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1508:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Remainder[i] = Make_64(R[i*2+1], R[i*2]);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1508:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Remainder[i] = Make_64(R[i*2+1], R[i*2]);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1508:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Remainder[i] = Make_64(R[i*2+1], R[i*2]);
                                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1513:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] U;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1414:3: note: variable declared here
  uint32_t *U = nullptr;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1514:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] V;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1415:3: note: variable declared here
  uint32_t *V = nullptr;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1515:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] Q;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1416:3: note: variable declared here
  uint32_t *Q = nullptr;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1516:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] R;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1417:3: note: variable declared here
  uint32_t *R = nullptr;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1521:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1525:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(RHS.U.VAL != 0 && "Divide by zero?");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1525:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    assert(RHS.U.VAL != 0 && "Divide by zero?");
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1526:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, U.VAL / RHS.U.VAL);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1526:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL / RHS.U.VAL);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1526:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL / RHS.U.VAL);
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1530:12: warning: invalid case style for variable 'lhsWords' [readability-identifier-naming]
  unsigned lhsWords = getNumWords(getActiveBits());
           ^~~~~~~~
           LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1531:12: warning: invalid case style for variable 'rhsBits' [readability-identifier-naming]
  unsigned rhsBits  = RHS.getActiveBits();
           ^~~~~~~
           RhsBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1532:12: warning: invalid case style for variable 'rhsWords' [readability-identifier-naming]
  unsigned rhsWords = getNumWords(rhsBits);
           ^~~~~~~~
           RhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1533:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(rhsWords && "Divided by zero???");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1536:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!lhsWords)
      ~^~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1536:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!lhsWords)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1538:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1539:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (rhsBits == 1)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1542:45: warning: statement should be inside braces [readability-braces-around-statements]
  if (lhsWords < rhsWords || this->ult(RHS))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1544:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1545:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*this == RHS)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1547:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 1);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1548:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsWords == 1) // rhsWords is 1 if lhsWords is 1.
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1550:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, this->U.pVal[0] / RHS.U.pVal[0]);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1550:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(BitWidth, this->U.pVal[0] / RHS.U.pVal[0]);
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1550:36: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, this->U.pVal[0] / RHS.U.pVal[0]);
                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1550:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(BitWidth, this->U.pVal[0] / RHS.U.pVal[0]);
                                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1550:52: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, this->U.pVal[0] / RHS.U.pVal[0]);
                                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1553:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Quotient(BitWidth, 0); // to hold result.
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1554:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal, nullptr);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1554:34: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal, nullptr);
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1554:61: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal, nullptr);
                                                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1559:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(RHS != 0 && "Divide by zero?");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1562:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1563:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, U.VAL / RHS);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1563:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL / RHS);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1566:12: warning: invalid case style for variable 'lhsWords' [readability-identifier-naming]
  unsigned lhsWords = getNumWords(getActiveBits());
           ^~~~~~~~
           LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1569:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!lhsWords)
      ~^~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1569:17: warning: statement should be inside braces [readability-braces-around-statements]
  if (!lhsWords)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1571:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1572:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (RHS == 1)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1575:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (this->ult(RHS))
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1577:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1578:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*this == RHS)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1580:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 1);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1581:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsWords == 1) // rhsWords is 1 if lhsWords is 1.
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1583:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, this->U.pVal[0] / RHS);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1583:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(BitWidth, this->U.pVal[0] / RHS);
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1583:36: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, this->U.pVal[0] / RHS);
                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1586:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Quotient(BitWidth, 0); // to hold result.
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1587:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, &RHS, 1, Quotient.U.pVal, nullptr);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1587:48: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, &RHS, 1, Quotient.U.pVal, nullptr);
                                               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1593:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (RHS.isNegative())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1597:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (RHS.isNegative())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1604:17: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (RHS < 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1608:15: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (RHS < 0)
              ^
               {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1614:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1616:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(RHS.U.VAL != 0 && "Remainder by zero?");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1616:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    assert(RHS.U.VAL != 0 && "Remainder by zero?");
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1617:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, U.VAL % RHS.U.VAL);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1617:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL % RHS.U.VAL);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1617:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.VAL % RHS.U.VAL);
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1621:12: warning: invalid case style for variable 'lhsWords' [readability-identifier-naming]
  unsigned lhsWords = getNumWords(getActiveBits());
           ^~~~~~~~
           LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1624:12: warning: invalid case style for variable 'rhsBits' [readability-identifier-naming]
  unsigned rhsBits = RHS.getActiveBits();
           ^~~~~~~
           RhsBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1625:12: warning: invalid case style for variable 'rhsWords' [readability-identifier-naming]
  unsigned rhsWords = getNumWords(rhsBits);
           ^~~~~~~~
           RhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1626:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(rhsWords && "Performing remainder operation by zero ???");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1629:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsWords == 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1631:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1632:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (rhsBits == 1)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1634:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1635:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsWords < rhsWords || this->ult(RHS))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1638:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*this == RHS)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1640:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1641:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsWords == 1)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1643:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, U.pVal[0] % RHS.U.pVal[0]);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1643:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(BitWidth, U.pVal[0] % RHS.U.pVal[0]);
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1643:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.pVal[0] % RHS.U.pVal[0]);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1643:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return APInt(BitWidth, U.pVal[0] % RHS.U.pVal[0]);
                                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1643:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return APInt(BitWidth, U.pVal[0] % RHS.U.pVal[0]);
                                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1646:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt Remainder(BitWidth, 0);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1647:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, RHS.U.pVal, rhsWords, nullptr, Remainder.U.pVal);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1647:34: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, RHS.U.pVal, rhsWords, nullptr, Remainder.U.pVal);
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1647:71: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, RHS.U.pVal, rhsWords, nullptr, Remainder.U.pVal);
                                                                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1652:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(RHS != 0 && "Remainder by zero?");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1654:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1655:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.VAL % RHS;
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1658:12: warning: invalid case style for variable 'lhsWords' [readability-identifier-naming]
  unsigned lhsWords = getNumWords(getActiveBits());
           ^~~~~~~~
           LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1661:21: warning: statement should be inside braces [readability-braces-around-statements]
  if (lhsWords == 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1664:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (RHS == 1)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1667:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (this->ult(RHS))
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1670:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*this == RHS)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1673:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (lhsWords == 1)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1675:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return U.pVal[0] % RHS;
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1675:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.pVal[0] % RHS;
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1679:12: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(U.pVal, lhsWords, &RHS, 1, nullptr, &Remainder);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1685:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (RHS.isNegative())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1689:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (RHS.isNegative())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1696:17: warning: statement should be inside braces [readability-braces-around-statements]
    if (RHS < 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1700:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (RHS < 0)
              ^
               {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1707:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1712:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(RHS.U.VAL != 0 && "Divide by zero?");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1712:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    assert(RHS.U.VAL != 0 && "Divide by zero?");
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1713:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t QuotVal = LHS.U.VAL / RHS.U.VAL;
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1713:42: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t QuotVal = LHS.U.VAL / RHS.U.VAL;
                                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1714:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t RemVal = LHS.U.VAL % RHS.U.VAL;
                            ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1714:41: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t RemVal = LHS.U.VAL % RHS.U.VAL;
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1715:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient = APInt(BitWidth, QuotVal);
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1716:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Remainder = APInt(BitWidth, RemVal);
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1721:12: warning: invalid case style for variable 'lhsWords' [readability-identifier-naming]
  unsigned lhsWords = getNumWords(LHS.getActiveBits());
           ^~~~~~~~
           LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1722:12: warning: invalid case style for variable 'rhsBits' [readability-identifier-naming]
  unsigned rhsBits  = RHS.getActiveBits();
           ^~~~~~~
           RhsBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1723:12: warning: invalid case style for variable 'rhsWords' [readability-identifier-naming]
  unsigned rhsWords = getNumWords(rhsBits);
           ^~~~~~~~
           RhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1724:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(rhsWords && "Performing divrem operation by zero ???");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1728:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient = APInt(BitWidth, 0);    // 0 / Y ===> 0
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1729:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Remainder = APInt(BitWidth, 0);   // 0 % Y ===> 0
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1735:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Remainder = APInt(BitWidth, 0);   // X % 1 ===> 0
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1740:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient = APInt(BitWidth, 0);    // X / Y ===> 0, iff X < Y
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1745:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient  = APInt(BitWidth, 1);   // X / X ===> 1
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1746:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Remainder = APInt(BitWidth, 0);   // X % X ===> 0;
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1759:14: warning: invalid case style for variable 'lhsValue' [readability-identifier-naming]
    uint64_t lhsValue = LHS.U.pVal[0];
             ^~~~~~~~
             LhsValue
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1759:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t lhsValue = LHS.U.pVal[0];
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1759:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t lhsValue = LHS.U.pVal[0];
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1760:14: warning: invalid case style for variable 'rhsValue' [readability-identifier-naming]
    uint64_t rhsValue = RHS.U.pVal[0];
             ^~~~~~~~
             RhsValue
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1760:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t rhsValue = RHS.U.pVal[0];
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1760:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t rhsValue = RHS.U.pVal[0];
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1767:3: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
  divide(LHS.U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal,
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1754:3: note: Calling 'APInt::reallocate'
  Quotient.reallocate(BitWidth);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:127:3: note: Taking false branch
  if (getNumWords() == getNumWords(NewBitWidth)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:133:3: note: Taking false branch
  if (!isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:140:3: note: Taking true branch
  if (!isSingleWord())
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:141:14: note: Calling 'getMemory'
    U.pVal = getMemory(getNumWords());
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:141:14: note: Returned allocated memory
    U.pVal = getMemory(getNumWords());
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1754:3: note: Returned allocated memory
  Quotient.reallocate(BitWidth);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:7: note: Assuming 'lhsWords' is not equal to 1
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:3: note: Taking false branch
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Returned allocated memory
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:27: note: Left side of '||' is true
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1740:5: note: Calling move assignment operator for 'APInt'
    Quotient = APInt(BitWidth, 0);    // X / Y ===> 0, iff X < Y
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1740:5: note: Returning; memory was released
    Quotient = APInt(BitWidth, 0);    // X / Y ===> 0, iff X < Y
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Returning; memory was released
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1115:3: note: Loop condition is true.  Entering loop body
  for (i = 0; r[i^1] != 0; i ^= 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1120:5: note: Calling 'APInt::udivrem'
    udivrem(r[i], r[i^1], q, r[i]);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1711:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1727:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:7: note: Assuming 'rhsBits' is not equal to 1
  if (rhsBits == 1) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1733:3: note: Taking false branch
  if (rhsBits == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:7: note: Left side of '||' is false
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1738:3: note: Taking false branch
  if (lhsWords < rhsWords || LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1744:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:7: note: Assuming 'lhsWords' is not equal to 1
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1757:3: note: Taking false branch
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1767:3: note: Use of memory after it is freed
  divide(LHS.U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal,
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1767:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(LHS.U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal,
               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1767:38: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(LHS.U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal,
                                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1767:65: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(LHS.U.pVal, lhsWords, RHS.U.pVal, rhsWords, Quotient.U.pVal,
                                                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1768:22: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
         Remainder.U.pVal);
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1770:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memset(Quotient.U.pVal + lhsWords, 0,
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1770:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(Quotient.U.pVal + lhsWords, 0,
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1772:27: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memset(Remainder.U.pVal + rhsWords, 0,
                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1772:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(Remainder.U.pVal + rhsWords, 0,
                               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1778:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(RHS != 0 && "Divide by zero?");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1783:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t QuotVal = LHS.U.VAL / RHS;
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1784:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Remainder = LHS.U.VAL % RHS;
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1785:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient = APInt(BitWidth, QuotVal);
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1790:12: warning: invalid case style for variable 'lhsWords' [readability-identifier-naming]
  unsigned lhsWords = getNumWords(LHS.getActiveBits());
           ^~~~~~~~
           LhsWords
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1794:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient = APInt(BitWidth, 0);    // 0 / Y ===> 0
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1807:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient = APInt(BitWidth, 0);    // X / Y ===> 0, iff X < Y
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1812:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Quotient  = APInt(BitWidth, 1);   // X / X ===> 1
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1824:14: warning: invalid case style for variable 'lhsValue' [readability-identifier-naming]
    uint64_t lhsValue = LHS.U.pVal[0];
             ^~~~~~~~
             LhsValue
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1824:25: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
    uint64_t lhsValue = LHS.U.pVal[0];
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2129:3: note: Calling 'APInt::toStringSigned'
  this->toStringSigned(S);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1677:5: note: Calling 'APInt::toString'
    toString(Str, Radix, true, false);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2011:3: note: Taking false branch
  if (formatAsCLiteral) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2032:3: note: Taking false branch
  if (*this == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2043:3: note: Taking false branch
  if (isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2073:9: note: Calling copy constructor for 'APInt'
  APInt Tmp(*this);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:323:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Calling 'getMemory'
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Returned allocated memory
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Returned allocated memory
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2073:9: note: Returning from copy constructor for 'APInt'
  APInt Tmp(*this);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2075:7: note: Left side of '&&' is true
  if (Signed && isNegative()) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2075:3: note: Taking false branch
  if (Signed && isNegative()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2083:3: note: Loop condition is false. Execution continues on line 2089
  while (*Prefix) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2094:7: note: Left side of '||' is false
  if (Radix == 2 || Radix == 8 || Radix == 16) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2094:7: note: Left side of '||' is false
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2094:3: note: Taking false branch
  if (Radix == 2 || Radix == 8 || Radix == 16) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2105:5: note: Loop condition is true.  Entering loop body
    while (Tmp.getBoolValue()) {
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2105:5: note: Loop condition is true.  Entering loop body
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2107:7: note: Calling 'APInt::udivrem'
      udivrem(Tmp, Radix, Tmp, Digit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1782:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:7: note: Assuming 'lhsWords' is equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:3: note: Taking true branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1794:5: note: Calling move assignment operator for 'APInt'
    Quotient = APInt(BitWidth, 0);    // 0 / Y ===> 0
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1794:5: note: Returning; memory was released
    Quotient = APInt(BitWidth, 0);    // 0 / Y ===> 0
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2107:7: note: Returning; memory was released
      udivrem(Tmp, Radix, Tmp, Digit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2105:5: note: Loop condition is true.  Entering loop body
    while (Tmp.getBoolValue()) {
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2107:7: note: Calling 'APInt::udivrem'
      udivrem(Tmp, Radix, Tmp, Digit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1782:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1799:3: note: Taking false branch
  if (RHS == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1805:3: note: Taking false branch
  if (LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1811:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1822:7: note: Assuming 'lhsWords' is equal to 1
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1822:3: note: Taking true branch
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1824:25: note: Use of memory after it is freed
    uint64_t lhsValue = LHS.U.pVal[0];
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1824:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t lhsValue = LHS.U.pVal[0];
                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1824:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    uint64_t lhsValue = LHS.U.pVal[0];
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1831:3: warning: Use of memory after it is freed [clang-analyzer-cplusplus.NewDelete]
  divide(LHS.U.pVal, lhsWords, &RHS, 1, Quotient.U.pVal, &Remainder);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2129:3: note: Calling 'APInt::toStringSigned'
  this->toStringSigned(S);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1677:5: note: Calling 'APInt::toString'
    toString(Str, Radix, true, false);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2011:3: note: Taking false branch
  if (formatAsCLiteral) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2032:3: note: Taking false branch
  if (*this == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2043:3: note: Taking false branch
  if (isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2073:9: note: Calling copy constructor for 'APInt'
  APInt Tmp(*this);
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:323:5: note: Taking false branch
    if (isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Calling 'APInt::initSlowCase'
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Calling 'getMemory'
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:47:10: note: Memory is allocated
  return new uint64_t[numWords];
         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:88:12: note: Returned allocated memory
  U.pVal = getMemory(getNumWords());
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:326:7: note: Returned allocated memory
      initSlowCase(that);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2073:9: note: Returning from copy constructor for 'APInt'
  APInt Tmp(*this);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2075:7: note: Left side of '&&' is true
  if (Signed && isNegative()) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2075:3: note: Taking false branch
  if (Signed && isNegative()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2083:3: note: Loop condition is false. Execution continues on line 2089
  while (*Prefix) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2094:7: note: Left side of '||' is false
  if (Radix == 2 || Radix == 8 || Radix == 16) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2094:7: note: Left side of '||' is false
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2094:3: note: Taking false branch
  if (Radix == 2 || Radix == 8 || Radix == 16) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2105:5: note: Loop condition is true.  Entering loop body
    while (Tmp.getBoolValue()) {
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2105:5: note: Loop condition is true.  Entering loop body
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2107:7: note: Calling 'APInt::udivrem'
      udivrem(Tmp, Radix, Tmp, Digit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1782:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:7: note: Assuming 'lhsWords' is equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:3: note: Taking true branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1794:5: note: Calling move assignment operator for 'APInt'
    Quotient = APInt(BitWidth, 0);    // 0 / Y ===> 0
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:755:5: note: Taking true branch
    if (!isSingleWord())
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:756:7: note: Memory is released
      delete[] U.pVal;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1794:5: note: Returning; memory was released
    Quotient = APInt(BitWidth, 0);    // 0 / Y ===> 0
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2107:7: note: Returning; memory was released
      udivrem(Tmp, Radix, Tmp, Digit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2105:5: note: Loop condition is true.  Entering loop body
    while (Tmp.getBoolValue()) {
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2107:7: note: Calling 'APInt::udivrem'
      udivrem(Tmp, Radix, Tmp, Digit);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1782:3: note: Taking false branch
  if (LHS.isSingleWord()) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:7: note: Assuming 'lhsWords' is not equal to 0
  if (lhsWords == 0) {
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1793:3: note: Taking false branch
  if (lhsWords == 0) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1799:3: note: Taking false branch
  if (RHS == 1) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1805:3: note: Taking false branch
  if (LHS.ult(RHS)) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1811:3: note: Taking false branch
  if (LHS == RHS) {
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1822:7: note: Assuming 'lhsWords' is not equal to 1
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1822:3: note: Taking false branch
  if (lhsWords == 1) { // rhsWords is 1 if lhsWords is 1.
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1831:3: note: Use of memory after it is freed
  divide(LHS.U.pVal, lhsWords, &RHS, 1, Quotient.U.pVal, &Remainder);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1831:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(LHS.U.pVal, lhsWords, &RHS, 1, Quotient.U.pVal, &Remainder);
               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1831:52: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  divide(LHS.U.pVal, lhsWords, &RHS, 1, Quotient.U.pVal, &Remainder);
                                                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1833:26: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  std::memset(Quotient.U.pVal + lhsWords, 0,
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1833:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(Quotient.U.pVal + lhsWords, 0,
                              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1840:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (RHS.isNegative())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1859:17: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (RHS < 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1875:14: warning: invalid case style for function 'sadd_ov' [readability-identifier-naming]
APInt APInt::sadd_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             saddOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1882:14: warning: invalid case style for function 'uadd_ov' [readability-identifier-naming]
APInt APInt::uadd_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             uaddOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1888:14: warning: invalid case style for function 'ssub_ov' [readability-identifier-naming]
APInt APInt::ssub_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             ssubOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1895:14: warning: invalid case style for function 'usub_ov' [readability-identifier-naming]
APInt APInt::usub_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             usubOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1901:14: warning: invalid case style for function 'sdiv_ov' [readability-identifier-naming]
APInt APInt::sdiv_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             sdivOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1907:14: warning: invalid case style for function 'smul_ov' [readability-identifier-naming]
APInt APInt::smul_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             smulOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1910:30: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*this != 0 && RHS != 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1912:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1917:14: warning: invalid case style for function 'umul_ov' [readability-identifier-naming]
APInt APInt::umul_ov(const APInt &RHS, bool &Overflow) const {
             ^~~~~~~~
             umulOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1920:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*this != 0 && RHS != 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1922:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1927:14: warning: invalid case style for function 'sshl_ov' [readability-identifier-naming]
APInt APInt::sshl_ov(const APInt &ShAmt, bool &Overflow) const {
             ^~~~~~~~
             sshlOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1929:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Overflow)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1930:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1932:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (isNonNegative()) // Don't allow sign change.
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1934:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1940:14: warning: invalid case style for function 'ushl_ov' [readability-identifier-naming]
APInt APInt::ushl_ov(const APInt &ShAmt, bool &Overflow) const {
             ^~~~~~~~
             ushlOv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1942:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Overflow)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1943:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(BitWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1953:33: warning: invalid case style for parameter 'numbits' [readability-identifier-naming]
void APInt::fromString(unsigned numbits, StringRef str, uint8_t radix) {
                                ^~~~~~~~
                                Numbits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1953:52: warning: invalid case style for parameter 'str' [readability-identifier-naming]
void APInt::fromString(unsigned numbits, StringRef str, uint8_t radix) {
                                                   ^~~~
                                                   Str
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1953:65: warning: invalid case style for parameter 'radix' [readability-identifier-naming]
void APInt::fromString(unsigned numbits, StringRef str, uint8_t radix) {
                                                                ^~~~~~
                                                                Radix
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1955:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!str.empty() && "Invalid string length");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1956:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((radix == 10 || radix == 8 || radix == 16 || radix == 2 ||
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1960:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = str.begin();
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1961:10: warning: invalid case style for variable 'slen' [readability-identifier-naming]
  size_t slen = str.size();
         ^~~~
         Slen
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1962:8: warning: invalid case style for variable 'isNeg' [readability-identifier-naming]
  bool isNeg = *p == '-';
       ^~~~~
       IsNeg
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1966:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(slen && "String is only a sign, needs a value.");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1968:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert((slen <= numbits || radix != 2) && "Insufficient bit width");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1969:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1970:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1971:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((((slen-1)*64)/22 <= numbits || radix != 10) &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1975:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isSingleWord())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1976:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.VAL = 0;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1977:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1978:7: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    U.pVal = getClearedMemory(getNumWords());
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1981:12: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned shift = (radix == 16 ? 4 : radix == 8 ? 3 : radix == 2 ? 1 : 0);
           ^~~~~
           Shift
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1984:28: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (StringRef::iterator e = str.end(); p != e; ++p) {
                           ^                   ~~
                           E                   E
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1985:14: warning: invalid case style for variable 'digit' [readability-identifier-naming]
    unsigned digit = getDigit(*p, radix);
             ^~~~~
             Digit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1986:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(digit < radix && "Invalid character in digit string");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1990:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (shift)
          ^    ~
                != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1990:17: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (shift)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:1992:11: warning: statement should be inside braces [google-readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2000:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isNeg)
            ^
             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2005:40: warning: invalid case style for parameter 'formatAsCLiteral' [readability-identifier-naming]
                     bool Signed, bool formatAsCLiteral) const {
                                       ^~~~~~~~~~~~~~~~~
                                       FormatAsCLiteral
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2006:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 ||
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2033:12: warning: implicit conversion 'char' -> bool [readability-implicit-bool-conversion]
    while (*Prefix) {
           ^      ~
                   != 0
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2035:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++Prefix;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2056:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        N = -(uint64_t)I;
             ^~~~~~~~~~~~
             static_cast<uint64_t>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2060:12: warning: implicit conversion 'char' -> bool [readability-implicit-bool-conversion]
    while (*Prefix) {
           ^      ~
                   != 0
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2062:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++Prefix;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2065:12: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    while (N) {
           ^~
             != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2066:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      *--BufPtr = Digits[N % Radix];
       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2066:19: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      *--BufPtr = Digits[N % Radix];
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2083:10: warning: implicit conversion 'char' -> bool [readability-implicit-bool-conversion]
  while (*Prefix) {
         ^      ~
                 != 0
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2085:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ++Prefix;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2100:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      unsigned Digit = unsigned(Tmp.getRawData()[0]) & MaskAmt;
                                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2101:21: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      Str.push_back(Digits[Digit]);
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2108:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(Digit < Radix && "divide failed");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2109:21: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      Str.push_back(Digits[Digit]);
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2119:29: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
std::string APInt::toString(unsigned Radix = 10, bool Signed = true) const {
                            ^             ~~~~~~
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2119:50: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
std::string APInt::toString(unsigned Radix = 10, bool Signed = true) const {
                                                 ^          ~~~~~~~~
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2128:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  this->toStringUnsigned(U);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1670:53: note: default parameter was declared here
  void toStringUnsigned(SmallVectorImpl<char> &Str, unsigned Radix = 10) const {
                                                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2129:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  this->toStringSigned(S);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:1676:51: note: default parameter was declared here
  void toStringSigned(SmallVectorImpl<char> &Str, unsigned Radix = 10) const {
                                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2135:41: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
void APInt::print(raw_ostream &OS, bool isSigned) const {
                                        ^~~~~~~~~
                                        IsSigned
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2153:51: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
static inline APInt::WordType lowBitMask(unsigned bits) {
                                                  ^~~~~
                                                  Bits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2154:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(bits != 0 && bits <= APInt::APINT_BITS_PER_WORD);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2156:11: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return ~(APInt::WordType) 0 >> (APInt::APINT_BITS_PER_WORD - bits);
          ^~~~~~~~~~~~~~~~~~~
          static_cast<APInt::WordType>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2160:55: warning: invalid case style for parameter 'part' [readability-identifier-naming]
static inline APInt::WordType lowHalf(APInt::WordType part) {
                                                      ^~~~~
                                                      Part
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2165:56: warning: invalid case style for parameter 'part' [readability-identifier-naming]
static inline APInt::WordType highHalf(APInt::WordType part) {
                                                       ^~~~~
                                                       Part
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2171:41: warning: invalid case style for parameter 'value' [readability-identifier-naming]
static unsigned partMSB(APInt::WordType value) {
                                        ^~~~~~
                                        Value
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2177:41: warning: invalid case style for parameter 'value' [readability-identifier-naming]
static unsigned partLSB(APInt::WordType value) {
                                        ^~~~~~
                                        Value
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2183:29: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcSet(WordType *dst, WordType part, unsigned parts) {
                            ^~~~
                            Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2183:43: warning: invalid case style for parameter 'part' [readability-identifier-naming]
void APInt::tcSet(WordType *dst, WordType part, unsigned parts) {
                                          ^~~~~
                                          Part
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2183:58: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcSet(WordType *dst, WordType part, unsigned parts) {
                                                         ^~~~~~
                                                         Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2184:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(parts > 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2186:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  dst[0] = part;
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2187:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 1; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2187:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 1; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2188:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] = 0;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2192:32: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcAssign(WordType *dst, const WordType *src, unsigned parts) {
                               ^~~~
                               Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2192:53: warning: invalid case style for parameter 'src' [readability-identifier-naming]
void APInt::tcAssign(WordType *dst, const WordType *src, unsigned parts) {
                                                    ^~~~
                                                    Src
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2192:67: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcAssign(WordType *dst, const WordType *src, unsigned parts) {
                                                                  ^~~~~~
                                                                  Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2193:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2193:39: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2194:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] = src[i];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2194:14: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] = src[i];
             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2198:38: warning: invalid case style for parameter 'src' [readability-identifier-naming]
bool APInt::tcIsZero(const WordType *src, unsigned parts) {
                                     ^~~~
                                     Src
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2198:52: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
bool APInt::tcIsZero(const WordType *src, unsigned parts) {
                                                   ^~~~~~
                                                   Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2199:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2199:39: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2200:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (src[i])
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2200:9: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (src[i])
        ^     ~
               != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2200:16: warning: statement should be inside braces [readability-braces-around-statements]
    if (src[i])
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2207:41: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
int APInt::tcExtractBit(const WordType *parts, unsigned bit) {
                                        ^~~~~~
                                        Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2207:57: warning: invalid case style for parameter 'bit' [readability-identifier-naming]
int APInt::tcExtractBit(const WordType *parts, unsigned bit) {
                                                        ^~~~
                                                        Bit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2208:10: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
  return (parts[whichWord(bit)] & maskBit(bit)) != 0;
         ^                                          ~
         static_cast<int>(                          )
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2208:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return (parts[whichWord(bit)] & maskBit(bit)) != 0;
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2212:32: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcSetBit(WordType *parts, unsigned bit) {
                               ^~~~~~
                               Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2212:48: warning: invalid case style for parameter 'bit' [readability-identifier-naming]
void APInt::tcSetBit(WordType *parts, unsigned bit) {
                                               ^~~~
                                               Bit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2213:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  parts[whichWord(bit)] |= maskBit(bit);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2217:34: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcClearBit(WordType *parts, unsigned bit) {
                                 ^~~~~~
                                 Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2217:50: warning: invalid case style for parameter 'bit' [readability-identifier-naming]
void APInt::tcClearBit(WordType *parts, unsigned bit) {
                                                 ^~~~
                                                 Bit
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2218:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  parts[whichWord(bit)] &= ~maskBit(bit);
  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2223:39: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
unsigned APInt::tcLSB(const WordType *parts, unsigned n) {
                                      ^~~~~~
                                      Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2223:55: warning: invalid case style for parameter 'n' [readability-identifier-naming]
unsigned APInt::tcLSB(const WordType *parts, unsigned n) {
                                                      ^~
                                                      N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2224:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < n; i++) {
                ^      ~      ~~~
                I      I      I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2225:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (parts[i] != 0) {
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2226:16: warning: invalid case style for variable 'lsb' [readability-identifier-naming]
      unsigned lsb = partLSB(parts[i]);
               ^~~
               Lsb
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2226:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      unsigned lsb = partLSB(parts[i]);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2237:39: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
unsigned APInt::tcMSB(const WordType *parts, unsigned n) {
                                      ^~~~~~
                                      Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2237:55: warning: invalid case style for parameter 'n' [readability-identifier-naming]
unsigned APInt::tcMSB(const WordType *parts, unsigned n) {
                                                      ^~
                                                      N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2241:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (parts[n] != 0) {
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2242:16: warning: invalid case style for variable 'msb' [readability-identifier-naming]
      unsigned msb = partMSB(parts[n]);
               ^~~
               Msb
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2242:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      unsigned msb = partMSB(parts[n]);
                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2246:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  } while (n);
           ^~
             != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2256:28: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
APInt::tcExtract(WordType *dst, unsigned dstCount, const WordType *src,
                           ^~~~
                           Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2256:42: warning: invalid case style for parameter 'dstCount' [readability-identifier-naming]
APInt::tcExtract(WordType *dst, unsigned dstCount, const WordType *src,
                                         ^~~~~~~~~
                                         DstCount
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2256:68: warning: invalid case style for parameter 'src' [readability-identifier-naming]
APInt::tcExtract(WordType *dst, unsigned dstCount, const WordType *src,
                                                                   ^~~~
                                                                   Src
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2257:27: warning: invalid case style for parameter 'srcBits' [readability-identifier-naming]
                 unsigned srcBits, unsigned srcLSB) {
                          ^~~~~~~~
                          SrcBits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2257:45: warning: invalid case style for parameter 'srcLSB' [readability-identifier-naming]
                 unsigned srcBits, unsigned srcLSB) {
                                            ^~~~~~~
                                            SrcLsb
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2258:12: warning: invalid case style for variable 'dstParts' [readability-identifier-naming]
  unsigned dstParts = (srcBits + APINT_BITS_PER_WORD - 1) / APINT_BITS_PER_WORD;
           ^~~~~~~~
           DstParts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2259:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(dstParts <= dstCount);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2261:12: warning: invalid case style for variable 'firstSrcPart' [readability-identifier-naming]
  unsigned firstSrcPart = srcLSB / APINT_BITS_PER_WORD;
           ^~~~~~~~~~~~
           FirstSrcPart
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2262:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  tcAssign (dst, src + firstSrcPart, dstParts);
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2264:12: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned shift = srcLSB % APINT_BITS_PER_WORD;
           ^~~~~
           Shift
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2270:12: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned n = dstParts * APINT_BITS_PER_WORD - shift;
           ^
           N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2272:14: warning: invalid case style for variable 'mask' [readability-identifier-naming]
    WordType mask = lowBitMask (srcBits - n);
             ^~~~
             Mask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2273:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[dstParts - 1] |= ((src[firstSrcPart + dstParts] & mask)
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2273:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[dstParts - 1] |= ((src[firstSrcPart + dstParts] & mask)
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2276:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (srcBits % APINT_BITS_PER_WORD)
        ^~~~~~~                      ~
        (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2276:39: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (srcBits % APINT_BITS_PER_WORD)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2277:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[dstParts - 1] &= lowBitMask (srcBits % APINT_BITS_PER_WORD);
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2281:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (dstParts < dstCount)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2282:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[dstParts++] = 0;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2286:40: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
APInt::WordType APInt::tcAdd(WordType *dst, const WordType *rhs,
                                       ^~~~
                                       Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2286:61: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
APInt::WordType APInt::tcAdd(WordType *dst, const WordType *rhs,
                                                            ^~~~
                                                            Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2287:39: warning: invalid case style for parameter 'c' [readability-identifier-naming]
                             WordType c, unsigned parts) {
                                      ^~
                                      C
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2287:51: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                             WordType c, unsigned parts) {
                                                  ^~~~~~
                                                  Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2288:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(c <= 1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2290:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++) {
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2291:14: warning: invalid case style for variable 'l' [readability-identifier-naming]
    WordType l = dst[i];
             ^
             L
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2291:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    WordType l = dst[i];
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2292:9: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (c) {
        ^~
          != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2293:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] += rhs[i] + 1;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2293:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] += rhs[i] + 1;
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2294:11: warning: implicit conversion bool -> 'llvm::APInt::WordType' (aka 'unsigned long') [readability-implicit-bool-conversion]
      c = (dst[i] <= l);
          ^
          static_cast<llvm::APInt::WordType>
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2294:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      c = (dst[i] <= l);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2296:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] += rhs[i];
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2296:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] += rhs[i];
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2297:11: warning: implicit conversion bool -> 'llvm::APInt::WordType' (aka 'unsigned long') [readability-implicit-bool-conversion]
      c = (dst[i] < l);
          ^
          static_cast<llvm::APInt::WordType>
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2297:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      c = (dst[i] < l);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2308:44: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
APInt::WordType APInt::tcAddPart(WordType *dst, WordType src,
                                           ^~~~
                                           Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2308:58: warning: invalid case style for parameter 'src' [readability-identifier-naming]
APInt::WordType APInt::tcAddPart(WordType *dst, WordType src,
                                                         ^~~~
                                                         Src
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2309:43: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                                 unsigned parts) {
                                          ^~~~~~
                                          Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2310:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; ++i) {
                ^      ~            ~~
                I      I            I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2311:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] += src;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2312:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (dst[i] >= src)
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2312:23: warning: statement should be inside braces [readability-braces-around-statements]
    if (dst[i] >= src)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2321:45: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
APInt::WordType APInt::tcSubtract(WordType *dst, const WordType *rhs,
                                            ^~~~
                                            Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2321:66: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
APInt::WordType APInt::tcSubtract(WordType *dst, const WordType *rhs,
                                                                 ^~~~
                                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2322:44: warning: invalid case style for parameter 'c' [readability-identifier-naming]
                                  WordType c, unsigned parts) {
                                           ^~
                                           C
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2322:56: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                                  WordType c, unsigned parts) {
                                                       ^~~~~~
                                                       Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2323:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(c <= 1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2325:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++) {
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2326:14: warning: invalid case style for variable 'l' [readability-identifier-naming]
    WordType l = dst[i];
             ^
             L
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2326:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    WordType l = dst[i];
                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2327:9: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (c) {
        ^~
          != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2328:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] -= rhs[i] + 1;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2328:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] -= rhs[i] + 1;
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2329:11: warning: implicit conversion bool -> 'llvm::APInt::WordType' (aka 'unsigned long') [readability-implicit-bool-conversion]
      c = (dst[i] >= l);
          ^
          static_cast<llvm::APInt::WordType>
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2329:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      c = (dst[i] >= l);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2331:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] -= rhs[i];
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2331:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] -= rhs[i];
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2332:11: warning: implicit conversion bool -> 'llvm::APInt::WordType' (aka 'unsigned long') [readability-implicit-bool-conversion]
      c = (dst[i] > l);
          ^
          static_cast<llvm::APInt::WordType>
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2332:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      c = (dst[i] > l);
           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2346:49: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
APInt::WordType APInt::tcSubtractPart(WordType *dst, WordType src,
                                                ^~~~
                                                Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2346:63: warning: invalid case style for parameter 'src' [readability-identifier-naming]
APInt::WordType APInt::tcSubtractPart(WordType *dst, WordType src,
                                                              ^~~~
                                                              Src
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2347:48: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                                      unsigned parts) {
                                               ^~~~~~
                                               Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2348:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; ++i) {
                ^      ~            ~~
                I      I            I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2349:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    WordType Dst = dst[i];
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2350:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] -= src;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2351:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (src <= Dst)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2360:32: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcNegate(WordType *dst, unsigned parts) {
                               ^~~~
                               Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2360:46: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcNegate(WordType *dst, unsigned parts) {
                                             ^~~~~~
                                             Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2376:37: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
int APInt::tcMultiplyPart(WordType *dst, const WordType *src,
                                    ^~~~
                                    Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2376:58: warning: invalid case style for parameter 'src' [readability-identifier-naming]
int APInt::tcMultiplyPart(WordType *dst, const WordType *src,
                                                         ^~~~
                                                         Src
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2377:36: warning: invalid case style for parameter 'multiplier' [readability-identifier-naming]
                          WordType multiplier, WordType carry,
                                   ^~~~~~~~~~~
                                   Multiplier
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2377:57: warning: invalid case style for parameter 'carry' [readability-identifier-naming]
                          WordType multiplier, WordType carry,
                                                        ^~~~~~
                                                        Carry
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2378:36: warning: invalid case style for parameter 'srcParts' [readability-identifier-naming]
                          unsigned srcParts, unsigned dstParts,
                                   ^~~~~~~~~
                                   SrcParts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2378:55: warning: invalid case style for parameter 'dstParts' [readability-identifier-naming]
                          unsigned srcParts, unsigned dstParts,
                                                      ^~~~~~~~~
                                                      DstParts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2379:32: warning: invalid case style for parameter 'add' [readability-identifier-naming]
                          bool add) {
                               ^~~~
                               Add
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2381:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(dst <= src || dst >= src + srcParts);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2381:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  assert(dst <= src || dst >= src + srcParts);
                                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2382:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(dstParts <= srcParts + 1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2385:12: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned n = std::min(dstParts, srcParts);
           ^
           N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2387:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < n; i++) {
                ^      ~      ~~~
                I      I      I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2388:14: warning: invalid case style for variable 'low' [readability-identifier-naming]
    WordType low, mid, high, srcPart;
             ^~~~
             Low
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2388:19: warning: invalid case style for variable 'mid' [readability-identifier-naming]
    WordType low, mid, high, srcPart;
                  ^~~~
                  Mid
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2388:24: warning: invalid case style for variable 'high' [readability-identifier-naming]
    WordType low, mid, high, srcPart;
                       ^~~~~
                       High
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2388:30: warning: invalid case style for variable 'srcPart' [readability-identifier-naming]
    WordType low, mid, high, srcPart;
                             ^~~~~~~~
                             SrcPart
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2398:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    srcPart = src[i];
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2410:27: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (low + mid < low)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2417:27: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (low + mid < low)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2422:29: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (low + carry < low)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2429:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (low + dst[i] < low)
                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2429:30: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (low + dst[i] < low)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2431:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] += low;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2432:11: warning: statement should be inside braces [google-readability-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2433:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst[i] = low;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2440:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(srcParts + 1 == dstParts);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2441:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[srcParts] = carry;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2446:7: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (carry)
      ^    ~
            != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2446:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (carry)
            ^
             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2452:7: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (multiplier)
      ^         ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2452:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (multiplier)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2453:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = dstParts; i < srcParts; i++)
                  ^             ~             ~~~
                  I             I             I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2453:51: warning: statement should be inside braces [hicpp-braces-around-statements]
    for (unsigned i = dstParts; i < srcParts; i++)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2454:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (src[i])
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2454:11: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      if (src[i])
          ^     ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2454:18: warning: statement should be inside braces [readability-braces-around-statements]
      if (src[i])
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2465:33: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
int APInt::tcMultiply(WordType *dst, const WordType *lhs,
                                ^~~~
                                Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2465:54: warning: invalid case style for parameter 'lhs' [readability-identifier-naming]
int APInt::tcMultiply(WordType *dst, const WordType *lhs,
                                                     ^~~~
                                                     Lhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2466:39: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
                      const WordType *rhs, unsigned parts) {
                                      ^~~~
                                      Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2466:53: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                      const WordType *rhs, unsigned parts) {
                                                    ^~~~~~
                                                    Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2467:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(dst != lhs && dst != rhs);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2469:7: warning: invalid case style for variable 'overflow' [readability-identifier-naming]
  int overflow = 0;
      ^~~~~~~~
      Overflow
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2472:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2472:39: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2473:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    overflow |= tcMultiplyPart(&dst[i], lhs, rhs[i], 0, parts,
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2473:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    overflow |= tcMultiplyPart(&dst[i], lhs, rhs[i], 0, parts,
                                             ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2481:38: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcFullMultiply(WordType *dst, const WordType *lhs,
                                     ^~~~
                                     Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2481:59: warning: invalid case style for parameter 'lhs' [readability-identifier-naming]
void APInt::tcFullMultiply(WordType *dst, const WordType *lhs,
                                                          ^~~~
                                                          Lhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2482:44: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
                           const WordType *rhs, unsigned lhsParts,
                                           ^~~~
                                           Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2482:58: warning: invalid case style for parameter 'lhsParts' [readability-identifier-naming]
                           const WordType *rhs, unsigned lhsParts,
                                                         ^~~~~~~~~
                                                         LhsParts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2483:37: warning: invalid case style for parameter 'rhsParts' [readability-identifier-naming]
                           unsigned rhsParts) {
                                    ^~~~~~~~~
                                    RhsParts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2485:27: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (lhsParts > rhsParts)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2488:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(dst != lhs && dst != rhs);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2492:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < lhsParts; i++)
                ^      ~             ~~~
                I      I             I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2492:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0; i < lhsParts; i++)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2493:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    tcMultiplyPart(&dst[i], rhs, lhs[i], 0, rhsParts, rhsParts + 1, true);
                    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2493:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    tcMultiplyPart(&dst[i], rhs, lhs[i], 0, rhsParts, rhsParts + 1, true);
                                 ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2506:31: warning: invalid case style for parameter 'lhs' [readability-identifier-naming]
int APInt::tcDivide(WordType *lhs, const WordType *rhs,
                              ^~~~
                              Lhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2506:52: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
int APInt::tcDivide(WordType *lhs, const WordType *rhs,
                                                   ^~~~
                                                   Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2507:31: warning: invalid case style for parameter 'remainder' [readability-identifier-naming]
                    WordType *remainder, WordType *srhs,
                              ^~~~~~~~~~
                              Remainder
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2507:52: warning: invalid case style for parameter 'srhs' [readability-identifier-naming]
                    WordType *remainder, WordType *srhs,
                                                   ^~~~~
                                                   Srhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2508:30: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                    unsigned parts) {
                             ^~~~~~
                             Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2509:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(lhs != remainder && lhs != srhs && remainder != srhs);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2511:12: warning: invalid case style for variable 'shiftCount' [readability-identifier-naming]
  unsigned shiftCount = tcMSB(rhs, parts) + 1;
           ^~~~~~~~~~
           ShiftCount
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2512:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (shiftCount == 0)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2513:12: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    return true;
           ^~~~~
           1
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2516:12: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned n = shiftCount / APINT_BITS_PER_WORD;
           ^
           N
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2517:12: warning: invalid case style for variable 'mask' [readability-identifier-naming]
  WordType mask = (WordType) 1 << (shiftCount % APINT_BITS_PER_WORD);
           ^~~~
           Mask
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2517:19: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  WordType mask = (WordType) 1 << (shiftCount % APINT_BITS_PER_WORD);
                  ^~~~~~~~~~~~
                  static_cast<WordType>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2527:9: warning: invalid case style for variable 'compare' [readability-identifier-naming]
    int compare = tcCompare(remainder, srhs, parts);
        ^~~~~~~
        Compare
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2530:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      lhs[n] |= mask;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2533:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (shiftCount == 0)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2538:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      mask = (WordType) 1 << (APINT_BITS_PER_WORD - 1);
             ^~~~~~~~~~~~
             static_cast<WordType>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2543:10: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
  return false;
         ^~~~~~
         0
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2550:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!Count)
      ~^~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2550:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Count)
             ^
              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2559:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::memmove(Dst + WordShift, Dst, (Words - WordShift) * APINT_WORD_SIZE);
                     ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2562:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Dst[Words] = Dst[Words - WordShift] << BitShift;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2562:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Dst[Words] = Dst[Words - WordShift] << BitShift;
                   ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2563:29: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Words > WordShift)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2564:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Dst[Words] |=
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2565:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          Dst[Words - WordShift - 1] >> (APINT_BITS_PER_WORD - BitShift);
          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2577:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!Count)
      ~^~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2577:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Count)
             ^
              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2587:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::memmove(Dst, Dst + WordShift, WordsToMove * APINT_WORD_SIZE);
                          ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2589:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i != WordsToMove; ++i) {
                  ^      ~                   ~~
                  I      I                   I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2590:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Dst[i] = Dst[i + WordShift] >> BitShift;
      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2590:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Dst[i] = Dst[i + WordShift] >> BitShift;
               ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2591:32: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (i + 1 != WordsToMove)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2592:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Dst[i] |= Dst[i + WordShift + 1] << (APINT_BITS_PER_WORD - BitShift);
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2592:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        Dst[i] |= Dst[i + WordShift + 1] << (APINT_BITS_PER_WORD - BitShift);
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2597:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::memset(Dst + WordsToMove, 0, WordShift * APINT_WORD_SIZE);
                  ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2601:29: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcAnd(WordType *dst, const WordType *rhs, unsigned parts) {
                            ^~~~
                            Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2601:50: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
void APInt::tcAnd(WordType *dst, const WordType *rhs, unsigned parts) {
                                                 ^~~~
                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2601:64: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcAnd(WordType *dst, const WordType *rhs, unsigned parts) {
                                                               ^~~~~~
                                                               Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2602:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2602:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2603:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] &= rhs[i];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2603:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] &= rhs[i];
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2607:28: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcOr(WordType *dst, const WordType *rhs, unsigned parts) {
                           ^~~~
                           Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2607:49: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
void APInt::tcOr(WordType *dst, const WordType *rhs, unsigned parts) {
                                                ^~~~
                                                Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2607:63: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcOr(WordType *dst, const WordType *rhs, unsigned parts) {
                                                              ^~~~~~
                                                              Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2608:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2608:39: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2609:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] |= rhs[i];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2609:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] |= rhs[i];
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2613:29: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcXor(WordType *dst, const WordType *rhs, unsigned parts) {
                            ^~~~
                            Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2613:50: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
void APInt::tcXor(WordType *dst, const WordType *rhs, unsigned parts) {
                                                 ^~~~
                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2613:64: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcXor(WordType *dst, const WordType *rhs, unsigned parts) {
                                                               ^~~~~~
                                                               Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2614:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2614:39: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2615:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] ^= rhs[i];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2615:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] ^= rhs[i];
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2619:36: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcComplement(WordType *dst, unsigned parts) {
                                   ^~~~
                                   Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2619:50: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcComplement(WordType *dst, unsigned parts) {
                                                 ^~~~~~
                                                 Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2620:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < parts; i++)
                ^      ~          ~~~
                I      I          I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2620:39: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0; i < parts; i++)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2621:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] = ~dst[i];
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2621:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i] = ~dst[i];
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2625:38: warning: invalid case style for parameter 'lhs' [readability-identifier-naming]
int APInt::tcCompare(const WordType *lhs, const WordType *rhs,
                                     ^~~~
                                     Lhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2625:59: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
int APInt::tcCompare(const WordType *lhs, const WordType *rhs,
                                                          ^~~~
                                                          Rhs
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2626:31: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
                     unsigned parts) {
                              ^~~~~~
                              Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2627:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (parts) {
         ^    ~
               != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2629:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (lhs[parts] != rhs[parts])
        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2629:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (lhs[parts] != rhs[parts])
                      ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2629:34: warning: statement should be inside braces [readability-braces-around-statements]
    if (lhs[parts] != rhs[parts])
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2630:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return (lhs[parts] > rhs[parts]) ? 1 : -1;
              ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2630:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return (lhs[parts] > rhs[parts]) ? 1 : -1;
                           ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2638:49: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
void APInt::tcSetLeastSignificantBits(WordType *dst, unsigned parts,
                                                ^~~~
                                                Dst
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2638:63: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
void APInt::tcSetLeastSignificantBits(WordType *dst, unsigned parts,
                                                              ^~~~~~
                                                              Parts
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2639:48: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
                                      unsigned bits) {
                                               ^~~~~
                                               Bits
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2640:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i = 0;
           ^
           I
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2642:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i++] = ~(WordType) 0;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2642:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    dst[i++] = ~(WordType) 0;
                ^~~~~~~~~~~~~
                static_cast<WordType>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2646:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (bits)
      ^   ~
           != 0u
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2646:12: warning: statement should be inside braces [readability-braces-around-statements]
  if (bits)
           ^
            {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2647:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i++] = ~(WordType) 0 >> (APINT_BITS_PER_WORD - bits);
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2647:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    dst[i++] = ~(WordType) 0 >> (APINT_BITS_PER_WORD - bits);
                ^~~~~~~~~~~~
                static_cast<WordType>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2649:20: warning: statement should be inside braces [readability-braces-around-statements]
  while (i < parts)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2650:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[i++] = 0;
    ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2653:23: warning: invalid case style for function 'RoundingUDiv' [readability-identifier-naming]
APInt llvm::APIntOps::RoundingUDiv(const APInt &A, const APInt &B,
                      ^~~~~~~~~~~~~
                      roundingUDiv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2663:18: warning: statement should be inside braces [readability-braces-around-statements]
    if (Rem == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2671:23: warning: invalid case style for function 'RoundingSDiv' [readability-identifier-naming]
APInt llvm::APIntOps::RoundingSDiv(const APInt &A, const APInt &B,
                      ^~~~~~~~~~~~~
                      roundingSDiv
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2678:18: warning: statement should be inside braces [readability-braces-around-statements]
    if (Rem == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2686:46: warning: statement should be inside braces [readability-braces-around-statements]
      if (Rem.isNegative() != B.isNegative())
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2690:44: warning: statement should be inside braces [readability-braces-around-statements]
    if (Rem.isNegative() != B.isNegative())
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2702:17: warning: invalid case style for function 'SolveQuadraticEquationWrap' [readability-identifier-naming]
llvm::APIntOps::SolveQuadraticEquationWrap(APInt A, APInt B, APInt C,
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~
                solveQuadraticEquationWrap
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2705:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(CoeffWidth == B.getBitWidth() && CoeffWidth == C.getBitWidth());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2706:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(RangeWidth <= CoeffWidth &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2708:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(RangeWidth > 1 && "Value range bit width should be > 1");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2710:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  LLVM_DEBUG(dbgs() << __func__ << ": solving " << A << "x^2 + " << B
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2715:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    LLVM_DEBUG(dbgs() << __func__ << ": zero solution\n");
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2716:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return APInt(CoeffWidth, 0);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2774:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(A.isStrictlyPositive());
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2776:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (T.isNullValue())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2789:32: warning: statement should be inside braces [readability-braces-around-statements]
    if (C.isStrictlyPositive())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2827:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  LLVM_DEBUG(dbgs() << __func__ << ": updated coefficients " << A << "x^2 + "
                       ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2831:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(D.isNonNegative() && "Negative discriminant");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2838:16: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Q.sgt(D))
               ^
                {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2850:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (PickLow)
              ^
               {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2851:29: warning: implicit conversion bool -> 'uint64_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
    APInt::sdivrem(-B - (SQ+InexactSQ), TwoA, X, Rem);
                            ^~~~~~~~~~
                            static_cast<uint64_t>()
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2852:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2858:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(X.isNonNegative() && "Solution should be non-negative");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2861:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    LLVM_DEBUG(dbgs() << __func__ << ": solution (root): " << X << '\n');
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2865:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert((SQ*SQ).sle(D) && "SQ = |_sqrt(D)_|, so SQ*SQ <= D");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2882:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    LLVM_DEBUG(dbgs() << __func__ << ": no valid solution\n");
                         ^
/home/jonas/opt/llvm/lib/Support/APInt.cpp:2887:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  LLVM_DEBUG(dbgs() << __func__ << ": solution (wrap): " << X << '\n');
                       ^
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpg5PCqf.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/APFloat.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpVKLSOI.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/AMDGPUMetadata.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpoiKu8a.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/APSInt.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp5N_aoh.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/APInt.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp8ZLWEC.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ARMBuildAttrs.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmppbYPuu.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmplH4GSj.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ARMWinEH.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp_rAc3d.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Allocator.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpWvvZD4.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/BinaryStreamReader.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpqUyJmF.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/BinaryStreamError.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpGmGMUE.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/BinaryStreamRef.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpygdoCD.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/BinaryStreamWriter.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp_CbxOE.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/BlockFrequency.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpWDbP2k.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/BranchProbability.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp6S2kiH.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/CachePruning.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpI1ames.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/circular_raw_ostream.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpcZr1Su.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Chrono.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpWOC4OW.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/COM.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp_CKPdg.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpTbeZEa.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/CommandLine.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpCk8rht.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Compression.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpEj9Alt.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -e/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CodeGenCoverage.h:35:8: warning: function 'llvm::CodeGenCoverage::emit' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool emit(StringRef FilePrefix, StringRef BackendName) const;
       ^              ~~~~~~~~~~~
                      CoveragePrefix
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:85:23: note: the definition seen here
bool CodeGenCoverage::emit(StringRef CoveragePrefix,
                      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CodeGenCoverage.h:35:8: note: differing parameters are named here: ('FilePrefix'), in definition: ('CoveragePrefix')
  bool emit(StringRef FilePrefix, StringRef BackendName) const;
       ^
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:29:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:31:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
static sys::SmartMutex<true> OutputMutex;
                             ^
../include/llvm/Support/Mutex.h:97:27: note: default parameter was declared here
      explicit SmartMutex(bool rec = true) :
                          ^
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:33:18: warning: use '= default' to define a trivial default constructor [hicpp-use-equals-default]
CodeGenCoverage::CodeGenCoverage() {}
                 ^                 ~~
                                   = default;
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:36:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (RuleCoverage.size() <= RuleID)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:37:37: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
    RuleCoverage.resize(RuleID + 1, 0);
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:37:37: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:42:37: warning: statement should be inside braces [readability-braces-around-statements]
  if (RuleCoverage.size() <= RuleID)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:58:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (*CurPtr++ != 0)
                  ^
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:58:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    while (*CurPtr++ != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:60:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CurPtr == Buffer.getBufferEnd())
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:65:60: warning: statement should be inside braces [readability-braces-around-statements]
      if (std::distance(CurPtr, Buffer.getBufferEnd()) < 8)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:69:14: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      CurPtr += 8;
             ^
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:72:27: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (RuleID == ~0ull)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:77:28: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (IsForThisBackend)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:108:12: warning: statement should be inside braces [readability-braces-around-statements]
    if (EC)
           ^
            {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:114:30: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
    CoverageFile->os().write((const char *)&Zero, sizeof(unsigned char));
                             ^~~~~~~~~~~~~~~    ~
                             reinterpret_cast<const char *>( )
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:114:30: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:115:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (uint64_t I : RuleCoverage.set_bits())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:116:32: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
      CoverageFile->os().write((const char *)&I, sizeof(uint64_t));
                               ^~~~~~~~~~~~~~~ ~
                               reinterpret_cast<const char *>( )
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:116:32: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:117:30: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
    CoverageFile->os().write((const char *)&InvZero, sizeof(uint64_t));
                             ^~~~~~~~~~~~~~~       ~
                             reinterpret_cast<const char *>( )
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:117:30: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/CodeGenCoverage.cpp:125:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
void CodeGenCoverage::reset() { RuleCoverage.resize(0); }
                                ^
../include/llvm/ADT/BitVector.h:372:27: note: default parameter was declared here
  void resize(unsigned N, bool t = false) {
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ConvertUTF.h:262:6: warning: function 'llvm::hasUTF16ByteOrderMark' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
bool hasUTF16ByteOrderMark(ArrayRef<char> SrcBytes);
     ^                                    ~~~~~~~~~
                                          S
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:81:6: note: the definition seen here
bool hasUTF16ByteOrderMark(ArrayRef<char> S) {
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ConvertUTF.h:262:6: note: differing parameters are named here: ('SrcBytes'), in definition: ('S')
bool hasUTF16ByteOrderMark(ArrayRef<char> SrcBytes);
     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:20:6: warning: invalid case style for function 'ConvertUTF8toWide' [readability-identifier-naming]
bool ConvertUTF8toWide(unsigned WideCharWidth, llvm::StringRef Source,
     ^~~~~~~~~~~~~~~~~~
     convertUtF8toWide
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:22:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:23:20: warning: invalid case style for variable 'result' [readability-identifier-naming]
  ConversionResult result = conversionOK;
                   ^~~~~~
                   Result
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:26:11: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    const UTF8 *Pos = reinterpret_cast<const UTF8*>(Source.begin());
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:26:23: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    const UTF8 *Pos = reinterpret_cast<const UTF8*>(Source.begin());
                      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:27:10: warning: implicit conversion 'llvm::Boolean' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
    if (!isLegalUTF8String(&Pos, reinterpret_cast<const UTF8*>(Source.end()))) {
        ~^~~~~~~~~~~~~~~~~                                                   ~
                                                                              == 0u
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:27:34: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    if (!isLegalUTF8String(&Pos, reinterpret_cast<const UTF8*>(Source.end()))) {
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:32:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ResultPtr += Source.size();
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:35:11: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    const UTF8 *sourceStart = (const UTF8*)Source.data();
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:35:17: warning: invalid case style for variable 'sourceStart' [readability-identifier-naming]
    const UTF8 *sourceStart = (const UTF8*)Source.data();
                ^~~~~~~~~~~
                SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:35:31: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
    const UTF8 *sourceStart = (const UTF8*)Source.data();
                              ^~~~~~~~~~~~~~~~~~~       ~
                              reinterpret_cast<const UTF8*>( )
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:35:31: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:38:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    UTF16 *targetStart = reinterpret_cast<UTF16*>(ResultPtr);
    ^~~~~
    auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:38:12: warning: invalid case style for variable 'targetStart' [readability-identifier-naming]
    UTF16 *targetStart = reinterpret_cast<UTF16*>(ResultPtr);
           ^~~~~~~~~~~
           TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:38:26: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    UTF16 *targetStart = reinterpret_cast<UTF16*>(ResultPtr);
                         ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:39:21: warning: invalid case style for variable 'flags' [readability-identifier-naming]
    ConversionFlags flags = strictConversion;
                    ^~~~~
                    Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:41:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        &sourceStart, sourceStart + Source.size(),
                                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:42:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        &targetStart, targetStart + Source.size(), flags);
                                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:43:32: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (result == conversionOK)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:44:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      ResultPtr = reinterpret_cast<char*>(targetStart);
                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:45:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:48:11: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    const UTF8 *sourceStart = (const UTF8*)Source.data();
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:48:17: warning: invalid case style for variable 'sourceStart' [readability-identifier-naming]
    const UTF8 *sourceStart = (const UTF8*)Source.data();
                ^~~~~~~~~~~
                SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:48:31: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
    const UTF8 *sourceStart = (const UTF8*)Source.data();
                              ^~~~~~~~~~~~~~~~~~~       ~
                              reinterpret_cast<const UTF8*>( )
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:48:31: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:51:5: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    UTF32 *targetStart = reinterpret_cast<UTF32*>(ResultPtr);
    ^~~~~
    auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:51:12: warning: invalid case style for variable 'targetStart' [readability-identifier-naming]
    UTF32 *targetStart = reinterpret_cast<UTF32*>(ResultPtr);
           ^~~~~~~~~~~
           TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:51:26: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    UTF32 *targetStart = reinterpret_cast<UTF32*>(ResultPtr);
                         ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:52:21: warning: invalid case style for variable 'flags' [readability-identifier-naming]
    ConversionFlags flags = strictConversion;
                    ^~~~~
                    Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:54:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        &sourceStart, sourceStart + Source.size(),
                                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:55:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        &targetStart, targetStart + Source.size(), flags);
                                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:56:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (result == conversionOK)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:57:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      ResultPtr = reinterpret_cast<char*>(targetStart);
                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:58:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:61:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert((result != targetExhausted)
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:66:6: warning: invalid case style for function 'ConvertCodePointToUTF8' [readability-identifier-naming]
bool ConvertCodePointToUTF8(unsigned Source, char *&ResultPtr) {
     ^~~~~~~~~~~~~~~~~~~~~~~
     convertCodePointToUtF8
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:68:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const UTF32 *SourceEnd = SourceStart + 1;
                                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:69:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  UTF8 *TargetStart = reinterpret_cast<UTF8 *>(ResultPtr);
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:69:23: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  UTF8 *TargetStart = reinterpret_cast<UTF8 *>(ResultPtr);
                      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:70:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  UTF8 *TargetEnd = TargetStart + 4;
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:74:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CR != conversionOK)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:77:15: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  ResultPtr = reinterpret_cast<char*>(TargetStart);
              ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:88:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Out.empty());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:91:7: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
  if (SrcBytes.size() % 2)
      ^~~~~~~~           ~
      (                  ) != 0u
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:91:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (SrcBytes.size() % 2)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:95:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (SrcBytes.empty())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:98:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const UTF16 *Src = reinterpret_cast<const UTF16 *>(SrcBytes.begin());
        ^~~~~
        auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:98:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const UTF16 *Src = reinterpret_cast<const UTF16 *>(SrcBytes.begin());
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:99:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const UTF16 *SrcEnd = reinterpret_cast<const UTF16 *>(SrcBytes.end());
        ^~~~~
        auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:99:25: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const UTF16 *SrcEnd = reinterpret_cast<const UTF16 *>(SrcBytes.end());
                        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:103:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (Src[0] == UNI_UTF16_BYTE_ORDER_MARK_SWAPPED) {
      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:105:62: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (unsigned I = 0, E = ByteSwapped.size(); I != E; ++I)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:108:51: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    SrcEnd = &ByteSwapped[ByteSwapped.size() - 1] + 1;
                                                  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:112:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (Src[0] == UNI_UTF16_BYTE_ORDER_MARK_NATIVE)
      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:112:50: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Src[0] == UNI_UTF16_BYTE_ORDER_MARK_NATIVE)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:113:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Src++;
       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:118:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  UTF8 *Dst = reinterpret_cast<UTF8 *>(&Out[0]);
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:118:15: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  UTF8 *Dst = reinterpret_cast<UTF8 *>(&Out[0]);
              ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:119:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  UTF8 *DstEnd = Dst + Out.size();
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:123:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(CR != targetExhausted);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:130:14: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  Out.resize(reinterpret_cast<char *>(Dst) - &Out[0]);
             ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:139:28: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      llvm::ArrayRef<char>(reinterpret_cast<const char *>(Src.data()),
                           ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:145:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(DstUTF16.empty());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:154:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const UTF8 *Src = reinterpret_cast<const UTF8 *>(SrcUTF8.begin());
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:154:21: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const UTF8 *Src = reinterpret_cast<const UTF8 *>(SrcUTF8.begin());
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:155:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const UTF8 *SrcEnd = reinterpret_cast<const UTF8 *>(SrcUTF8.end());
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:155:24: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const UTF8 *SrcEnd = reinterpret_cast<const UTF8 *>(SrcUTF8.end());
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:164:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  UTF16 *DstEnd = Dst + DstUTF16.size();
                      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:168:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(CR != targetExhausted);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:186:20: warning: invalid case style for function 'ConvertUTF8toWideInternal' [readability-identifier-naming]
static inline bool ConvertUTF8toWideInternal(llvm::StringRef Source,
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~
                   convertUtF8toWideInternal
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:192:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  char *ResultPtr = reinterpret_cast<char *>(&Result[0]);
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:192:21: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  char *ResultPtr = reinterpret_cast<char *>(&Result[0]);
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:198:17: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  Result.resize(reinterpret_cast<wchar_t *>(ResultPtr) - &Result[0]);
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:202:6: warning: invalid case style for function 'ConvertUTF8toWide' [readability-identifier-naming]
bool ConvertUTF8toWide(llvm::StringRef Source, std::wstring &Result) {
     ^~~~~~~~~~~~~~~~~~
     convertUtF8toWide
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:206:6: warning: invalid case style for function 'ConvertUTF8toWide' [readability-identifier-naming]
bool ConvertUTF8toWide(const char *Source, std::wstring &Result) {
     ^~~~~~~~~~~~~~~~~~
     convertUtF8toWide
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:207:8: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (!Source) {
      ~^~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:216:11: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    const UTF8 *Start = reinterpret_cast<const UTF8 *>(Source.data());
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:216:25: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    const UTF8 *Start = reinterpret_cast<const UTF8 *>(Source.data());
                        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:217:11: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    const UTF8 *End =
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:218:9: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        reinterpret_cast<const UTF8 *>(Source.data() + Source.size());
        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:218:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        reinterpret_cast<const UTF8 *>(Source.data() + Source.size());
                                                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:219:10: warning: implicit conversion 'llvm::Boolean' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
    if (!isLegalUTF8String(&Start, End))
        ~^~~~~~~~~~~~~~~~~             ~
                                        == 0u
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:219:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!isLegalUTF8String(&Start, End))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:224:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (sizeof(wchar_t) == 2) {
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:226:31: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        llvm::ArrayRef<UTF16>(reinterpret_cast<const UTF16 *>(Source.data()),
                              ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:230:11: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    const UTF32 *Start = reinterpret_cast<const UTF32 *>(Source.data());
          ^~~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:230:26: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    const UTF32 *Start = reinterpret_cast<const UTF32 *>(Source.data());
                         ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:231:11: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    const UTF32 *End =
          ^~~~~
          auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:232:9: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        reinterpret_cast<const UTF32 *>(Source.data() + Source.size());
        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:232:55: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        reinterpret_cast<const UTF32 *>(Source.data() + Source.size());
                                                      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:234:5: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    UTF8 *ResultPtr = reinterpret_cast<UTF8 *>(&Result[0]);
    ^~~~
    auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:234:23: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    UTF8 *ResultPtr = reinterpret_cast<UTF8 *>(&Result[0]);
                      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:235:5: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
    UTF8 *ResultEnd = reinterpret_cast<UTF8 *>(&Result[0] + Result.size());
    ^~~~
    auto
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:235:23: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    UTF8 *ResultEnd = reinterpret_cast<UTF8 *>(&Result[0] + Result.size());
                      ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:235:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    UTF8 *ResultEnd = reinterpret_cast<UTF8 *>(&Result[0] + Result.size());
                                                          ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:238:21: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      Result.resize(reinterpret_cast<char *>(ResultPtr) - &Result[0]);
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp:240:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else {
      ^~~~~~
/home/jonas/opt/llvm/lib/Support/Compression.cpp:25:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Compression.cpp:52:3: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
  unsigned long CompressedSize = ::compressBound(InputBuffer.size());
  ^
/home/jonas/opt/llvm/lib/Support/Compression.cpp:55:19: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
      ::compress2((Bytef *)CompressedBuffer.data(), &CompressedSize,
                  ^~~~~~~~~~~~~~~~~~~~~~~~~       ~
                  reinterpret_cast<Bytef *>(      )
/home/jonas/opt/llvm/lib/Support/Compression.cpp:55:19: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Compression.cpp:56:19: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
                  (const Bytef *)InputBuffer.data(), InputBuffer.size(), Level);
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~       ~
                  reinterpret_cast<const Bytef *>( )
/home/jonas/opt/llvm/lib/Support/Compression.cpp:56:19: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Compression.cpp:61:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  return Res ? createError(convertZlibCodeToString(Res)) : Error::success();
         ^
             != 0
/home/jonas/opt/llvm/lib/Support/Compression.cpp:67:20: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
      ::uncompress((Bytef *)UncompressedBuffer, (uLongf *)&UncompressedSize,
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
                   reinterpret_cast<Bytef *>()
/home/jonas/opt/llvm/lib/Support/Compression.cpp:67:20: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Compression.cpp:67:49: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
      ::uncompress((Bytef *)UncompressedBuffer, (uLongf *)&UncompressedSize,
                                                ^~~~~~~~~~~                ~
                                                static_cast<uLongf *>(     )
/home/jonas/opt/llvm/lib/Support/Compression.cpp:68:20: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
                   (const Bytef *)InputBuffer.data(), InputBuffer.size());
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~       ~
                   reinterpret_cast<const Bytef *>( )
/home/jonas/opt/llvm/lib/Support/Compression.cpp:68:20: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Compression.cpp:72:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  return Res ? createError(convertZlibCodeToString(Res)) : Error::success();
         ^
             != 0
/home/jonas/opt/llvm/lib/Support/Compression.cpp:86:21: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  return ::crc32(0, (const Bytef *)Buffer.data(), Buffer.size());
                    ^~~~~~~~~~~~~~~~~~~~~       ~
                    reinterpret_cast<const Bytef *>( )
/home/jonas/opt/llvm/lib/Support/Compression.cpp:86:21: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DataExtractor.h:156:11: warning: function 'llvm::DataExtractor::getSigned' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  int64_t getSigned(uint32_t *offset_ptr, uint32_t size) const;
          ^                                        ~~~~~
                                                   byte_size
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:114:16: note: the definition seen here
DataExtractor::getSigned(uint32_t *offset_ptr, uint32_t byte_size) const {
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DataExtractor.h:156:11: note: differing parameters are named here: ('size'), in definition: ('byte_size')
  int64_t getSigned(uint32_t *offset_ptr, uint32_t size) const;
          ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:14:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:17:25: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
static T getU(uint32_t *offset_ptr, const DataExtractor *de,
                        ^~~~~~~~~~~
                        OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:17:58: warning: invalid case style for parameter 'de' [readability-identifier-naming]
static T getU(uint32_t *offset_ptr, const DataExtractor *de,
                                                         ^~~
                                                         De
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:18:20: warning: invalid case style for parameter 'isLittleEndian' [readability-identifier-naming]
              bool isLittleEndian, const char *Data) {
                   ^~~~~~~~~~~~~~~
                   IsLittleEndian
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:19:5: warning: invalid case style for variable 'val' [readability-identifier-naming]
  T val = 0;
    ^~~
    Val
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:20:12: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  uint32_t offset = *offset_ptr;
           ^~~~~~
           Offset
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:22:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::memcpy(&val, &Data[offset], sizeof(val));
                       ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:23:51: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (sys::IsLittleEndianHost != isLittleEndian)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:33:27: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
static T *getUs(uint32_t *offset_ptr, T *dst, uint32_t count,
                          ^~~~~~~~~~~
                          OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:33:42: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
static T *getUs(uint32_t *offset_ptr, T *dst, uint32_t count,
                                         ^~~~
                                         Dst
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:33:56: warning: invalid case style for parameter 'count' [readability-identifier-naming]
static T *getUs(uint32_t *offset_ptr, T *dst, uint32_t count,
                                                       ^~~~~~
                                                       Count
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:34:38: warning: invalid case style for parameter 'de' [readability-identifier-naming]
                const DataExtractor *de, bool isLittleEndian, const char *Data){
                                     ^~~
                                     De
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:34:47: warning: invalid case style for parameter 'isLittleEndian' [readability-identifier-naming]
                const DataExtractor *de, bool isLittleEndian, const char *Data){
                                              ^~~~~~~~~~~~~~~
                                              IsLittleEndian
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:35:12: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  uint32_t offset = *offset_ptr;
           ^~~~~~
           Offset
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:38:13: warning: invalid case style for variable 'value_ptr' [readability-identifier-naming]
    for (T *value_ptr = dst, *end = dst + count; value_ptr != end;
            ^~~~~~~~~                            ~~~~~~~~~
            ValuePtr                             ValuePtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:38:31: warning: invalid case style for variable 'end' [readability-identifier-naming]
    for (T *value_ptr = dst, *end = dst + count; value_ptr != end;
                              ^~~                             ~~~~
                              End                             End
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:38:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    for (T *value_ptr = dst, *end = dst + count; value_ptr != end;
                                        ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:39:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ++value_ptr, offset += sizeof(*dst))
        ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:39:45: warning: statement should be inside braces [readability-braces-around-statements]
        ++value_ptr, offset += sizeof(*dst))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:50:40: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint8_t DataExtractor::getU8(uint32_t *offset_ptr) const {
                                       ^~~~~~~~~~~
                                       OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:51:42: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getU<uint8_t>(offset_ptr, this, IsLittleEndian, Data.data());
                                         ^             ~
                                                        != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:55:32: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
DataExtractor::getU8(uint32_t *offset_ptr, uint8_t *dst, uint32_t count) const {
                               ^~~~~~~~~~~
                               OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:55:53: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
DataExtractor::getU8(uint32_t *offset_ptr, uint8_t *dst, uint32_t count) const {
                                                    ^~~~
                                                    Dst
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:55:67: warning: invalid case style for parameter 'count' [readability-identifier-naming]
DataExtractor::getU8(uint32_t *offset_ptr, uint8_t *dst, uint32_t count) const {
                                                                  ^~~~~~
                                                                  Count
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:56:55: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getUs<uint8_t>(offset_ptr, dst, count, this, IsLittleEndian,
                                                      ^             ~
                                                                     != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:61:42: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint16_t DataExtractor::getU16(uint32_t *offset_ptr) const {
                                         ^~~~~~~~~~~
                                         OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:62:43: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getU<uint16_t>(offset_ptr, this, IsLittleEndian, Data.data());
                                          ^             ~
                                                         != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:65:43: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint16_t *DataExtractor::getU16(uint32_t *offset_ptr, uint16_t *dst,
                                          ^~~~~~~~~~~
                                          OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:65:65: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
uint16_t *DataExtractor::getU16(uint32_t *offset_ptr, uint16_t *dst,
                                                                ^~~~
                                                                Dst
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:66:42: warning: invalid case style for parameter 'count' [readability-identifier-naming]
                                uint32_t count) const {
                                         ^~~~~~
                                         Count
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:67:56: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getUs<uint16_t>(offset_ptr, dst, count, this, IsLittleEndian,
                                                       ^             ~
                                                                      != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:71:42: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint32_t DataExtractor::getU24(uint32_t *offset_ptr) const {
                                         ^~~~~~~~~~~
                                         OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:73:40: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
      getU<uint24_t>(offset_ptr, this, IsLittleEndian, Data.data());
                                       ^             ~
                                                      != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:78:42: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint32_t DataExtractor::getU32(uint32_t *offset_ptr) const {
                                         ^~~~~~~~~~~
                                         OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:79:43: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getU<uint32_t>(offset_ptr, this, IsLittleEndian, Data.data());
                                          ^             ~
                                                         != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:82:43: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint32_t *DataExtractor::getU32(uint32_t *offset_ptr, uint32_t *dst,
                                          ^~~~~~~~~~~
                                          OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:82:65: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
uint32_t *DataExtractor::getU32(uint32_t *offset_ptr, uint32_t *dst,
                                                                ^~~~
                                                                Dst
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:83:42: warning: invalid case style for parameter 'count' [readability-identifier-naming]
                                uint32_t count) const {
                                         ^~~~~~
                                         Count
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:84:56: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getUs<uint32_t>(offset_ptr, dst, count, this, IsLittleEndian,
                                                       ^             ~
                                                                      != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:88:42: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint64_t DataExtractor::getU64(uint32_t *offset_ptr) const {
                                         ^~~~~~~~~~~
                                         OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:89:43: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getU<uint64_t>(offset_ptr, this, IsLittleEndian, Data.data());
                                          ^             ~
                                                         != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:92:43: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint64_t *DataExtractor::getU64(uint32_t *offset_ptr, uint64_t *dst,
                                          ^~~~~~~~~~~
                                          OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:92:65: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
uint64_t *DataExtractor::getU64(uint32_t *offset_ptr, uint64_t *dst,
                                                                ^~~~
                                                                Dst
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:93:42: warning: invalid case style for parameter 'count' [readability-identifier-naming]
                                uint32_t count) const {
                                         ^~~~~~
                                         Count
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:94:56: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
  return getUs<uint64_t>(offset_ptr, dst, count, this, IsLittleEndian,
                                                       ^             ~
                                                                      != 0u
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:99:38: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
DataExtractor::getUnsigned(uint32_t *offset_ptr, uint32_t byte_size) const {
                                     ^~~~~~~~~~~
                                     OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:99:59: warning: invalid case style for parameter 'byte_size' [readability-identifier-naming]
DataExtractor::getUnsigned(uint32_t *offset_ptr, uint32_t byte_size) const {
                                                          ^~~~~~~~~~
                                                          ByteSize
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:114:36: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
DataExtractor::getSigned(uint32_t *offset_ptr, uint32_t byte_size) const {
                                   ^~~~~~~~~~~
                                   OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:114:57: warning: invalid case style for parameter 'byte_size' [readability-identifier-naming]
DataExtractor::getSigned(uint32_t *offset_ptr, uint32_t byte_size) const {
                                                        ^~~~~~~~~~
                                                        ByteSize
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:117:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (int8_t)getU8(offset_ptr);
           ^~~~~~~~~~~~~            ~
           static_cast<int8_t>(     )
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:119:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (int16_t)getU16(offset_ptr);
           ^~~~~~~~~~~~~~~            ~
           static_cast<int16_t>(      )
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:121:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (int32_t)getU32(offset_ptr);
           ^~~~~~~~~~~~~~~            ~
           static_cast<int32_t>(      )
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:123:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (int64_t)getU64(offset_ptr);
           ^~~~~~~~~~~~~~~            ~
           static_cast<int64_t>(      )
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:128:46: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
const char *DataExtractor::getCStr(uint32_t *offset_ptr) const {
                                             ^~~~~~~~~~~
                                             OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:129:12: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  uint32_t offset = *offset_ptr;
           ^~~~~~
           Offset
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:130:24: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  StringRef::size_type pos = Data.find('\0', offset);
                       ^~~
                       Pos
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:133:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return Data.data() + offset;
                       ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:143:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef(Data.data() + Start, Pos - Start);
           ^~~~~~~~~~~~~~                            ~~
           {                                         }
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:143:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return StringRef(Data.data() + Start, Pos - Start);
                                 ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:148:46: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
uint64_t DataExtractor::getULEB128(uint32_t *offset_ptr) const {
                                             ^~~~~~~~~~~
                                             OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:149:12: warning: invalid case style for variable 'result' [readability-identifier-naming]
  uint64_t result = 0;
           ^~~~~~
           Result
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:150:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Data.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:153:12: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned shift = 0;
           ^~~~~
           Shift
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:154:12: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  uint32_t offset = *offset_ptr;
           ^~~~~~
           Offset
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:155:11: warning: invalid case style for variable 'byte' [readability-identifier-naming]
  uint8_t byte = 0;
          ^~~~
          Byte
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:159:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    result |= uint64_t(byte & 0x7f) << shift;
                       ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:161:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((byte & 0x80) == 0)
         ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:161:28: warning: statement should be inside braces [hicpp-braces-around-statements]
    if ((byte & 0x80) == 0)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:169:45: warning: invalid case style for parameter 'offset_ptr' [readability-identifier-naming]
int64_t DataExtractor::getSLEB128(uint32_t *offset_ptr) const {
                                            ^~~~~~~~~~~
                                            OffsetPtr
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:170:11: warning: invalid case style for variable 'result' [readability-identifier-naming]
  int64_t result = 0;
          ^~~~~~
          Result
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:171:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Data.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:174:12: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned shift = 0;
           ^~~~~
           Shift
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:175:12: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  uint32_t offset = *offset_ptr;
           ^~~~~~
           Offset
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:176:11: warning: invalid case style for variable 'byte' [readability-identifier-naming]
  uint8_t byte = 0;
          ^~~~
          Byte
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:180:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    result |= uint64_t(byte & 0x7f) << shift;
                       ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:182:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((byte & 0x80) == 0)
         ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:182:28: warning: statement should be inside braces [readability-braces-around-statements]
    if ((byte & 0x80) == 0)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:187:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (shift < 64 && (byte & 0x40))
                    ^            ~
                    (             != 0)
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:187:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (shift < 64 && (byte & 0x40))
                     ^
/home/jonas/opt/llvm/lib/Support/DataExtractor.cpp:187:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (shift < 64 && (byte & 0x40))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:16:10: warning: inclusion of deprecated C++ header 'setjmp.h'; consider using 'csetjmp' instead [hicpp-deprecated-headers]
#include <setjmp.h>
         ^~~~~~~~~~
         <csetjmp>
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:24:56: warning: 'CurrentContext' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
    sys::ThreadLocal<const CrashRecoveryContextImpl> > CurrentContext;
                                                       ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:26:8: warning: class 'CrashRecoveryContextImpl' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
struct CrashRecoveryContextImpl {
       ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:39:3: warning: constructor does not initialize these fields: JumpBuffer [cppcoreguidelines-pro-type-member-init]
  CrashRecoveryContextImpl(CrashRecoveryContext *CRC) : CRC(CRC),
  ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:39:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  CrashRecoveryContextImpl(CrashRecoveryContext *CRC) : CRC(CRC),
  ^~~~~~~~~~~~~~~~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:40:64: warning: implicit conversion bool -> 'volatile unsigned int' [readability-implicit-bool-conversion]
                                                        Failed(false),
                                                               ^~~~~~
                                                               0u
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:41:72: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
                                                        SwitchedThread(false) {
                                                                       ^~~~~~
                                                                       0u
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:46:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!SwitchedThread)
        ~^~~~~~~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:46:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!SwitchedThread)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:54:22: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    SwitchedThread = true;
                     ^~~~~
                     1u
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:58:8: warning: invalid case style for function 'HandleCrash' [readability-identifier-naming]
  void HandleCrash() {
       ^~~~~~~~~~~~
       handleCrash
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:63:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(!Failed && "Crash recovery context already failed!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:64:14: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    Failed = true;
             ^~~~~
             1u
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:69:5: warning: do not call 'longjmp'; consider using exception handling instead [cert-err52-cpp]
    longjmp(JumpBuffer, 1);
    ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:69:13: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    longjmp(JumpBuffer, 1);
            ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:73:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:19:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:75:34: warning: invalid case style for variable 'gCrashRecoveryContextMutex' [readability-identifier-naming]
static ManagedStatic<sys::Mutex> gCrashRecoveryContextMutex;
                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~
                                 GCrashRecoveryContextMutex
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:76:13: warning: invalid case style for variable 'gCrashRecoveryEnabled' [readability-identifier-naming]
static bool gCrashRecoveryEnabled = false;
            ^~~~~~~~~~~~~~~~~~~~~
            GCrashRecoveryEnabled
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:79:8: warning: invalid case style for variable 'tlIsRecoveringFromCrash' [readability-identifier-naming]
       tlIsRecoveringFromCrash;
       ^~~~~~~~~~~~~~~~~~~~~~~~
       TlIsRecoveringFromCrash
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:84:30: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup() {}
                             ^                              ~~
                                                            = default;
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:88:32: warning: invalid case style for variable 'i' [readability-identifier-naming]
  CrashRecoveryContextCleanup *i = head;
                               ^
                               I
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:91:10: warning: implicit conversion 'llvm::CrashRecoveryContextCleanup *' -> bool [readability-implicit-bool-conversion]
  while (i) {
         ^~
           != nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:92:34: warning: invalid case style for variable 'tmp' [readability-identifier-naming]
    CrashRecoveryContextCleanup *tmp = i;
                                 ^~~
                                 Tmp
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:96:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete tmp;
    ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:92:5: note: variable declared here
    CrashRecoveryContextCleanup *tmp = i;
    ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:100:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  CrashRecoveryContextImpl *CRCI = (CrashRecoveryContextImpl *) Impl;
  ^~~~~~~~~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:100:36: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  CrashRecoveryContextImpl *CRCI = (CrashRecoveryContextImpl *) Impl;
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   static_cast<CrashRecoveryContextImpl *>()
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:100:36: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:101:3: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  delete CRCI;
  ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:100:3: note: variable declared here
  CrashRecoveryContextImpl *CRCI = (CrashRecoveryContextImpl *) Impl;
  ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:108:45: warning: invalid case style for function 'GetCurrent' [readability-identifier-naming]
CrashRecoveryContext *CrashRecoveryContext::GetCurrent() {
                                            ^~~~~~~~~~~
                                            getCurrent
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:109:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!gCrashRecoveryEnabled)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:113:8: warning: implicit conversion 'const (anonymous namespace)::CrashRecoveryContextImpl *' -> bool [readability-implicit-bool-conversion]
  if (!CRCI)
      ~^~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:113:13: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!CRCI)
            ^
             {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:119:28: warning: invalid case style for function 'Enable' [readability-identifier-naming]
void CrashRecoveryContext::Enable() {
                           ^~~~~~~
                           enable
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:122:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (gCrashRecoveryEnabled)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:128:28: warning: invalid case style for function 'Disable' [readability-identifier-naming]
void CrashRecoveryContext::Disable() {
                           ^~~~~~~~
                           disable
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:130:30: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!gCrashRecoveryEnabled)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:136:73: warning: invalid case style for parameter 'cleanup' [readability-identifier-naming]
void CrashRecoveryContext::registerCleanup(CrashRecoveryContextCleanup *cleanup)
                                                                        ^~~~~~~~
                                                                        Cleanup
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:138:8: warning: implicit conversion 'llvm::CrashRecoveryContextCleanup *' -> bool [readability-implicit-bool-conversion]
  if (!cleanup)
      ~^~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:138:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!cleanup)
               ^
                {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:140:7: warning: implicit conversion 'llvm::CrashRecoveryContextCleanup *' -> bool [readability-implicit-bool-conversion]
  if (head)
      ^   ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:140:12: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (head)
           ^
            {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:147:70: warning: invalid case style for parameter 'cleanup' [readability-identifier-naming]
CrashRecoveryContext::unregisterCleanup(CrashRecoveryContextCleanup *cleanup) {
                                                                     ^~~~~~~~
                                                                     Cleanup
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:148:8: warning: implicit conversion 'llvm::CrashRecoveryContextCleanup *' -> bool [readability-implicit-bool-conversion]
  if (!cleanup)
      ~^~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:148:16: warning: statement should be inside braces [readability-braces-around-statements]
  if (!cleanup)
               ^
                {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:152:9: warning: implicit conversion 'llvm::CrashRecoveryContextCleanup *' -> bool [readability-implicit-bool-conversion]
    if (head)
        ^   ~
             != nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:152:14: warning: statement should be inside braces [readability-braces-around-statements]
    if (head)
             ^
              {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:157:9: warning: implicit conversion 'llvm::CrashRecoveryContextCleanup *' -> bool [readability-implicit-bool-conversion]
    if (cleanup->next)
        ^            ~
                      != nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:157:23: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (cleanup->next)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:160:3: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  delete cleanup;
  ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:147:41: note: variable declared here
CrashRecoveryContext::unregisterCleanup(CrashRecoveryContextCleanup *cleanup) {
                                        ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:288:10: warning: inclusion of deprecated C++ header 'signal.h'; consider using 'csignal' instead [modernize-deprecated-headers]
#include <signal.h>
         ^~~~~~~~~~
         <csignal>
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:295:13: warning: invalid case style for function 'CrashRecoverySignalHandler' [readability-identifier-naming]
static void CrashRecoverySignalHandler(int Signal) {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
            crashRecoverySignalHandler
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:299:8: warning: implicit conversion 'const (anonymous namespace)::CrashRecoveryContextImpl *' -> bool [readability-implicit-bool-conversion]
  if (!CRCI) {
      ~^~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:323:7: warning: implicit conversion 'const (anonymous namespace)::CrashRecoveryContextImpl *' -> bool [readability-implicit-bool-conversion]
  if (CRCI)
      ^   ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:323:12: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CRCI)
           ^
            {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:324:5: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
    const_cast<CrashRecoveryContextImpl*>(CRCI)->HandleCrash();
    ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:329:3: warning: uninitialized record type: 'Handler' [hicpp-member-init]
  struct sigaction Handler;
  ^                       ~
                          {}
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:330:11: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  Handler.sa_handler = CrashRecoverySignalHandler;
          ^
/usr/include/x86_64-linux-gnu/bits/sigaction.h:36:41: note: expanded from macro 'sa_handler'
# define sa_handler     __sigaction_handler.sa_handler
                                            ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:334:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != NumSignals; ++i) {
                ^      ~                  ~~
                I      I                  I
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:335:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    sigaction(Signals[i], &Handler, &PrevActions[i]);
              ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:335:38: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    sigaction(Signals[i], &Handler, &PrevActions[i]);
                                     ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:341:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != NumSignals; ++i)
                ^      ~                  ~~
                I      I                  I
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:341:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0; i != NumSignals; ++i)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:342:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    sigaction(Signals[i], &PrevActions[i], nullptr);
              ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:342:28: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    sigaction(Signals[i], &PrevActions[i], nullptr);
                           ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:347:28: warning: invalid case style for function 'RunSafely' [readability-identifier-naming]
bool CrashRecoveryContext::RunSafely(function_ref<void()> Fn) {
                           ^~~~~~~~~~
                           runSafely
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:350:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(!Impl && "Crash recovery context already initialized!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:351:5: warning: initializing non-owner '(anonymous namespace)::CrashRecoveryContextImpl *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    CrashRecoveryContextImpl *CRCI = new CrashRecoveryContextImpl(this);
    ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:351:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
    CrashRecoveryContextImpl *CRCI = new CrashRecoveryContextImpl(this);
    ^~~~~~~~~~~~~~~~~~~~~~~~
    auto
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:354:9: warning: do not call 'setjmp'; consider using exception handling instead [cert-err52-cpp]
    if (setjmp(CRCI->JumpBuffer) != 0) {
        ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:354:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    if (setjmp(CRCI->JumpBuffer) != 0) {
               ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:365:28: warning: invalid case style for function 'HandleCrash' [readability-identifier-naming]
void CrashRecoveryContext::HandleCrash() {
                           ^~~~~~~~~~~~
                           handleCrash
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:366:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  CrashRecoveryContextImpl *CRCI = (CrashRecoveryContextImpl *) Impl;
  ^~~~~~~~~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:366:36: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  CrashRecoveryContextImpl *CRCI = (CrashRecoveryContextImpl *) Impl;
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   static_cast<CrashRecoveryContextImpl *>()
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:366:36: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:367:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(CRCI && "Crash recovery context never initialized!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:387:8: warning: constructor does not initialize these fields: CRC, UseBackgroundPriority, Result [cppcoreguidelines-pro-type-member-init]
struct RunSafelyOnThreadInfo {
       ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:393:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:386:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:395:13: warning: invalid case style for function 'RunSafelyOnThread_Dispatch' [readability-identifier-naming]
static void RunSafelyOnThread_Dispatch(void *UserData) {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~
            runSafelyOnThreadDispatch
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:396:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  RunSafelyOnThreadInfo *Info =
  ^~~~~~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:397:5: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    reinterpret_cast<RunSafelyOnThreadInfo*>(UserData);
    ^
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:399:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Info->UseBackgroundPriority)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:404:28: warning: invalid case style for function 'RunSafelyOnThread' [readability-identifier-naming]
bool CrashRecoveryContext::RunSafelyOnThread(function_ref<void()> Fn,
                           ^~~~~~~~~~~~~~~~~~
                           runSafelyOnThread
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:409:7: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  if (CrashRecoveryContextImpl *CRC = (CrashRecoveryContextImpl *)Impl)
      ^~~~~~~~~~~~~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:409:39: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  if (CrashRecoveryContextImpl *CRC = (CrashRecoveryContextImpl *)Impl)
                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                      static_cast<CrashRecoveryContextImpl *>()
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:409:39: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp:409:72: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CrashRecoveryContextImpl *CRC = (CrashRecoveryContextImpl *)Impl)
                                                                       ^
                                                                        {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Debug.h:42:6: warning: function 'llvm::isCurrentDebugType' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
bool isCurrentDebugType(const char *Type);
     ^                              ~~~~~
                                    DebugType
/home/jonas/opt/llvm/lib/Support/Debug.cpp:51:6: note: the definition seen here
bool isCurrentDebugType(const char *DebugType) {
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Debug.h:42:6: note: differing parameters are named here: ('Type'), in definition: ('DebugType')
bool isCurrentDebugType(const char *Type);
     ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:38:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:52:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CurrentDebugType->empty())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/Debug.cpp:56:14: warning: invalid case style for variable 'd' [readability-identifier-naming]
  for (auto &d : *CurrentDebugType) {
             ^
             D
/home/jonas/opt/llvm/lib/Support/Debug.cpp:57:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (d == DebugType)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Debug.cpp:67:6: warning: redundant 'setCurrentDebugTypes' declaration [readability-redundant-declaration]
void setCurrentDebugTypes(const char **Types, unsigned Count);
~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Debug.h:54:6: note: previously declared here
void setCurrentDebugTypes(const char **Types, unsigned Count);
     ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:75:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_t T = 0; T < Count; ++T)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Debug.cpp:76:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CurrentDebugType->push_back(Types[T]);
                                ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:76:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    CurrentDebugType->push_back(Types[T]);
                                ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:102:3: warning: cannot overload 'operator=' [fuchsia-overloaded-operator]
  void operator=(const std::string &Val) const {
  ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:102:3: warning: operator=() should return 'DebugOnlyOpt&' [cppcoreguidelines-c-copy-assignment-signature]
/home/jonas/opt/llvm/lib/Support/Debug.cpp:103:21: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Val.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Debug.cpp:106:30: warning: invalid case style for variable 'dbgTypes' [readability-identifier-naming]
    SmallVector<StringRef,8> dbgTypes;
                             ^~~~~~~~~
                             DbgTypes
/home/jonas/opt/llvm/lib/Support/Debug.cpp:108:15: warning: invalid case style for variable 'dbgType' [readability-identifier-naming]
    for (auto dbgType : dbgTypes)
              ^~~~~~~
              DbgType
/home/jonas/opt/llvm/lib/Support/Debug.cpp:108:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (auto dbgType : dbgTypes)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Debug.cpp:113:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/Debug.cpp:99:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:122:13: warning: invalid case style for function 'debug_user_sig_handler' [readability-identifier-naming]
static void debug_user_sig_handler(void *Cookie) {
            ^~~~~~~~~~~~~~~~~~~~~~~
            debugUserSigHandler
/home/jonas/opt/llvm/lib/Support/Debug.cpp:122:42: warning: parameter 'Cookie' is unused [misc-unused-parameters]
static void debug_user_sig_handler(void *Cookie) {
                                         ^~~~~~~
                                          /*Cookie*/
/home/jonas/opt/llvm/lib/Support/Debug.cpp:127:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  llvm::circular_raw_ostream &dbgout =
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/Debug.cpp:127:31: warning: invalid case style for variable 'dbgout' [readability-identifier-naming]
  llvm::circular_raw_ostream &dbgout =
                              ^~~~~~
                              Dbgout
/home/jonas/opt/llvm/lib/Support/Debug.cpp:128:7: warning: do not use static_cast to downcast from a base to a derived class; use dynamic_cast instead [cppcoreguidelines-pro-type-static-cast-downcast]
      static_cast<circular_raw_ostream &>(llvm::dbgs());
      ^~~~~~~~~~~~
      dynamic_cast
/home/jonas/opt/llvm/lib/Support/Debug.cpp:135:17: warning: invalid case style for class 'dbgstream' [readability-identifier-naming]
  static struct dbgstream {
                ^~~~~~~~~
                Dbgstream
/home/jonas/opt/llvm/lib/Support/Debug.cpp:136:26: warning: invalid case style for member 'strm' [readability-identifier-naming]
    circular_raw_ostream strm;
                         ^~~~~
                         Strm
/home/jonas/opt/llvm/lib/Support/Debug.cpp:139:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        strm(errs(), "*** Debug Log Output ***\n",
        ^
../include/llvm/Support/circular_raw_ostream.h:109:47: note: default parameter was declared here
                         size_t BuffSize = 0, bool Owns = REFERENCE_ONLY)
                                              ^
/home/jonas/opt/llvm/lib/Support/Debug.cpp:141:69: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EnableDebugBuffering && DebugFlag && DebugBufferSize != 0)
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/Debug.cpp:142:9: warning: missing username/bug in TODO [google-readability-todo]
        // TODO: Add a handler for SIGUSER1-type signals so the user can
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        // TODO(jonas): Add a handler for SIGUSER1-type signals so the user can
/home/jonas/opt/llvm/lib/Support/Debug.cpp:148:5: warning: invalid case style for variable 'thestrm' [readability-identifier-naming]
  } thestrm;
    ^~~~~~~~
    Thestrm
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ConvertUTF.h:179:10: warning: function 'llvm::getNumBytesForUTF8' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
unsigned getNumBytesForUTF8(UTF8 firstByte);
         ^                       ~~~~~~~~~~
                                 first
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:520:10: note: the definition seen here
unsigned getNumBytesForUTF8(UTF8 first) {
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ConvertUTF.h:179:10: note: differing parameters are named here: ('firstByte'), in definition: ('first')
unsigned getNumBytesForUTF8(UTF8 firstByte);
         ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:53:10: warning: inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead [hicpp-deprecated-headers]
#include <assert.h>
         ^~~~~~~~~~
         <cassert>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:85:18: warning: invalid case style for variable 'halfShift' [readability-identifier-naming]
static const int halfShift  = 10; /* used for shifting by 10 bits */
                 ^~~~~~~~~
                 HalfShift
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:87:20: warning: invalid case style for variable 'halfBase' [readability-identifier-naming]
static const UTF32 halfBase = 0x0010000UL;
                   ^~~~~~~~
                   HalfBase
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:88:20: warning: invalid case style for variable 'halfMask' [readability-identifier-naming]
static const UTF32 halfMask = 0x3FFUL;
                   ^~~~~~~~
                   HalfMask
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:104:19: warning: invalid case style for variable 'trailingBytesForUTF8' [readability-identifier-naming]
static const char trailingBytesForUTF8[256] = {
                  ^~~~~~~~~~~~~~~~~~~~~
                  TrailingBytesForUtF8
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:120:20: warning: invalid case style for variable 'offsetsFromUTF8' [readability-identifier-naming]
static const UTF32 offsetsFromUTF8[6] = { 0x00000000UL, 0x00003080UL, 0x000E2080UL,
                   ^~~~~~~~~~~~~~~~
                   OffsetsFromUtF8
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:130:19: warning: invalid case style for variable 'firstByteMark' [readability-identifier-naming]
static const UTF8 firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };
                  ^~~~~~~~~~~~~~
                  FirstByteMark
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:145:18: warning: invalid case style for function 'ConvertUTF32toUTF16' [readability-identifier-naming]
ConversionResult ConvertUTF32toUTF16 (
                 ^~~~~~~~~~~~~~~~~~~
                 convertUtF32toUtF16
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:146:23: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
        const UTF32** sourceStart, const UTF32* sourceEnd,
                      ^~~~~~~~~~~~
                      SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:146:49: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
        const UTF32** sourceStart, const UTF32* sourceEnd,
                                                ^~~~~~~~~~
                                                SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:147:17: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                ^~~~~~~~~~~~
                TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:147:37: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                                    ^~~~~~~~~~
                                    TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:147:37: warning: pointer parameter 'targetEnd' can be pointer to const [readability-non-const-parameter]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                             ~~~~~  ^
                             const 
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:147:64: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                                                               ^~~~~~
                                                               Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:148:22: warning: invalid case style for variable 'result' [readability-identifier-naming]
    ConversionResult result = conversionOK;
                     ^~~~~~
                     Result
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:149:18: warning: invalid case style for variable 'source' [readability-identifier-naming]
    const UTF32* source = *sourceStart;
                 ^~~~~~
                 Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:150:12: warning: invalid case style for variable 'target' [readability-identifier-naming]
    UTF16* target = *targetStart;
           ^~~~~~
           Target
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:152:15: warning: invalid case style for variable 'ch' [readability-identifier-naming]
        UTF32 ch;
              ^~~
              Ch
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:156:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ch = *source++;
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:161:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    --source; /* return to the illegal value itself */
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:164:19: warning: do not use 'else' after 'break' [readability-else-after-return]
                } else {
                  ^~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:165:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    *target++ = UNI_REPLACEMENT_CHAR;
                           ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:168:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = (UTF16)ch; /* normal case */
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:168:29: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                *target++ = (UTF16)ch; /* normal case */
                            ^~~~~~~~~~
                            static_cast<UTF16>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:174:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = UNI_REPLACEMENT_CHAR;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:178:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            if (target + 1 >= targetEnd) {
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:179:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                --source; /* Back up source pointer! */
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:183:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:183:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            *target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
                        ^~~~~~~~
                        static_cast<UTF16>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:183:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            *target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:184:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *target++ = (UTF16)((ch & halfMask) + UNI_SUR_LOW_START);
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:184:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            *target++ = (UTF16)((ch & halfMask) + UNI_SUR_LOW_START);
                        ^~~~~~~~
                        static_cast<UTF16>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:194:18: warning: invalid case style for function 'ConvertUTF16toUTF32' [readability-identifier-naming]
ConversionResult ConvertUTF16toUTF32 (
                 ^~~~~~~~~~~~~~~~~~~
                 convertUtF16toUtF32
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:195:23: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
        const UTF16** sourceStart, const UTF16* sourceEnd,
                      ^~~~~~~~~~~~
                      SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:195:49: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
        const UTF16** sourceStart, const UTF16* sourceEnd,
                                                ^~~~~~~~~~
                                                SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:196:17: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags) {
                ^~~~~~~~~~~~
                TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:196:37: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags) {
                                    ^~~~~~~~~~
                                    TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:196:37: warning: pointer parameter 'targetEnd' can be pointer to const [readability-non-const-parameter]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags) {
                             ~~~~~  ^
                             const 
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:196:64: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags) {
                                                               ^~~~~~
                                                               Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:197:22: warning: invalid case style for variable 'result' [readability-identifier-naming]
    ConversionResult result = conversionOK;
                     ^~~~~~
                     Result
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:198:18: warning: invalid case style for variable 'source' [readability-identifier-naming]
    const UTF16* source = *sourceStart;
                 ^~~~~~
                 Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:199:12: warning: invalid case style for variable 'target' [readability-identifier-naming]
    UTF32* target = *targetStart;
           ^~~~~~
           Target
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:200:11: warning: invalid case style for variable 'ch' [readability-identifier-naming]
    UTF32 ch, ch2;
          ^~~
          Ch
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:200:15: warning: invalid case style for variable 'ch2' [readability-identifier-naming]
    UTF32 ch, ch2;
              ^~~~
              Ch2
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:202:22: warning: invalid case style for variable 'oldSource' [readability-identifier-naming]
        const UTF16* oldSource = source; /*  In case we have to back up because of target overflow. */
                     ^~~~~~~~~
                     OldSource
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:203:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ch = *source++;
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:211:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    ch = ((ch - UNI_SUR_HIGH_START) << halfShift)
                          ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:213:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    ++source;
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:215:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    --source; /* return to the illegal value itself */
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:220:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                --source; /* return to the high surrogate */
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:227:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                --source; /* return to the illegal value itself */
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:236:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        *target++ = ch;
               ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:248:18: warning: invalid case style for function 'ConvertUTF16toUTF8' [readability-identifier-naming]
ConversionResult ConvertUTF16toUTF8 (
                 ^~~~~~~~~~~~~~~~~~
                 convertUtF16toUtF8
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:249:23: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
        const UTF16** sourceStart, const UTF16* sourceEnd,
                      ^~~~~~~~~~~~
                      SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:249:49: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
        const UTF16** sourceStart, const UTF16* sourceEnd,
                                                ^~~~~~~~~~
                                                SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:250:16: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
               ^~~~~~~~~~~~
               TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:250:35: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
                                  ^~~~~~~~~~
                                  TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:250:35: warning: pointer parameter 'targetEnd' can be pointer to const [readability-non-const-parameter]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
                            ~~~~  ^
                            const 
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:250:62: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
                                                             ^~~~~~
                                                             Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:251:22: warning: invalid case style for variable 'result' [readability-identifier-naming]
    ConversionResult result = conversionOK;
                     ^~~~~~
                     Result
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:252:18: warning: invalid case style for variable 'source' [readability-identifier-naming]
    const UTF16* source = *sourceStart;
                 ^~~~~~
                 Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:253:11: warning: invalid case style for variable 'target' [readability-identifier-naming]
    UTF8* target = *targetStart;
          ^~~~~~
          Target
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:255:15: warning: invalid case style for variable 'ch' [readability-identifier-naming]
        UTF32 ch;
              ^~~
              Ch
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:256:9: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]
        unsigned short bytesToWrite = 0;
        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:256:24: warning: invalid case style for variable 'bytesToWrite' [readability-identifier-naming]
        unsigned short bytesToWrite = 0;
                       ^~~~~~~~~~~~
                       BytesToWrite
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:257:21: warning: invalid case style for variable 'byteMask' [readability-identifier-naming]
        const UTF32 byteMask = 0xBF;
                    ^~~~~~~~
                    ByteMask
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:258:21: warning: invalid case style for variable 'byteMark' [readability-identifier-naming]
        const UTF32 byteMark = 0x80;
                    ^~~~~~~~
                    ByteMark
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:259:22: warning: invalid case style for variable 'oldSource' [readability-identifier-naming]
        const UTF16* oldSource = source; /* In case we have to back up because of target overflow. */
                     ^~~~~~~~~
                     OldSource
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:260:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ch = *source++;
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:265:23: warning: invalid case style for variable 'ch2' [readability-identifier-naming]
                UTF32 ch2 = *source;
                      ^~~
                      Ch2
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:268:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    ch = ((ch - UNI_SUR_HIGH_START) << halfShift)
                          ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:270:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    ++source;
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:272:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    --source; /* return to the illegal value itself */
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:277:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                --source; /* return to the high surrogate */
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:284:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                --source; /* return to the illegal value itself */
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:290:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        if (ch < (UTF32)0x80) {      bytesToWrite = 1;
                 ^~~~~~~~~~~~
                 static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:291:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        } else if (ch < (UTF32)0x800) {     bytesToWrite = 2;
                        ^~~~~~~~~~~~~
                        static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:292:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        } else if (ch < (UTF32)0x10000) {   bytesToWrite = 3;
                        ^~~~~~~~~~~~~~~
                        static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:293:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        } else if (ch < (UTF32)0x110000) {  bytesToWrite = 4;
                        ^~~~~~~~~~~~~~~~
                        static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:298:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        target += bytesToWrite;
               ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:301:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            target -= bytesToWrite; result = targetExhausted; break;
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:304:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 4: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:304:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 4: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                                ^~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:305:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 3: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:305:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 3: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                                ^~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:306:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 2: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:306:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 2: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                                ^~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:307:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 1: *--target =  (UTF8)(ch | firstByteMark[bytesToWrite]);
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:307:34: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 1: *--target =  (UTF8)(ch | firstByteMark[bytesToWrite]);
                                 ^~~~~~~
                                 static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:307:46: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
            case 1: *--target =  (UTF8)(ch | firstByteMark[bytesToWrite]);
                                             ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:309:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        target += bytesToWrite;
               ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:318:18: warning: invalid case style for function 'ConvertUTF32toUTF8' [readability-identifier-naming]
ConversionResult ConvertUTF32toUTF8 (
                 ^~~~~~~~~~~~~~~~~~
                 convertUtF32toUtF8
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:319:23: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
        const UTF32** sourceStart, const UTF32* sourceEnd,
                      ^~~~~~~~~~~~
                      SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:319:49: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
        const UTF32** sourceStart, const UTF32* sourceEnd,
                                                ^~~~~~~~~~
                                                SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:320:16: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
               ^~~~~~~~~~~~
               TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:320:35: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
                                  ^~~~~~~~~~
                                  TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:320:35: warning: pointer parameter 'targetEnd' can be pointer to const [readability-non-const-parameter]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
                            ~~~~  ^
                            const 
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:320:62: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
                                                             ^~~~~~
                                                             Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:321:22: warning: invalid case style for variable 'result' [readability-identifier-naming]
    ConversionResult result = conversionOK;
                     ^~~~~~
                     Result
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:322:18: warning: invalid case style for variable 'source' [readability-identifier-naming]
    const UTF32* source = *sourceStart;
                 ^~~~~~
                 Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:323:11: warning: invalid case style for variable 'target' [readability-identifier-naming]
    UTF8* target = *targetStart;
          ^~~~~~
          Target
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:325:15: warning: invalid case style for variable 'ch' [readability-identifier-naming]
        UTF32 ch;
              ^~~
              Ch
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:326:9: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]
        unsigned short bytesToWrite = 0;
        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:326:24: warning: invalid case style for variable 'bytesToWrite' [readability-identifier-naming]
        unsigned short bytesToWrite = 0;
                       ^~~~~~~~~~~~
                       BytesToWrite
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:327:21: warning: invalid case style for variable 'byteMask' [readability-identifier-naming]
        const UTF32 byteMask = 0xBF;
                    ^~~~~~~~
                    ByteMask
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:328:21: warning: invalid case style for variable 'byteMark' [readability-identifier-naming]
        const UTF32 byteMark = 0x80;
                    ^~~~~~~~
                    ByteMark
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:329:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ch = *source++;
                    ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:333:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                --source; /* return to the illegal value itself */
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:342:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        if (ch < (UTF32)0x80) {      bytesToWrite = 1;
                 ^~~~~~~~~~~~
                 static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:343:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        } else if (ch < (UTF32)0x800) {     bytesToWrite = 2;
                        ^~~~~~~~~~~~~
                        static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:344:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        } else if (ch < (UTF32)0x10000) {   bytesToWrite = 3;
                        ^~~~~~~~~~~~~~~
                        static_cast<UTF32>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:351:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        target += bytesToWrite;
               ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:353:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            --source; /* Back up source pointer! */
            ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:354:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            target -= bytesToWrite; result = targetExhausted; break;
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:357:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 4: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:357:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 4: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                                ^~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:358:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 3: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:358:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 3: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                                ^~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:359:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 2: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:359:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 2: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
                                ^~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:360:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 1: *--target = (UTF8) (ch | firstByteMark[bytesToWrite]);
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:360:33: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            case 1: *--target = (UTF8) (ch | firstByteMark[bytesToWrite]);
                                ^~~~~~~~
                                static_cast<UTF8>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:360:46: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
            case 1: *--target = (UTF8) (ch | firstByteMark[bytesToWrite]);
                                             ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:362:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        target += bytesToWrite;
               ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:382:40: warning: invalid case style for parameter 'source' [readability-identifier-naming]
static Boolean isLegalUTF8(const UTF8 *source, int length) {
                                       ^~~~~~~
                                       Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:382:52: warning: invalid case style for parameter 'length' [readability-identifier-naming]
static Boolean isLegalUTF8(const UTF8 *source, int length) {
                                                   ^~~~~~~
                                                   Length
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:383:10: warning: invalid case style for variable 'a' [readability-identifier-naming]
    UTF8 a;
         ^~
         A
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:384:17: warning: invalid case style for variable 'srcptr' [readability-identifier-naming]
    const UTF8 *srcptr = source+length;
                ^~~~~~
                Srcptr
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:384:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    const UTF8 *srcptr = source+length;
                               ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:386:21: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    default: return false;
                    ^~~~~~
                    0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:388:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    case 4: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:388:54: warning: statement should be inside braces [hicpp-braces-around-statements]
    case 4: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:388:62: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    case 4: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                                                             ^~~~~~
                                                             0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:389:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    case 3: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:389:54: warning: statement should be inside braces [hicpp-braces-around-statements]
    case 3: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:389:62: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    case 3: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                                                             ^~~~~~
                                                             0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:390:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    case 2: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:390:54: warning: statement should be inside braces [hicpp-braces-around-statements]
    case 2: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:390:62: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    case 2: if ((a = (*--srcptr)) < 0x80 || a > 0xBF) return false;
                                                             ^~~~~~
                                                             0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:394:37: warning: statement should be inside braces [hicpp-braces-around-statements]
            case 0xE0: if (a < 0xA0) return false; break;
                                    ^              ~~~~~
                                     {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:394:45: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
            case 0xE0: if (a < 0xA0) return false; break;
                                            ^~~~~~
                                            0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:395:37: warning: statement should be inside braces [hicpp-braces-around-statements]
            case 0xED: if (a > 0x9F) return false; break;
                                    ^              ~~~~~
                                     {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:395:45: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
            case 0xED: if (a > 0x9F) return false; break;
                                            ^~~~~~
                                            0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:396:37: warning: statement should be inside braces [hicpp-braces-around-statements]
            case 0xF0: if (a < 0x90) return false; break;
                                    ^              ~~~~~
                                     {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:396:45: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
            case 0xF0: if (a < 0x90) return false; break;
                                            ^~~~~~
                                            0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:397:37: warning: statement should be inside braces [hicpp-braces-around-statements]
            case 0xF4: if (a > 0x8F) return false; break;
                                    ^              ~~~~~
                                     {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:397:45: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
            case 0xF4: if (a > 0x8F) return false; break;
                                            ^~~~~~
                                            0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:398:37: warning: statement should be inside braces [hicpp-braces-around-statements]
            default:   if (a < 0x80) return false;
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:398:45: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
            default:   if (a < 0x80) return false;
                                            ^~~~~~
                                            0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:401:51: warning: statement should be inside braces [readability-braces-around-statements]
    case 1: if (*source >= 0x80 && *source < 0xC2) return false;
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:401:59: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    case 1: if (*source >= 0x80 && *source < 0xC2) return false;
                                                          ^~~~~~
                                                          0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:403:24: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (*source > 0xF4) return false;
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:403:32: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    if (*source > 0xF4) return false;
                               ^~~~~~
                               0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:404:12: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    return true;
           ^~~~~
           1u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:413:41: warning: invalid case style for parameter 'source' [readability-identifier-naming]
Boolean isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd) {
                                        ^~~~~~~
                                        Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:413:61: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
Boolean isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd) {
                                                            ^~~~~~~~~~
                                                            SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:414:9: warning: invalid case style for variable 'length' [readability-identifier-naming]
    int length = trailingBytesForUTF8[*source]+1;
        ^~~~~~
        Length
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:414:18: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    int length = trailingBytesForUTF8[*source]+1;
                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:416:16: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
        return false;
               ^~~~~~
               0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:424:55: warning: invalid case style for parameter 'source' [readability-identifier-naming]
findMaximalSubpartOfIllFormedUTF8Sequence(const UTF8 *source,
                                                      ^~~~~~~
                                                      Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:425:55: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
                                          const UTF8 *sourceEnd) {
                                                      ^~~~~~~~~~
                                                      SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:426:8: warning: invalid case style for variable 'b1' [readability-identifier-naming]
  UTF8 b1, b2, b3;
       ^~~
       B1
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:426:12: warning: invalid case style for variable 'b2' [readability-identifier-naming]
  UTF8 b1, b2, b3;
           ^~~
           B2
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:426:16: warning: invalid case style for variable 'b3' [readability-identifier-naming]
  UTF8 b1, b2, b3;
               ^~~
               B3
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:428:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!isLegalUTF8Sequence(source, sourceEnd));
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:439:27: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (source == sourceEnd)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:448:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ++source;
  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:457:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (source == sourceEnd)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:461:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ++source;
  ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:477:31: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (source == sourceEnd)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:487:31: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (source == sourceEnd)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:497:31: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (source == sourceEnd)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:506:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:520:34: warning: invalid case style for parameter 'first' [readability-identifier-naming]
unsigned getNumBytesForUTF8(UTF8 first) {
                                 ^~~~~~
                                 First
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:521:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return trailingBytesForUTF8[first] + 1;
         ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:530:40: warning: invalid case style for parameter 'source' [readability-identifier-naming]
Boolean isLegalUTF8String(const UTF8 **source, const UTF8 *sourceEnd) {
                                       ^~~~~~~
                                       Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:530:60: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
Boolean isLegalUTF8String(const UTF8 **source, const UTF8 *sourceEnd) {
                                                           ^~~~~~~~~~
                                                           SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:532:13: warning: invalid case style for variable 'length' [readability-identifier-naming]
        int length = trailingBytesForUTF8[**source] + 1;
            ^~~~~~
            Length
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:532:22: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        int length = trailingBytesForUTF8[**source] + 1;
                     ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:533:46: warning: implicit conversion 'llvm::Boolean' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
        if (length > sourceEnd - *source || !isLegalUTF8(*source, length))
                                            ~^~~~~~~~~~~                 ~
                                            (                             == 0u)
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:533:75: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (length > sourceEnd - *source || !isLegalUTF8(*source, length))
                                                                          ^
                                                                           {
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:534:20: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
            return false;
                   ^~~~~~
                   0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:535:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        *source += length;
                ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:537:12: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
    return true;
           ^~~~~
           1u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:542:18: warning: invalid case style for function 'ConvertUTF8toUTF16' [readability-identifier-naming]
ConversionResult ConvertUTF8toUTF16 (
                 ^~~~~~~~~~~~~~~~~~
                 convertUtF8toUtF16
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:543:22: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
        const UTF8** sourceStart, const UTF8* sourceEnd,
                     ^~~~~~~~~~~~
                     SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:543:47: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
        const UTF8** sourceStart, const UTF8* sourceEnd,
                                              ^~~~~~~~~~
                                              SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:544:17: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                ^~~~~~~~~~~~
                TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:544:37: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                                    ^~~~~~~~~~
                                    TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:544:37: warning: pointer parameter 'targetEnd' can be pointer to const [readability-non-const-parameter]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                             ~~~~~  ^
                             const 
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:544:64: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
        UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags) {
                                                               ^~~~~~
                                                               Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:545:22: warning: invalid case style for variable 'result' [readability-identifier-naming]
    ConversionResult result = conversionOK;
                     ^~~~~~
                     Result
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:546:17: warning: invalid case style for variable 'source' [readability-identifier-naming]
    const UTF8* source = *sourceStart;
                ^~~~~~
                Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:547:12: warning: invalid case style for variable 'target' [readability-identifier-naming]
    UTF16* target = *targetStart;
           ^~~~~~
           Target
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:549:15: warning: invalid case style for variable 'ch' [readability-identifier-naming]
        UTF32 ch = 0;
              ^~
              Ch
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:550:9: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];
        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:550:24: warning: invalid case style for variable 'extraBytesToRead' [readability-identifier-naming]
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];
                       ^~~~~~~~~~~~~~~~
                       ExtraBytesToRead
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:550:43: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];
                                          ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:555:14: warning: implicit conversion 'llvm::Boolean' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
        if (!isLegalUTF8(source, extraBytesToRead+1)) {
            ~^~~~~~~~~~~                            ~
                                                     == 0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:563:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 5: ch += *source++; ch <<= 6; /* remember, illegal UTF-8 */
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:564:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 4: ch += *source++; ch <<= 6; /* remember, illegal UTF-8 */
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:565:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 3: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:566:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 2: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:567:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 1: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:568:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 0: ch += *source++;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:570:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        ch -= offsetsFromUTF8[extraBytesToRead];
              ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:573:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            source -= (extraBytesToRead+1); /* Back up source pointer! */
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:580:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    source -= (extraBytesToRead+1); /* return to the illegal value itself */
                           ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:583:19: warning: do not use 'else' after 'break' [readability-else-after-return]
                } else {
                  ^~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:584:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    *target++ = UNI_REPLACEMENT_CHAR;
                           ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:587:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = (UTF16)ch; /* normal case */
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:587:29: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                *target++ = (UTF16)ch; /* normal case */
                            ^~~~~~~~~~
                            static_cast<UTF16>()
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:592:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                source -= (extraBytesToRead+1); /* return to the start */
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:594:15: warning: do not use 'else' after 'break' [readability-else-after-return]
            } else {
              ^~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:595:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = UNI_REPLACEMENT_CHAR;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:599:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            if (target + 1 >= targetEnd) {
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:600:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                source -= (extraBytesToRead+1); /* Back up source pointer! */
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:604:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:604:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            *target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
                        ^~~~~~~~
                        static_cast<UTF16>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:604:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            *target++ = (UTF16)((ch >> halfShift) + UNI_SUR_HIGH_START);
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:605:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *target++ = (UTF16)((ch & halfMask) + UNI_SUR_LOW_START);
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:605:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            *target++ = (UTF16)((ch & halfMask) + UNI_SUR_LOW_START);
                        ^~~~~~~~
                        static_cast<UTF16>
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:615:25: warning: invalid case style for function 'ConvertUTF8toUTF32Impl' [readability-identifier-naming]
static ConversionResult ConvertUTF8toUTF32Impl(
                        ^~~~~~~~~~~~~~~~~~~~~~~
                        convertUtF8toUtF32Impl
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:616:22: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
        const UTF8** sourceStart, const UTF8* sourceEnd,
                     ^~~~~~~~~~~~
                     SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:616:47: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
        const UTF8** sourceStart, const UTF8* sourceEnd,
                                              ^~~~~~~~~~
                                              SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:617:17: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags,
                ^~~~~~~~~~~~
                TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:617:37: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags,
                                    ^~~~~~~~~~
                                    TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:617:37: warning: pointer parameter 'targetEnd' can be pointer to const [readability-non-const-parameter]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags,
                             ~~~~~  ^
                             const 
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:617:64: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
        UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags,
                                                               ^~~~~~
                                                               Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:619:22: warning: invalid case style for variable 'result' [readability-identifier-naming]
    ConversionResult result = conversionOK;
                     ^~~~~~
                     Result
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:620:17: warning: invalid case style for variable 'source' [readability-identifier-naming]
    const UTF8* source = *sourceStart;
                ^~~~~~
                Source
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:621:12: warning: invalid case style for variable 'target' [readability-identifier-naming]
    UTF32* target = *targetStart;
           ^~~~~~
           Target
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:623:15: warning: invalid case style for variable 'ch' [readability-identifier-naming]
        UTF32 ch = 0;
              ^~
              Ch
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:624:9: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];
        ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:624:24: warning: invalid case style for variable 'extraBytesToRead' [readability-identifier-naming]
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];
                       ^~~~~~~~~~~~~~~~
                       ExtraBytesToRead
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:624:43: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        unsigned short extraBytesToRead = trailingBytesForUTF8[*source];
                                          ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:626:46: warning: implicit conversion 'llvm::Boolean' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
            if (flags == strictConversion || InputIsPartial) {
                                             ^~~~~~~~~~~~~~~
                                             ( != 0u)
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:629:15: warning: do not use 'else' after 'break' [readability-else-after-return]
            } else {
              ^~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:636:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                source += findMaximalSubpartOfIllFormedUTF8Sequence(source,
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:638:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = UNI_REPLACEMENT_CHAR;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:647:14: warning: implicit conversion 'llvm::Boolean' (aka 'unsigned char') -> bool [readability-implicit-bool-conversion]
        if (!isLegalUTF8(source, extraBytesToRead+1)) {
            ~^~~~~~~~~~~                            ~
                                                     == 0u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:652:15: warning: do not use 'else' after 'break' [readability-else-after-return]
            } else {
              ^~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:657:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                source += findMaximalSubpartOfIllFormedUTF8Sequence(source,
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:659:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = UNI_REPLACEMENT_CHAR;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:667:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 5: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:668:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 4: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:669:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 3: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:670:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 2: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:671:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 1: ch += *source++; ch <<= 6;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:672:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            case 0: ch += *source++;
                                 ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:674:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        ch -= offsetsFromUTF8[extraBytesToRead];
              ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:683:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    source -= (extraBytesToRead+1); /* return to the illegal value itself */
                           ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:686:19: warning: do not use 'else' after 'break' [readability-else-after-return]
                } else {
                  ^~~~~~
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:687:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                    *target++ = UNI_REPLACEMENT_CHAR;
                           ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:690:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                *target++ = ch;
                       ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:694:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *target++ = UNI_REPLACEMENT_CHAR;
                   ^
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:702:18: warning: invalid case style for function 'ConvertUTF8toUTF32Partial' [readability-identifier-naming]
ConversionResult ConvertUTF8toUTF32Partial(const UTF8 **sourceStart,
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
                 convertUtF8toUtF32Partial
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:702:57: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
ConversionResult ConvertUTF8toUTF32Partial(const UTF8 **sourceStart,
                                                        ^~~~~~~~~~~~
                                                        SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:703:56: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
                                           const UTF8 *sourceEnd,
                                                       ^~~~~~~~~~
                                                       SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:704:52: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
                                           UTF32 **targetStart,
                                                   ^~~~~~~~~~~~
                                                   TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:705:51: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
                                           UTF32 *targetEnd,
                                                  ^~~~~~~~~~
                                                  TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:706:60: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
                                           ConversionFlags flags) {
                                                           ^~~~~~
                                                           Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:708:59: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
                                flags, /*InputIsPartial=*/true);
                                                          ^~~~~
                                                          1u
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:711:18: warning: invalid case style for function 'ConvertUTF8toUTF32' [readability-identifier-naming]
ConversionResult ConvertUTF8toUTF32(const UTF8 **sourceStart,
                 ^~~~~~~~~~~~~~~~~~~
                 convertUtF8toUtF32
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:711:50: warning: invalid case style for parameter 'sourceStart' [readability-identifier-naming]
ConversionResult ConvertUTF8toUTF32(const UTF8 **sourceStart,
                                                 ^~~~~~~~~~~~
                                                 SourceStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:712:49: warning: invalid case style for parameter 'sourceEnd' [readability-identifier-naming]
                                    const UTF8 *sourceEnd, UTF32 **targetStart,
                                                ^~~~~~~~~~
                                                SourceEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:712:68: warning: invalid case style for parameter 'targetStart' [readability-identifier-naming]
                                    const UTF8 *sourceEnd, UTF32 **targetStart,
                                                                   ^~~~~~~~~~~~
                                                                   TargetStart
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:713:44: warning: invalid case style for parameter 'targetEnd' [readability-identifier-naming]
                                    UTF32 *targetEnd, ConversionFlags flags) {
                                           ^~~~~~~~~~
                                           TargetEnd
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:713:71: warning: invalid case style for parameter 'flags' [readability-identifier-naming]
                                    UTF32 *targetEnd, ConversionFlags flags) {
                                                                      ^~~~~~
                                                                      Flags
/home/jonas/opt/llvm/lib/Support/ConvertUTF.cpp:715:59: warning: implicit conversion bool -> 'llvm::Boolean' (aka 'unsigned char') [readability-implicit-bool-conversion]
                                flags, /*InputIsPartial=*/false);
                                                          ^~~~~~
                                                          0u
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:13:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:15:17: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
DeltaAlgorithm::~DeltaAlgorithm() {
                ^                 ~
                                  = default;
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:18:22: warning: invalid case style for function 'GetTestResult' [readability-identifier-naming]
bool DeltaAlgorithm::GetTestResult(const changeset_ty &Changes) {
                     ^~~~~~~~~~~~~~
                     getTestResult
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:19:7: warning: implicit conversion 'std::set<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >, std::less<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > >, std::allocator<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > > >::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (FailedTestsCache.count(Changes))
      ^                              ~
                                      != 0u
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:19:39: warning: statement should be inside braces [readability-braces-around-statements]
  if (FailedTestsCache.count(Changes))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:23:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Result)
              ^
               {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:29:22: warning: invalid case style for function 'Split' [readability-identifier-naming]
void DeltaAlgorithm::Split(const changeset_ty &S, changesetlist_ty &Res) {
                     ^~~~~~
                     split
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:34:12: warning: invalid case style for variable 'idx' [readability-identifier-naming]
  unsigned idx = 0, N = S.size() / 2;
           ^~~
           Idx
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:35:8: warning: use auto when declaring iterators [hicpp-use-auto]
  for (changeset_ty::const_iterator it = S.begin(),
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
       auto
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:35:37: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changeset_ty::const_iterator it = S.begin(),
                                    ^~
                                    It
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:36:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = S.end(); it != ie; ++it, ++idx)
         ^~                  ~~~
         Ie                  Ie
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:36:46: warning: statement should be inside braces [readability-braces-around-statements]
         ie = S.end(); it != ie; ++it, ++idx)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:38:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (!LHS.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:40:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (!RHS.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:45:17: warning: invalid case style for function 'Delta' [readability-identifier-naming]
DeltaAlgorithm::Delta(const changeset_ty &Changes,
                ^~~~~~
                delta
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:51:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Sets.size() <= 1)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:56:34: warning: statement should be inside braces [readability-braces-around-statements]
  if (Search(Changes, Sets, Res))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:61:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (changesetlist_ty::const_iterator it = Sets.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (const auto & Set : Sets)
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:61:8: warning: use auto when declaring iterators [modernize-use-auto]
  for (changesetlist_ty::const_iterator it = Sets.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:61:41: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changesetlist_ty::const_iterator it = Sets.begin(),
                                        ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:62:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Sets.end(); it != ie; ++it)
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:62:42: warning: statement should be inside braces [readability-braces-around-statements]
         ie = Sets.end(); it != ie; ++it)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:64:39: warning: statement should be inside braces [readability-braces-around-statements]
  if (SplitSets.size() == Sets.size())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:70:22: warning: invalid case style for function 'Search' [readability-identifier-naming]
bool DeltaAlgorithm::Search(const changeset_ty &Changes,
                     ^~~~~~~
                     search
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:74:8: warning: use auto when declaring iterators [hicpp-use-auto]
  for (changesetlist_ty::const_iterator it = Sets.begin(),
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       auto
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:74:41: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changesetlist_ty::const_iterator it = Sets.begin(),
                                        ^~
                                        It
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:75:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Sets.end(); it != ie; ++it) {
         ^~                     ~~~
         Ie                     Ie
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:105:46: warning: invalid case style for function 'Run' [readability-identifier-naming]
DeltaAlgorithm::changeset_ty DeltaAlgorithm::Run(const changeset_ty &Changes) {
                                             ^~~~
                                             run
/home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp:107:37: warning: statement should be inside braces [readability-braces-around-statements]
  if (GetTestResult(changeset_ty()))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/DJB.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:22:38: warning: non-const reference parameter 'Buffer', make it const or use a pointer [google-runtime-references]
static UTF32 chopOneUTF32(StringRef &Buffer) {
                                     ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:24:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const UTF8 *const Begin8Const =
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/DJB.cpp:25:7: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      reinterpret_cast<const UTF8 *>(Buffer.begin());
      ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:31:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!Buffer.empty());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:32:31: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  ConvertUTF8toUTF32(&Begin8, reinterpret_cast<const UTF8 *>(Buffer.end()),
                              ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:33:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                     &Begin32, &C + 1, lenientConversion);
                                  ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:44:57: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ConversionResult CR = ConvertUTF32toUTF8(&Begin32, &C + 1, &Begin8,
                                                        ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:46:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(CR == conversionOK && "Case folding produced invalid char?");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:48:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef(reinterpret_cast<char *>(Storage.begin()),
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
         {
/home/jonas/opt/llvm/lib/Support/DJB.cpp:48:20: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  return StringRef(reinterpret_cast<char *>(Storage.begin()),
                   ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:56:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x130 || C == 0x131)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/DJB.cpp:61:55: warning: non-const reference parameter 'Buffer', make it const or use a pointer [google-runtime-references]
static uint32_t caseFoldingDjbHashCharSlow(StringRef &Buffer, uint32_t H) {
                                                      ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:66:3: warning: uninitialized record type: 'Storage' [cppcoreguidelines-pro-type-member-init]
  std::array<UTF8, UNI_MAX_UTF8_BYTES_PER_CODE_POINT> Storage;
  ^                                                          ~
                                                             {}
/home/jonas/opt/llvm/lib/Support/DJB.cpp:77:32: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (C >= 'A' && C <= 'Z')
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/DJB.cpp:79:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      H = (H << 5) + H + C;
           ^
/home/jonas/opt/llvm/lib/Support/DJB.cpp:80:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Buffer = Buffer.drop_front();
               ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:7:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:35:15: warning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]
    for (auto Name : CounterInstance) {
         ~~~~ ^
         const &
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:60:48: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isCountingEnabled() && PrintDebugCounter)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:68:20: warning: invalid case style for function 'push_back' [readability-identifier-naming]
void DebugCounter::push_back(const std::string &Val) {
                   ^~~~~~~~~~
                   pushBack
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:69:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Val.empty())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:90:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!CounterID) {
        ~^~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/DebugCounter.cpp:103:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!CounterID) {
        ~^~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:43:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:53:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef DAGDeltaAlgorithm::change_ty change_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using change_ty = DAGDeltaAlgorithm::change_ty
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:54:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef DAGDeltaAlgorithm::changeset_ty changeset_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using changeset_ty = DAGDeltaAlgorithm::changeset_ty
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:55:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef DAGDeltaAlgorithm::changesetlist_ty changesetlist_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using changesetlist_ty = DAGDeltaAlgorithm::changesetlist_ty
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:56:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef DAGDeltaAlgorithm::edge_ty edge_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using edge_ty = DAGDeltaAlgorithm::edge_ty
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:59:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef std::vector<change_ty>::iterator pred_iterator_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using pred_iterator_ty = std::vector<change_ty>::iterator
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:60:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef std::vector<change_ty>::iterator succ_iterator_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using succ_iterator_ty = std::vector<change_ty>::iterator
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:61:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef std::set<change_ty>::iterator pred_closure_iterator_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using pred_closure_iterator_ty = std::set<change_ty>::iterator
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:62:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef std::set<change_ty>::iterator succ_closure_iterator_ty;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using succ_closure_iterator_ty = std::set<change_ty>::iterator
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:82:20: warning: invalid case style for function 'pred_begin' [readability-identifier-naming]
  pred_iterator_ty pred_begin(change_ty Node) {
                   ^~~~~~~~~~~
                   predBegin
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:83:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Predecessors.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:86:20: warning: invalid case style for function 'pred_end' [readability-identifier-naming]
  pred_iterator_ty pred_end(change_ty Node) {
                   ^~~~~~~~~
                   predEnd
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:87:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Predecessors.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:91:28: warning: invalid case style for function 'pred_closure_begin' [readability-identifier-naming]
  pred_closure_iterator_ty pred_closure_begin(change_ty Node) {
                           ^~~~~~~~~~~~~~~~~~~
                           predClosureBegin
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:92:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(PredClosure.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:95:28: warning: invalid case style for function 'pred_closure_end' [readability-identifier-naming]
  pred_closure_iterator_ty pred_closure_end(change_ty Node) {
                           ^~~~~~~~~~~~~~~~~
                           predClosureEnd
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:96:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(PredClosure.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:100:20: warning: invalid case style for function 'succ_begin' [readability-identifier-naming]
  succ_iterator_ty succ_begin(change_ty Node) {
                   ^~~~~~~~~~~
                   succBegin
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:101:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Successors.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:104:20: warning: invalid case style for function 'succ_end' [readability-identifier-naming]
  succ_iterator_ty succ_end(change_ty Node) {
                   ^~~~~~~~~
                   succEnd
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:105:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Successors.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:109:28: warning: invalid case style for function 'succ_closure_begin' [readability-identifier-naming]
  succ_closure_iterator_ty succ_closure_begin(change_ty Node) {
                           ^~~~~~~~~~~~~~~~~~~
                           succClosureBegin
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:110:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(SuccClosure.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:113:28: warning: invalid case style for function 'succ_closure_end' [readability-identifier-naming]
  succ_closure_iterator_ty succ_closure_end(change_ty Node) {
                           ^~~~~~~~~~~~~~~~~
                           succClosureEnd
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:114:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(SuccClosure.count(Node) && "Invalid node!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:118:8: warning: invalid case style for function 'UpdatedSearchState' [readability-identifier-naming]
  void UpdatedSearchState(const changeset_ty &Changes,
       ^~~~~~~~~~~~~~~~~~~
       updatedSearchState
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:125:8: warning: invalid case style for function 'ExecuteOneTest' [readability-identifier-naming]
  bool ExecuteOneTest(const changeset_ty &S) {
       ^~~~~~~~~~~~~~~
       executeOneTest
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:128:12: warning: use auto when declaring iterators [modernize-use-auto]
      for (changeset_ty::const_iterator it = S.begin(), ie = S.end(); it != ie;
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
           auto
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:129:17: warning: statement should be inside braces [google-readability-braces-around-statements]
           ++it)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:130:14: warning: use auto when declaring iterators [hicpp-use-auto]
        for (succ_iterator_ty it2 = succ_begin(*it), ie2 = succ_end(*it);
             ^~~~~~~~~~~~~~~~
             auto
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:131:32: warning: statement should be inside braces [hicpp-braces-around-statements]
             it2 != ie2; ++it2)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:132:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
          assert(S.count(*it2) && "Attempt to run invalid changeset!");
          ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:139:44: warning: non-const reference parameter 'DDA', make it const or use a pointer [google-runtime-references]
  DAGDeltaAlgorithmImpl(DAGDeltaAlgorithm &DDA, const changeset_ty &Changes,
                                           ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:142:16: warning: invalid case style for function 'Run' [readability-identifier-naming]
  changeset_ty Run();
               ^~~~
               run
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:152:8: warning: invalid case style for function 'GetTestResult' [readability-identifier-naming]
  bool GetTestResult(const changeset_ty &Changes, const changeset_ty &Required);
       ^~~~~~~~~~~~~~
       getTestResult
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:173:47: warning: non-const reference parameter 'DDAI', make it const or use a pointer [google-runtime-references]
  DeltaActiveSetHelper(DAGDeltaAlgorithmImpl &DDAI,
                                              ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:178:2: warning: anonymous namespace not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:47:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:184:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (changeset_ty::const_iterator it = Changes.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (unsigned int Change : Changes)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:184:8: warning: use auto when declaring iterators [hicpp-use-auto]
  for (changeset_ty::const_iterator it = Changes.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:184:37: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changeset_ty::const_iterator it = Changes.begin(),
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:185:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Changes.end(); it != ie; ++it) {
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:189:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (std::vector<edge_ty>::const_iterator it = Dependencies.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (const auto & Dependencie : Dependencies)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:189:8: warning: use auto when declaring iterators [modernize-use-auto]
  for (std::vector<edge_ty>::const_iterator it = Dependencies.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:189:45: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (std::vector<edge_ty>::const_iterator it = Dependencies.begin(),
                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:190:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Dependencies.end(); it != ie; ++it) {
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:196:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (changeset_ty::const_iterator it = Changes.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (unsigned int Change : Changes)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:196:8: warning: use auto when declaring iterators [modernize-use-auto]
  for (changeset_ty::const_iterator it = Changes.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:196:37: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changeset_ty::const_iterator it = Changes.begin(),
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:197:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Changes.end(); it != ie; ++it)
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:197:45: warning: statement should be inside braces [google-readability-braces-around-statements]
         ie = Changes.end(); it != ie; ++it)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:198:42: warning: statement should be inside braces [readability-braces-around-statements]
    if (succ_begin(*it) == succ_end(*it))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:202:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::vector<change_ty> Worklist(Roots.begin(), Roots.end());
                         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:544:9: note: default parameter was declared here
               const allocator_type& __a = allocator_type())
               ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:208:10: warning: use auto when declaring iterators [modernize-use-auto]
    for (pred_iterator_ty it = pred_begin(Change),
         ^~~~~~~~~~~~~~~~
         auto
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:208:27: warning: invalid case style for variable 'it' [readability-identifier-naming]
    for (pred_iterator_ty it = pred_begin(Change),
                          ^~
                          It
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:209:12: warning: invalid case style for variable 'ie' [readability-identifier-naming]
           ie = pred_end(Change); it != ie; ++it) {
           ^~                           ~~~
           Ie                           Ie
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:217:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (changeset_ty::const_iterator it = Changes.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (unsigned int Change : Changes)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:217:8: warning: use auto when declaring iterators [hicpp-use-auto]
  for (changeset_ty::const_iterator it = Changes.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:217:37: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changeset_ty::const_iterator it = Changes.begin(),
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:218:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Changes.end(); it != ie; ++it)
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:218:45: warning: statement should be inside braces [hicpp-braces-around-statements]
         ie = Changes.end(); it != ie; ++it)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:220:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (changeset_ty::const_iterator it = Changes.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (unsigned int Change : Changes)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:220:8: warning: use auto when declaring iterators [hicpp-use-auto]
  for (changeset_ty::const_iterator it = Changes.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:220:37: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changeset_ty::const_iterator it = Changes.begin(),
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:221:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Changes.end(); it != ie; ++it)
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:221:45: warning: statement should be inside braces [readability-braces-around-statements]
         ie = Changes.end(); it != ie; ++it)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:222:10: warning: use auto when declaring iterators [hicpp-use-auto]
    for (succ_closure_iterator_ty it2 = succ_closure_begin(*it),
         ^~~~~~~~~~~~~~~~~~~~~~~~
         auto
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:222:35: warning: invalid case style for variable 'it2' [readability-identifier-naming]
    for (succ_closure_iterator_ty it2 = succ_closure_begin(*it),
                                  ^~~
                                  It2
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:223:12: warning: invalid case style for variable 'ie2' [readability-identifier-naming]
           ie2 = succ_closure_end(*it); it2 != ie2; ++it2)
           ^~~                                 ~~~~
           Ie2                                 Ie2
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:223:59: warning: statement should be inside braces [google-readability-braces-around-statements]
           ie2 = succ_closure_end(*it); it2 != ie2; ++it2)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:230:10: warning: use auto when declaring iterators [hicpp-use-auto]
    for (changeset_ty::const_iterator it = Changes.begin(), ie = Changes.end();
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
         auto
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:238:14: warning: use auto when declaring iterators [hicpp-use-auto]
        for (succ_iterator_ty it2 = succ_begin(*it), ie2 = succ_end(*it);
             ^~~~~~~~~~~~~~~~
             auto
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:260:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (changeset_ty::const_iterator it = Changes.begin(), ie = Changes.end();
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (unsigned int Change : Changes)
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:260:10: warning: use auto when declaring iterators [hicpp-use-auto]
    for (changeset_ty::const_iterator it = Changes.begin(), ie = Changes.end();
         ^
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:263:12: warning: use auto when declaring iterators [hicpp-use-auto]
      for (pred_closure_iterator_ty it2 = pred_closure_begin(*it),
           ^~~~~~~~~~~~~~~~~~~~~~~~
           auto
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:274:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (changeset_ty::const_iterator it = Changes.begin(), ie = Changes.end();
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (unsigned int Change : Changes)
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:274:10: warning: use auto when declaring iterators [hicpp-use-auto]
    for (changeset_ty::const_iterator it = Changes.begin(), ie = Changes.end();
         ^
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:277:12: warning: use auto when declaring iterators [hicpp-use-auto]
      for (succ_closure_iterator_ty it2 = succ_closure_begin(*it),
           ^~~~~~~~~~~~~~~~~~~~~~~~
           auto
../include/llvm/Support/Debug.h:123:51: note: expanded from macro 'LLVM_DEBUG'
#define LLVM_DEBUG(X) DEBUG_WITH_TYPE(DEBUG_TYPE, X)
                                                  ^
../include/llvm/Support/Debug.h:66:69: note: expanded from macro 'DEBUG_WITH_TYPE'
  do { if (::llvm::DebugFlag && ::llvm::isCurrentDebugType(TYPE)) { X; } \
                                                                    ^
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:291:29: warning: invalid case style for function 'GetTestResult' [readability-identifier-naming]
bool DAGDeltaAlgorithmImpl::GetTestResult(const changeset_ty &Changes,
                            ^~~~~~~~~~~~~~
                            getTestResult
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:295:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (changeset_ty::const_iterator it = Changes.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (unsigned int Change : Changes)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:295:8: warning: use auto when declaring iterators [modernize-use-auto]
  for (changeset_ty::const_iterator it = Changes.begin(),
       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:295:37: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (changeset_ty::const_iterator it = Changes.begin(),
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:296:10: warning: invalid case style for variable 'ie' [readability-identifier-naming]
         ie = Changes.end(); it != ie; ++it)
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:296:45: warning: statement should be inside braces [hicpp-braces-around-statements]
         ie = Changes.end(); it != ie; ++it)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:299:7: warning: implicit conversion 'std::set<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >, std::less<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > >, std::allocator<std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> > > >::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (FailedTestsCache.count(Extended))
      ^                               ~
                                       != 0u
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:299:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FailedTestsCache.count(Extended))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:303:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Result)
              ^
               {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:310:24: warning: invalid case style for function 'Run' [readability-identifier-naming]
DAGDeltaAlgorithmImpl::Run() {
                       ^~~~
                       run
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:344:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (changeset_ty::const_iterator it = CurrentMinSet.begin(),
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (unsigned int it : CurrentMinSet)
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:344:10: warning: use auto when declaring iterators [modernize-use-auto]
    for (changeset_ty::const_iterator it = CurrentMinSet.begin(),
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:344:39: warning: invalid case style for variable 'it' [readability-identifier-naming]
    for (changeset_ty::const_iterator it = CurrentMinSet.begin(),
                                      ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:345:12: warning: invalid case style for variable 'ie' [readability-identifier-naming]
           ie = CurrentMinSet.end(); it != ie; ++it)
           ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:345:53: warning: statement should be inside braces [readability-braces-around-statements]
           ie = CurrentMinSet.end(); it != ie; ++it)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp:359:20: warning: invalid case style for function 'Run' [readability-identifier-naming]
DAGDeltaAlgorithm::Run(const changeset_ty &Changes,
                   ^~~~
                   run
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:72:30: warning: function 'llvm::report_fatal_error' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(const char *reason,
                             ^                              ~~~~~~~
                                                            Reason
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:82:12: note: the definition seen here
void llvm::report_fatal_error(const char *Reason, bool GenCrashDiag) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:72:30: note: differing parameters are named here: ('reason', 'gen_crash_diag'), in definition: ('Reason', 'GenCrashDiag')
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(const char *reason,
                             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:74:30: warning: function 'llvm::report_fatal_error' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(const std::string &reason,
                             ^                                     ~~~~~~~
                                                                   Reason
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:86:12: note: the definition seen here
void llvm::report_fatal_error(const std::string &Reason, bool GenCrashDiag) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:74:30: note: differing parameters are named here: ('reason', 'gen_crash_diag'), in definition: ('Reason', 'GenCrashDiag')
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(const std::string &reason,
                             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:76:30: warning: function 'llvm::report_fatal_error' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(StringRef reason,
                             ^                            ~~~~~~~
                                                          Reason
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:90:12: note: the definition seen here
void llvm::report_fatal_error(StringRef Reason, bool GenCrashDiag) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:76:30: note: differing parameters are named here: ('reason', 'gen_crash_diag'), in definition: ('Reason', 'GenCrashDiag')
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(StringRef reason,
                             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:78:30: warning: function 'llvm::report_fatal_error' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(const Twine &reason,
                             ^                               ~~~~~~~
                                                             Reason
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:94:12: note: the definition seen here
void llvm::report_fatal_error(const Twine &Reason, bool GenCrashDiag) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ErrorHandling.h:78:30: note: differing parameters are named here: ('reason', 'gen_crash_diag'), in definition: ('Reason', 'GenCrashDiag')
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(const Twine &reason,
                             ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:40:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:64:12: warning: invalid case style for function 'install_fatal_error_handler' [readability-identifier-naming]
void llvm::install_fatal_error_handler(fatal_error_handler_t handler,
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
           installFatalErrorHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:64:62: warning: invalid case style for parameter 'handler' [readability-identifier-naming]
void llvm::install_fatal_error_handler(fatal_error_handler_t handler,
                                                             ^~~~~~~~
                                                             Handler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:65:46: warning: invalid case style for parameter 'user_data' [readability-identifier-naming]
                                       void *user_data) {
                                             ^~~~~~~~~~
                                             UserData
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:69:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!ErrorHandler && "Error handler already registered!\n");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:74:12: warning: invalid case style for function 'remove_fatal_error_handler' [readability-identifier-naming]
void llvm::remove_fatal_error_handler() {
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
           removeFatalErrorHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:82:12: warning: invalid case style for function 'report_fatal_error' [readability-identifier-naming]
void llvm::report_fatal_error(const char *Reason, bool GenCrashDiag) {
           ^~~~~~~~~~~~~~~~~~~
           reportFatalError
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:86:12: warning: invalid case style for function 'report_fatal_error' [readability-identifier-naming]
void llvm::report_fatal_error(const std::string &Reason, bool GenCrashDiag) {
           ^~~~~~~~~~~~~~~~~~~
           reportFatalError
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:90:12: warning: invalid case style for function 'report_fatal_error' [readability-identifier-naming]
void llvm::report_fatal_error(StringRef Reason, bool GenCrashDiag) {
           ^~~~~~~~~~~~~~~~~~~
           reportFatalError
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:94:12: warning: invalid case style for function 'report_fatal_error' [readability-identifier-naming]
void llvm::report_fatal_error(const Twine &Reason, bool GenCrashDiag) {
           ^~~~~~~~~~~~~~~~~~~
           reportFatalError
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:95:31: warning: invalid case style for variable 'handler' [readability-identifier-naming]
  llvm::fatal_error_handler_t handler = nullptr;
                              ^~~~~~~
                              Handler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:96:9: warning: invalid case style for variable 'handlerData' [readability-identifier-naming]
  void* handlerData = nullptr;
        ^~~~~~~~~~~
        HandlerData
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:107:7: warning: implicit conversion 'llvm::fatal_error_handler_t' (aka 'void (*)(void *, const basic_string<char> &, bool)') -> bool [readability-implicit-bool-conversion]
  if (handler) {
      ^      ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:117:13: warning: invalid case style for variable 'written' [readability-identifier-naming]
    ssize_t written = ::write(2, MessageStr.data(), MessageStr.size());
            ^~~~~~~
            Written
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:129:12: warning: invalid case style for function 'install_bad_alloc_error_handler' [readability-identifier-naming]
void llvm::install_bad_alloc_error_handler(fatal_error_handler_t handler,
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           installBadAllocErrorHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:129:66: warning: invalid case style for parameter 'handler' [readability-identifier-naming]
void llvm::install_bad_alloc_error_handler(fatal_error_handler_t handler,
                                                                 ^~~~~~~~
                                                                 Handler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:130:50: warning: invalid case style for parameter 'user_data' [readability-identifier-naming]
                                           void *user_data) {
                                                 ^~~~~~~~~~
                                                 UserData
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:134:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!ErrorHandler && "Bad alloc error handler already registered!\n");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:139:12: warning: invalid case style for function 'remove_bad_alloc_error_handler' [readability-identifier-naming]
void llvm::remove_bad_alloc_error_handler() {
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           removeBadAllocErrorHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:147:12: warning: invalid case style for function 'report_bad_alloc_error' [readability-identifier-naming]
void llvm::report_bad_alloc_error(const char *Reason, bool GenCrashDiag) {
           ^~~~~~~~~~~~~~~~~~~~~~~
           reportBadAllocError
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:160:7: warning: implicit conversion 'llvm::fatal_error_handler_t' (aka 'void (*)(void *, const basic_string<char> &, bool)') -> bool [readability-implicit-bool-conversion]
  if (Handler) {
      ^      ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:161:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Handler(HandlerData, Reason, GenCrashDiag);
                         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:172:11: warning: invalid case style for variable 'written' [readability-identifier-naming]
  ssize_t written = ::write(2, OOMMessage, strlen(OOMMessage));
          ^~~~~~~
          Written
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:172:32: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  ssize_t written = ::write(2, OOMMessage, strlen(OOMMessage));
                               ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:172:51: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  ssize_t written = ::write(2, OOMMessage, strlen(OOMMessage));
                                                  ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:186:13: warning: invalid case style for function 'out_of_memory_new_handler' [readability-identifier-naming]
static void out_of_memory_new_handler() {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~
            outOfMemoryNewHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:187:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  llvm::report_bad_alloc_error("Allocation failed");
  ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:147:55: note: default parameter was declared here
void llvm::report_bad_alloc_error(const char *Reason, bool GenCrashDiag) {
                                                      ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:193:12: warning: invalid case style for function 'install_out_of_memory_new_handler' [readability-identifier-naming]
void llvm::install_out_of_memory_new_handler() {
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           installOutOfMemoryNewHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:194:15: warning: invalid case style for variable 'out_of_memory_new_handler_installed' [readability-identifier-naming]
  static bool out_of_memory_new_handler_installed = false;
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              OutOfMemoryNewHandlerInstalled
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:208:3: warning: invalid case style for variable 'new_handler_installer' [readability-identifier-naming]
} new_handler_installer;
  ^~~~~~~~~~~~~~~~~~~~~~
  NewHandlerInstaller
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:211:12: warning: invalid case style for function 'llvm_unreachable_internal' [readability-identifier-naming]
void llvm::llvm_unreachable_internal(const char *msg, const char *file,
           ^~~~~~~~~~~~~~~~~~~~~~~~~~
           llvmUnreachableInternal
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:211:50: warning: invalid case style for parameter 'msg' [readability-identifier-naming]
void llvm::llvm_unreachable_internal(const char *msg, const char *file,
                                                 ^~~~
                                                 Msg
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:211:67: warning: invalid case style for parameter 'file' [readability-identifier-naming]
void llvm::llvm_unreachable_internal(const char *msg, const char *file,
                                                                  ^~~~~
                                                                  File
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:212:47: warning: invalid case style for parameter 'line' [readability-identifier-naming]
                                     unsigned line) {
                                              ^~~~~
                                              Line
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:216:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (msg)
      ^  ~
          != nullptr
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:216:11: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (msg)
          ^
           {
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:219:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (file)
      ^   ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:219:12: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (file)
           ^
            {
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:230:40: warning: invalid case style for parameter 'user_data' [readability-identifier-naming]
static void bindingsErrorHandler(void *user_data, const std::string& reason,
                                       ^~~~~~~~~~
                                       UserData
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:230:70: warning: invalid case style for parameter 'reason' [readability-identifier-naming]
static void bindingsErrorHandler(void *user_data, const std::string& reason,
                                                                     ^~~~~~~
                                                                     Reason
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:231:39: warning: invalid case style for parameter 'gen_crash_diag' [readability-identifier-naming]
                                 bool gen_crash_diag) {
                                      ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:231:39: warning: parameter 'gen_crash_diag' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:232:25: warning: invalid case style for variable 'handler' [readability-identifier-naming]
  LLVMFatalErrorHandler handler =
                        ^~~~~~~
                        Handler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:233:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      LLVM_EXTENSION reinterpret_cast<LLVMFatalErrorHandler>(user_data);
                     ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:237:6: warning: invalid case style for function 'LLVMInstallFatalErrorHandler' [readability-identifier-naming]
void LLVMInstallFatalErrorHandler(LLVMFatalErrorHandler Handler) {
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     llvmInstallFatalErrorHandler
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:239:46: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
                              LLVM_EXTENSION reinterpret_cast<void *>(Handler));
                                             ^
/home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp:242:6: warning: invalid case style for function 'LLVMResetFatalErrorHandler' [readability-identifier-naming]
void LLVMResetFatalErrorHandler() {
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
     llvmResetFatalErrorHandler
../include/llvm/Support/Error.h:688:30: warning: function 'llvm::report_fatal_error' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(Error Err,
                             ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:139:6: note: the definition seen here
void report_fatal_error(Error Err, bool GenCrashDiag) {
     ^
../include/llvm/Support/Error.h:688:30: note: differing parameters are named here: ('gen_crash_diag'), in definition: ('GenCrashDiag')
LLVM_ATTRIBUTE_NORETURN void report_fatal_error(Error Err,
                             ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Error.cpp:33:29: warning: invalid case style for parameter 'condition' [readability-identifier-naming]
    std::string message(int condition) const override {
                            ^~~~~~~~~~
                            Condition
/home/jonas/opt/llvm/lib/Support/Error.cpp:36:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return "Multiple errors";
               ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:38:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return "Inconvertible error value. An error has occurred that could "
               ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:42:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          return "A file error occurred.";
                 ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:48:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/Error.cpp:18:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:61:60: warning: twine variables are prone to use-after-free bugs [llvm-twine-local]
void logAllUnhandledErrors(Error E, raw_ostream &OS, Twine ErrorBanner) {
                                                           ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:62:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!E)
         ^
          {
/home/jonas/opt/llvm/lib/Support/Error.cpp:73:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code(static_cast<int>(ErrorErrorCode::MultipleErrors),
         ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:78:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code(static_cast<int>(ErrorErrorCode::InconvertibleError),
         ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:83:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code(static_cast<int>(ErrorErrorCode::FileError),
         ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:88:11: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!EC)
          ^
           {
/home/jonas/opt/llvm/lib/Support/Error.cpp:98:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC == inconvertibleErrorCode())
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/Error.cpp:99:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    report_fatal_error(EC.message());
    ^
../include/llvm/Support/ErrorHandling.h:75:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:106:7: warning: implicit conversion 'llvm::ErrorInfoBase *' -> bool [readability-implicit-bool-conversion]
  if (getPtr())
      ^       ~
               != nullptr
/home/jonas/opt/llvm/lib/Support/Error.cpp:106:16: warning: statement should be inside braces [readability-braces-around-statements]
  if (getPtr())
               ^
                {
/home/jonas/opt/llvm/lib/Support/Error.cpp:108:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/Error.cpp:126:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Msg.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Error.cpp:139:6: warning: invalid case style for function 'report_fatal_error' [readability-identifier-naming]
void report_fatal_error(Error Err, bool GenCrashDiag) {
     ^~~~~~~~~~~~~~~~~~~
     reportFatalError
/home/jonas/opt/llvm/lib/Support/Error.cpp:139:41: warning: parameter 'GenCrashDiag' is unused [misc-unused-parameters]
void report_fatal_error(Error Err, bool GenCrashDiag) {
                                        ^~~~~~~~~~~~~
                                         /*GenCrashDiag*/
/home/jonas/opt/llvm/lib/Support/Error.cpp:140:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Err && "report_fatal_error called with success value");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:146:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  report_fatal_error(ErrMsg);
  ^
../include/llvm/Support/ErrorHandling.h:75:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:151:17: warning: invalid case style for function 'LLVMGetErrorTypeId' [readability-identifier-naming]
LLVMErrorTypeId LLVMGetErrorTypeId(LLVMErrorRef Err) {
                ^~~~~~~~~~~~~~~~~~~
                llvmGetErrorTypeId
/home/jonas/opt/llvm/lib/Support/Error.cpp:152:10: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  return reinterpret_cast<ErrorInfoBase *>(Err)->dynamicClassID();
         ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:155:6: warning: invalid case style for function 'LLVMConsumeError' [readability-identifier-naming]
void LLVMConsumeError(LLVMErrorRef Err) { consumeError(unwrap(Err)); }
     ^~~~~~~~~~~~~~~~~
     llvmConsumeError
/home/jonas/opt/llvm/lib/Support/Error.cpp:157:7: warning: invalid case style for function 'LLVMGetErrorMessage' [readability-identifier-naming]
char *LLVMGetErrorMessage(LLVMErrorRef Err) {
      ^~~~~~~~~~~~~~~~~~~~
      llvmGetErrorMessage
/home/jonas/opt/llvm/lib/Support/Error.cpp:159:3: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  char *ErrMsg = new char[Tmp.size() + 1];
  ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:159:3: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  char *ErrMsg = new char[Tmp.size() + 1];
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/Error.cpp:161:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ErrMsg[Tmp.size()] = '\0';
  ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:165:6: warning: invalid case style for function 'LLVMDisposeErrorMessage' [readability-identifier-naming]
void LLVMDisposeErrorMessage(char *ErrMsg) { delete[] ErrMsg; }
     ^~~~~~~~~~~~~~~~~~~~~~~~
     llvmDisposeErrorMessage
/home/jonas/opt/llvm/lib/Support/Error.cpp:165:36: warning: pointer parameter 'ErrMsg' can be pointer to const [readability-non-const-parameter]
void LLVMDisposeErrorMessage(char *ErrMsg) { delete[] ErrMsg; }
                             ~~~~  ^
                             const 
/home/jonas/opt/llvm/lib/Support/Error.cpp:165:46: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
void LLVMDisposeErrorMessage(char *ErrMsg) { delete[] ErrMsg; }
                                             ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:165:30: note: variable declared here
void LLVMDisposeErrorMessage(char *ErrMsg) { delete[] ErrMsg; }
                             ^
/home/jonas/opt/llvm/lib/Support/Error.cpp:167:17: warning: invalid case style for function 'LLVMGetStringErrorTypeId' [readability-identifier-naming]
LLVMErrorTypeId LLVMGetStringErrorTypeId() {
                ^~~~~~~~~~~~~~~~~~~~~~~~~
                llvmGetStringErrorTypeId
/home/jonas/opt/llvm/lib/Support/Error.cpp:168:10: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  return reinterpret_cast<void *>(&StringError::ID);
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileUtilities.h:30:7: warning: function 'llvm::DiffFilesWithTolerance' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  int DiffFilesWithTolerance(StringRef FileA,
      ^                                ~~~~~~
                                       NameA
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:177:11: note: the definition seen here
int llvm::DiffFilesWithTolerance(StringRef NameA,
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileUtilities.h:30:7: note: differing parameters are named here: ('FileA', 'FileB'), in definition: ('NameA', 'NameB')
  int DiffFilesWithTolerance(StringRef FileA,
      ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:28:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:53:20: warning: invalid case style for function 'BackupNumber' [readability-identifier-naming]
static const char *BackupNumber(const char *Pos, const char *FirstChar) {
                   ^~~~~~~~~~~~~
                   backupNumber
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:55:27: warning: statement should be inside braces [readability-braces-around-statements]
  if (!isNumberChar(*Pos)) return Pos;
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:59:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  while (Pos > FirstChar && isNumberChar(Pos[-1])) {
                                         ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:61:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Pos[-1] == '.') {
        ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:62:21: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (HasPeriod)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:67:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    --Pos;
    ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:68:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Pos > FirstChar && isSignedChar(Pos[0]) && !isExponentChar(Pos[-1]))
                                        ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:68:68: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Pos > FirstChar && isSignedChar(Pos[0]) && !isExponentChar(Pos[-1]))
                                                                   ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:68:77: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Pos > FirstChar && isSignedChar(Pos[0]) && !isExponentChar(Pos[-1]))
                                                                            ^
                                                                             {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:77:20: warning: invalid case style for function 'EndOfNumber' [readability-identifier-naming]
static const char *EndOfNumber(const char *Pos) {
                   ^~~~~~~~~~~~
                   endOfNumber
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:78:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (isNumberChar(*Pos))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:79:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ++Pos;
    ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:84:13: warning: invalid case style for function 'CompareNumbers' [readability-identifier-naming]
static bool CompareNumbers(const char *&F1P, const char *&F2P,
            ^~~~~~~~~~~~~~~
            compareNumbers
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:84:41: warning: non-const reference parameter 'F1P', make it const or use a pointer [google-runtime-references]
static bool CompareNumbers(const char *&F1P, const char *&F2P,
                                        ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:84:59: warning: non-const reference parameter 'F2P', make it const or use a pointer [google-runtime-references]
static bool CompareNumbers(const char *&F1P, const char *&F2P,
                                                          ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:93:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  while (isspace(static_cast<unsigned char>(*F1P)) && F1P != F1End)
         ^~~~~~~
         (                                         != 0)
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:93:68: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (isspace(static_cast<unsigned char>(*F1P)) && F1P != F1End)
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:94:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ++F1P;
    ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:95:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  while (isspace(static_cast<unsigned char>(*F2P)) && F2P != F2End)
         ^~~~~~~
         (                                         != 0)
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:95:68: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (isspace(static_cast<unsigned char>(*F2P)) && F2P != F2End)
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:96:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ++F2P;
    ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:107:22: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
    V1 = strtod(F1P, const_cast<char**>(&F1NumEnd));
                     ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:108:22: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
    V2 = strtod(F2P, const_cast<char**>(&F2NumEnd));
                     ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:112:57: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      SmallString<200> StrTmp(F1P, EndOfNumber(F1NumEnd)+1);
                                                        ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:116:31: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
      V1 = strtod(&StrTmp[0], const_cast<char**>(&F1NumEnd));
                              ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:117:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      F1NumEnd = F1P + (F1NumEnd-&StrTmp[0]);
                     ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:122:57: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      SmallString<200> StrTmp(F2P, EndOfNumber(F2NumEnd)+1);
                                                        ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:126:31: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
      V2 = strtod(&StrTmp[0], const_cast<char**>(&F2NumEnd));
                              ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:127:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      F2NumEnd = F2P + (F2NumEnd-&StrTmp[0]);
                     ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:132:9: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
    if (ErrorMsg) {
        ^       ~
                 != nullptr
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:134:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      *ErrorMsg += F1P[0];
                   ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:136:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      *ErrorMsg += F2P[0];
                   ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:146:9: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
    if (V2)
        ^ ~
           != 0.0
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:146:12: warning: statement should be inside braces [readability-braces-around-statements]
    if (V2)
           ^
            {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:148:14: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
    else if (V1)
             ^ ~
                != 0.0
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:148:17: warning: statement should be inside braces [readability-braces-around-statements]
    else if (V1)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:150:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:153:11: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
      if (ErrorMsg) {
          ^       ~
                   != nullptr
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:177:11: warning: invalid case style for function 'DiffFilesWithTolerance' [readability-identifier-naming]
int llvm::DiffFilesWithTolerance(StringRef NameA,
          ^~~~~~~~~~~~~~~~~~~~~~~
          diffFilesWithTolerance
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:183:52: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ErrorOr<std::unique_ptr<MemoryBuffer>> F1OrErr = MemoryBuffer::getFile(NameA);
                                                   ^
../include/llvm/Support/MemoryBuffer.h:82:47: note: default parameter was declared here
          bool RequiresNullTerminator = true, bool IsVolatile = false);
                                              ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:185:9: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
    if (Error)
        ^    ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:185:15: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Error)
              ^
               {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:191:52: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ErrorOr<std::unique_ptr<MemoryBuffer>> F2OrErr = MemoryBuffer::getFile(NameB);
                                                   ^
../include/llvm/Support/MemoryBuffer.h:81:34: note: default parameter was declared here
  getFile(const Twine &Filename, int64_t FileSize = -1,
                                 ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:193:9: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
    if (Error)
        ^    ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:193:15: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Error)
              ^
               {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:206:12: warning: invalid case style for variable 'A_size' [readability-identifier-naming]
  uint64_t A_size = F1.getBufferSize();
           ^~~~~~
           ASize
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:207:12: warning: invalid case style for variable 'B_size' [readability-identifier-naming]
  uint64_t B_size = F2.getBufferSize();
           ^~~~~~
           BSize
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:211:56: warning: statement should be inside braces [google-readability-braces-around-statements]
      std::memcmp(File1Start, File2Start, A_size) == 0)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:216:9: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
    if (Error)
        ^    ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:216:15: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Error)
              ^
               {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:225:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++F1P;
      ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:226:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++F2P;
      ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:229:44: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (F1P >= File1End || F2P >= File2End) break;
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:251:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (F1AtEnd && isNumberChar(F1P[-1])) --F1P;
                                ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:251:42: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (F1AtEnd && isNumberChar(F1P[-1])) --F1P;
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:251:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (F1AtEnd && isNumberChar(F1P[-1])) --F1P;
                                          ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:252:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (F2AtEnd && isNumberChar(F2P[-1])) --F2P;
                                ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:252:42: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (F2AtEnd && isNumberChar(F2P[-1])) --F2P;
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:252:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (F2AtEnd && isNumberChar(F2P[-1])) --F2P;
                                          ^
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:258:77: warning: statement should be inside braces [readability-braces-around-statements]
    if (CompareNumbers(F1P, F2P, File1End, File2End, AbsTol, RelTol, Error))
                                                                            ^
                                                                             {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:262:42: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (F1P < File1End || F2P < File2End)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/FileUtilities.cpp:266:10: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
  return CompareFailed;
         ^~~~~~~~~~~~~~
         static_cast<int>()
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileOutputBuffer.h:53:3: warning: function 'llvm::FileOutputBuffer::create' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  create(StringRef FilePath, size_t Size, unsigned Flags = 0);
  ^                ~~~~~~~~~
                   Path
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:158:19: note: the definition seen here
FileOutputBuffer::create(StringRef Path, size_t Size, unsigned Flags) {
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileOutputBuffer.h:53:3: note: differing parameters are named here: ('FilePath'), in definition: ('Path')
  create(StringRef FilePath, size_t Size, unsigned Flags = 0);
  ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:28:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:29:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::sys;
^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:35:7: warning: class 'OnDiskBuffer' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
class OnDiskBuffer : public FileOutputBuffer {
      ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:41:53: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  uint8_t *getBufferStart() const override { return (uint8_t *)Buffer->data(); }
                                                    ^~~~~~~~~~~~~~~~~        ~
                                                    reinterpret_cast<uint8_t *>( )
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:41:53: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:44:12: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
    return (uint8_t *)Buffer->data() + Buffer->size();
           ^~~~~~~~~~~~~~~~~
           reinterpret_cast<uint8_t *>( )
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:44:12: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:44:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return (uint8_t *)Buffer->data() + Buffer->size();
                                     ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:51:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Buffer.reset();
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/unique_ptr.h:377:13: note: default parameter was declared here
      reset(pointer __p = pointer()) noexcept
            ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:60:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Buffer.reset();
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/unique_ptr.h:377:13: note: default parameter was declared here
      reset(pointer __p = pointer()) noexcept
            ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:82:53: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  uint8_t *getBufferStart() const override { return (uint8_t *)Buffer.base(); }
                                                    ^~~~~~~~~~~~~~~~~       ~
                                                    static_cast<uint8_t *>( )
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:82:53: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:85:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (uint8_t *)Buffer.base() + Buffer.size();
           ^~~~~~~~~~~~~~~~~
           static_cast<uint8_t *>( )
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:85:12: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:85:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return (uint8_t *)Buffer.base() + Buffer.size();
                                    ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:91:5: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
    using namespace sys::fs;
    ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:95:77: warning: statement should be inside braces [readability-braces-around-statements]
            openFileForWrite(FinalPath, FD, CD_CreateAlways, OF_None, Mode))
                                                                            ^
                                                                             {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:98:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    OS << StringRef((const char *)Buffer.base(), Buffer.size());
                    ^~~~~~~~~~~~~~~~~~~~       ~
                    static_cast<const char *>( )
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:98:21: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:113:10: warning: statement should be inside braces [readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:115:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return llvm::make_unique<InMemoryBuffer>(Path, MB, Mode);
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:123:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (!FileOrErr)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:128:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (auto EC = sys::fs::copy_file(Path, File.FD))
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:152:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return llvm::make_unique<OnDiskBuffer>(Path, std::move(File),
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:160:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Flags & F_executable)
      ^~~~~               ~
      (                   ) != 0u
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:160:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Flags & F_executable)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:164:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  fs::status(Path, Stat);
  ^
../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:166:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((Flags & F_modify) && Size == size_t(-1)) {
      ^
      (                  != 0u)
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:167:52: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Stat.type() == fs::file_type::regular_file)
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:169:59: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (Stat.type() == fs::file_type::file_not_found)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:171:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:189:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return createOnDiskBuffer(Path, Size, !!(Flags & F_modify), Mode);
           ^
../include/llvm/Support/Error.h:494:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:189:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    return createOnDiskBuffer(Path, Size, !!(Flags & F_modify), Mode);
                                           ~^                 ~
                                           (                   == 0u)
/home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp:191:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return createInMemoryBuffer(Path, Size, Mode);
           ^
../include/llvm/Support/Error.h:494:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FormattedStream.h:58:8: warning: function 'llvm::formatted_raw_ostream::ComputePosition' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void ComputePosition(const char *Ptr, size_t size);
       ^                                       ~~~~~
                                               Size
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:49:29: note: the definition seen here
void formatted_raw_ostream::ComputePosition(const char *Ptr, size_t Size) {
                            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FormattedStream.h:58:8: note: differing parameters are named here: ('size'), in definition: ('Size')
  void ComputePosition(const char *Ptr, size_t size);
       ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:19:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:24:13: warning: invalid case style for function 'UpdatePosition' [readability-identifier-naming]
static void UpdatePosition(std::pair<unsigned, unsigned> &Position, const char *Ptr, size_t Size) {
            ^~~~~~~~~~~~~~~
            updatePosition
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:24:59: warning: non-const reference parameter 'Position', make it const or use a pointer [google-runtime-references]
static void UpdatePosition(std::pair<unsigned, unsigned> &Position, const char *Ptr, size_t Size) {
                                                          ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:30:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (const char *End = Ptr + Size; Ptr != End; ++Ptr) {
                             ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:30:50: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (const char *End = Ptr + Size; Ptr != End; ++Ptr) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:41:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Column += (8 - (Column & 0x7)) & 0x7;
                ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:41:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Column += (8 - (Column & 0x7)) & 0x7;
                      ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:49:29: warning: invalid case style for function 'ComputePosition' [readability-identifier-naming]
void formatted_raw_ostream::ComputePosition(const char *Ptr, size_t Size) {
                            ^~~~~~~~~~~~~~~~
                            computePosition
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:53:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (Ptr <= Scanned && Scanned <= Ptr + Size)
                                       ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:53:47: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Ptr <= Scanned && Scanned <= Ptr + Size)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:57:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:61:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Scanned = Ptr + Size;
                ^
/home/jonas/opt/llvm/lib/Support/FormattedStream.cpp:68:47: warning: invalid case style for function 'PadToColumn' [readability-identifier-naming]
formatted_raw_ostream &formatted_raw_ostream::PadToColumn(unsigned NewCol) {
                                              ^~~~~~~~~~~~
                                              padToColumn
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:30:31: warning: invalid case style for function 'ComputeHash' [readability-identifier-naming]
unsigned FoldingSetNodeIDRef::ComputeHash() const {
                              ^~~~~~~~~~~~
                              computeHash
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:31:61: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return static_cast<unsigned>(hash_combine_range(Data, Data+Size));
                                                            ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:34:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool FoldingSetNodeIDRef::operator==(FoldingSetNodeIDRef RHS) const {
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:35:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (Size != RHS.Size) return false;
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:41:1: warning: cannot overload 'operator<' [fuchsia-overloaded-operator]
bool FoldingSetNodeIDRef::operator<(FoldingSetNodeIDRef RHS) const {
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:42:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Size != RHS.Size)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:52:24: warning: invalid case style for function 'AddPointer' [readability-identifier-naming]
void FoldingSetNodeID::AddPointer(const void *Ptr) {
                       ^~~~~~~~~~~
                       addPointer
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:57:45: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  static_assert(sizeof(uintptr_t) <= sizeof(unsigned long long),
                                            ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:59:14: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  AddInteger(reinterpret_cast<uintptr_t>(Ptr));
             ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:61:24: warning: invalid case style for function 'AddInteger' [readability-identifier-naming]
void FoldingSetNodeID::AddInteger(signed I) {
                       ^~~~~~~~~~~
                       addInteger
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:64:24: warning: invalid case style for function 'AddInteger' [readability-identifier-naming]
void FoldingSetNodeID::AddInteger(unsigned I) {
                       ^~~~~~~~~~~
                       addInteger
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:67:24: warning: invalid case style for function 'AddInteger' [readability-identifier-naming]
void FoldingSetNodeID::AddInteger(long I) {
                       ^~~~~~~~~~~
                       addInteger
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:67:35: warning: consider replacing 'long' with 'int64' [google-runtime-int]
void FoldingSetNodeID::AddInteger(long I) {
                                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:68:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  AddInteger((unsigned long)I);
             ^~~~~~~~~~~~~~~~~
             static_cast<unsigned long>()
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:68:15: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
  AddInteger((unsigned long)I);
              ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:70:24: warning: invalid case style for function 'AddInteger' [readability-identifier-naming]
void FoldingSetNodeID::AddInteger(unsigned long I) {
                       ^~~~~~~~~~~
                       addInteger
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:70:35: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
void FoldingSetNodeID::AddInteger(unsigned long I) {
                                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:71:14: warning: consider replacing 'long' with 'int64' [google-runtime-int]
  if (sizeof(long) == sizeof(int))
             ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:71:35: warning: statement should be inside braces [readability-braces-around-statements]
  if (sizeof(long) == sizeof(int))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:73:19: warning: consider replacing 'long' with 'int64' [google-runtime-int]
  else if (sizeof(long) == sizeof(long long)) {
                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:73:35: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
  else if (sizeof(long) == sizeof(long long)) {
                                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:74:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    AddInteger((unsigned long long)I);
               ^~~~~~~~~~~~~~~~~~~~~~
               static_cast<unsigned long long>()
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:74:17: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
    AddInteger((unsigned long long)I);
                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:79:24: warning: invalid case style for function 'AddInteger' [readability-identifier-naming]
void FoldingSetNodeID::AddInteger(long long I) {
                       ^~~~~~~~~~~
                       addInteger
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:79:35: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
void FoldingSetNodeID::AddInteger(long long I) {
                                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:80:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  AddInteger((unsigned long long)I);
             ^~~~~~~~~~~~~~~~~~~~~~
             static_cast<unsigned long long>()
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:80:15: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  AddInteger((unsigned long long)I);
              ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:82:24: warning: invalid case style for function 'AddInteger' [readability-identifier-naming]
void FoldingSetNodeID::AddInteger(unsigned long long I) {
                       ^~~~~~~~~~~
                       addInteger
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:82:35: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
void FoldingSetNodeID::AddInteger(unsigned long long I) {
                                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:84:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  AddInteger(unsigned(I >> 32));
                      ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:87:24: warning: invalid case style for function 'AddString' [readability-identifier-naming]
void FoldingSetNodeID::AddString(StringRef String) {
                       ^~~~~~~~~~
                       addString
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:90:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!Size) return;
      ~^~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:90:13: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Size) return;
            ^
             {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:94:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const unsigned *Base = (const unsigned*) String.data();
        ^~~~~~~~
        auto
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:94:26: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  const unsigned *Base = (const unsigned*) String.data();
                         ^~~~~~~~~~~~~~~~~~~~~~~~       ~
                         reinterpret_cast<const unsigned*>( )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:94:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:97:8: warning: implicit conversion 'long' -> bool [readability-implicit-bool-conversion]
  if (!((intptr_t)Base & 3)) {
      ~^                   ~
                            == 0
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:97:9: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  if (!((intptr_t)Base & 3)) {
        ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:97:9: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:97:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:98:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Bits.append(Base, Base + Units);
                           ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:108:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        unsigned V = ((unsigned char)String[Pos - 4] << 24) |
                     ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:108:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        unsigned V = ((unsigned char)String[Pos - 4] << 24) |
                      ^~~~~~~~~~~~~~~~~~~~~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:108:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:109:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                     ((unsigned char)String[Pos - 3] << 16) |
                      ^~~~~~~~~~~~~~~~~~~~~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:109:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:110:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                     ((unsigned char)String[Pos - 2] << 8) |
                      ^~~~~~~~~~~~~~~~~~~~~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:110:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:111:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                      (unsigned char)String[Pos - 1];
                      ^~~~~~~~~~~~~~~~~~~~~         ~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:116:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        unsigned V = ((unsigned char)String[Pos - 1] << 24) |
                     ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:116:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        unsigned V = ((unsigned char)String[Pos - 1] << 24) |
                      ^~~~~~~~~~~~~~~~~~~~~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:116:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:117:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                     ((unsigned char)String[Pos - 2] << 16) |
                      ^~~~~~~~~~~~~~~~~~~~~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:117:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:118:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                     ((unsigned char)String[Pos - 3] << 8) |
                      ^~~~~~~~~~~~~~~~~~~~~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:118:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:119:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                      (unsigned char)String[Pos - 4];
                      ^~~~~~~~~~~~~~~~~~~~~         ~
                      static_cast<unsigned char>(   )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:130:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 1: V = (V << 8) | (unsigned char)String[Size - 3]; LLVM_FALLTHROUGH;
               ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:130:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 1: V = (V << 8) | (unsigned char)String[Size - 3]; LLVM_FALLTHROUGH;
                         ^~~~~~~~~~~~~~~~~~~~~          ~
                         static_cast<unsigned char>(    )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:131:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 2: V = (V << 8) | (unsigned char)String[Size - 2]; LLVM_FALLTHROUGH;
               ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:131:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 2: V = (V << 8) | (unsigned char)String[Size - 2]; LLVM_FALLTHROUGH;
                         ^~~~~~~~~~~~~~~~~~~~~          ~
                         static_cast<unsigned char>(    )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:132:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  case 3: V = (V << 8) | (unsigned char)String[Size - 1]; break;
               ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:132:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  case 3: V = (V << 8) | (unsigned char)String[Size - 1]; break;
                         ^~~~~~~~~~~~~~~~~~~~~          ~
                         static_cast<unsigned char>(    )
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:140:24: warning: invalid case style for function 'AddNodeID' [readability-identifier-naming]
void FoldingSetNodeID::AddNodeID(const FoldingSetNodeID &ID) {
                       ^~~~~~~~~~
                       addNodeId
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:146:28: warning: invalid case style for function 'ComputeHash' [readability-identifier-naming]
unsigned FoldingSetNodeID::ComputeHash() const {
                           ^~~~~~~~~~~~
                           computeHash
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:152:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool FoldingSetNodeID::operator==(const FoldingSetNodeID &RHS) const {
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:158:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool FoldingSetNodeID::operator==(FoldingSetNodeIDRef RHS) const {
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:164:1: warning: cannot overload 'operator<' [fuchsia-overloaded-operator]
bool FoldingSetNodeID::operator<(const FoldingSetNodeID &RHS) const {
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:168:1: warning: cannot overload 'operator<' [fuchsia-overloaded-operator]
bool FoldingSetNodeID::operator<(FoldingSetNodeIDRef RHS) const {
^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:176:19: warning: invalid case style for function 'Intern' [readability-identifier-naming]
FoldingSetNodeID::Intern(BumpPtrAllocator &Allocator) const {
                  ^~~~~~~
                  intern
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:177:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  unsigned *New = Allocator.Allocate<unsigned>(Bits.size());
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:179:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return FoldingSetNodeIDRef(New, Bits.size());
         ^~~~~~~~~~~~~~~~~~~~~~~             ~~
         {                                   }
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:191:30: warning: invalid case style for function 'GetNextPtr' [readability-identifier-naming]
static FoldingSetBase::Node *GetNextPtr(void *NextInBucketPtr) {
                             ^~~~~~~~~~~
                             getNextPtr
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:193:7: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  if (reinterpret_cast<intptr_t>(NextInBucketPtr) & 1)
      ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:193:7: warning: implicit conversion 'long' -> bool [readability-implicit-bool-conversion]
  if (reinterpret_cast<intptr_t>(NextInBucketPtr) & 1)
      ^~~~~~~~~~~~~~~~                               ~
      (                                              ) != 0
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:193:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:193:55: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (reinterpret_cast<intptr_t>(NextInBucketPtr) & 1)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:201:15: warning: invalid case style for function 'GetBucketPtr' [readability-identifier-naming]
static void **GetBucketPtr(void *NextInBucketPtr) {
              ^~~~~~~~~~~~~
              getBucketPtr
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:202:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  intptr_t Ptr = reinterpret_cast<intptr_t>(NextInBucketPtr);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:202:18: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  intptr_t Ptr = reinterpret_cast<intptr_t>(NextInBucketPtr);
                 ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:203:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((Ptr & 1) && "Not a bucket pointer");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:203:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  assert((Ptr & 1) && "Not a bucket pointer");
          ^
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:204:10: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  return reinterpret_cast<void**>(Ptr & ~intptr_t(1));
         ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:204:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return reinterpret_cast<void**>(Ptr & ~intptr_t(1));
                                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:204:41: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
  return reinterpret_cast<void**>(Ptr & ~intptr_t(1));
                                        ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:209:15: warning: invalid case style for function 'GetBucketFor' [readability-identifier-naming]
static void **GetBucketFor(unsigned Hash, void **Buckets, unsigned NumBuckets) {
              ^~~~~~~~~~~~~
              getBucketFor
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:212:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return Buckets + BucketNum;
                 ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:216:15: warning: invalid case style for function 'AllocateBuckets' [readability-identifier-naming]
static void **AllocateBuckets(unsigned NumBuckets) {
              ^~~~~~~~~~~~~~~~
              allocateBuckets
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:217:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  void **Buckets = static_cast<void**>(safe_calloc(NumBuckets + 1,
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:220:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buckets[NumBuckets] = reinterpret_cast<void*>(-1);
  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:220:25: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  Buckets[NumBuckets] = reinterpret_cast<void*>(-1);
                        ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:230:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(5 < Log2InitSize && Log2InitSize < 32 &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:232:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  NumBuckets = 1 << Log2InitSize;
               ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:237:17: warning: move constructors should be marked noexcept [hicpp-noexcept-move]
FoldingSetBase::FoldingSetBase(FoldingSetBase &&Arg)
                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:244:33: warning: move assignment operators should be marked noexcept [hicpp-noexcept-move]
FoldingSetBase &FoldingSetBase::operator=(FoldingSetBase &&RHS) {
                                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:245:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(Buckets); // This may be null if the set is in a moved-from state.
  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:245:3: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:256:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(Buckets);
  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:256:3: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:264:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buckets[NumBuckets] = reinterpret_cast<void*>(-1);
  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:264:25: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  Buckets[NumBuckets] = reinterpret_cast<void*>(-1);
                        ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:270:22: warning: invalid case style for function 'GrowBucketCount' [readability-identifier-naming]
void FoldingSetBase::GrowBucketCount(unsigned NewBucketCount) {
                     ^~~~~~~~~~~~~~~~
                     growBucketCount
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:271:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((NewBucketCount > NumBuckets) && "Can't shrink a folding set with GrowBucketCount");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:272:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(isPowerOf2_32(NewBucketCount) && "Bad bucket count!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:284:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != OldNumBuckets; ++i) {
                ^      ~                     ~~
                I      I                     I
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:285:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    void *Probe = OldBuckets[i];
                  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:286:10: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
    if (!Probe) continue;
        ~^~~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:286:16: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!Probe) continue;
               ^
                {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:300:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(OldBuckets);
  ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:300:3: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:305:22: warning: invalid case style for function 'GrowHashTable' [readability-identifier-naming]
void FoldingSetBase::GrowHashTable() {
                     ^~~~~~~~~~~~~~
                     growHashTable
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:313:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if(EltCount < capacity())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:322:17: warning: invalid case style for function 'FindNodeOrInsertPos' [readability-identifier-naming]
FoldingSetBase::FindNodeOrInsertPos(const FoldingSetNodeID &ID,
                ^~~~~~~~~~~~~~~~~~~~
                findNodeOrInsertPos
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:332:54: warning: statement should be inside braces [readability-braces-around-statements]
    if (NodeEquals(NodeInBucket, ID, IDHash, TempID))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:347:22: warning: invalid case style for function 'InsertNode' [readability-identifier-naming]
void FoldingSetBase::InsertNode(Node *N, void *InsertPos) {
                     ^~~~~~~~~~~
                     insertNode
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:348:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!N->getNextInBucket());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:359:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  void **Bucket = static_cast<void**>(InsertPos);
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:366:8: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
  if (!Next)
      ~^~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:366:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Next)
            ^
             {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:367:12: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    Next = reinterpret_cast<void*>(reinterpret_cast<intptr_t>(Bucket)|1);
           ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:367:36: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    Next = reinterpret_cast<void*>(reinterpret_cast<intptr_t>(Bucket)|1);
                                   ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:367:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:376:22: warning: invalid case style for function 'RemoveNode' [readability-identifier-naming]
bool FoldingSetBase::RemoveNode(Node *N) {
                     ^~~~~~~~~~~
                     removeNode
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:380:8: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
  if (!Ptr) return false;  // Not in folding set.
      ~^~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:380:12: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Ptr) return false;  // Not in folding set.
           ^
            {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:417:39: warning: invalid case style for function 'GetOrInsertNode' [readability-identifier-naming]
FoldingSetBase::Node *FoldingSetBase::GetOrInsertNode(FoldingSetBase::Node *N) {
                                      ^~~~~~~~~~~~~~~~
                                      getOrInsertNode
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:421:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Node *E = FindNodeOrInsertPos(ID, IP))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:432:21: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  while (*Bucket != reinterpret_cast<void*>(-1) &&
                    ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:433:12: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
         (!*Bucket || !GetNextPtr(*Bucket)))
          ~^
          (        == nullptr)
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:433:24: warning: implicit conversion 'FoldingSetBase::Node *' -> bool [readability-implicit-bool-conversion]
         (!*Bucket || !GetNextPtr(*Bucket)))
                      ~^~~~~~~~~~         ~
                      (                    == nullptr)
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:433:45: warning: statement should be inside braces [google-readability-braces-around-statements]
         (!*Bucket || !GetNextPtr(*Bucket)))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:434:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ++Bucket;
    ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:443:60: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FoldingSetNode *NextNodeInBucket = GetNextPtr(Probe))
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:451:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++Bucket;
      ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:452:25: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    } while (*Bucket != reinterpret_cast<void*>(-1) &&
                        ^
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:453:16: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
             (!*Bucket || !GetNextPtr(*Bucket)));
              ~^
              (        == nullptr)
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:453:28: warning: implicit conversion 'FoldingSetBase::Node *' -> bool [readability-implicit-bool-conversion]
             (!*Bucket || !GetNextPtr(*Bucket)));
                          ~^~~~~~~~~~         ~
                          (                    == nullptr)
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:463:11: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
  Ptr = (!*Bucket || !GetNextPtr(*Bucket)) ? (void*) Bucket : *Bucket;
         ~^
         (        == nullptr)
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:463:23: warning: implicit conversion 'FoldingSetBase::Node *' -> bool [readability-implicit-bool-conversion]
  Ptr = (!*Bucket || !GetNextPtr(*Bucket)) ? (void*) Bucket : *Bucket;
                     ~^~~~~~~~~~         ~
                     (                    == nullptr)
/home/jonas/opt/llvm/lib/Support/FoldingSet.cpp:463:46: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  Ptr = (!*Bucket || !GetNextPtr(*Bucket)) ? (void*) Bucket : *Bucket;
                                             ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:30:24: warning: invalid case style for function 'ParsePattern' [readability-identifier-naming]
bool FileCheckPattern::ParsePattern(StringRef PatternStr, StringRef Prefix,
                       ^~~~~~~~~~~~~
                       parsePattern
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:38:61: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!(Req.NoCanonicalizeWhiteSpace && Req.MatchFullLines))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:41:68: warning: statement should be inside braces [google-readability-braces-around-statements]
           (PatternStr.back() == ' ' || PatternStr.back() == '\t'))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:46:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(PatternLoc, SourceMgr::DK_Error,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:52:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:66:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      (PatternStr.size() < 2 || (PatternStr.find("{{") == StringRef::npos &&
                                 ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:67:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                                 PatternStr.find("[[") == StringRef::npos))) {
                                 ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:74:39: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Req.NoCanonicalizeWhiteSpace)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:88:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      size_t End = PatternStr.find("}}");
                   ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:90:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(SMLoc::getFromPointer(PatternStr.data()),
        ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:103:72: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (AddRegExToRegEx(PatternStr.substr(2, End - 2), CurParen, SM))
                                                                       ^
                                                                        {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:107:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      PatternStr = PatternStr.substr(End + 2);
                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:119:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      size_t End = FindRegexVarEnd(PatternStr.substr(2), SM);
                                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:122:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(SMLoc::getFromPointer(PatternStr.data()),
        ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:129:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      PatternStr = PatternStr.substr(End + 4);
                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:132:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      size_t NameEnd = MatchStr.find(':');
                       ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:136:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(SMLoc::getFromPointer(Name.data()), SourceMgr::DK_Error,
        ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:145:21: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (unsigned i = 0, e = Name.size(); i != e; ++i) {
                    ^                       ~         ~~
                    I                       I         I
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:145:28: warning: invalid case style for variable 'e' [readability-identifier-naming]
      for (unsigned i = 0, e = Name.size(); i != e; ++i) {
                           ^                     ~~
                           E                     E
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:147:30: warning: statement should be inside braces [readability-braces-around-statements]
          if (Name[i] == '$')  // Global vars start with '$'
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:151:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
              SM.PrintMessage(SMLoc::getFromPointer(Name.data()),
              ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:160:32: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
        if (Name[i] != '_' && !isalnum(Name[i]) &&
                              ~^~~~~~~
                              (                 == 0)
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:162:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          SM.PrintMessage(SMLoc::getFromPointer(Name.data() + i),
          ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:162:61: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          SM.PrintMessage(SMLoc::getFromPointer(Name.data() + i),
                                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:169:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      if (isdigit(static_cast<unsigned char>(Name[0]))) {
          ^                                           ~
                                                       != 0
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:170:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(SMLoc::getFromPointer(Name.data()), SourceMgr::DK_Error,
        ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:182:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
            SM.PrintMessage(SMLoc::getFromPointer(Name.data()),
            ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:189:24: warning: use emplace_back instead of push_back [hicpp-use-emplace]
          VariableUses.push_back(std::make_pair(Name, RegExStr.size()));
                       ^~~~~~~~~~~~~~~~~~~~~~~~~                     ~~
                       emplace_back
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:199:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      if (AddRegExToRegEx(MatchStr.substr(NameEnd + 1), CurParen, SM))
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:199:71: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (AddRegExToRegEx(MatchStr.substr(NameEnd + 1), CurParen, SM))
                                                                      ^
                                                                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:207:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t FixedMatchEnd = PatternStr.find("{{");
                           ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:208:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    FixedMatchEnd = std::min(FixedMatchEnd, PatternStr.find("[["));
                                            ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:210:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    PatternStr = PatternStr.substr(FixedMatchEnd);
                 ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:214:39: warning: statement should be inside braces [readability-braces-around-statements]
    if (!Req.NoCanonicalizeWhiteSpace)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:222:24: warning: invalid case style for function 'AddRegExToRegEx' [readability-identifier-naming]
bool FileCheckPattern::AddRegExToRegEx(StringRef RS, unsigned &CurParen, SourceMgr &SM) {
                       ^~~~~~~~~~~~~~~~
                       addRegExToRegEx
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:223:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Regex R(RS);
        ^
../include/llvm/Support/Regex.h:48:28: note: default parameter was declared here
    Regex(StringRef Regex, unsigned Flags = NoFlags);
                           ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:226:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(RS.data()), SourceMgr::DK_Error,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:236:24: warning: invalid case style for function 'AddBackrefToRegEx' [readability-identifier-naming]
void FileCheckPattern::AddBackrefToRegEx(unsigned BackrefNum) {
                       ^~~~~~~~~~~~~~~~~~
                       addBackrefToRegEx
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:237:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BackrefNum >= 1 && BackrefNum <= 9 && "Invalid backref number");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:238:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Backref = std::string("\\") + std::string(1, '0' + BackrefNum);
                        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:238:45: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Backref = std::string("\\") + std::string(1, '0' + BackrefNum);
                                            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:245:24: warning: invalid case style for function 'EvaluateExpression' [readability-identifier-naming]
bool FileCheckPattern::EvaluateExpression(StringRef Expr, std::string &Value) const {
                       ^~~~~~~~~~~~~~~~~~~
                       evaluateExpression
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:247:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Expr.startswith("@LINE"))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:249:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Expr = Expr.substr(StringRef("@LINE").size());
         ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:252:24: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Expr[0] == '+')
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:253:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Expr = Expr.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:254:29: warning: statement should be inside braces [hicpp-braces-around-statements]
    else if (Expr[0] != '-')
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:256:39: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Expr.getAsInteger(10, Offset))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:271:26: warning: invalid case style for function 'Match' [readability-identifier-naming]
size_t FileCheckPattern::Match(StringRef Buffer, size_t &MatchLen,
                         ^~~~~~
                         match
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:282:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Buffer.find(FixedStr);
           ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:299:59: warning: statement should be inside braces [readability-braces-around-statements]
        if (!EvaluateExpression(VariableUse.first, Value))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:302:40: warning: invalid case style for variable 'it' [readability-identifier-naming]
        StringMap<StringRef>::iterator it =
                                       ^~
                                       It
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:305:39: warning: statement should be inside braces [readability-braces-around-statements]
        if (it == VariableTable.end())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:323:70: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Regex(RegExToMatch, Regex::Newline).match(Buffer, &MatchInfo))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:327:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!MatchInfo.empty() && "Didn't get any match");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:332:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(VariableDef.second < MatchInfo.size() && "Internal paren error");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:339:27: warning: implicit conversion bool -> 'size_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
  size_t MatchStartSkip = CheckTy == Check::CheckEmpty;
                          ^~~~~~~                     ~
                          static_cast<size_t>(        )
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:349:19: warning: invalid case style for function 'ComputeMatchDistance' [readability-identifier-naming]
FileCheckPattern::ComputeMatchDistance(StringRef Buffer,
                  ^~~~~~~~~~~~~~~~~~~~~
                  computeMatchDistance
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:350:59: warning: parameter 'VariableTable' is unused [misc-unused-parameters]
                              const StringMap<StringRef> &VariableTable) const {
                                                          ^~~~~~~~~~~~~~
                                                           /*VariableTable*/
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:358:29: warning: statement should be inside braces [readability-braces-around-statements]
  if (ExampleString.empty())
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:364:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return BufferPrefix.edit_distance(ExampleString);
         ^
../include/llvm/ADT/StringRef.h:223:45: note: default parameter was declared here
    unsigned edit_distance(StringRef Other, bool AllowReplacements = true,
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:367:24: warning: invalid case style for function 'PrintVariableUses' [readability-identifier-naming]
void FileCheckPattern::PrintVariableUses(const SourceMgr &SM, StringRef Buffer,
                       ^~~~~~~~~~~~~~~~~~
                       printVariableUses
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:381:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          OS.write_escaped(Var) << "\" equal to \"";
          ^
../include/llvm/Support/raw_ostream.h:224:45: note: default parameter was declared here
  raw_ostream &write_escaped(StringRef Str, bool UseHexEscapes = false);
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:382:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          OS.write_escaped(Value) << "\"";
          ^
../include/llvm/Support/raw_ostream.h:224:45: note: default parameter was declared here
  raw_ostream &write_escaped(StringRef Str, bool UseHexEscapes = false);
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:385:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          OS.write_escaped(Var) << "\"";
          ^
../include/llvm/Support/raw_ostream.h:224:45: note: default parameter was declared here
  raw_ostream &write_escaped(StringRef Str, bool UseHexEscapes = false);
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:388:46: warning: invalid case style for variable 'it' [readability-identifier-naming]
        StringMap<StringRef>::const_iterator it = VariableTable.find(Var);
                                             ^~
                                             It
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:393:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          OS.write_escaped(Var) << "\"";
          ^
../include/llvm/Support/raw_ostream.h:224:45: note: default parameter was declared here
  raw_ostream &write_escaped(StringRef Str, bool UseHexEscapes = false);
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:396:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          OS.write_escaped(Var) << "\" equal to \"";
          ^
../include/llvm/Support/raw_ostream.h:224:45: note: default parameter was declared here
  raw_ostream &write_escaped(StringRef Str, bool UseHexEscapes = false);
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:397:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          OS.write_escaped(it->second) << "\"";
          ^
../include/llvm/Support/raw_ostream.h:224:45: note: default parameter was declared here
  raw_ostream &write_escaped(StringRef Str, bool UseHexEscapes = false);
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:401:32: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (MatchRange.isValid())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:402:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(MatchRange.Start, SourceMgr::DK_Note, OS.str(),
        ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:404:11: warning: statement should be inside braces [readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:405:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(SMLoc::getFromPointer(Buffer.data()),
        ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:411:24: warning: invalid case style for function 'PrintFuzzyMatch' [readability-identifier-naming]
void FileCheckPattern::PrintFuzzyMatch(
                       ^~~~~~~~~~~~~~~~
                       printFuzzyMatch
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:423:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = std::min(size_t(4096), Buffer.size()); i != e; ++i) {
              ^                                                 ~         ~~
              I                                                 I         I
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:423:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = std::min(size_t(4096), Buffer.size()); i != e; ++i) {
                     ^                                               ~~
                     E                                               E
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:424:27: warning: statement should be inside braces [readability-braces-around-statements]
    if (Buffer[i] == '\n')
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:429:47: warning: statement should be inside braces [readability-braces-around-statements]
    if (Buffer[i] == ' ' || Buffer[i] == '\t')
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:434:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    unsigned Distance = ComputeMatchDistance(Buffer.substr(i), VariableTable);
                                             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:446:7: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (Best && Best != StringRef::npos && BestQuality < 50) {
      ^~~~
      ( != 0u)
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:447:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.data() + Best),
    ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:447:57: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.data() + Best),
                                                        ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:460:26: warning: invalid case style for function 'FindRegexVarEnd' [readability-identifier-naming]
size_t FileCheckPattern::FindRegexVarEnd(StringRef Str, SourceMgr &SM) {
                         ^~~~~~~~~~~~~~~~
                         findRegexVarEnd
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:467:51: warning: statement should be inside braces [readability-braces-around-statements]
    if (Str.startswith("]]") && BracketDepth == 0)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:471:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Str = Str.substr(2);
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:482:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          SM.PrintMessage(SMLoc::getFromPointer(Str.data()),
          ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:490:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Str = Str.substr(1);
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:501:18: warning: invalid case style for function 'CanonicalizeFile' [readability-identifier-naming]
llvm::FileCheck::CanonicalizeFile(MemoryBuffer &MB,
                 ^~~~~~~~~~~~~~~~~
                 canonicalizeFile
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:506:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       Ptr != End; ++Ptr) {
                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:508:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Ptr <= End - 2 && Ptr[0] == '\r' && Ptr[1] == '\n') {
                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:508:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Ptr <= End - 2 && Ptr[0] == '\r' && Ptr[1] == '\n') {
                          ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:508:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Ptr <= End - 2 && Ptr[0] == '\r' && Ptr[1] == '\n') {
                                            ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:521:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (Ptr + 1 != End && (Ptr[1] == ' ' || Ptr[1] == '\t'))
               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:521:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (Ptr + 1 != End && (Ptr[1] == ' ' || Ptr[1] == '\t'))
                              ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:521:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (Ptr + 1 != End && (Ptr[1] == ' ' || Ptr[1] == '\t'))
                                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:521:64: warning: statement should be inside braces [readability-braces-around-statements]
    while (Ptr + 1 != End && (Ptr[1] == ' ' || Ptr[1] == '\t'))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:522:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++Ptr;
      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:527:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef(OutputBuffer.data(), OutputBuffer.size() - 1);
         ^~~~~~~~~~~~~~~~~~~~~~                                ~~
         {                                                     }
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:530:13: warning: invalid case style for function 'IsPartOfWord' [readability-identifier-naming]
static bool IsPartOfWord(char c) {
            ^~~~~~~~~~~~~
            isPartOfWord
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:530:31: warning: invalid case style for parameter 'c' [readability-identifier-naming]
static bool IsPartOfWord(char c) {
                              ^~
                              C
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:531:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  return (isalnum(c) || c == '-' || c == '_');
          ^~~~~~~
          (          != 0)
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:535:15: warning: invalid case style for function 'CheckTypeSize' [readability-identifier-naming]
static size_t CheckTypeSize(Check::FileCheckType Ty) {
              ^~~~~~~~~~~~~~
              checkTypeSize
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:570:20: warning: invalid case style for function 'CheckTypeName' [readability-identifier-naming]
static std::string CheckTypeName(StringRef Prefix, Check::FileCheckType Ty) {
                   ^~~~~~~~~~~~~~
                   checkTypeName
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:573:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "invalid";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:589:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "implicit EOF";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:591:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "bad NOT";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:596:29: warning: invalid case style for function 'FindCheckType' [readability-identifier-naming]
static Check::FileCheckType FindCheckType(StringRef Buffer, StringRef Prefix) {
                            ^~~~~~~~~~~~~~
                            findCheckType
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:597:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Buffer.size() <= Prefix.size())
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:603:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NextChar == ':')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:606:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (NextChar != '-')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:610:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Rest.startswith("NEXT:"))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:613:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Rest.startswith("SAME:"))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:616:31: warning: statement should be inside braces [readability-braces-around-statements]
  if (Rest.startswith("NOT:"))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:619:31: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Rest.startswith("DAG:"))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:622:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (Rest.startswith("LABEL:"))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:625:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (Rest.startswith("EMPTY:"))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:632:70: warning: statement should be inside braces [readability-braces-around-statements]
      Rest.startswith("EMPTY-NOT:") || Rest.startswith("NOT-EMPTY:"))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:639:15: warning: invalid case style for function 'SkipWord' [readability-identifier-naming]
static size_t SkipWord(StringRef Str, size_t Loc) {
              ^~~~~~~~~
              skipWord
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:640:53: warning: statement should be inside braces [readability-braces-around-statements]
  while (Loc < Str.size() && IsPartOfWord(Str[Loc]))
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:664:18: warning: invalid case style for function 'FindFirstMatchingPrefix' [readability-identifier-naming]
static StringRef FindFirstMatchingPrefix(Regex &PrefixRE, StringRef &Buffer,
                 ^~~~~~~~~~~~~~~~~~~~~~~~
                 findFirstMatchingPrefix
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:664:49: warning: non-const reference parameter 'PrefixRE', make it const or use a pointer [google-runtime-references]
static StringRef FindFirstMatchingPrefix(Regex &PrefixRE, StringRef &Buffer,
                                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:664:70: warning: non-const reference parameter 'Buffer', make it const or use a pointer [google-runtime-references]
static StringRef FindFirstMatchingPrefix(Regex &PrefixRE, StringRef &Buffer,
                                                                     ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:665:52: warning: non-const reference parameter 'LineNumber', make it const or use a pointer [google-runtime-references]
                                         unsigned &LineNumber,
                                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:666:64: warning: non-const reference parameter 'CheckTy', make it const or use a pointer [google-runtime-references]
                                         Check::FileCheckType &CheckTy) {
                                                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:671:43: warning: statement should be inside braces [readability-braces-around-statements]
    if (!PrefixRE.match(Buffer, &Matches))
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:673:14: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
      return StringRef();
             ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:678:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(Prefix.data() >= Buffer.data() &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:679:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           Prefix.data() < Buffer.data() + Buffer.size() &&
                                         ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:696:39: warning: statement should be inside braces [readability-braces-around-statements]
      if (CheckTy != Check::CheckNone)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:714:23: warning: invalid case style for function 'ReadCheckFile' [readability-identifier-naming]
bool llvm::FileCheck::ReadCheckFile(SourceMgr &SM, StringRef Buffer,
                      ^~~~~~~~~~~~~~
                      readCheckFile
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:721:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    std::string Prefix = "-implicit-check-not='";
                         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:722:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    std::string Suffix = "'";
                         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:724:32: warning: string concatenation results in allocation of unnecessary temporary strings; consider using 'operator+=' or 'string::append()' instead [performance-inefficient-string-concatenation]
        Prefix + PatternString + Suffix, "command line");
                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:730:28: warning: use emplace_back instead of push_back [modernize-use-emplace]
    ImplicitNegativeChecks.push_back(FileCheckPattern(Check::CheckNot));
                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~          ~~
                           emplace_back(
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:741:10: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
  while (1) {
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:741:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:747:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (UsedPrefix.empty())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:749:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(UsedPrefix.data() == Buffer.data() &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:757:52: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
    Buffer = Buffer.drop_front(UsedPrefix.size() + CheckTypeSize(CheckTy));
                                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:741:3: note: Loop condition is true.  Entering loop body
  while (1) {
  ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:742:5: note: 'CheckTy' declared without an initial value
    Check::FileCheckType CheckTy;
    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:745:28: note: Calling 'FindFirstMatchingPrefix'
    StringRef UsedPrefix = FindFirstMatchingPrefix(PrefixRE, Buffer, LineNumber,
                           ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:669:10: note: Assuming the condition is false
  while (!Buffer.empty()) {
         ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:669:3: note: Loop condition is false. Execution continues on line 707
  while (!Buffer.empty()) {
  ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:745:28: note: Returning from 'FindFirstMatchingPrefix'
    StringRef UsedPrefix = FindFirstMatchingPrefix(PrefixRE, Buffer, LineNumber,
                           ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:747:9: note: Assuming the condition is false
    if (UsedPrefix.empty())
        ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:747:5: note: Taking false branch
    if (UsedPrefix.empty())
    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:757:52: note: 1st function call argument is an uninitialized value
    Buffer = Buffer.drop_front(UsedPrefix.size() + CheckTypeSize(CheckTy));
                                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:761:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      SM.PrintMessage(SMLoc::getFromPointer(Buffer.data()), SourceMgr::DK_Error,
      ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:768:63: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!(Req.NoCanonicalizeWhiteSpace && Req.MatchFullLines))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:769:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Buffer = Buffer.substr(Buffer.find_first_not_of(" \t"));
               ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:769:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Buffer = Buffer.substr(Buffer.find_first_not_of(" \t"));
                             ^
../include/llvm/ADT/StringRef.h:416:47: note: default parameter was declared here
    size_t find_first_not_of(StringRef Chars, size_t From = 0) const;
                                              ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:772:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t EOL = Buffer.find_first_of("\n\r");
                 ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:779:80: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (P.ParsePattern(Buffer.substr(0, EOL), UsedPrefix, SM, LineNumber, Req))
                                                                               ^
                                                                                {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:784:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      SM.PrintMessage(
      ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:791:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Buffer = Buffer.substr(EOL);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:800:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      SM.PrintMessage(SMLoc::getFromPointer(UsedPrefixStart),
      ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:836:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (; I != E; ++I)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:846:13: warning: invalid case style for function 'PrintMatch' [readability-identifier-naming]
static void PrintMatch(bool ExpectedMatch, const SourceMgr &SM,
            ^~~~~~~~~~~
            printMatch
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:848:64: warning: non-const reference parameter 'VariableTable', make it const or use a pointer [google-runtime-references]
                       StringRef Buffer, StringMap<StringRef> &VariableTable,
                                                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:852:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Req.Verbose)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:854:68: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Req.VerboseVerbose && Pat.getCheckTy() == Check::CheckEOF)
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:857:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  SMLoc MatchStart = SMLoc::getFromPointer(Buffer.data() + MatchPos);
                                                         ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:858:56: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  SMLoc MatchEnd = SMLoc::getFromPointer(Buffer.data() + MatchPos + MatchLen);
                                                       ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:858:67: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  SMLoc MatchEnd = SMLoc::getFromPointer(Buffer.data() + MatchPos + MatchLen);
                                                                  ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:860:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  SM.PrintMessage(
  ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:863:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
          (ExpectedMatch ? "expected" : "excluded") +
          ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:865:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  SM.PrintMessage(MatchStart, SourceMgr::DK_Note, "found here", {MatchRange});
  ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:869:13: warning: invalid case style for function 'PrintMatch' [readability-identifier-naming]
static void PrintMatch(bool ExpectedMatch, const SourceMgr &SM,
            ^~~~~~~~~~~
            printMatch
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:871:46: warning: non-const reference parameter 'VariableTable', make it const or use a pointer [google-runtime-references]
                       StringMap<StringRef> &VariableTable, size_t MatchPos,
                                             ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:872:59: warning: non-const reference parameter 'Req', make it const or use a pointer [google-runtime-references]
                       size_t MatchLen, FileCheckRequest &Req) {
                                                          ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:877:13: warning: invalid case style for function 'PrintNoMatch' [readability-identifier-naming]
static void PrintNoMatch(bool ExpectedMatch, const SourceMgr &SM,
            ^~~~~~~~~~~~~
            printNoMatch
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:880:48: warning: non-const reference parameter 'VariableTable', make it const or use a pointer [google-runtime-references]
                         StringMap<StringRef> &VariableTable,
                                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:882:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!ExpectedMatch && !VerboseVerbose)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:886:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  SM.PrintMessage(Loc,
  ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:889:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
                      (ExpectedMatch ? "expected" : "excluded") +
                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:894:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Buffer = Buffer.substr(Buffer.find_first_not_of(" \t\n\r"));
           ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:894:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Buffer = Buffer.substr(Buffer.find_first_not_of(" \t\n\r"));
                         ^
../include/llvm/ADT/StringRef.h:416:47: note: default parameter was declared here
    size_t find_first_not_of(StringRef Chars, size_t From = 0) const;
                                              ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:896:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  SM.PrintMessage(SMLoc::getFromPointer(Buffer.data()), SourceMgr::DK_Note,
  ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:900:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Pat.PrintVariableUses(SM, Buffer, VariableTable);
  ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:369:33: note: default parameter was declared here
                                SMRange MatchRange) const {
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:901:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ExpectedMatch)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:905:13: warning: invalid case style for function 'PrintNoMatch' [readability-identifier-naming]
static void PrintNoMatch(bool ExpectedMatch, const SourceMgr &SM,
            ^~~~~~~~~~~~~
            printNoMatch
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:907:48: warning: non-const reference parameter 'VariableTable', make it const or use a pointer [google-runtime-references]
                         StringMap<StringRef> &VariableTable,
                                               ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:914:17: warning: invalid case style for function 'CountNumNewlinesBetween' [readability-identifier-naming]
static unsigned CountNumNewlinesBetween(StringRef Range,
                ^~~~~~~~~~~~~~~~~~~~~~~~
                countNumNewlinesBetween
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:915:54: warning: non-const reference parameter 'FirstNewLine', make it const or use a pointer [google-runtime-references]
                                        const char *&FirstNewLine) {
                                                     ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:917:10: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
  while (1) {
         ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:917:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:919:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Range = Range.substr(Range.find_first_of("\n\r"));
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:919:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Range = Range.substr(Range.find_first_of("\n\r"));
                         ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:920:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Range.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:927:32: warning: statement should be inside braces [google-readability-braces-around-statements]
        (Range[0] != Range[1]))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:928:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Range = Range.substr(1);
              ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:929:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Range = Range.substr(1);
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:931:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (NumNewLines == 1)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:937:25: warning: invalid case style for function 'Check' [readability-identifier-naming]
size_t FileCheckString::Check(const SourceMgr &SM, StringRef Buffer,
                        ^~~~~~
                        check
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:951:36: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (LastPos == StringRef::npos)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:956:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef MatchBuffer = Buffer.substr(LastPos);
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:971:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CheckNext(SM, SkippedRegion))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:976:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CheckSame(SM, SkippedRegion))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:981:69: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CheckNot(SM, SkippedRegion, NotStrings, VariableTable, Req))
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:989:23: warning: invalid case style for function 'CheckNext' [readability-identifier-naming]
bool FileCheckString::CheckNext(const SourceMgr &SM, StringRef Buffer) const {
                      ^~~~~~~~~~
                      checkNext
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:991:45: warning: statement should be inside braces [google-readability-braces-around-statements]
      Pat.getCheckTy() != Check::CheckEmpty)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:994:9: warning: twine variables are prone to use-after-free bugs [llvm-twine-local]
  Twine CheckName =
  ~~~~~ ^
  std::string
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:999:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Buffer.data() !=
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1009:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(Loc, SourceMgr::DK_Error,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1011:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.end()), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1013:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.data()), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1019:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(Loc, SourceMgr::DK_Error,
    ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1022:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.end()), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1024:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.data()), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1026:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(FirstNewLine), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1035:23: warning: invalid case style for function 'CheckSame' [readability-identifier-naming]
bool FileCheckString::CheckSame(const SourceMgr &SM, StringRef Buffer) const {
                      ^~~~~~~~~~
                      checkSame
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1036:44: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Pat.getCheckTy() != Check::CheckSame)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1040:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Buffer.data() !=
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1050:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(Loc, SourceMgr::DK_Error,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1053:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.end()), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1055:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc::getFromPointer(Buffer.data()), SourceMgr::DK_Note,
    ^
../include/llvm/Support/SourceMgr.h:198:21: note: default parameter was declared here
                    ArrayRef<SMRange> Ranges = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1064:23: warning: invalid case style for function 'CheckNot' [readability-identifier-naming]
bool FileCheckString::CheckNot(const SourceMgr &SM, StringRef Buffer,
                      ^~~~~~~~~
                      checkNot
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1069:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert((Pat->getCheckTy() == Check::CheckNot) && "Expect CHECK-NOT!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1090:25: warning: invalid case style for function 'CheckDag' [readability-identifier-naming]
size_t FileCheckString::CheckDag(const SourceMgr &SM, StringRef Buffer,
                        ^~~~~~~~~
                        checkDag
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1094:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (DagNotStrings.empty())
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1114:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert((Pat.getCheckTy() == Check::CheckDAG ||
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1123:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert((Pat.getCheckTy() == Check::CheckDAG) && "Expect CHECK-DAG!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1131:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef MatchBuffer = Buffer.substr(MatchPos);
                              ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1142:30: warning: statement should be inside braces [readability-braces-around-statements]
      if (Req.VerboseVerbose)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1150:33: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (MatchRanges.empty())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1175:62: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        SMLoc OldStart = SMLoc::getFromPointer(Buffer.data() + MI->Pos);
                                                             ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1176:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        SMLoc OldEnd = SMLoc::getFromPointer(Buffer.data() + MI->End);
                                                           ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1178:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        SM.PrintMessage(OldStart, SourceMgr::DK_Note,
        ^
../include/llvm/Support/SourceMgr.h:199:21: note: default parameter was declared here
                    ArrayRef<SMFixIt> FixIts = None,
                    ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1184:29: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!Req.VerboseVerbose)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1189:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (std::next(PatItr) == PatEnd ||
        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_iterator_base_funcs.h:213:30: note: default parameter was declared here
    next(_InputIterator __x, typename
                             ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1190:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        std::next(PatItr)->getCheckTy() == Check::CheckNot) {
        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_iterator_base_funcs.h:213:30: note: default parameter was declared here
    next(_InputIterator __x, typename
                             ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1197:73: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (CheckNot(SM, SkippedRegion, NotStrings, VariableTable, Req))
                                                                        ^
                                                                         {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1214:13: warning: invalid case style for function 'ValidateCheckPrefix' [readability-identifier-naming]
static bool ValidateCheckPrefix(StringRef CheckPrefix) {
            ^~~~~~~~~~~~~~~~~~~~
            validateCheckPrefix
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1215:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Regex Validator("^[a-zA-Z0-9_-]*$");
        ^
../include/llvm/Support/Regex.h:48:28: note: default parameter was declared here
    Regex(StringRef Regex, unsigned Flags = NoFlags);
                           ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1216:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Validator.match(CheckPrefix);
         ^
../include/llvm/Support/Regex.h:74:34: note: default parameter was declared here
    bool match(StringRef String, SmallVectorImpl<StringRef> *Matches = nullptr);
                                 ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1219:23: warning: invalid case style for function 'ValidateCheckPrefixes' [readability-identifier-naming]
bool llvm::FileCheck::ValidateCheckPrefixes() {
                      ^~~~~~~~~~~~~~~~~~~~~~
                      validateCheckPrefixes
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1224:22: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Prefix == "")
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1227:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!PrefixSet.insert(Prefix).second)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1230:38: warning: statement should be inside braces [readability-braces-around-statements]
    if (!ValidateCheckPrefix(Prefix))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1245:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Req.CheckPrefixes.empty())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1246:23: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Req.CheckPrefixes.push_back("CHECK");
                      ^~~~~~~~~~~~~~~~~
                      emplace_back(
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1246:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Req.CheckPrefixes.push_back("CHECK");
                                ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1252:45: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Prefix != Req.CheckPrefixes.front())
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1258:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Regex(PrefixRegexStr);
         ^
../include/llvm/Support/Regex.h:48:28: note: default parameter was declared here
    Regex(StringRef Regex, unsigned Flags = NoFlags);
                           ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1263:13: warning: invalid case style for function 'ClearLocalVars' [readability-identifier-naming]
static void ClearLocalVars(StringMap<StringRef> &VariableTable) {
            ^~~~~~~~~~~~~~~
            clearLocalVars
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1263:50: warning: non-const reference parameter 'VariableTable', make it const or use a pointer [google-runtime-references]
static void ClearLocalVars(StringMap<StringRef> &VariableTable) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1265:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto &Var : VariableTable)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1266:31: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Var.first()[0] != '$')
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1269:36: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (const auto &Var : LocalVars)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1277:23: warning: invalid case style for function 'CheckInput' [readability-identifier-naming]
bool llvm::FileCheck::CheckInput(SourceMgr &SM, StringRef Buffer,
                      ^~~~~~~~~~~
                      checkInput
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1284:44: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto& Def : Req.GlobalDefines)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1287:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i = 0, j = 0, e = CheckStrings.size();
           ^
           I
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1287:19: warning: invalid case style for variable 'j' [readability-identifier-naming]
  unsigned i = 0, j = 0, e = CheckStrings.size();
                  ^
                  J
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1287:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
  unsigned i = 0, j = 0, e = CheckStrings.size();
                         ^
                         E
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1304:44: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (MatchLabelPos == StringRef::npos)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1309:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Buffer = Buffer.substr(MatchLabelPos + MatchLabelLen);
               ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1313:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Req.EnableVarScope)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1331:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      CheckRegion = CheckRegion.substr(MatchPos + MatchLen);
                    ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FileCheck.cpp:1334:16: warning: statement should be inside braces [readability-braces-around-statements]
    if (j == e)
               ^
                {
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:11:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:32:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Spec.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:68:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  RepString = RepString.trim();
              ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:70:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(false && "Invalid replacement sequence index!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:73:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  RepString = RepString.trim();
              ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:75:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    RepString = RepString.drop_front();
                ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:76:59: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!consumeFieldLayout(RepString, Where, Align, Pad))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:77:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(false && "Invalid replacement field layout specification!");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:79:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  RepString = RepString.trim();
              ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:81:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Options = RepString.drop_front().trim();
              ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:84:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  RepString = RepString.trim();
              ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:86:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(false && "Unexpected characters found in replacement string!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:98:17: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (BO != 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:99:65: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return std::make_pair(ReplacementItem{Fmt.substr(0, BO)}, Fmt.substr(BO));
                                                                ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:102:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Fmt.drop_front(BO).take_while([](char C) { return C == '{'; });
                                      ^
../include/llvm/ADT/STLExtras.h:126:16: note: default parameter was declared here
               typename std::enable_if<
               ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:116:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:126:18: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (BO2 < BC)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:128:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                            Fmt.substr(BO2));
                            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:131:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef Right = Fmt.substr(BC + 1);
                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:134:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (RI.hasValue())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp:150:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I.Type != ReplacementType::Empty)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Hashing.cpp:18:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Hashing.cpp:23:33: warning: invalid case style for variable 'fixed_seed_override' [readability-identifier-naming]
uint64_t llvm::hashing::detail::fixed_seed_override = 0;
                                ^~~~~~~~~~~~~~~~~~~
                                FixedSeedOverride
/home/jonas/opt/llvm/lib/Support/Hashing.cpp:27:12: warning: invalid case style for function 'set_fixed_execution_hash_seed' [readability-identifier-naming]
void llvm::set_fixed_execution_hash_seed(uint64_t fixed_value) {
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           setFixedExecutionHashSeed
/home/jonas/opt/llvm/lib/Support/Hashing.cpp:27:51: warning: invalid case style for parameter 'fixed_value' [readability-identifier-naming]
void llvm::set_fixed_execution_hash_seed(uint64_t fixed_value) {
                                                  ^~~~~~~~~~~~
                                                  FixedValue
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GlobPattern.h:32:32: warning: function 'llvm::GlobPattern::create' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static Expected<GlobPattern> create(StringRef Pat);
                               ^                ~~~~
                                                S
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:101:36: note: the definition seen here
Expected<GlobPattern> GlobPattern::create(StringRef S) {
                                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GlobPattern.h:32:32: note: differing parameters are named here: ('Pat'), in definition: ('S')
  static Expected<GlobPattern> create(StringRef Pat);
                               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GlobPattern.h:36:8: warning: function 'llvm::GlobPattern::matchOne' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool matchOne(ArrayRef<BitVector> Pat, StringRef S) const;
       ^                            ~~~~
                                    Pats
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:146:19: note: the definition seen here
bool GlobPattern::matchOne(ArrayRef<BitVector> Pats, StringRef S) const {
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GlobPattern.h:36:8: note: differing parameters are named here: ('Pat'), in definition: ('Pats')
  bool matchOne(ArrayRef<BitVector> Pat, StringRef S) const;
       ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:23:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return S.find_first_of("?*[") != StringRef::npos;
         ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:33:22: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (S.size() < 3)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:43:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      S = S.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:49:21: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Start > End)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:53:39: warning: statement should be inside braces [hicpp-braces-around-statements]
    for (int C = Start; C <= End; ++C)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:54:10: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      BV[(uint8_t)C] = true;
         ^~~~~~~~~~~
         static_cast<uint8_t>()
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:55:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    S = S.substr(3);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:58:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (char C : S)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:59:8: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    BV[(uint8_t)C] = true;
       ^~~~~~~~~~~
       static_cast<uint8_t>()
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:60:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return BV;
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:67:44: warning: non-const reference parameter 'S', make it const or use a pointer [google-runtime-references]
static Expected<BitVector> scan(StringRef &S, StringRef Original) {
                                           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:70:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    S = S.substr(1);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:73:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return BitVector();
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:75:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    S = S.substr(1);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:76:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return BitVector(256, true);
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:79:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (End == StringRef::npos)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:84:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    S = S.substr(End + 1);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:86:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Expected<BitVector> BV = expand(Chars.substr(1), Original);
                                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:87:15: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!BV)
              ^
               {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:89:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return BV->flip();
             ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:95:8: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    BV[(uint8_t)S[0]] = true;
       ^~~~~~~~~~   ~
       static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:96:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    S = S.substr(1);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:97:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return BV;
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:108:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Pat;
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:112:39: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (S.endswith("*") && !hasWildcard(S.drop_back())) {
                                      ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:113:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Pat.Prefix = S.drop_back();
                 ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:114:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Pat;
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:118:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (S.startswith("*") && !hasWildcard(S.drop_front())) {
                                        ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:119:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Pat.Suffix = S.drop_front();
                 ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:120:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Pat;
           ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:128:13: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!BV)
            ^
             {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:132:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Pat;
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:136:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Exact)
            ^
             {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:138:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Prefix)
             ^
              {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:140:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Suffix)
             ^
              {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:148:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Pats.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:153:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    if (Pats[0].size() == 0) {
        ^~~~~~~~~~~~~~~~~~~~
        Pats[0].empty()
../include/llvm/ADT/BitVector.h:167:8: note: method 'BitVector'::empty() defined here
  bool empty() const { return Size == 0; }
       ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:155:24: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Pats.empty())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:158:51: warning: statement should be inside braces [google-readability-braces-around-statements]
      for (size_t I = 0, E = S.size(); I < E; ++I)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:159:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        if (matchOne(Pats, S.substr(I)))
                           ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:159:41: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (matchOne(Pats, S.substr(I)))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:165:31: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    if (S.empty() || !Pats[0][(uint8_t)S[0]])
                              ^~~~~~~~~~   ~
                              static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:165:46: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (S.empty() || !Pats[0][(uint8_t)S[0]])
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/GlobPattern.cpp:168:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    S = S.substr(1);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GraphWriter.h:47:11: warning: function 'llvm::DOT::getColorString' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
StringRef getColorString(unsigned NodeNumber);
          ^                       ~~~~~~~~~~~
                                  ColorNumber
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:71:22: note: the definition seen here
StringRef llvm::DOT::getColorString(unsigned ColorNumber) {
                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GraphWriter.h:47:11: note: differing parameters are named here: ('NodeNumber'), in definition: ('ColorNumber')
StringRef getColorString(unsigned NodeNumber);
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GraphWriter.h:63:6: warning: function 'llvm::DisplayGraph' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
bool DisplayGraph(StringRef Filename, bool wait = true,
     ^                      ~~~~~~~~~
                            FilenameRef
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:149:12: note: the definition seen here
bool llvm::DisplayGraph(StringRef FilenameRef, bool wait,
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/GraphWriter.h:63:6: note: differing parameters are named here: ('Filename'), in definition: ('FilenameRef')
bool DisplayGraph(StringRef Filename, bool wait = true,
     ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:27:1: warning: #includes are not sorted properly [llvm-include-order]
#include <system_error>
^        ~~~~~~~~~~~~~~
         <string>
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:31:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:36:24: warning: invalid case style for function 'EscapeString' [readability-identifier-naming]
std::string llvm::DOT::EscapeString(const std::string &Label) {
                       ^~~~~~~~~~~~~
                       escapeString
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:38:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != Str.length(); ++i)
                ^      ~                    ~~
                I      I                    I
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:38:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0; i != Str.length(); ++i)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:51:31: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (i+1 != Str.length())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:66:3: warning: misleading indentation: statement is indented too deeply [readability-misleading-indentation]
  return Str;
  ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:38:3: note: did you mean this line to be inside this 'for'
  for (unsigned i = 0; i != Str.length(); ++i)
  ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:77:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return Colors[ColorNumber % NumColors];
         ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:86:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:94:13: warning: invalid case style for function 'ExecGraphViewer' [readability-identifier-naming]
static bool ExecGraphViewer(StringRef ExecPath, std::vector<StringRef> &args,
            ^~~~~~~~~~~~~~~~
            execGraphViewer
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:94:73: warning: invalid case style for parameter 'args' [readability-identifier-naming]
static bool ExecGraphViewer(StringRef ExecPath, std::vector<StringRef> &args,
                                                                        ^~~~~
                                                                        Args
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:94:73: warning: non-const reference parameter 'args', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:95:54: warning: invalid case style for parameter 'wait' [readability-identifier-naming]
                            StringRef Filename, bool wait,
                                                     ^~~~~
                                                     Wait
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:96:42: warning: non-const reference parameter 'ErrMsg', make it const or use a pointer [google-runtime-references]
                            std::string &ErrMsg) {
                                         ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:98:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (sys::ExecuteAndWait(ExecPath, args, None, {}, 0, 0, &ErrMsg)) {
        ^
../include/llvm/Support/Program.h:120:7: note: default parameter was declared here
      bool *ExecutionFailed = nullptr);
      ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:98:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (sys::ExecuteAndWait(ExecPath, args, None, {}, 0, 0, &ErrMsg)) {
        ^                                                           ~
                                                                     != 0
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:102:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::fs::remove(Filename);
    ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:105:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::ExecuteNoWait(ExecPath, args, None, {}, 0, &ErrMsg);
    ^
../include/llvm/Support/Program.h:132:29: note: default parameter was declared here
                            bool *ExecutionFailed = nullptr);
                            ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:116:8: warning: invalid case style for function 'TryFindProgram' [readability-identifier-naming]
  bool TryFindProgram(StringRef Names, std::string &ProgramPath) {
       ^~~~~~~~~~~~~~~
       tryFindProgram
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:116:53: warning: non-const reference parameter 'ProgramPath', make it const or use a pointer [google-runtime-references]
  bool TryFindProgram(StringRef Names, std::string &ProgramPath) {
                                                    ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:118:31: warning: invalid case style for variable 'parts' [readability-identifier-naming]
    SmallVector<StringRef, 8> parts;
                              ^~~~~~
                              Parts
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:119:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Names.split(parts, '|');
    ^
../include/llvm/ADT/StringRef.h:799:63: note: default parameter was declared here
    void split(SmallVectorImpl<StringRef> &A, char Separator, int MaxSplit = -1,
                                                              ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:121:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      if (ErrorOr<std::string> P = sys::findProgramByName(Name)) {
                                   ^
../include/llvm/Support/Program.h:70:37: note: default parameter was declared here
  findProgramByName(StringRef Name, ArrayRef<StringRef> Paths = {});
                                    ^
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:133:54: warning: invalid case style for parameter 'program' [readability-identifier-naming]
static const char *getProgramName(GraphProgram::Name program) {
                                                     ^~~~~~~~
                                                     Program
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:149:12: warning: invalid case style for function 'DisplayGraph' [readability-identifier-naming]
bool llvm::DisplayGraph(StringRef FilenameRef, bool wait,
           ^~~~~~~~~~~~~
           displayGraph
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:149:53: warning: invalid case style for parameter 'wait' [readability-identifier-naming]
bool llvm::DisplayGraph(StringRef FilenameRef, bool wait,
                                                    ^~~~~
                                                    Wait
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:150:44: warning: invalid case style for parameter 'program' [readability-identifier-naming]
                        GraphProgram::Name program) {
                                           ^~~~~~~~
                                           Program
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:170:28: warning: invalid case style for variable 'args' [readability-identifier-naming]
    std::vector<StringRef> args;
                           ^~~~~
                           Args
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:171:10: warning: use emplace_back instead of push_back [modernize-use-emplace]
    args.push_back(ViewerPath);
         ^~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:172:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(Filename);
         ^~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:174:68: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!ExecGraphViewer(ViewerPath, args, Filename, wait, ErrMsg))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:180:28: warning: invalid case style for variable 'args' [readability-identifier-naming]
    std::vector<StringRef> args;
                           ^~~~~
                           Args
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:181:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(ViewerPath);
         ^~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:182:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(Filename);
         ^~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:190:28: warning: invalid case style for variable 'args' [readability-identifier-naming]
    std::vector<StringRef> args;
                           ^~~~~
                           Args
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:191:10: warning: use emplace_back instead of push_back [modernize-use-emplace]
    args.push_back(ViewerPath);
         ^~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:192:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(Filename);
         ^~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:194:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back("-f");
         ^~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:195:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(getProgramName(program));
         ^~~~~~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:213:8: warning: implicit conversion 'ViewerKind' -> bool [readability-implicit-bool-conversion]
  if (!Viewer && S.TryFindProgram("gv", ViewerPath))
      ~^~~~~~
      ( == 0u)
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:213:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Viewer && S.TryFindProgram("gv", ViewerPath))
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:215:8: warning: implicit conversion 'ViewerKind' -> bool [readability-implicit-bool-conversion]
  if (!Viewer && S.TryFindProgram("xdg-open", ViewerPath))
      ~^~~~~~
      ( == 0u)
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:215:59: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Viewer && S.TryFindProgram("xdg-open", ViewerPath))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:225:7: warning: implicit conversion 'ViewerKind' -> bool [readability-implicit-bool-conversion]
  if (Viewer &&
      ^~~~~~
      ( != 0u)
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:231:28: warning: invalid case style for variable 'args' [readability-identifier-naming]
    std::vector<StringRef> args;
                           ^~~~~
                           Args
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:232:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(GeneratorPath);
         ^~~~~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:233:31: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Viewer == VK_CmdStart)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:234:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back("-Tpdf");
           ^~~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:235:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:236:12: warning: use emplace_back instead of push_back [modernize-use-emplace]
      args.push_back("-Tps");
           ^~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:237:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back("-Nfontname=Courier");
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:238:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back("-Gsize=7.5,10");
         ^~~~~~~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:239:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(Filename);
         ^~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:240:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back("-o");
         ^~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:241:10: warning: use emplace_back instead of push_back [modernize-use-emplace]
    args.push_back(OutputFilename);
         ^~~~~~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:245:70: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ExecGraphViewer(GeneratorPath, args, Filename, true, ErrMsg))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:253:10: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    args.push_back(ViewerPath);
         ^~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:256:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back("-W");
           ^~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:257:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back(OutputFilename);
           ^~~~~~~~~~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:261:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back(OutputFilename);
           ^~~~~~~~~~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:264:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back("--spartan");
           ^~~~~~~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:265:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back(OutputFilename);
           ^~~~~~~~~~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:268:12: warning: use emplace_back instead of push_back [hicpp-use-emplace]
      args.push_back("/S");
           ^~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:269:12: warning: use emplace_back instead of push_back [modernize-use-emplace]
      args.push_back("/C");
           ^~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:272:12: warning: use emplace_back instead of push_back [modernize-use-emplace]
      args.push_back(StartArg);
           ^~~~~~~~~~~~~~~~~~
           emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:284:28: warning: invalid case style for variable 'args' [readability-identifier-naming]
    std::vector<StringRef> args;
                           ^~~~~
                           Args
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:285:10: warning: use emplace_back instead of push_back [modernize-use-emplace]
    args.push_back(ViewerPath);
         ^~~~~~~~~~~~~~~~~~~~
         emplace_back(
/home/jonas/opt/llvm/lib/Support/GraphWriter.cpp:286:10: warning: use emplace_back instead of push_back [modernize-use-emplace]
    args.push_back(Filename);
         ^~~~~~~~~~~~~~~~~~
         emplace_back(
xport-fixes /tmp/tmpfTtvIF/tmplmQFbD.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ConvertUTFWrapper.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp3srLwy.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/CrashRecoveryContext.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpsomQXL.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/DataExtractor.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpAVua2v.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Debug.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpoBA9y4.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/DebugCounter.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp_wAd3h.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/DeltaAlgorithm.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpilO2Xe.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/DAGDeltaAlgorithm.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp6SGpbJ.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/DJB.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpuBFjsY.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Error.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmppup2aI.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ErrorHandling.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpAMVqVy.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/FileCheck.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpCtvox2.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/FileUtilities.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmphjQHtS.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/FileOutputBuffer.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpBPKYr5.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/FoldingSet.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp5wPCSE.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/FormattedStream.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp1q8DYt.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/FormatVariadic.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpnnZR5u.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/GlobPattern.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpm5sUA_.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/GraphWriter.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpPbpW0j.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Hashing.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpiEErey.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/InitLLVM.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpLFEQ3q.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpSPf4Fh.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/IntervalMap.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpnCBg5b.yaml -p=/home/jonas/opt/llvm /home/jonas//home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:26:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NumClasses == 0 && "grow() called after compress().");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:28:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (EC.size() < N)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:32:38: warning: invalid case style for parameter 'a' [readability-identifier-naming]
unsigned IntEqClasses::join(unsigned a, unsigned b) {
                                     ^~
                                     A
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:32:50: warning: invalid case style for parameter 'b' [readability-identifier-naming]
unsigned IntEqClasses::join(unsigned a, unsigned b) {
                                                 ^~
                                                 B
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:33:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NumClasses == 0 && "join() called after compress().");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:34:12: warning: invalid case style for variable 'eca' [readability-identifier-naming]
  unsigned eca = EC[a];
           ^~~
           Eca
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:35:12: warning: invalid case style for variable 'ecb' [readability-identifier-naming]
  unsigned ecb = EC[b];
           ^~~
           Ecb
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:39:21: warning: statement should be inside braces [hicpp-braces-around-statements]
  while (eca != ecb)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:53:44: warning: invalid case style for parameter 'a' [readability-identifier-naming]
unsigned IntEqClasses::findLeader(unsigned a) const {
                                           ^~
                                           A
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:54:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NumClasses == 0 && "findLeader() called after compress().");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:55:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (a != EC[a])
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:61:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (NumClasses)
      ^         ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:61:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (NumClasses)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:63:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = EC.size(); i != e; ++i)
                ^                     ~         ~~
                I                     I         I
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:63:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = EC.size(); i != e; ++i)
                       ^                   ~~
                       E                   E
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:63:51: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0, e = EC.size(); i != e; ++i)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:68:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!NumClasses)
      ~^~~~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:68:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!NumClasses)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:71:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = EC.size(); i != e; ++i)
                ^                     ~         ~~
                I                     I         I
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:71:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = EC.size(); i != e; ++i)
                       ^                   ~~
                       E                   E
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:71:51: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0, e = EC.size(); i != e; ++i)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:72:31: warning: statement should be inside braces [readability-braces-around-statements]
    if (EC[i] < Leader.size())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/IntEqClasses.cpp:74:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/InitLLVM.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/InitLLVM.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::sys;
^
/home/jonas/opt/llvm/lib/Support/InitLLVM.cpp:26:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::PrintStackTraceOnErrorSignal(Argv[0]);
  ^
../include/llvm/Support/Signals.h:48:37: note: default parameter was declared here
                                    bool DisableCrashReporting = false);
                                    ^
/home/jonas/opt/llvm/lib/Support/InitLLVM.cpp:26:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  sys::PrintStackTraceOnErrorSignal(Argv[0]);
                                    ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:20:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!path.empty() && "Can't replace missing root");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:27:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Level == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:28:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return NodeRef();
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:31:12: warning: invalid case style for variable 'l' [readability-identifier-naming]
  unsigned l = Level - 1;
           ^
           L
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:32:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (l && path[l].offset == 0)
         ^
         ( != 0u)
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:32:35: warning: statement should be inside braces [readability-braces-around-statements]
  while (l && path[l].offset == 0)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:36:27: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (path[l].offset == 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:43:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (++l; l != Level; ++l)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:49:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Level != 0 && "Cannot move the root node");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:52:12: warning: invalid case style for variable 'l' [readability-identifier-naming]
  unsigned l = 0;
           ^
           L
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:56:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(l != 0 && "Cannot move beyond begin()");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:59:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  } else if (height() < Level)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:77:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Level == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:78:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return NodeRef();
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:81:12: warning: invalid case style for variable 'l' [readability-identifier-naming]
  unsigned l = Level - 1;
           ^
           L
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:82:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (l && atLastEntry(l))
         ^
         ( != 0u)
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:82:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (l && atLastEntry(l))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:86:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (atLastEntry(l))
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:93:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (++l; l != Level; ++l)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:99:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Level != 0 && "Cannot move the root node");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:102:12: warning: invalid case style for variable 'l' [readability-identifier-naming]
  unsigned l = Level - 1;
           ^
           L
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:103:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (l && atLastEntry(l))
         ^
         ( != 0u)
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:103:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (l && atLastEntry(l))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:108:40: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (++path[l].offset == path[l].size)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:121:36: warning: parameter 'CurSize' is unused [misc-unused-parameters]
                   const unsigned *CurSize, unsigned NewSize[],
                                   ^~~~~~~~
                                    /*CurSize*/
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:123:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Elements + Grow <= Nodes * Capacity && "Not enough room for elements");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:124:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Position <= Elements && "Invalid position");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:125:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!Nodes)
      ~^~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:125:14: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Nodes)
             ^
              {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:126:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return IdxPair();
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:129:40: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  const unsigned PerNode = (Elements + Grow) / Nodes;
                                       ^~~~~
                                       static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:130:38: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  const unsigned Extra = (Elements + Grow) % Nodes;
                                     ^~~~~
                                     static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:133:17: warning: invalid case style for variable 'n' [readability-identifier-naming]
  for (unsigned n = 0; n != Nodes; ++n) {
                ^      ~             ~~
                N      N             N
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:134:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Sum += NewSize[n] = PerNode + (n < Extra);
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:134:35: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    Sum += NewSize[n] = PerNode + (n < Extra);
                                  ^
                                  static_cast<unsigned int>
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:135:50: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (PosPair.first == Nodes && Sum > Position)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:136:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      PosPair = IdxPair(n, Position - (Sum - NewSize[n]));
                                             ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:138:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Sum == Elements + Grow && "Bad distribution sum");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:142:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(PosPair.first < Nodes && "Bad algebra");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:143:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(NewSize[PosPair.first] && "Too few elements to need Grow");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:143:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    assert(NewSize[PosPair.first] && "Too few elements to need Grow");
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:144:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    --NewSize[PosPair.first];
      ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:149:17: warning: invalid case style for variable 'n' [readability-identifier-naming]
  for (unsigned n = 0; n != Nodes; ++n) {
                ^      ~             ~~
                N      N             N
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:150:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(NewSize[n] <= Capacity && "Overallocated node");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:150:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    assert(NewSize[n] <= Capacity && "Overallocated node");
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:151:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Sum += NewSize[n];
           ^
/home/jonas/opt/llvm/lib/Support/IntervalMap.cpp:153:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Sum == Elements && "Bad distribution sum");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:67:6: warning: function 'llvm::cl::ParseEnvironmentOptions' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
void ParseEnvironmentOptions(const char *progName, const char *envvar,
     ^                                                         ~~~~~~~
                                                               envVar
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1038:10: note: the definition seen here
void cl::ParseEnvironmentOptions(const char *progName, const char *envVar,
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:67:6: note: differing parameters are named here: ('envvar'), in definition: ('envVar')
void ParseEnvironmentOptions(const char *progName, const char *envvar,
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:683:8: warning: function 'llvm::cl::generic_parser_base::printGenericOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printGenericOptionDiff(const Option &O, const GenericOptionValue &V,
       ^                                                                 ~~
                                                                         Value
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1672:27: note: the definition seen here
void generic_parser_base::printGenericOptionDiff(
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:683:8: note: differing parameters are named here: ('V'), in definition: ('Value')
  void printGenericOptionDiff(const Option &O, const GenericOptionValue &V,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:868:8: warning: function 'llvm::cl::parser<bool>::parse' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool parse(Option &O, StringRef ArgName, StringRef Arg, bool &Val);
       ^                                                        ~~~~
                                                                Value
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1525:20: note: the definition seen here
bool parser<bool>::parse(Option &O, StringRef ArgName, StringRef Arg,
                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:868:8: note: differing parameters are named here: ('Val'), in definition: ('Value')
  bool parse(Option &O, StringRef ArgName, StringRef Arg, bool &Val);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:879:8: warning: function 'llvm::cl::parser<bool>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, bool V, OptVal Default,
       ^                                               ~~~~~~~~
                                                       D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1721:1: note: the definition seen here
PRINT_OPT_DIFF(bool)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:879:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, bool V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:896:8: warning: function 'llvm::cl::parser<llvm::cl::boolOrDefault>::parse' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool parse(Option &O, StringRef ArgName, StringRef Arg, boolOrDefault &Val);
       ^                                                                 ~~~~
                                                                         Value
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1543:29: note: the definition seen here
bool parser<boolOrDefault>::parse(Option &O, StringRef ArgName, StringRef Arg,
                            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:896:8: note: differing parameters are named here: ('Val'), in definition: ('Value')
  bool parse(Option &O, StringRef ArgName, StringRef Arg, boolOrDefault &Val);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:905:8: warning: function 'llvm::cl::parser<llvm::cl::boolOrDefault>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, boolOrDefault V, OptVal Default,
       ^                                                        ~~~~~~~~
                                                                D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1722:1: note: the definition seen here
PRINT_OPT_DIFF(boolOrDefault)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:905:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, boolOrDefault V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:922:8: warning: function 'llvm::cl::parser<int>::parse' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool parse(Option &O, StringRef ArgName, StringRef Arg, int &Val);
       ^                                                       ~~~~
                                                               Value
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1561:19: note: the definition seen here
bool parser<int>::parse(Option &O, StringRef ArgName, StringRef Arg,
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:922:8: note: differing parameters are named here: ('Val'), in definition: ('Value')
  bool parse(Option &O, StringRef ArgName, StringRef Arg, int &Val);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:927:8: warning: function 'llvm::cl::parser<int>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, int V, OptVal Default,
       ^                                              ~~~~~~~~
                                                      D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1723:1: note: the definition seen here
PRINT_OPT_DIFF(int)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:927:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, int V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:944:8: warning: function 'llvm::cl::parser<unsigned int>::parse' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool parse(Option &O, StringRef ArgName, StringRef Arg, unsigned &Val);
       ^                                                            ~~~~
                                                                    Value
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1570:24: note: the definition seen here
bool parser<unsigned>::parse(Option &O, StringRef ArgName, StringRef Arg,
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:944:8: note: differing parameters are named here: ('Val'), in definition: ('Value')
  bool parse(Option &O, StringRef ArgName, StringRef Arg, unsigned &Val);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:949:8: warning: function 'llvm::cl::parser<unsigned int>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, unsigned V, OptVal Default,
       ^                                                   ~~~~~~~~
                                                           D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1724:1: note: the definition seen here
PRINT_OPT_DIFF(unsigned)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:949:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, unsigned V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:968:8: warning: function 'llvm::cl::parser<unsigned long long>::parse' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool parse(Option &O, StringRef ArgName, StringRef Arg,
       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1580:34: note: the definition seen here
bool parser<unsigned long long>::parse(Option &O, StringRef ArgName,
                                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:968:8: note: differing parameters are named here: ('Val'), in definition: ('Value')
  bool parse(Option &O, StringRef ArgName, StringRef Arg,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:974:8: warning: function 'llvm::cl::parser<unsigned long long>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, unsigned long long V, OptVal Default,
       ^                                                             ~~~~~~~~
                                                                     D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1725:1: note: the definition seen here
PRINT_OPT_DIFF(unsigned long long)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:974:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, unsigned long long V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:996:8: warning: function 'llvm::cl::parser<double>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, double V, OptVal Default,
       ^                                                 ~~~~~~~~
                                                         D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1726:1: note: the definition seen here
PRINT_OPT_DIFF(double)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:996:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, double V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1018:8: warning: function 'llvm::cl::parser<float>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, float V, OptVal Default,
       ^                                                ~~~~~~~~
                                                        D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1727:1: note: the definition seen here
PRINT_OPT_DIFF(float)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1018:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, float V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1043:8: warning: function 'llvm::cl::parser<std::__cxx11::basic_string<char> >::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, StringRef V, const OptVal &Default,
       ^                                                           ~~~~~~~~
                                                                   D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1730:27: note: the definition seen here
void parser<std::string>::printOptionDiff(const Option &O, StringRef V,
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1043:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, StringRef V, const OptVal &Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1068:8: warning: function 'llvm::cl::parser<char>::printOptionDiff' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printOptionDiff(const Option &O, char V, OptVal Default,
       ^                                               ~~~~~~~~
                                                       D
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1728:1: note: the definition seen here
PRINT_OPT_DIFF(char)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:19: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1068:8: note: differing parameters are named here: ('Default'), in definition: ('D')
  void printOptionDiff(const Option &O, char V, OptVal Default,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1761:12: warning: function 'llvm::cl::extrahelp::extrahelp' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  explicit extrahelp(StringRef help);
           ^                   ~~~~~
                               Help
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:352:12: note: the definition seen here
extrahelp::extrahelp(StringRef Help) : morehelp(Help) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1761:12: note: differing parameters are named here: ('help'), in definition: ('Help')
  explicit extrahelp(StringRef help);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1844:6: warning: function 'llvm::cl::TokenizeGNUCommandLine' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
void TokenizeGNUCommandLine(StringRef Source, StringSaver &Saver,
     ^                                ~~~~~~~
                                      Src
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:702:10: note: the definition seen here
void cl::TokenizeGNUCommandLine(StringRef Src, StringSaver &Saver,
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1844:6: note: differing parameters are named here: ('Source'), in definition: ('Src')
void TokenizeGNUCommandLine(StringRef Source, StringSaver &Saver,
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1859:6: warning: function 'llvm::cl::TokenizeWindowsCommandLine' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
void TokenizeWindowsCommandLine(StringRef Source, StringSaver &Saver,
     ^                                    ~~~~~~~
                                          Src
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:801:10: note: the definition seen here
void cl::TokenizeWindowsCommandLine(StringRef Src, StringSaver &Saver,
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1859:6: note: differing parameters are named here: ('Source'), in definition: ('Src')
void TokenizeWindowsCommandLine(StringRef Source, StringSaver &Saver,
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1893:6: warning: function 'llvm::cl::readConfigFile' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
bool readConfigFile(StringRef CfgFileName, StringSaver &Saver,
     ^                        ~~~~~~~~~~~~
                              CfgFile
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1024:10: note: the definition seen here
bool cl::readConfigFile(StringRef CfgFile, StringSaver &Saver,
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:1893:6: note: differing parameters are named here: ('CfgFileName'), in definition: ('CfgFile')
bool readConfigFile(StringRef CfgFileName, StringSaver &Saver,
     ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:44:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:45:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace cl;
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:58:29: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
template class basic_parser<unsigned long long>;
                            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:69:2: warning: namespace 'cl' not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace cl
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:53:11: note: namespace 'cl' starts here
namespace cl {
          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:70:2: warning: namespace 'llvm' ends with an unrecognized comment [google-readability-namespace-comments]
} // end namespace llvm::cl
 ^~~~~~~~~~~~~~~~~~~~~~~~~~
   // namespace llvm
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:52:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:82:13: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
void parser<unsigned long long>::anchor() {}
            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:113:8: warning: invalid case style for function 'ResetAllOptionOccurrences' [readability-identifier-naming]
  void ResetAllOptionOccurrences();
       ^~~~~~~~~~~~~~~~~~~~~~~~~~
       resetAllOptionOccurrences
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:115:8: warning: invalid case style for function 'ParseCommandLineOptions' [readability-identifier-naming]
  bool ParseCommandLineOptions(int argc, const char *const *argv,
       ^~~~~~~~~~~~~~~~~~~~~~~~
       parseCommandLineOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:115:36: warning: invalid case style for parameter 'argc' [readability-identifier-naming]
  bool ParseCommandLineOptions(int argc, const char *const *argv,
                                   ^~~~~
                                   Argc
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:115:61: warning: invalid case style for parameter 'argv' [readability-identifier-naming]
  bool ParseCommandLineOptions(int argc, const char *const *argv,
                                                            ^~~~~
                                                            Argv
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:116:52: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                               StringRef Overview, raw_ostream *Errs = nullptr);
                                                   ^                ~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:118:33: warning: non-const reference parameter 'Opt', make it const or use a pointer [google-runtime-references]
  void addLiteralOption(Option &Opt, SubCommand *SC, StringRef Name) {
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:119:25: warning: statement should be inside braces [readability-braces-around-statements]
    if (Opt.hasArgStr())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:124:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      report_fatal_error("inconsistency in registered CommandLine options");
      ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:131:23: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (SC == Sub)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:138:33: warning: non-const reference parameter 'Opt', make it const or use a pointer [google-runtime-references]
  void addLiteralOption(Option &Opt, StringRef Name) {
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:139:26: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Opt.Subs.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:142:31: warning: statement should be inside braces [readability-braces-around-statements]
      for (auto SC : Opt.Subs)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:159:50: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (O->getFormattingFlag() == cl::Positional)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:161:14: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    else if (O->getMiscFlags() & cl::Sink) // Remember sink options
             ^                           ~
             (                           ) != 0u
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:161:43: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (O->getMiscFlags() & cl::Sink) // Remember sink options
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:164:11: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      if (SC->ConsumeAfterOpt) {
          ^                  ~
                              != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:165:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        O->error("Cannot specify more than one option with cl::ConsumeAfter!");
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:36: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:175:19: warning: statement should be inside braces [readability-braces-around-statements]
    if (HadErrors)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:176:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      report_fatal_error("inconsistency in registered CommandLine options");
      ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:182:23: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (SC == Sub)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:193:30: warning: statement should be inside braces [hicpp-braces-around-statements]
      for (auto SC : O->Subs)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:201:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (O->hasArgStr())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:205:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (auto Name : OptionNames)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:208:50: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (O->getFormattingFlag() == cl::Positional)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:216:14: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    else if (O->getMiscFlags() & cl::Sink)
             ^                           ~
             (                           ) != 0u
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:216:43: warning: statement should be inside braces [hicpp-braces-around-statements]
    else if (O->getMiscFlags() & cl::Sink)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:223:39: warning: statement should be inside braces [readability-braces-around-statements]
    else if (O == Sub.ConsumeAfterOpt)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:228:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (O->Subs.empty())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:232:46: warning: statement should be inside braces [hicpp-braces-around-statements]
        for (auto SC : RegisteredSubCommands)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:235:32: warning: statement should be inside braces [google-readability-braces-around-statements]
        for (auto SC : O->Subs)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:248:26: warning: statement should be inside braces [readability-braces-around-statements]
      if (hasOptions(*S))
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:261:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      report_fatal_error("inconsistency in registered CommandLine options");
      ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:267:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (O->Subs.empty())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:270:30: warning: statement should be inside braces [hicpp-braces-around-statements]
      for (auto SC : O->Subs)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:277:41: warning: invalid case style for parameter 'cat' [readability-identifier-naming]
  void registerCategory(OptionCategory *cat) {
                                        ^~~~
                                        Cat
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:278:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(count_if(RegisteredOptionCategories,
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:287:39: warning: invalid case style for parameter 'sub' [readability-identifier-naming]
  void registerSubCommand(SubCommand *sub) {
                                      ^~~~
                                      Sub
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:288:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(count_if(RegisteredSubCommands,
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:302:28: warning: statement should be inside braces [google-readability-braces-around-statements]
            O->hasArgStr())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:304:13: warning: statement should be inside braces [google-readability-braces-around-statements]
        else
            ^
             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:310:41: warning: invalid case style for parameter 'sub' [readability-identifier-naming]
  void unregisterSubCommand(SubCommand *sub) {
                                        ^~~~
                                        Sub
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:338:15: warning: use default member initializer for 'ActiveSubCommand' [modernize-use-default-member-init]
  SubCommand *ActiveSubCommand;
              ^               ~
                              {nullptr}
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:340:11: warning: invalid case style for function 'LookupOption' [readability-identifier-naming]
  Option *LookupOption(SubCommand &Sub, StringRef &Arg, StringRef &Value);
          ^~~~~~~~~~~~~
          lookupOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:340:36: warning: non-const reference parameter 'Sub', make it const or use a pointer [google-runtime-references]
  Option *LookupOption(SubCommand &Sub, StringRef &Arg, StringRef &Value);
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:340:52: warning: non-const reference parameter 'Arg', make it const or use a pointer [google-runtime-references]
  Option *LookupOption(SubCommand &Sub, StringRef &Arg, StringRef &Value);
                                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:340:68: warning: non-const reference parameter 'Value', make it const or use a pointer [google-runtime-references]
  Option *LookupOption(SubCommand &Sub, StringRef &Arg, StringRef &Value);
                                                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:341:15: warning: invalid case style for function 'LookupSubCommand' [readability-identifier-naming]
  SubCommand *LookupSubCommand(StringRef Name);
              ^~~~~~~~~~~~~~~~~
              lookupSubCommand
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:348:10: warning: invalid case style for function 'AddLiteralOption' [readability-identifier-naming]
void cl::AddLiteralOption(Option &O, StringRef Name) {
         ^~~~~~~~~~~~~~~~~
         addLiteralOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:364:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FullyInitialized)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:366:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert((S.empty() || S[0] != '-') && "Option can't start with '-");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:371:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
OptionCategory llvm::cl::GeneralCategory("General options");
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:180:18: note: default parameter was declared here
                 StringRef const Description = "")
                 ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:410:28: warning: invalid case style for function 'LookupOption' [readability-identifier-naming]
Option *CommandLineParser::LookupOption(SubCommand &Sub, StringRef &Arg,
                           ^~~~~~~~~~~~~
                           lookupOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:413:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Arg.empty())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:415:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&Sub != &*AllSubCommands);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:417:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t EqualPos = Arg.find('=');
                    ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:423:35: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I == Sub.OptionsMap.end())
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:432:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (I == Sub.OptionsMap.end())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:435:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Value = Arg.substr(EqualPos + 1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:440:32: warning: invalid case style for function 'LookupSubCommand' [readability-identifier-naming]
SubCommand *CommandLineParser::LookupSubCommand(StringRef Name) {
                               ^~~~~~~~~~~~~~~~~
                               lookupSubCommand
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:441:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Name.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:444:31: warning: statement should be inside braces [readability-braces-around-statements]
    if (S == &*AllSubCommands)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:446:30: warning: statement should be inside braces [readability-braces-around-statements]
    if (S->getName().empty())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:449:52: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (StringRef(S->getName()) == StringRef(Name))
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:459:16: warning: invalid case style for function 'LookupNearestOption' [readability-identifier-naming]
static Option *LookupNearestOption(StringRef Arg,
               ^~~~~~~~~~~~~~~~~~~~
               lookupNearestOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:461:49: warning: non-const reference parameter 'NearestString', make it const or use a pointer [google-runtime-references]
                                   std::string &NearestString) {
                                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:463:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Arg.empty())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:474:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (StringMap<Option *>::const_iterator it = OptionsMap.begin(),
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (const auto & it : OptionsMap)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:474:44: warning: invalid case style for variable 'it' [readability-identifier-naming]
  for (StringMap<Option *>::const_iterator it = OptionsMap.begin(),
                                           ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:475:44: warning: invalid case style for variable 'ie' [readability-identifier-naming]
                                           ie = OptionsMap.end();
                                           ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:480:24: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (O->hasArgStr())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:488:12: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      if (!Best || Distance < BestDistance) {
          ~^~~~
          ( == nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:491:41: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (RHS.empty() || !PermitValue)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:493:13: warning: statement should be inside braces [readability-braces-around-statements]
        else
            ^
             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:504:13: warning: invalid case style for function 'CommaSeparateAndAddOccurrence' [readability-identifier-naming]
static bool CommaSeparateAndAddOccurrence(Option *Handler, unsigned pos,
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            commaSeparateAndAddOccurrence
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:504:69: warning: invalid case style for parameter 'pos' [readability-identifier-naming]
static bool CommaSeparateAndAddOccurrence(Option *Handler, unsigned pos,
                                                                    ^~~~
                                                                    Pos
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:506:43: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                                          bool MultiArg = false) {
                                          ^            ~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:509:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Handler->getMiscFlags() & CommaSeparated) {
      ^~~~~~~                                 ~
      (                                       ) != 0u
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:511:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef::size_type Pos = Val.find(',');
                               ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:515:78: warning: statement should be inside braces [readability-braces-around-statements]
      if (Handler->addOccurrence(pos, ArgName, Val.substr(0, Pos), MultiArg))
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:518:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Val = Val.substr(Pos + 1);
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:520:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Pos = Val.find(',');
            ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:532:20: warning: invalid case style for function 'ProvideOption' [readability-identifier-naming]
static inline bool ProvideOption(Option *Handler, StringRef ArgName,
                   ^~~~~~~~~~~~~~
                   provideOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:533:55: warning: invalid case style for parameter 'argc' [readability-identifier-naming]
                                 StringRef Value, int argc,
                                                      ^~~~~
                                                      Argc
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:534:53: warning: invalid case style for parameter 'argv' [readability-identifier-naming]
                                 const char *const *argv, int &i) {
                                                    ^~~~~
                                                    Argv
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:534:64: warning: invalid case style for parameter 'i' [readability-identifier-naming]
                                 const char *const *argv, int &i) {
                                                               ^~
                                                               I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:534:64: warning: non-const reference parameter 'i', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:541:10: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
    if (!Value.data()) { // No value specified?
        ~^~~~~       ~
                      == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:542:25: warning: statement should be inside braces [readability-braces-around-statements]
      if (i + 1 >= argc)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:543:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return Handler->error("requires a value!");
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:69: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:545:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(argv && "null check");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:546:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Value = StringRef(argv[++i]);
                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:550:31: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (NumAdditionalVals > 0)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:551:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Handler->error("multi-valued option specified"
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:36: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:554:9: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
    if (Value.data())
        ^           ~
                     != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:554:22: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Value.data())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:555:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Handler->error("does not allow a value! '" + Twine(Value) +
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:36: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:563:30: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (NumAdditionalVals == 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:564:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return CommaSeparateAndAddOccurrence(Handler, i, ArgName, Value);
           ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:506:43: note: default parameter was declared here
                                          bool MultiArg = false) {
                                          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:569:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (Value.data()) {
      ^           ~
                   != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:570:77: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CommaSeparateAndAddOccurrence(Handler, i, ArgName, Value, MultiArg))
                                                                            ^
                                                                             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:577:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (i + 1 >= argc)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:578:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Handler->error("not enough values!");
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:36: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:579:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(argv && "null check");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:580:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Value = StringRef(argv[++i]);
                      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:582:77: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CommaSeparateAndAddOccurrence(Handler, i, ArgName, Value, MultiArg))
                                                                            ^
                                                                             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:590:13: warning: invalid case style for function 'ProvidePositionalOption' [readability-identifier-naming]
static bool ProvidePositionalOption(Option *Handler, StringRef Arg, int i) {
            ^~~~~~~~~~~~~~~~~~~~~~~~
            providePositionalOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:590:73: warning: invalid case style for parameter 'i' [readability-identifier-naming]
static bool ProvidePositionalOption(Option *Handler, StringRef Arg, int i) {
                                                                        ^~
                                                                        I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:609:54: warning: non-const reference parameter 'Length', make it const or use a pointer [google-runtime-references]
static Option *getOptionPred(StringRef Name, size_t &Length,
                                                     ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:635:1: warning: invalid case style for function 'HandlePrefixedOrGroupedOption' [readability-identifier-naming]
HandlePrefixedOrGroupedOption(StringRef &Arg, StringRef &Value,
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
handlePrefixedOrGroupedOption
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:635:42: warning: non-const reference parameter 'Arg', make it const or use a pointer [google-runtime-references]
HandlePrefixedOrGroupedOption(StringRef &Arg, StringRef &Value,
                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:635:58: warning: non-const reference parameter 'Value', make it const or use a pointer [google-runtime-references]
HandlePrefixedOrGroupedOption(StringRef &Arg, StringRef &Value,
                                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:636:37: warning: non-const reference parameter 'ErrorParsing', make it const or use a pointer [google-runtime-references]
                              bool &ErrorParsing,
                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:638:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arg.size() == 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:644:8: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
  if (!PGOpt)
      ~^~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:644:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!PGOpt)
             ^
              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:651:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Value = Arg.substr(Length);
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:653:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:659:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(isGrouping(PGOpt) && "Broken getOptionPred!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:664:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Arg = Arg.substr(Length);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:668:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(PGOpt->getValueExpectedFlag() != cl::ValueRequired &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:676:12: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
  } while (PGOpt && Length != Arg.size());
           ^~~~~
           ( != nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:682:13: warning: invalid case style for function 'RequiresValue' [readability-identifier-naming]
static bool RequiresValue(const Option *O) {
            ^~~~~~~~~~~~~~
            requiresValue
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:687:13: warning: invalid case style for function 'EatsUnboundedNumberOfValues' [readability-identifier-naming]
static bool EatsUnboundedNumberOfValues(const Option *O) {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
            eatsUnboundedNumberOfValues
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:702:10: warning: invalid case style for function 'TokenizeGNUCommandLine' [readability-identifier-naming]
void cl::TokenizeGNUCommandLine(StringRef Src, StringSaver &Saver,
         ^~~~~~~~~~~~~~~~~~~~~~~
         tokenizeGnuCommandLine
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:711:40: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (MarkEOLs && Src[I] == '\n')
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:715:18: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (I == E)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:733:42: warning: statement should be inside braces [readability-braces-around-statements]
        if (Src[I] == '\\' && I + 1 != E)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:738:18: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (I == E)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:745:26: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (!Token.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:756:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Token.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:759:16: warning: statement should be inside braces [readability-braces-around-statements]
  if (MarkEOLs)
               ^
                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:780:73: warning: non-const reference parameter 'Token', make it const or use a pointer [google-runtime-references]
static size_t parseBackslash(StringRef Src, size_t I, SmallString<128> &Token) {
                                                                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:792:33: warning: statement should be inside braces [readability-braces-around-statements]
    if (BackslashCount % 2 == 0)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:801:10: warning: invalid case style for function 'TokenizeWindowsCommandLine' [readability-identifier-naming]
void cl::TokenizeWindowsCommandLine(StringRef Src, StringSaver &Saver,
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
         tokenizeWindowsCommandLine
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:817:35: warning: statement should be inside braces [readability-braces-around-statements]
        if (MarkEOLs && C == '\n')
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:844:35: warning: statement should be inside braces [readability-braces-around-statements]
        if (MarkEOLs && C == '\n')
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:874:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Token.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:877:16: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (MarkEOLs)
               ^
                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:888:56: warning: statement should be inside braces [readability-braces-around-statements]
      while (Cur != Source.end() && isWhitespace(*Cur))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:889:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ++Cur;
        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:893:50: warning: statement should be inside braces [google-readability-braces-around-statements]
      while (Cur != Source.end() && *Cur != '\n')
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:894:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ++Cur;
        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:899:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    for (const char *End = Source.end(); Cur != End; ++Cur) {
                                                     ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:901:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        if (Cur + 1 != End) {
                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:902:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          ++Cur;
          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:904:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              (*Cur == '\r' && (Cur + 1 != End) && Cur[1] == '\n')) {
                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:904:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              (*Cur == '\r' && (Cur + 1 != End) && Cur[1] == '\n')) {
                                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:905:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            Line.append(Start, Cur - 1);
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:906:30: warning: statement should be inside braces [readability-braces-around-statements]
            if (*Cur == '\r')
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:907:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              ++Cur;
              ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:908:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            Start = Cur + 1;
                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:911:31: warning: statement should be inside braces [hicpp-braces-around-statements]
      } else if (*Cur == '\n')
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:926:13: warning: invalid case style for function 'ExpandResponseFile' [readability-identifier-naming]
static bool ExpandResponseFile(StringRef FName, StringSaver &Saver,
            ^~~~~~~~~~~~~~~~~~~
            expandResponseFile
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:926:62: warning: non-const reference parameter 'Saver', make it const or use a pointer [google-runtime-references]
static bool ExpandResponseFile(StringRef FName, StringSaver &Saver,
                                                             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:928:63: warning: non-const reference parameter 'NewArgv', make it const or use a pointer [google-runtime-references]
                               SmallVectorImpl<const char *> &NewArgv,
                                                              ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:931:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      MemoryBuffer::getFile(FName);
      ^
../include/llvm/Support/MemoryBuffer.h:81:34: note: default parameter was declared here
  getFile(const Twine &Filename, int64_t FileSize = -1,
                                 ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:932:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!MemBufOrErr)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:941:52: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!convertUTF16ToUTF8String(BufRef, UTF8Buf))
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:948:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (hasUTF8ByteOrderMark(BufRef))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:949:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Str = StringRef(BufRef.data() + 3, BufRef.size() - 3);
                                  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:957:21: warning: statement should be inside braces [readability-braces-around-statements]
  if (RelativeNames)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:958:50: warning: statement should be inside braces [readability-braces-around-statements]
    for (unsigned I = 0; I < NewArgv.size(); ++I)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:959:11: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
      if (NewArgv[I]) {
          ^         ~
                     != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:962:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          StringRef FileName = Arg.drop_front();
                               ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:963:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          if (llvm::sys::path::is_relative(FileName)) {
              ^
../include/llvm/Support/Path.h:438:37: note: default parameter was declared here
bool is_relative(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:966:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
            if (llvm::sys::path::is_relative(FName)) {
                ^
../include/llvm/Support/Path.h:438:37: note: default parameter was declared here
bool is_relative(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:967:32: warning: invalid case style for variable 'curr_dir' [readability-identifier-naming]
              SmallString<128> curr_dir;
                               ^~~~~~~~~
                               CurrDir
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:971:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
            llvm::sys::path::append(
            ^
../include/llvm/Support/Path.h:179:42: note: default parameter was declared here
                                         const Twine &c = "",
                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:972:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                ResponseFile, llvm::sys::path::parent_path(FName), FileName);
                              ^
../include/llvm/Support/Path.h:286:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style = Style::native);
                                      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:983:10: warning: invalid case style for function 'ExpandResponseFiles' [readability-identifier-naming]
bool cl::ExpandResponseFiles(StringSaver &Saver, TokenizerCallback Tokenizer,
         ^~~~~~~~~~~~~~~~~~~~
         expandResponseFiles
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:997:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Arg[0] != '@') {
        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1004:25: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (RspFiles++ > 20)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1010:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (!ExpandResponseFile(Arg + 1, Saver, Tokenizer, ExpandedArgv,
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1027:71: warning: statement should be inside braces [readability-braces-around-statements]
                          /*MarkEOLs*/ false, /*RelativeNames*/ true))
                                                                      ^
                                                                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1038:10: warning: invalid case style for function 'ParseEnvironmentOptions' [readability-identifier-naming]
void cl::ParseEnvironmentOptions(const char *progName, const char *envVar,
         ^~~~~~~~~~~~~~~~~~~~~~~~
         parseEnvironmentOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1038:46: warning: invalid case style for parameter 'progName' [readability-identifier-naming]
void cl::ParseEnvironmentOptions(const char *progName, const char *envVar,
                                             ^~~~~~~~~
                                             ProgName
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1038:68: warning: invalid case style for parameter 'envVar' [readability-identifier-naming]
void cl::ParseEnvironmentOptions(const char *progName, const char *envVar,
                                                                   ^~~~~~~
                                                                   EnvVar
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1041:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(progName && "Program name not specified");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1042:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(envVar && "Environment variable name missing");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1045:31: warning: invalid case style for variable 'envValue' [readability-identifier-naming]
  llvm::Optional<std::string> envValue = sys::Process::GetEnv(StringRef(envVar));
                              ^~~~~~~~
                              EnvValue
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1046:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!envValue)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1051:33: warning: invalid case style for variable 'newArgv' [readability-identifier-naming]
  SmallVector<const char *, 20> newArgv;
                                ^~~~~~~~
                                NewArgv
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1058:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  TokenizeGNUCommandLine(*envValue, Saver, newArgv);
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:704:33: note: default parameter was declared here
                                bool MarkEOLs) {
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1059:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  int newArgc = static_cast<int>(newArgv.size());
  ^~~
  auto
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1059:7: warning: invalid case style for variable 'newArgc' [readability-identifier-naming]
  int newArgc = static_cast<int>(newArgv.size());
      ^~~~~~~
      NewArgc
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1060:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ParseCommandLineOptions(newArgc, &newArgv[0], StringRef(Overview));
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:61:30: note: default parameter was declared here
                             raw_ostream *Errs = nullptr);
                             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1063:10: warning: invalid case style for function 'ParseCommandLineOptions' [readability-identifier-naming]
bool cl::ParseCommandLineOptions(int argc, const char *const *argv,
         ^~~~~~~~~~~~~~~~~~~~~~~~
         parseCommandLineOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1063:38: warning: invalid case style for parameter 'argc' [readability-identifier-naming]
bool cl::ParseCommandLineOptions(int argc, const char *const *argv,
                                     ^~~~~
                                     Argc
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1063:63: warning: invalid case style for parameter 'argv' [readability-identifier-naming]
bool cl::ParseCommandLineOptions(int argc, const char *const *argv,
                                                              ^~~~~
                                                              Argv
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1069:25: warning: invalid case style for function 'ResetAllOptionOccurrences' [readability-identifier-naming]
void CommandLineParser::ResetAllOptionOccurrences() {
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~
                        resetAllOptionOccurrences
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1073:35: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (auto &O : SC->OptionsMap)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1078:25: warning: invalid case style for function 'ParseCommandLineOptions' [readability-identifier-naming]
bool CommandLineParser::ParseCommandLineOptions(int argc,
                        ^~~~~~~~~~~~~~~~~~~~~~~~
                        parseCommandLineOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1078:53: warning: invalid case style for parameter 'argc' [readability-identifier-naming]
bool CommandLineParser::ParseCommandLineOptions(int argc,
                                                    ^~~~~
                                                    Argc
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1079:68: warning: invalid case style for parameter 'argv' [readability-identifier-naming]
                                                const char *const *argv,
                                                                   ^~~~~
                                                                   Argv
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1082:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(hasOptions() && "No options specified!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1085:33: warning: invalid case style for variable 'newArgv' [readability-identifier-naming]
  SmallVector<const char *, 20> newArgv(argv, argv + argc);
                                ^~~~~~~~
                                NewArgv
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1085:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  SmallVector<const char *, 20> newArgv(argv, argv + argc);
                                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1088:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ExpandResponseFiles(Saver,
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:985:30: note: default parameter was declared here
                             bool MarkEOLs, bool RelativeNames) {
                             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1096:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ProgramName = sys::path::filename(StringRef(argv[0]));
                ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1096:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ProgramName = sys::path::filename(StringRef(argv[0]));
                                              ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1099:23: warning: implicit conversion 'llvm::raw_ostream *' -> bool [readability-implicit-bool-conversion]
  bool IgnoreErrors = Errs;
                      ^   ~
                           != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1100:8: warning: implicit conversion 'llvm::raw_ostream *' -> bool [readability-implicit-bool-conversion]
  if (!Errs)
      ~^~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1100:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Errs)
            ^
             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1112:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (argc >= 2 && argv[FirstArg][0] != '-') {
                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1115:51: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ChosenSubCommand = LookupSubCommand(StringRef(argv[FirstArg]));
                                                  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1116:50: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ChosenSubCommand != &*TopLevelSubCommand)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1121:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(ChosenSubCommand);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1127:7: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
  if (ConsumeAfterOpt) {
      ^              ~
                      != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1128:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(PositionalOpts.size() > 0 &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1128:12: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    assert(PositionalOpts.size() > 0 &&
           ^~~~~~~~~~~~~~~~~~~~~~~~~
           !PositionalOpts.empty()
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
../include/llvm/ADT/SmallVector.h:56:23: note: method 'SmallVectorBase'::empty() defined here
  LLVM_NODISCARD bool empty() const { return !Size; }
                      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1135:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (size_t i = 0, e = PositionalOpts.size(); i != e; ++i) {
                ^                                 ~         ~~
                I                                 I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1135:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (size_t i = 0, e = PositionalOpts.size(); i != e; ++i) {
                       ^                               ~~
                       E                               E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1137:30: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (RequiresValue(Opt))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1139:16: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      else if (ConsumeAfterOpt) {
               ^              ~
                               != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1143:29: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (!IgnoreErrors)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1144:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
            Opt->error("error - this positional option will never be matched, "
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:36: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1154:27: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (!IgnoreErrors)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1155:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          Opt->error("error - option can never match, because "
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:69: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1166:49: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
    HasUnlimitedPositionals = UnboundedFound || ConsumeAfterOpt;
                                                ^~~~~~~~~~~~~~~~
                                                ( != nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1181:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (int i = FirstArg; i < argc; ++i) {
           ^             ~           ~~
           I             I           I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1192:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (argv[i][0] != '-' || argv[i][1] == 0 || DashDashFound) {
        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1192:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (argv[i][0] != '-' || argv[i][1] == 0 || DashDashFound) {
                             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1194:11: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      if (ActivePositionalArg) {
          ^                  ~
                              != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1195:64: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ProvidePositionalOption(ActivePositionalArg, StringRef(argv[i]), i);
                                                               ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1200:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        PositionalVals.push_back(std::make_pair(StringRef(argv[i]), i));
                                                          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1205:63: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
        if (PositionalVals.size() >= NumPositionalRequired && ConsumeAfterOpt) {
                                                              ^~~~~~~~~~~~~~~~
                                                              ( != nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1206:35: warning: statement should be inside braces [google-readability-braces-around-statements]
          for (++i; i < argc; ++i)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1207:63: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            PositionalVals.push_back(std::make_pair(StringRef(argv[i]), i));
                                                              ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1214:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    } else if (argv[i][0] == '-' && argv[i][1] == '-' && argv[i][2] == 0 &&
               ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1214:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    } else if (argv[i][0] == '-' && argv[i][1] == '-' && argv[i][2] == 0 &&
                                    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1214:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    } else if (argv[i][0] == '-' && argv[i][1] == '-' && argv[i][2] == 0 &&
                                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1218:16: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
    } else if (ActivePositionalArg &&
               ^~~~~~~~~~~~~~~~~~~
               ( != nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1219:16: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
               (ActivePositionalArg->getMiscFlags() & PositionalEatsArgs)) {
               ^                                                         ~
               (                                                          != 0u)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1223:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ArgName = StringRef(argv[i] + 1);
                          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1223:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ArgName = StringRef(argv[i] + 1);
                                  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1225:52: warning: statement should be inside braces [readability-braces-around-statements]
      while (!ArgName.empty() && ArgName[0] == '-')
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1226:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        ArgName = ArgName.substr(1);
                  ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1229:12: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      if (!Handler || Handler->getFormattingFlag() != cl::Positional) {
          ~^~~~~~~
          ( == nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1230:64: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ProvidePositionalOption(ActivePositionalArg, StringRef(argv[i]), i);
                                                               ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1235:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ArgName = StringRef(argv[i] + 1);
                          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1235:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ArgName = StringRef(argv[i] + 1);
                                  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1237:52: warning: statement should be inside braces [readability-braces-around-statements]
      while (!ArgName.empty() && ArgName[0] == '-')
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1238:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        ArgName = ArgName.substr(1);
                  ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1243:12: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      if (!Handler)
          ~^~~~~~~~
           == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1243:20: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (!Handler)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1249:12: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
      if (!Handler && SinkOpts.empty())
          ~^~~~~~~
          ( == nullptr)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1249:40: warning: statement should be inside braces [readability-braces-around-statements]
      if (!Handler && SinkOpts.empty())
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1254:10: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
    if (!Handler) {
        ~^~~~~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1256:72: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        *Errs << ProgramName << ": Unknown command line argument '" << argv[i]
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1257:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              << "'.  Try: '" << argv[0] << " -help'\n";
                                 ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1259:13: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
        if (NearestHandler) {
            ^             ~
                           != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1267:9: warning: use range-based for loop instead [modernize-loop-convert]
        for (SmallVectorImpl<Option *>::iterator I = SinkOpts.begin(),
        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            (auto & SinkOpt : SinkOpts)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1269:26: warning: statement should be inside braces [google-readability-braces-around-statements]
             I != E; ++I)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1270:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          (*I)->addOccurrence(i, "", StringRef(argv[i]));
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:363:30: note: default parameter was declared here
                             bool MultiArg = false);
                             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1270:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          (*I)->addOccurrence(i, "", StringRef(argv[i]));
                                               ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1278:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if ((Handler->getMiscFlags() & PositionalEatsArgs) && !Value.empty()) {
          ^
          (                                              != 0u)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1286:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1296:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             << ": See: " << argv[0] << " -help\n";
                             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1303:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          << " positional arguments: See: " << argv[0] << " -help\n";
                                               ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1306:15: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
  } else if (!ConsumeAfterOpt) {
             ~^~~~~~~~~~~~~~~~
              == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1309:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (size_t i = 0, e = PositionalOpts.size(); i != e; ++i) {
                ^                                 ~         ~~
                I                                 I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1309:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (size_t i = 0, e = PositionalOpts.size(); i != e; ++i) {
                       ^                               ~~
                       E                               E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1341:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size());
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1343:17: warning: invalid case style for variable 'j' [readability-identifier-naming]
    for (size_t j = 1, e = PositionalOpts.size(); j != e; ++j)
                ^                                 ~         ~~
                J                                 J         J
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1343:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (size_t j = 1, e = PositionalOpts.size(); j != e; ++j)
                       ^                               ~~
                       E                               E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1343:63: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (size_t j = 1, e = PositionalOpts.size(); j != e; ++j)
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1365:52: warning: statement should be inside braces [readability-braces-around-statements]
    for (; ValNo != PositionalVals.size(); ++ValNo)
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1377:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Opt.second->error("must be specified at least once!");
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:366:36: note: default parameter was declared here
  bool error(const Twine &Message, StringRef ArgName = StringRef(), raw_ostream &Errs = llvm::errs());
                                   ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1390:44: warning: statement should be inside braces [hicpp-braces-around-statements]
             for (int i = 0; i < argc; ++i) dbgs() << argv[i] << ' ';
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1390:55: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             for (int i = 0; i < argc; ++i) dbgs() << argv[i] << ' ';
                                                      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1399:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!IgnoreErrors)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1411:8: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (!ArgName.data())
      ~^~~~~~~       ~
                      == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1411:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!ArgName.data())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1413:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (ArgName.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1415:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1422:14: warning: default arguments on virtual or override methods are prohibited [google-default-arguments]
bool Option::addOccurrence(unsigned pos, StringRef ArgName, StringRef Value,
             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1422:37: warning: invalid case style for parameter 'pos' [readability-identifier-naming]
bool Option::addOccurrence(unsigned pos, StringRef ArgName, StringRef Value,
                                    ^~~~
                                    Pos
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1424:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!MultiArg)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1429:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (NumOccurrences > 1)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1430:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return error("may only occur zero or one times!", ArgName);
             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:61: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1433:28: warning: statement should be inside braces [readability-braces-around-statements]
    if (NumOccurrences > 1)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1434:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return error("must occur exactly one time!", ArgName);
             ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:61: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1449:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (O.ValueStr.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1490:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (O.getMiscFlags() & PositionalEatsArgs)
        ^                                    ~
        (                                    ) != 0u
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1490:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (O.getMiscFlags() & PositionalEatsArgs)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1507:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (O.getMiscFlags() & PositionalEatsArgs) {
        ^                                    ~
        (                                    ) != 0u
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1525:47: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<bool>::parse(Option &O, StringRef ArgName, StringRef Arg,
                                              ^~~~~~~~
                                               /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1537:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return O.error("'" + Arg +
         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:42: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1543:56: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<boolOrDefault>::parse(Option &O, StringRef ArgName, StringRef Arg,
                                                       ^~~~~~~~
                                                        /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1555:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return O.error("'" + Arg +
         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:42: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1561:46: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<int>::parse(Option &O, StringRef ArgName, StringRef Arg,
                                             ^~~~~~~~
                                              /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1563:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arg.getAsInteger(0, Value))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1564:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return O.error("'" + Arg + "' value invalid for integer argument!");
           ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:61: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1570:51: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<unsigned>::parse(Option &O, StringRef ArgName, StringRef Arg,
                                                  ^~~~~~~~
                                                   /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1573:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arg.getAsInteger(0, Value))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1574:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return O.error("'" + Arg + "' value invalid for uint argument!");
           ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:61: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1580:13: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
bool parser<unsigned long long>::parse(Option &O, StringRef ArgName,
            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1580:61: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<unsigned long long>::parse(Option &O, StringRef ArgName,
                                                            ^~~~~~~~
                                                             /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1582:40: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
                                       unsigned long long &Value) {
                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1584:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arg.getAsInteger(0, Value))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1585:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return O.error("'" + Arg + "' value invalid for uint argument!");
           ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:42: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1591:33: warning: non-const reference parameter 'O', make it const or use a pointer [google-runtime-references]
static bool parseDouble(Option &O, StringRef Arg, double &Value) {
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1591:59: warning: non-const reference parameter 'Value', make it const or use a pointer [google-runtime-references]
static bool parseDouble(Option &O, StringRef Arg, double &Value) {
                                                          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1592:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (to_float(Arg, Value))
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1594:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return O.error("'" + Arg + "' value invalid for floating point argument!");
         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1410:61: note: default parameter was declared here
bool Option::error(const Twine &Message, StringRef ArgName, raw_ostream &Errs) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1597:49: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<double>::parse(Option &O, StringRef ArgName, StringRef Arg,
                                                ^~~~~~~~
                                                 /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1602:48: warning: parameter 'ArgName' is unused [misc-unused-parameters]
bool parser<float>::parse(Option &O, StringRef ArgName, StringRef Arg,
                                               ^~~~~~~~
                                                /*ArgName*/
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1604:10: warning: invalid case style for variable 'dVal' [readability-identifier-naming]
  double dVal;
         ^~~~~
         DVal
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1605:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (parseDouble(O, Arg, dVal))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1607:9: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  Val = (float)dVal;
        ^~~~~~~~~~~~
        static_cast<float>()
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1618:12: warning: invalid case style for variable 'e' [readability-identifier-naming]
  unsigned e = getNumOptions();
           ^
           E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1620:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != e; ++i) {
                ^      ~         ~~
                I      I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1621:30: warning: statement should be inside braces [readability-braces-around-statements]
    if (getOption(i) == Name)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1631:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i)
                  ^                           ~         ~~
                  I                           I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1631:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i)
                         ^                         ~~
                         E                         E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1631:59: warning: statement should be inside braces [readability-braces-around-statements]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1634:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else {
    ^~~~~~
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1636:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i)
                  ^                           ~         ~~
                  I                           I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1636:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i)
                         ^                         ~~
                         E                         E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1636:59: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1651:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i) {
                  ^                           ~         ~~
                  I                           I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1651:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i) {
                         ^                         ~~
                         E                         E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1657:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!O.HelpStr.empty())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1659:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i) {
                  ^                           ~         ~~
                  I                           I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1659:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = getNumOptions(); i != e; ++i) {
                         ^                         ~~
                         E                         E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1679:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != NumOpts; ++i) {
                ^      ~               ~~
                I      I               I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1680:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Value.compare(getOptionValue(i)))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1687:19: warning: invalid case style for variable 'j' [readability-identifier-naming]
    for (unsigned j = 0; j != NumOpts; ++j) {
                  ^      ~               ~~
                  J      J               J
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1688:46: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Default.compare(getOptionValue(j)))
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1721:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(bool)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1722:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(boolOrDefault)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1723:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(int)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1724:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(unsigned)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1725:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(unsigned long long)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1726:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(double)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1727:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(float)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1728:1: warning: the parameter 'D' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
PRINT_OPT_DIFF(char)
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1702:72: note: expanded from macro 'PRINT_OPT_DIFF'
  void parser<T>::printOptionDiff(const Option &O, T V, OptionValue<T> D,      \
                                                                       ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1737:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (D.hasValue())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1739:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1755:12: warning: invalid case style for function 'OptNameCompare' [readability-identifier-naming]
static int OptNameCompare(const std::pair<const char *, Option *> *LHS,
           ^~~~~~~~~~~~~~~
           optNameCompare
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1760:12: warning: invalid case style for function 'SubNameCompare' [readability-identifier-naming]
static int SubNameCompare(const std::pair<const char *, SubCommand *> *LHS,
           ^~~~~~~~~~~~~~~
           subNameCompare
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1766:43: warning: non-const reference parameter 'OptMap', make it const or use a pointer [google-runtime-references]
static void sortOpts(StringMap<Option *> &OptMap,
                                          ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1767:74: warning: non-const reference parameter 'Opts', make it const or use a pointer [google-runtime-references]
                     SmallVectorImpl<std::pair<const char *, Option *>> &Opts,
                                                                         ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1771:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (StringMap<Option *>::iterator I = OptMap.begin(), E = OptMap.end();
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & I : OptMap)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1774:58: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (I->second->getOptionHiddenFlag() == ReallyHidden)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1778:67: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I->second->getOptionHiddenFlag() == Hidden && !ShowHidden)
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1782:45: warning: statement should be inside braces [readability-braces-around-statements]
    if (!OptionSet.insert(I->second).second)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1795:73: warning: non-const reference parameter 'Subs', make it const or use a pointer [google-runtime-references]
                SmallVectorImpl<std::pair<const char *, SubCommand *>> &Subs) {
                                                                        ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1797:30: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (S->getName().empty())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1806:7: warning: class 'HelpPrinter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class HelpPrinter {
      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1809:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef SmallVector<std::pair<const char *, Option *>, 128>
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1811:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef SmallVector<std::pair<const char *, SubCommand *>, 128>
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1814:50: warning: non-const reference parameter 'Opts', make it const or use a pointer [google-runtime-references]
  virtual void printOptions(StrOptionPairVector &Opts, size_t MaxArgLen) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1815:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (size_t i = 0, e = Opts.size(); i != e; ++i)
                ^                       ~         ~~
                I                       I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1815:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (size_t i = 0, e = Opts.size(); i != e; ++i)
                       ^                     ~~
                       E                     E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1815:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (size_t i = 0, e = Opts.size(); i != e; ++i)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1819:50: warning: non-const reference parameter 'Subs', make it const or use a pointer [google-runtime-references]
  void printSubCommands(StrSubCommandPairVector &Subs, size_t MaxSubLen) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1831:29: warning: invalid case style for parameter 'showHidden' [readability-identifier-naming]
  explicit HelpPrinter(bool showHidden) : ShowHidden(showHidden) {}
                            ^~~~~~~~~~~              ~~~~~~~~~~~
                            ShowHidden               ShowHidden
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1832:11: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
  virtual ~HelpPrinter() {}
          ^              ~~
                         = default;
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1835:3: warning: cannot overload 'operator=' [fuchsia-overloaded-operator]
  void operator=(bool Value) {
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1835:3: warning: operator=() should return 'HelpPrinter&' [cppcoreguidelines-c-copy-assignment-signature]
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1836:16: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Value)
               ^
                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1856:48: warning: statement should be inside braces [readability-braces-around-statements]
    if (!GlobalParser->ProgramOverview.empty())
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1861:27: warning: statement should be inside braces [readability-braces-around-statements]
      if (Subs.size() > 2)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1874:28: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Opt->hasArgStr())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1880:9: warning: implicit conversion 'llvm::cl::Option *' -> bool [readability-implicit-bool-conversion]
    if (ConsumeAfterOpt)
        ^              ~
                        != nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1880:25: warning: statement should be inside braces [readability-braces-around-statements]
    if (ConsumeAfterOpt)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1886:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (size_t i = 0, e = Subs.size(); i != e; ++i)
                  ^                       ~         ~~
                  I                       I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1886:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
      for (size_t i = 0, e = Subs.size(); i != e; ++i)
                         ^                     ~~
                         E                     E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1886:55: warning: statement should be inside braces [readability-braces-around-statements]
      for (size_t i = 0, e = Subs.size(); i != e; ++i)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1902:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (size_t i = 0, e = Opts.size(); i != e; ++i)
                ^                       ~         ~~
                I                       I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1902:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (size_t i = 0, e = Opts.size(); i != e; ++i)
                       ^                     ~~
                       E                     E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1902:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (size_t i = 0, e = Opts.size(); i != e; ++i)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1909:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (auto I : GlobalParser->MoreHelp)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1917:40: warning: invalid case style for parameter 'showHidden' [readability-identifier-naming]
  explicit CategorizedHelpPrinter(bool showHidden) : HelpPrinter(showHidden) {}
                                       ^~~~~~~~~~~               ~~~~~~~~~~~
                                       ShowHidden                ShowHidden
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1923:14: warning: invalid case style for function 'OptionCategoryCompare' [readability-identifier-naming]
  static int OptionCategoryCompare(OptionCategory *const *A,
             ^~~~~~~~~~~~~~~~~~~~~~
             optionCategoryCompare
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1938:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (auto I = GlobalParser->RegisteredOptionCategories.begin(),
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (auto RegisteredOptionCategorie : GlobalParser->RegisteredOptionCategories)
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1945:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(SortedCategories.size() > 0 && "No option categories registered!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1945:12: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    assert(SortedCategories.size() > 0 && "No option categories registered!");
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~
           !SortedCategories.empty()
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:894:7: note: method 'vector<llvm::cl::OptionCategory *, std::allocator<llvm::cl::OptionCategory *> >'::empty() defined here
      empty() const _GLIBCXX_NOEXCEPT
      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1953:22: warning: statement should be inside braces [readability-braces-around-statements]
         I != E; ++I)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1961:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(CategorizedOptions.count(Opt->Category) > 0 &&
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1974:42: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!ShowHidden && IsEmptyCategory)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1982:50: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!(*Category)->getDescription().empty())
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1984:11: warning: statement should be inside braces [google-readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:1994:48: warning: statement should be inside braces [google-readability-braces-around-statements]
      for (const Option *Opt : CategoryOptions)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2008:44: warning: non-const reference parameter 'UncategorizedPrinter', make it const or use a pointer [google-runtime-references]
  explicit HelpPrinterWrapper(HelpPrinter &UncategorizedPrinter,
                                           ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2009:55: warning: non-const reference parameter 'CategorizedPrinter', make it const or use a pointer [google-runtime-references]
                              CategorizedHelpPrinter &CategorizedPrinter)
                                                      ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2014:3: warning: cannot overload 'operator=' [fuchsia-overloaded-operator]
  void operator=(bool Value);
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2014:3: warning: operator=() should return 'HelpPrinterWrapper&' [misc-unconventional-assign-operator]
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2034:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
static cl::OptionCategory GenericCategory("Generic Options");
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/CommandLine.h:180:18: note: default parameter was declared here
                 StringRef const Description = "")
                 ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2075:1: warning: cannot overload 'operator=' [fuchsia-overloaded-operator]
void HelpPrinterWrapper::operator=(bool Value) {
^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2075:1: warning: operator=() should return 'HelpPrinterWrapper&' [cppcoreguidelines-c-copy-assignment-signature]
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2076:14: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Value)
             ^
              {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2088:9: warning: statement should be inside braces [readability-braces-around-statements]
  } else
        ^
         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2093:10: warning: invalid case style for function 'PrintOptionValues' [readability-identifier-naming]
void cl::PrintOptionValues() { GlobalParser->printOptionValues(); }
         ^~~~~~~~~~~~~~~~~~
         printOptionValues
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2096:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!PrintOptions && !PrintAllOptions)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2104:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = Opts.size(); i != e; ++i)
              ^                       ~         ~~
              I                       I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2104:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = Opts.size(); i != e; ++i)
                     ^                     ~~
                     E                     E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2104:51: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_t i = 0, e = Opts.size(); i != e; ++i)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2107:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = Opts.size(); i != e; ++i)
              ^                       ~         ~~
              I                       I         I
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2107:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = Opts.size(); i != e; ++i)
                     ^                     ~~
                     E                     E
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2107:51: warning: statement should be inside braces [readability-braces-around-statements]
  for (size_t i = 0, e = Opts.size(); i != e; ++i)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2140:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU == "generic")
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2148:3: warning: cannot overload 'operator=' [fuchsia-overloaded-operator]
  void operator=(bool OptionWasSpecified) {
  ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2148:3: warning: operator=() should return 'VersionPrinter&' [cppcoreguidelines-c-copy-assignment-signature]
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2149:29: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!OptionWasSpecified)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2162:17: warning: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy]
      for (auto I : *ExtraVersionPrinters)
           ~~~~ ^
           const &
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2162:43: warning: statement should be inside braces [readability-braces-around-statements]
      for (auto I : *ExtraVersionPrinters)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2180:10: warning: invalid case style for function 'PrintHelpMessage' [readability-identifier-naming]
void cl::PrintHelpMessage(bool Hidden, bool Categorized) {
         ^~~~~~~~~~~~~~~~~
         printHelpMessage
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2181:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Hidden && !Categorized)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2183:35: warning: statement should be inside braces [hicpp-braces-around-statements]
  else if (!Hidden && Categorized)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2185:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (Hidden && !Categorized)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2187:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2192:10: warning: invalid case style for function 'PrintVersionMessage' [readability-identifier-naming]
void cl::PrintVersionMessage() { VersionPrinterInstance.print(); }
         ^~~~~~~~~~~~~~~~~~~~
         printVersionMessage
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2194:10: warning: invalid case style for function 'SetVersionPrinter' [readability-identifier-naming]
void cl::SetVersionPrinter(VersionPrinterTy func) { OverrideVersionPrinter = func; }
         ^~~~~~~~~~~~~~~~~~
         setVersionPrinter
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2194:45: warning: invalid case style for parameter 'func' [readability-identifier-naming]
void cl::SetVersionPrinter(VersionPrinterTy func) { OverrideVersionPrinter = func; }
                                            ^~~~~                            ~~~~~
                                            Func                             Func
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2194:78: warning: parameter 'func' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
void cl::SetVersionPrinter(VersionPrinterTy func) { OverrideVersionPrinter = func; }
                                                                             ^~~~~
                                                                             std::move()
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2196:10: warning: invalid case style for function 'AddExtraVersionPrinter' [readability-identifier-naming]
void cl::AddExtraVersionPrinter(VersionPrinterTy func) {
         ^~~~~~~~~~~~~~~~~~~~~~~
         addExtraVersionPrinter
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2196:50: warning: invalid case style for parameter 'func' [readability-identifier-naming]
void cl::AddExtraVersionPrinter(VersionPrinterTy func) {
                                                 ^~~~~
                                                 Func
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2196:50: warning: the parameter 'func' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
void cl::AddExtraVersionPrinter(VersionPrinterTy func) {
                                ~~~~~~~~~~~~~~~~ ^
                                const &
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2197:8: warning: implicit conversion 'std::vector<VersionPrinterTy> *' (aka 'vector<function<void (llvm::raw_ostream &)> > *') -> bool [readability-implicit-bool-conversion]
  if (!ExtraVersionPrinters)
      ~^~~~~~~~~~~~~~~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2197:29: warning: statement should be inside braces [readability-braces-around-statements]
  if (!ExtraVersionPrinters)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2198:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'std::vector<VersionPrinterTy> *' (aka 'vector<function<void (llvm::raw_ostream &)> > *') [cppcoreguidelines-owning-memory]
    ExtraVersionPrinters = new std::vector<VersionPrinterTy>;
    ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2206:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(is_contained(Subs, &Sub));
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2215:10: warning: invalid case style for function 'HideUnrelatedOptions' [readability-identifier-naming]
void cl::HideUnrelatedOptions(cl::OptionCategory &Category, SubCommand &Sub) {
         ^~~~~~~~~~~~~~~~~~~~~
         hideUnrelatedOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2218:48: warning: statement should be inside braces [google-readability-braces-around-statements]
        I.second->Category != &GenericCategory)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2223:10: warning: invalid case style for function 'HideUnrelatedOptions' [readability-identifier-naming]
void cl::HideUnrelatedOptions(ArrayRef<const cl::OptionCategory *> Categories,
         ^~~~~~~~~~~~~~~~~~~~~
         hideUnrelatedOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2230:48: warning: statement should be inside braces [google-readability-braces-around-statements]
        I.second->Category != &GenericCategory)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2235:10: warning: invalid case style for function 'ResetCommandLineParser' [readability-identifier-naming]
void cl::ResetCommandLineParser() { GlobalParser->reset(); }
         ^~~~~~~~~~~~~~~~~~~~~~~
         resetCommandLineParser
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2236:10: warning: invalid case style for function 'ResetAllOptionOccurrences' [readability-identifier-naming]
void cl::ResetAllOptionOccurrences() {
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
         resetAllOptionOccurrences
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2240:6: warning: invalid case style for function 'LLVMParseCommandLineOptions' [readability-identifier-naming]
void LLVMParseCommandLineOptions(int argc, const char *const *argv,
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
     llvmParseCommandLineOptions
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2240:38: warning: invalid case style for parameter 'argc' [readability-identifier-naming]
void LLVMParseCommandLineOptions(int argc, const char *const *argv,
                                     ^~~~~
                                     Argc
/home/jonas/opt/llvm/lib/Support/CommandLine.cpp:2240:63: warning: invalid case style for parameter 'argv' [readability-identifier-naming]
void LLVMParseCommandLineOptions(int argc, const char *const *argv,
                                                              ^~~~~
                                                              Argv
/home/jonas/opt/llvm/lib/Support/JamCRC.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/JamCRC.cpp:94:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    int TableIdx = (CRC ^ Byte) & 0xff;
                   ^
/home/jonas/opt/llvm/lib/Support/JamCRC.cpp:94:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    int TableIdx = (CRC ^ Byte) & 0xff;
                    ^
/home/jonas/opt/llvm/lib/Support/JamCRC.cpp:95:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    CRC = CRCTable[TableIdx] ^ (CRC >> 8);
          ^
/home/jonas/opt/llvm/lib/Support/JamCRC.cpp:95:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    CRC = CRCTable[TableIdx] ^ (CRC >> 8);
                                ^
/home/jonas/opt/llvm/lib/Support/KnownBits.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/KnownBits.cpp:29:51: warning: implicit conversion bool -> 'uint64_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
  APInt PossibleSumZero = ~LHS.Zero + ~RHS.Zero + CarryIn;
                                                  ^~~~~~~~
                                                  static_cast<uint64_t>()
/home/jonas/opt/llvm/lib/Support/KnownBits.cpp:30:46: warning: implicit conversion bool -> 'uint64_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
  APInt PossibleSumOne = LHS.One + RHS.One + CarryIn;
                                             ^~~~~~~~
                                             static_cast<uint64_t>()
/home/jonas/opt/llvm/lib/Support/KnownBits.cpp:42:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((PossibleSumZero & Known) == (PossibleSumOne & Known) &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/KnownBits.cpp:55:54: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (LHS.isNonNegative() && RHS.isNonNegative())
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/KnownBits.cpp:59:53: warning: statement should be inside braces [google-readability-braces-around-statements]
      else if (LHS.isNegative() && RHS.isNegative())
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/LEB128.cpp:25:12: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  } while (Value);
           ^    ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/LEB128.cpp:32:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  int Sign = Value >> (8 * sizeof(Value) - 1);
             ^
/home/jonas/opt/llvm/lib/Support/LEB128.cpp:36:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    unsigned Byte = Value & 0x7f;
                    ^
/home/jonas/opt/llvm/lib/Support/LEB128.cpp:38:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    IsMore = Value != Sign || ((Byte ^ Sign) & 0x40) != 0;
                               ^
/home/jonas/opt/llvm/lib/Support/LEB128.cpp:38:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    IsMore = Value != Sign || ((Byte ^ Sign) & 0x40) != 0;
                                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Locale.h:10:5: warning: function 'llvm::sys::locale::columnWidth' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
int columnWidth(StringRef s);
    ^                     ~~
                          Text
/home/jonas/opt/llvm/lib/Support/Locale.cpp:9:5: note: the definition seen here
int columnWidth(StringRef Text) {
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Locale.h:10:5: note: differing parameters are named here: ('s'), in definition: ('Text')
int columnWidth(StringRef s);
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Locale.h:11:6: warning: function 'llvm::sys::locale::isPrint' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
bool isPrint(int c);
     ^           ~~
                 UCS
/home/jonas/opt/llvm/lib/Support/Locale.cpp:13:6: note: the definition seen here
bool isPrint(int UCS) {
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Locale.h:11:6: note: differing parameters are named here: ('c'), in definition: ('UCS')
bool isPrint(int c);
     ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:13:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:16:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*P == '\n')
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:18:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (*P == '\r' && *(P + 1) == '\n')
                        ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:18:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*P == '\r' && *(P + 1) == '\n')
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:23:42: warning: non-const reference parameter 'P', make it const or use a pointer [google-runtime-references]
static bool skipIfAtLineEnd(const char *&P) {
                                         ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:25:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ++P;
    ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:28:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (*P == '\r' && *(P + 1) == '\n') {
                        ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:29:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    P += 2;
      ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:37:14: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    : Buffer(Buffer.getBufferSize() ? &Buffer : nullptr),
             ^
                                    != 0u
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:39:19: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      CurrentLine(Buffer.getBufferSize() ? Buffer.getBufferStart() : nullptr,
                  ^
                                         != 0u
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:43:7: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (Buffer.getBufferSize()) {
      ^                     ~
                             != 0u
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:44:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Buffer.getBufferEnd()[0] == '\0');
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:44:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    assert(Buffer.getBufferEnd()[0] == '\0');
                  ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:46:61: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (SkipBlanks || !isAtLineEnd(Buffer.getBufferStart()))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:52:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Buffer && "Cannot advance past the end!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:55:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Pos == Buffer->getBufferStart() || isAtLineEnd(Pos) || *Pos == '\0');
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:57:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (skipIfAtLineEnd(Pos))
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:63:33: warning: statement should be inside braces [google-readability-braces-around-statements]
    while (skipIfAtLineEnd(Pos))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:68:43: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (isAtLineEnd(Pos) && !SkipBlanks)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:70:33: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (*Pos == CommentMarker)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:72:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          ++Pos;
          ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:74:33: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!skipIfAtLineEnd(Pos))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:89:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  while (Pos[Length] != '\0' && !isAtLineEnd(&Pos[Length])) {
         ^
/home/jonas/opt/llvm/lib/Support/LineIterator.cpp:89:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  while (Pos[Length] != '\0' && !isAtLineEnd(&Pos[Length])) {
                                              ^
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:27:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(VT.getSizeInBits() != 0 && "invalid zero-sized type");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:31:17: warning: implicit conversion bool -> 'uint64_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
    IsPointer = false;
                ^~~~~~
                0u
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:32:16: warning: implicit conversion bool -> 'uint64_t' (aka 'unsigned long') [readability-implicit-bool-conversion]
    IsVector = false;
               ^~~~~~
               0u
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:38:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isVector())
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:40:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (isPointer())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:43:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(isScalar() && "unexpected type");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/LowLevelType.cpp:45:9: warning: statement should be inside braces [google-readability-braces-around-statements]
  } else
        ^
         {
/home/jonas/opt/llvm/lib/Support/MathExtras.cpp:19:10: warning: inclusion of deprecated C++ header 'math.h'; consider using 'cmath' instead [modernize-deprecated-headers]
#include <math.h>
         ^~~~~~~~
         <cmath>
/home/jonas/opt/llvm/lib/Support/MathExtras.cpp:29:15: warning: invalid case style for variable 'huge_valf' [readability-identifier-naming]
  const float huge_valf = HUGE_VALF;
              ^~~~~~~~~
              HugeValf
/home/jonas/opt/llvm/lib/Support/MathExtras.cpp:32:2: warning: namespace 'llvm' not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace llvm
/home/jonas/opt/llvm/lib/Support/MathExtras.cpp:22:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/LockFileManager.h:68:15: warning: function 'llvm::LockFileManager::processStillExecuting' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static bool processStillExecuting(StringRef Hostname, int PID);
              ^                               ~~~~~~~~~
                                              HostID
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:110:23: note: the definition seen here
bool LockFileManager::processStillExecuting(StringRef HostID, int PID) {
                      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/LockFileManager.h:68:15: note: differing parameters are named here: ('Hostname'), in definition: ('HostID')
  static bool processStillExecuting(StringRef Hostname, int PID);
              ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:44:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:56:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      MemoryBuffer::getFile(LockFileName);
      ^
../include/llvm/Support/MemoryBuffer.h:81:34: note: default parameter was declared here
  getFile(const Twine &Filename, int64_t FileSize = -1,
                                 ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:58:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::fs::remove(LockFileName);
    ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:66:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  PIDStr = PIDStr.substr(PIDStr.find_first_not_of(" "));
           ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:66:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  PIDStr = PIDStr.substr(PIDStr.find_first_not_of(" "));
                         ^
../include/llvm/ADT/StringRef.h:416:47: note: default parameter was declared here
    size_t find_first_not_of(StringRef Chars, size_t From = 0) const;
                                              ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:70:58: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (processStillExecuting(Owner.first, Owner.second))
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:75:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::fs::remove(LockFileName);
  ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:79:57: warning: non-const reference parameter 'HostID', make it const or use a pointer [google-runtime-references]
static std::error_code getHostID(SmallVectorImpl<char> &HostID) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:98:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  gethostname(HostName, 255);
              ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:99:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  StringRef HostNameRef(HostName);
                        ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:107:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:113:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getHostID(StoredHostID))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:117:69: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (StoredHostID == HostID && getsid(PID) == -1 && errno == ESRCH)
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:118:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return false;
           ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:133:7: warning: class 'RemoveUniqueLockFileOnSignal' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
class RemoveUniqueLockFileOnSignal {
      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:137:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  RemoveUniqueLockFileOnSignal(StringRef Name)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:148:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::fs::remove(Filename);
    ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:161:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    std::string S("failed to obtain absolute path for ");
                ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:171:44: warning: statement should be inside braces [readability-braces-around-statements]
  if ((Owner = readLockFile(LockFileName)))
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:178:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code EC = sys::fs::createUniqueFile(
                           ^
../include/llvm/Support/FileSystem.h:767:34: note: default parameter was declared here
                                 unsigned Mode = all_read | all_write);
                                 ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:180:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    std::string S("failed to create unique file ");
                ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:194:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    raw_fd_ostream Out(UniqueLockFileID, /*shouldClose=*/true);
                   ^
../include/llvm/Support/raw_ostream.h:422:44: note: default parameter was declared here
  raw_fd_ostream(int fd, bool shouldClose, bool unbuffered=false);
                                           ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:206:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      std::string S("failed to write to ");
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:209:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      sys::fs::remove(UniqueLockFileName);
      ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:228:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      std::string S("failed to create link ");
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:239:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      sys::fs::remove(UniqueLockFileName);
      ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:251:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if ((EC = sys::fs::remove(LockFileName))) {
              ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:252:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      std::string S("failed to remove lockfile ");
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:261:13: warning: statement should be inside braces [readability-braces-around-statements]
  if (Owner)
            ^
             {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:264:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ErrorCode)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:275:29: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!ErrCodeMsg.empty())
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:279:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return "";
         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:283:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getState() != LFS_Owned)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:287:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::fs::remove(LockFileName);
  ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:288:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::fs::remove(UniqueLockFileName);
  ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:295:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (getState() != LFS_Shared)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:301:3: warning: uninitialized record type: 'Interval' [cppcoreguidelines-pro-type-member-init]
  struct timespec Interval;
  ^                       ~
                          {}
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:322:38: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!sys::fs::exists(FileName))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:328:65: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!processStillExecuting((*Owner).first, (*Owner).second))
                                                                ^
                                                                 {
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:346:30: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
           Interval.tv_sec < (time_t)MaxSeconds
                             ^~~~~~~~~~~~~~~~~~
                             static_cast<time_t>()
/home/jonas/opt/llvm/lib/Support/LockFileManager.cpp:355:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return sys::fs::remove(LockFileName);
         ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ManagedStatic.h:45:8: warning: function 'llvm::ManagedStaticBase::RegisterManagedStatic' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void RegisterManagedStatic(void *(*creator)(), void (*deleter)(void*)) const;
       ^                             ~~~~~~~~           ~~~~~~~~
                                     Creator            Deleter
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:35:25: note: the definition seen here
void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),
                        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ManagedStatic.h:45:8: note: differing parameters are named here: ('creator', 'deleter'), in definition: ('Creator', 'Deleter')
  void RegisterManagedStatic(void *(*creator)(), void (*deleter)(void*)) const;
       ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:24:24: warning: invalid case style for variable 'mutex_init_flag' [readability-identifier-naming]
static llvm::once_flag mutex_init_flag;
                       ^~~~~~~~~~~~~~~~
                       MutexInitFlag
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:27:3: warning: assigning newly created 'gsl::owner<>' to non-owner 'sys::Mutex *' (aka 'SmartMutex<false> *') [cppcoreguidelines-owning-memory]
  ManagedStaticMutex = new sys::Mutex();
  ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:27:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ManagedStaticMutex = new sys::Mutex();
                           ^
../include/llvm/Support/Mutex.h:97:27: note: default parameter was declared here
      explicit SmartMutex(bool rec = true) :
                          ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:35:25: warning: invalid case style for function 'RegisterManagedStatic' [readability-identifier-naming]
void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),
                        ^~~~~~~~~~~~~~~~~~~~~~
                        registerManagedStatic
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:37:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Creator);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:41:10: warning: implicit conversion 'std::atomic<void *>::__pointer_type' (aka 'void *') -> bool [readability-implicit-bool-conversion]
    if (!Ptr.load(std::memory_order_relaxed)) {
        ~^~~                                ~
                                             == nullptr
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:52:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(!Ptr && !DeleterFn && !Next &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:64:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(DeleterFn && "ManagedStatic not initialized correctly!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:65:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(StaticList == this &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:80:12: warning: invalid case style for function 'llvm_shutdown' [readability-identifier-naming]
void llvm::llvm_shutdown() {
           ^~~~~~~~~~~~~~
           llvmShutdown
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:83:10: warning: implicit conversion 'const llvm::ManagedStaticBase *' -> bool [readability-implicit-bool-conversion]
  while (StaticList)
         ^         ~
                    != nullptr
/home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp:83:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (StaticList)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:29:3: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  void operator()(const Node *P) { ID.AddPointer(P); }
  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:30:3: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  void operator()(StringView Str) {
  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  typename std::enable_if<std::is_integral<T>::value ||
  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<bool>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<int>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<llvm::itanium_demangle::FunctionRefQual>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<llvm::itanium_demangle::Node::Kind>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<llvm::itanium_demangle::Qualifiers>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<llvm::itanium_demangle::ReferenceKind>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<llvm::itanium_demangle::SpecialSubKind>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:34:3: warning: cannot overload 'operator()<unsigned long>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:37:19: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
    ID.AddInteger((unsigned long long)V);
                  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:37:20: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
    ID.AddInteger((unsigned long long)V);
                   ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:39:3: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  void operator()(itanium_demangle::NodeOrString NS) {
  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:50:3: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  void operator()(itanium_demangle::NodeArray A) {
  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:52:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (const Node *N : A)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:58:42: warning: non-const reference parameter 'ID', make it const or use a pointer [google-runtime-references]
void profileCtor(llvm::FoldingSetNodeID &ID, Node::Kind K, T ...V) {
                                         ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  template<typename ...T> void operator()(T ...V) {
                          ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<StringView, StringView>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<StringView, const llvm::itanium_demangle::Node *, StringView>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<StringView, const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<StringView, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<StringView, llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<StringView>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<bool, StringView, const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<bool>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, StringView, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, StringView>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, bool, int>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *, bool>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *, llvm::itanium_demangle::NodeArray, const llvm::itanium_demangle::Node *, llvm::itanium_demangle::Qualifiers, llvm::itanium_demangle::FunctionRefQual>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, llvm::itanium_demangle::NodeArray, llvm::itanium_demangle::Qualifiers, llvm::itanium_demangle::FunctionRefQual, const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, llvm::itanium_demangle::NodeArray>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, llvm::itanium_demangle::NodeOrString>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, llvm::itanium_demangle::Qualifiers>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *, llvm::itanium_demangle::ReferenceKind>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<const llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::Node *, StringView>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::Node *, bool, bool>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::Node *, llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::Node *>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::NodeArray, StringView>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::NodeArray, llvm::itanium_demangle::Node *, llvm::itanium_demangle::NodeArray, bool, bool>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::NodeArray>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::NodeOrString>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:71:27: warning: cannot overload 'operator()<llvm::itanium_demangle::SpecialSubKind>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
  template<typename NodeT> void operator()(const NodeT *N) {
                           ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::AbiTagAttr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ArraySubscriptExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ArrayType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::BinaryExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::BoolExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::BracedExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::BracedRangeExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::CallExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::CastExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ClosureTypeName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ConditionalExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ConversionExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ConversionOperatorType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::CtorDtorName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::CtorVtableSpecialName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::DeleteExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::DotSuffix>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::DtorName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::DynamicExceptionSpec>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ElaboratedTypeSpefType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::EnableIfAttr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::EnclosingExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ExpandedSpecialSubstitution>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FloatLiteralImpl<double> >' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FloatLiteralImpl<float> >' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FloatLiteralImpl<long double> >' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FoldExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FunctionEncoding>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FunctionParam>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::FunctionType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::GlobalQualifiedName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::InitListExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::IntegerCastExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::IntegerLiteral>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::LiteralOperator>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::LocalName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::MemberExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::NameType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::NameWithTemplateArgs>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::NestedName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::NewExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::NodeArrayNode>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::NoexceptSpec>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ObjCProtoName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ParameterPack>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ParameterPackExpansion>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::PixelVectorType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::PointerToMemberType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::PointerType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::PostfixExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::PostfixQualifiedType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::PrefixExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::QualType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::QualifiedName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ReferenceType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::SizeofParamPackExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::SpecialName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::SpecialSubstitution>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::StdQualifiedName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::StructuredBindingName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::TemplateArgs>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::TemplateArgumentPack>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::ThrowExpr>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::UnnamedTypeName>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::VectorType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:78:28: warning: cannot overload 'operator()<llvm::itanium_demangle::VendorExtQualType>' [fuchsia-overloaded-operator]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:83:1: warning: cannot overload 'operator()<llvm::itanium_demangle::ForwardTemplateReference>' [fuchsia-overloaded-operator]
template<> void ProfileNode::operator()(const ForwardTemplateReference *N) {
^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:83:73: warning: parameter 'N' is unused [misc-unused-parameters]
template<> void ProfileNode::operator()(const ForwardTemplateReference *N) {
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:87:42: warning: non-const reference parameter 'ID', make it const or use a pointer [google-runtime-references]
void profileNode(llvm::FoldingSetNodeID &ID, const Node *N) {
                                         ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:91:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
class FoldingNodeAllocator {
      ^
../include/llvm/ADT/FoldingSet.h:501:23: note: default parameter was declared here
  explicit FoldingSet(unsigned Log2InitSize = 6) : Super(Log2InitSize) {}
                      ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:96:14: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      return reinterpret_cast<itanium_demangle::Node *>(this + 1);
             ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:96:62: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return reinterpret_cast<itanium_demangle::Node *>(this + 1);
                                                             ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:98:10: warning: invalid case style for function 'Profile' [readability-identifier-naming]
    void Profile(llvm::FoldingSetNodeID &ID) { profileNode(ID, getNode()); }
         ^~~~~~~~
         profile
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:98:42: warning: non-const reference parameter 'ID', make it const or use a pointer [google-runtime-references]
    void Profile(llvm::FoldingSetNodeID &ID) { profileNode(ID, getNode()); }
                                         ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:116:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
                  T(std::forward<Args>(As)...),
                    ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:121:40: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    profileCtor(ID, NodeKind<T>::Kind, As...);
                                       ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:124:73: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (NodeHeader *Existing = Nodes.FindNodeOrInsertPos(ID, InsertPos))
                                                                        ^
                                                                         {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:127:25: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!CreateNewNodes)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:134:5: warning: initializing non-owner '(anonymous namespace)::FoldingNodeAllocator::NodeHeader *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    NodeHeader *New = new (Storage) NodeHeader;
    ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:134:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
    NodeHeader *New = new (Storage) NodeHeader;
    ^~~~~~~~~~
    auto
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'T *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    T *Result = new (New->getNode()) T(std::forward<Args>(As)...);
    ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::AbiTagAttr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ArraySubscriptExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ArrayType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::BinaryExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::BoolExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::BracedExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::BracedRangeExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::CallExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ClosureTypeName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ConditionalExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ConversionExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ConversionOperatorType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::CtorDtorName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::CtorVtableSpecialName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::DeleteExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::DotSuffix *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::DtorName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::DynamicExceptionSpec *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ElaboratedTypeSpefType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::EnableIfAttr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ExpandedSpecialSubstitution *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FloatLiteralImpl<double> *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FloatLiteralImpl<float> *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FloatLiteralImpl<long double> *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FoldExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ForwardTemplateReference *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FunctionEncoding *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FunctionParam *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::FunctionType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::GlobalQualifiedName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::InitListExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::IntegerCastExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::IntegerLiteral *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::LiteralOperator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::LocalName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::NameType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::NameWithTemplateArgs *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::NestedName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::NewExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::NodeArrayNode *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::NoexceptSpec *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ObjCProtoName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ParameterPack *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ParameterPackExpansion *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::PointerToMemberType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::PointerType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::PrefixExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::QualType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::QualifiedName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ReferenceType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::SizeofParamPackExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::SpecialSubstitution *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::StructuredBindingName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::TemplateArgs *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::TemplateArgumentPack *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::ThrowExpr *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::UnnamedTypeName *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: initializing non-owner 'llvm::itanium_demangle::VendorExtQualType *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
    T *Result = new (New->getNode()) T(std::forward<Args>(As)...);
    ^
    auto
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:135:40: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    T *Result = new (New->getNode()) T(std::forward<Args>(As)...);
                                       ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:145:34: warning: invalid case style for parameter 'sz' [readability-identifier-naming]
  void *allocateNodeArray(size_t sz) {
                                 ^~~
                                 Sz
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:150:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
class CanonicalizerAllocator : public FoldingNodeAllocator {
      ^
../include/llvm/ADT/DenseMap.h:898:26: note: default parameter was declared here
  explicit SmallDenseMap(unsigned NumInitBuckets = 0) {
                         ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:167:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        assert(Remappings.find(Result.first) == Remappings.end() &&
        ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:170:39: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (Result.first == TrackedNode)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:216:10: warning: implicit conversion 'llvm::itanium_demangle::Node *' -> bool [readability-implicit-bool-conversion]
    if (!StdNamespace)
        ~^~~~~~~~~~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:216:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!StdNamespace)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:226:2: warning: anonymous namespace not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:26:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:251:59: warning: statement should be inside braces [readability-braces-around-statements]
      if (Str.size() == 2 && P->Demangler.consumeIf("St"))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:257:36: warning: statement should be inside braces [google-readability-braces-around-statements]
      else if (Str.startswith("S"))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:260:11: warning: statement should be inside braces [readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:261:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        N = P->Demangler.parseName();
            ^
../include/llvm/Demangle/ItaniumDemangle.h:2297:19: note: default parameter was declared here
  Node *parseName(NameState *State = nullptr);
                  ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:276:37: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (P->Demangler.numLeft() != 0)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:288:8: warning: implicit conversion 'llvm::itanium_demangle::Node *' -> bool [readability-implicit-bool-conversion]
  if (!FirstNode)
      ~^~~~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:288:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!FirstNode)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:293:8: warning: implicit conversion 'llvm::itanium_demangle::Node *' -> bool [readability-implicit-bool-conversion]
  if (!SecondNode)
      ~^~~~~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:293:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!SecondNode)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:297:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FirstNode == SecondNode)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:300:48: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FirstIsNew && !Alloc.trackedNodeIsUsed())
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:302:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (SecondIsNew)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:304:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:314:10: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  return reinterpret_cast<Key>(P->Demangler.parse());
         ^
/home/jonas/opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp:321:10: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  return reinterpret_cast<Key>(P->Demangler.parse());
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:435:20: warning: function 'llvm::detail::frexp' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  friend IEEEFloat frexp(const IEEEFloat &X, int &Exp, roundingMode);
                   ^                      ~~
                                          Val
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3828:11: note: the definition seen here
IEEEFloat frexp(const IEEEFloat &Val, int &Exp, IEEEFloat::roundingMode RM) {
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:435:20: note: differing parameters are named here: ('X'), in definition: ('Val')
  friend IEEEFloat frexp(const IEEEFloat &X, int &Exp, roundingMode);
                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:440:8: warning: function 'llvm::detail::IEEEFloat::makeLargest' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void makeLargest(bool Neg = false);
       ^                ~~~
                        Negative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3250:17: note: the definition seen here
void IEEEFloat::makeLargest(bool Negative) {
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:440:8: note: differing parameters are named here: ('Neg'), in definition: ('Negative')
  void makeLargest(bool Neg = false);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:441:8: warning: function 'llvm::detail::IEEEFloat::makeSmallest' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void makeSmallest(bool Neg = false);
       ^                 ~~~
                         Negative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3275:17: note: the definition seen here
void IEEEFloat::makeSmallest(bool Negative) {
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:441:8: note: differing parameters are named here: ('Neg'), in definition: ('Negative')
  void makeSmallest(bool Neg = false);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:442:8: warning: function 'llvm::detail::IEEEFloat::makeNaN' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void makeNaN(bool SNaN = false, bool Neg = false,
       ^                               ~~~
                                       Negative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:17: note: the definition seen here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:442:8: note: differing parameters are named here: ('Neg'), in definition: ('Negative')
  void makeNaN(bool SNaN = false, bool Neg = false,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:444:8: warning: function 'llvm::detail::IEEEFloat::makeInf' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void makeInf(bool Neg = false);
       ^            ~~~
                    Negative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3770:17: note: the definition seen here
void IEEEFloat::makeInf(bool Negative) {
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:444:8: note: differing parameters are named here: ('Neg'), in definition: ('Negative')
  void makeInf(bool Neg = false);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:445:8: warning: function 'llvm::detail::IEEEFloat::makeZero' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void makeZero(bool Neg = false);
       ^             ~~~
                     Negative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3777:17: note: the definition seen here
void IEEEFloat::makeZero(bool Negative) {
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:445:8: note: differing parameters are named here: ('Neg'), in definition: ('Negative')
  void makeZero(bool Neg = false);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:663:24: warning: function 'llvm::detail::scalbn' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  friend DoubleAPFloat scalbn(DoubleAPFloat X, int Exp, roundingMode);
                       ^                    ~~
                                            Arg
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4395:15: note: the definition seen here
DoubleAPFloat scalbn(DoubleAPFloat Arg, int Exp, APFloat::roundingMode RM) {
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:663:24: note: differing parameters are named here: ('X'), in definition: ('Arg')
  friend DoubleAPFloat scalbn(DoubleAPFloat X, int Exp, roundingMode);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:664:24: warning: function 'llvm::detail::frexp' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  friend DoubleAPFloat frexp(const DoubleAPFloat &X, int &Exp, roundingMode);
                       ^                          ~~
                                                  Arg
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4401:15: note: the definition seen here
DoubleAPFloat frexp(const DoubleAPFloat &Arg, int &Exp,
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:664:24: note: differing parameters are named here: ('X'), in definition: ('Arg')
  friend DoubleAPFloat frexp(const DoubleAPFloat &X, int &Exp, roundingMode);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:685:14: warning: function 'llvm::APFloat::Storage::Storage' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    explicit Storage(IEEEFloat F, const fltSemantics &S);
             ^                                        ~~
                                                      Semantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4413:19: note: the definition seen here
APFloat::Storage::Storage(IEEEFloat F, const fltSemantics &Semantics) {
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:685:14: note: differing parameters are named here: ('S'), in definition: ('Semantics')
    explicit Storage(IEEEFloat F, const fltSemantics &S);
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:1075:12: warning: function 'llvm::APFloat::convertToInteger' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  opStatus convertToInteger(APSInt &Result, roundingMode RM,
           ^                        ~~~~~~~              ~~~
                                    result               rounding_mode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4509:28: note: the definition seen here
APFloat::opStatus APFloat::convertToInteger(APSInt &result,
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:1075:12: note: differing parameters are named here: ('Result', 'RM', 'IsExact'), in definition: ('result', 'rounding_mode', 'isExact')
  opStatus convertToInteger(APSInt &Result, roundingMode RM,
           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:28:10: warning: inclusion of deprecated C++ header 'limits.h'; consider using 'climits' instead [hicpp-deprecated-headers]
#include <limits.h>
         ^~~~~~~~~~
         <climits>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:39:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:58:31: warning: invalid case style for member 'maxExponent' [readability-identifier-naming]
    APFloatBase::ExponentType maxExponent;
                              ^~~~~~~~~~~~
                              MaxExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:62:31: warning: invalid case style for member 'minExponent' [readability-identifier-naming]
    APFloatBase::ExponentType minExponent;
                              ^~~~~~~~~~~~
                              MinExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:66:18: warning: invalid case style for member 'precision' [readability-identifier-naming]
    unsigned int precision;
                 ^~~~~~~~~~
                 Precision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:69:18: warning: invalid case style for member 'sizeInBits' [readability-identifier-naming]
    unsigned int sizeInBits;
                 ^~~~~~~~~~~
                 SizeInBits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:72:29: warning: invalid case style for variable 'semIEEEhalf' [readability-identifier-naming]
  static const fltSemantics semIEEEhalf = {15, -14, 11, 16};
                            ^~~~~~~~~~~
                            SemIeeEhalf
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:73:29: warning: invalid case style for variable 'semIEEEsingle' [readability-identifier-naming]
  static const fltSemantics semIEEEsingle = {127, -126, 24, 32};
                            ^~~~~~~~~~~~~
                            SemIeeEsingle
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:74:29: warning: invalid case style for variable 'semIEEEdouble' [readability-identifier-naming]
  static const fltSemantics semIEEEdouble = {1023, -1022, 53, 64};
                            ^~~~~~~~~~~~~
                            SemIeeEdouble
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:75:29: warning: invalid case style for variable 'semIEEEquad' [readability-identifier-naming]
  static const fltSemantics semIEEEquad = {16383, -16382, 113, 128};
                            ^~~~~~~~~~~
                            SemIeeEquad
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:76:29: warning: invalid case style for variable 'semX87DoubleExtended' [readability-identifier-naming]
  static const fltSemantics semX87DoubleExtended = {16383, -16382, 64, 80};
                            ^~~~~~~~~~~~~~~~~~~~
                            SemX87DoubleExtended
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:77:29: warning: invalid case style for variable 'semBogus' [readability-identifier-naming]
  static const fltSemantics semBogus = {0, 0, 0, 0};
                            ^~~~~~~~
                            SemBogus
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:88:29: warning: invalid case style for variable 'semPPCDoubleDouble' [readability-identifier-naming]
  static const fltSemantics semPPCDoubleDouble = {-1, 0, 0, 0};
                            ^~~~~~~~~~~~~~~~~~
                            SemPpcDoubleDouble
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:114:29: warning: invalid case style for variable 'semPPCDoubleDoubleLegacy' [readability-identifier-naming]
  static const fltSemantics semPPCDoubleDoubleLegacy = {1023, -1022 + 53,
                            ^~~~~~~~~~~~~~~~~~~~~~~~
                            SemPpcDoubleDoubleLegacy
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:117:36: warning: invalid case style for function 'IEEEhalf' [readability-identifier-naming]
  const fltSemantics &APFloatBase::IEEEhalf() {
                                   ^~~~~~~~~
                                   ieeEhalf
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:120:36: warning: invalid case style for function 'IEEEsingle' [readability-identifier-naming]
  const fltSemantics &APFloatBase::IEEEsingle() {
                                   ^~~~~~~~~~~
                                   ieeEsingle
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:123:36: warning: invalid case style for function 'IEEEdouble' [readability-identifier-naming]
  const fltSemantics &APFloatBase::IEEEdouble() {
                                   ^~~~~~~~~~~
                                   ieeEdouble
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:126:36: warning: invalid case style for function 'IEEEquad' [readability-identifier-naming]
  const fltSemantics &APFloatBase::IEEEquad() {
                                   ^~~~~~~~~
                                   ieeEquad
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:132:36: warning: invalid case style for function 'Bogus' [readability-identifier-naming]
  const fltSemantics &APFloatBase::Bogus() {
                                   ^~~~~~
                                   bogus
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:135:36: warning: invalid case style for function 'PPCDoubleDouble' [readability-identifier-naming]
  const fltSemantics &APFloatBase::PPCDoubleDouble() {
                                   ^~~~~~~~~~~~~~~~
                                   ppcDoubleDouble
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:150:22: warning: invalid case style for variable 'maxExponent' [readability-identifier-naming]
  const unsigned int maxExponent = 16383;
                     ^~~~~~~~~~~
                     MaxExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:151:22: warning: invalid case style for variable 'maxPrecision' [readability-identifier-naming]
  const unsigned int maxPrecision = 113;
                     ^~~~~~~~~~~~
                     MaxPrecision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:152:22: warning: invalid case style for variable 'maxPowerOfFiveExponent' [readability-identifier-naming]
  const unsigned int maxPowerOfFiveExponent = maxExponent + maxPrecision - 1;
                     ^~~~~~~~~~~~~~~~~~~~~~
                     MaxPowerOfFiveExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:153:22: warning: initializing non-local variable with non-const expression depending on uninitialized non-local variable 'integerPartWidth' [cppcoreguidelines-interfaces-global-init]
  const unsigned int maxPowerOfFiveParts = 2 + ((maxPowerOfFiveExponent * 815) / (351 * APFloatBase::integerPartWidth));
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:153:22: warning: invalid case style for variable 'maxPowerOfFiveParts' [readability-identifier-naming]
  const unsigned int maxPowerOfFiveParts = 2 + ((maxPowerOfFiveExponent * 815) / (351 * APFloatBase::integerPartWidth));
                     ^~~~~~~~~~~~~~~~~~~
                     MaxPowerOfFiveParts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:155:68: warning: invalid case style for parameter 'semantics' [readability-identifier-naming]
  unsigned int APFloatBase::semanticsPrecision(const fltSemantics &semantics) {
                                                                   ^~~~~~~~~~
                                                                   Semantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:159:57: warning: invalid case style for parameter 'semantics' [readability-identifier-naming]
  APFloatBase::semanticsMaxExponent(const fltSemantics &semantics) {
                                                        ^~~~~~~~~~
                                                        Semantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:163:57: warning: invalid case style for parameter 'semantics' [readability-identifier-naming]
  APFloatBase::semanticsMinExponent(const fltSemantics &semantics) {
                                                        ^~~~~~~~~~
                                                        Semantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:166:69: warning: invalid case style for parameter 'semantics' [readability-identifier-naming]
  unsigned int APFloatBase::semanticsSizeInBits(const fltSemantics &semantics) {
                                                                    ^~~~~~~~~~
                                                                    Semantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:177:31: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
partCountForBits(unsigned int bits)
                              ^~~~~
                              Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:184:28: warning: invalid case style for parameter 'c' [readability-identifier-naming]
decDigitValue(unsigned int c)
                           ^~
                           C
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:195:34: warning: invalid case style for parameter 'begin' [readability-identifier-naming]
readExponent(StringRef::iterator begin, StringRef::iterator end)
                                 ^~~~~~
                                 Begin
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:195:61: warning: invalid case style for parameter 'end' [readability-identifier-naming]
readExponent(StringRef::iterator begin, StringRef::iterator end)
                                                            ^~~~
                                                            End
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:197:8: warning: invalid case style for variable 'isNegative' [readability-identifier-naming]
  bool isNegative;
       ^~~~~~~~~~~
       IsNegative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:198:16: warning: invalid case style for variable 'absExponent' [readability-identifier-naming]
  unsigned int absExponent;
               ^~~~~~~~~~~~
               AbsExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:199:22: warning: invalid case style for variable 'overlargeExponent' [readability-identifier-naming]
  const unsigned int overlargeExponent = 24000;  /* FIXME.  */
                     ^~~~~~~~~~~~~~~~~
                     OverlargeExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:200:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = begin;
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:202:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(p != end && "Exponent has no digits");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:207:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(p != end && "Exponent has no digits");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:211:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(absExponent < 10U && "Invalid character in exponent");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:214:18: warning: invalid case style for variable 'value' [readability-identifier-naming]
    unsigned int value;
                 ^~~~~~
                 Value
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:217:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(value < 10U && "Invalid character in exponent");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:228:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(p == end && "Invalid exponent in exponent");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:230:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isNegative)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:231:13: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return -(int) absExponent;
            ^~~~~~~~~~~~~~~~~~
            static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:232:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:232:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:233:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (int) absExponent;
           ^~~~~~~~~~~~~~~~~~
           static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:239:35: warning: invalid case style for parameter 'p' [readability-identifier-naming]
totalExponent(StringRef::iterator p, StringRef::iterator end,
                                  ^~
                                  P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:239:58: warning: invalid case style for parameter 'end' [readability-identifier-naming]
totalExponent(StringRef::iterator p, StringRef::iterator end,
                                                         ^~~~
                                                         End
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:240:19: warning: invalid case style for parameter 'exponentAdjustment' [readability-identifier-naming]
              int exponentAdjustment)
                  ^~~~~~~~~~~~~~~~~~~
                  ExponentAdjustment
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:242:7: warning: invalid case style for variable 'unsignedExponent' [readability-identifier-naming]
  int unsignedExponent;
      ^~~~~~~~~~~~~~~~~
      UnsignedExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:243:8: warning: invalid case style for variable 'negative' [readability-identifier-naming]
  bool negative, overflow;
       ^~~~~~~~~
       Negative
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:243:18: warning: invalid case style for variable 'overflow' [readability-identifier-naming]
  bool negative, overflow;
                 ^~~~~~~~~
                 Overflow
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:244:7: warning: invalid case style for variable 'exponent' [readability-identifier-naming]
  int exponent = 0;
      ^~~~~~~~
      Exponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:246:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(p != end && "Exponent has no digits");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:251:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(p != end && "Exponent has no digits");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:257:18: warning: invalid case style for variable 'value' [readability-identifier-naming]
    unsigned int value;
                 ^~~~~~
                 Value
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:260:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(value < 10U && "Invalid character in exponent");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:269:65: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (exponentAdjustment > 32767 || exponentAdjustment < -32768)
                                                                ^
                                                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:274:18: warning: statement should be inside braces [readability-braces-around-statements]
    if (negative)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:277:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (exponent > 32767 || exponent < -32768)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:281:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (overflow)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:288:48: warning: invalid case style for parameter 'begin' [readability-identifier-naming]
skipLeadingZeroesAndAnyDot(StringRef::iterator begin, StringRef::iterator end,
                                               ^~~~~~
                                               Begin
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:288:75: warning: invalid case style for parameter 'end' [readability-identifier-naming]
skipLeadingZeroesAndAnyDot(StringRef::iterator begin, StringRef::iterator end,
                                                                          ^~~~
                                                                          End
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:289:49: warning: invalid case style for parameter 'dot' [readability-identifier-naming]
                           StringRef::iterator *dot)
                                                ^~~~
                                                Dot
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:291:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = begin;
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:293:32: warning: statement should be inside braces [readability-braces-around-statements]
  while (p != end && *p == '0')
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:299:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(end - begin != 1 && "Significand has no digits");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:301:34: warning: statement should be inside braces [hicpp-braces-around-statements]
    while (p != end && *p == '0')
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:321:8: warning: invalid case style for class 'decimalInfo' [readability-identifier-naming]
struct decimalInfo {
       ^~~~~~~~~~~
       DecimalInfo
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:322:15: warning: invalid case style for member 'firstSigDigit' [readability-identifier-naming]
  const char *firstSigDigit;
              ^~~~~~~~~~~~~~
              FirstSigDigit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:323:15: warning: invalid case style for member 'lastSigDigit' [readability-identifier-naming]
  const char *lastSigDigit;
              ^~~~~~~~~~~~~
              LastSigDigit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:324:7: warning: invalid case style for member 'exponent' [readability-identifier-naming]
  int exponent;
      ^~~~~~~~~
      Exponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:325:7: warning: invalid case style for member 'normalizedExponent' [readability-identifier-naming]
  int normalizedExponent;
      ^~~~~~~~~~~~~~~~~~~
      NormalizedExponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:329:38: warning: invalid case style for parameter 'begin' [readability-identifier-naming]
interpretDecimal(StringRef::iterator begin, StringRef::iterator end,
                                     ^~~~~~
                                     Begin
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:329:65: warning: invalid case style for parameter 'end' [readability-identifier-naming]
interpretDecimal(StringRef::iterator begin, StringRef::iterator end,
                                                                ^~~~
                                                                End
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:332:23: warning: invalid case style for variable 'dot' [readability-identifier-naming]
  StringRef::iterator dot = end;
                      ^~~
                      Dot
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:333:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = skipLeadingZeroesAndAnyDot (begin, end, &dot);
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:341:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(dot == end && "String contains multiple dots");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:343:20: warning: statement should be inside braces [readability-braces-around-statements]
      if (p == end)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:346:34: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (decDigitValue(*p) >= 10U)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:351:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert((*p == 'e' || *p == 'E') && "Invalid character in significand");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:352:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(p != begin && "Significand has no digits");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:353:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert((dot == end || p - begin != 1) && "Significand has no digits");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:359:20: warning: statement should be inside braces [readability-braces-around-statements]
    if (dot == end)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:367:9: warning: statement should be inside braces [readability-braces-around-statements]
      do
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:368:11: warning: statement should be inside braces [google-readability-braces-around-statements]
        do
          ^
           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:375:67: warning: implicit conversion bool -> 'long' [readability-implicit-bool-conversion]
    D->exponent += static_cast<APFloat::ExponentType>((dot - p) - (dot > p));
                                                                  ^
                                                                  static_cast<long>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:378:41: warning: implicit conversion bool -> 'long' [readability-implicit-bool-conversion]
                                      - (dot > D->firstSigDigit && dot < p)));
                                        ^
                                        static_cast<long>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:388:49: warning: invalid case style for parameter 'p' [readability-identifier-naming]
trailingHexadecimalFraction(StringRef::iterator p, StringRef::iterator end,
                                                ^~
                                                P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:388:72: warning: invalid case style for parameter 'end' [readability-identifier-naming]
trailingHexadecimalFraction(StringRef::iterator p, StringRef::iterator end,
                                                                       ^~~~
                                                                       End
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:389:42: warning: invalid case style for parameter 'digitValue' [readability-identifier-naming]
                            unsigned int digitValue)
                                         ^~~~~~~~~~~
                                         DigitValue
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:391:16: warning: invalid case style for variable 'hexDigit' [readability-identifier-naming]
  unsigned int hexDigit;
               ^~~~~~~~~
               HexDigit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:395:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (digitValue > 8)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:397:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else if (digitValue < 8 && digitValue > 0)
  ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:397:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (digitValue < 8 && digitValue > 0)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:401:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (p != end && (*p == '0' || *p == '.'))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:404:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(p != end && "Invalid trailing hexadecimal fraction!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:410:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (hexDigit == -1U)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:412:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:412:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:419:63: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
lostFractionThroughTruncation(const APFloatBase::integerPart *parts,
                                                              ^~~~~~
                                                              Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:420:44: warning: invalid case style for parameter 'partCount' [readability-identifier-naming]
                              unsigned int partCount,
                                           ^~~~~~~~~~
                                           PartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:421:44: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
                              unsigned int bits)
                                           ^~~~~
                                           Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:423:16: warning: invalid case style for variable 'lsb' [readability-identifier-naming]
  unsigned int lsb;
               ^~~~
               Lsb
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:428:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (bits <= lsb)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:430:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (bits == lsb + 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:433:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      APInt::tcExtractBit(parts, bits - 1))
      ^~~~~                               ~
      (                                    != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:433:44: warning: statement should be inside braces [google-readability-braces-around-statements]
      APInt::tcExtractBit(parts, bits - 1))
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:441:38: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
shiftRight(APFloatBase::integerPart *dst, unsigned int parts, unsigned int bits)
                                     ^~~~
                                     Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:441:56: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
shiftRight(APFloatBase::integerPart *dst, unsigned int parts, unsigned int bits)
                                                       ^~~~~~
                                                       Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:441:76: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
shiftRight(APFloatBase::integerPart *dst, unsigned int parts, unsigned int bits)
                                                                           ^~~~~
                                                                           Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:443:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction;
               ^~~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:454:35: warning: invalid case style for parameter 'moreSignificant' [readability-identifier-naming]
combineLostFractions(lostFraction moreSignificant,
                                  ^~~~~~~~~~~~~~~~
                                  MoreSignificant
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:455:35: warning: invalid case style for parameter 'lessSignificant' [readability-identifier-naming]
                     lostFraction lessSignificant)
                                  ^~~~~~~~~~~~~~~~
                                  LessSignificant
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:458:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (moreSignificant == lfExactlyZero)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:460:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (moreSignificant == lfExactlyHalf)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:475:1: warning: invalid case style for function 'HUerrBound' [readability-identifier-naming]
HUerrBound(bool inexactMultiply, unsigned int HUerr1, unsigned int HUerr2)
^~~~~~~~~~~
hUerrBound
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:475:17: warning: invalid case style for parameter 'inexactMultiply' [readability-identifier-naming]
HUerrBound(bool inexactMultiply, unsigned int HUerr1, unsigned int HUerr2)
                ^~~~~~~~~~~~~~~~
                InexactMultiply
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:477:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(HUerr1 < 2 || HUerr2 < 2 || (HUerr1 + HUerr2 < 8));
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:479:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HUerr1 + HUerr2 == 0)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:480:12: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    return inexactMultiply * 2;  /* <= inexactMultiply half-ulps.  */
           ^~~~~~~~~~~~~~~
           static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:481:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:481:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:482:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    return inexactMultiply + 2 * (HUerr1 + HUerr2);
           ^~~~~~~~~~~~~~~
           static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:489:50: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
ulpsFromBoundary(const APFloatBase::integerPart *parts, unsigned int bits,
                                                 ^~~~~~
                                                 Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:489:70: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
ulpsFromBoundary(const APFloatBase::integerPart *parts, unsigned int bits,
                                                                     ^~~~~
                                                                     Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:490:23: warning: invalid case style for parameter 'isNearest' [readability-identifier-naming]
                 bool isNearest) {
                      ^~~~~~~~~~
                      IsNearest
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:491:16: warning: invalid case style for variable 'count' [readability-identifier-naming]
  unsigned int count, partBits;
               ^~~~~~
               Count
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:491:23: warning: invalid case style for variable 'partBits' [readability-identifier-naming]
  unsigned int count, partBits;
                      ^~~~~~~~~
                      PartBits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:492:28: warning: invalid case style for variable 'part' [readability-identifier-naming]
  APFloatBase::integerPart part, boundary;
                           ^~~~~
                           Part
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:492:34: warning: invalid case style for variable 'boundary' [readability-identifier-naming]
  APFloatBase::integerPart part, boundary;
                                 ^~~~~~~~~
                                 Boundary
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:494:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(bits != 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:500:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  part = parts[count] & (~(APFloatBase::integerPart) 0 >> (APFloatBase::integerPartWidth - partBits));
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:500:27: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  part = parts[count] & (~(APFloatBase::integerPart) 0 >> (APFloatBase::integerPartWidth - partBits));
                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
                          static_cast<APFloatBase::integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:502:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isNearest)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:503:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    boundary = (APFloatBase::integerPart) 1 << (partBits - 1);
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
               static_cast<APFloatBase::integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:504:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:508:44: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (part - boundary <= boundary - part)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:510:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:510:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:515:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    while (--count)
           ^      ~
                   != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:515:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    while (--count)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:516:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (parts[count])
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:516:11: warning: implicit conversion 'APFloatBase::integerPart' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      if (parts[count])
          ^           ~
                       != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:516:24: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (parts[count])
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:517:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        return ~(APFloatBase::integerPart) 0; /* A lot.  */
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                static_cast<APFloatBase::integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:519:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return parts[0];
           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:520:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (part == boundary - 1) {
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:521:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    while (--count)
           ^      ~
                   != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:521:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    while (--count)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:522:11: warning: implicit conversion 'APFloatBase::integerPart' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      if (~parts[count])
          ^            ~
          (            ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:522:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (~parts[count])
           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:522:25: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (~parts[count])
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:523:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        return ~(APFloatBase::integerPart) 0; /* A lot.  */
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                static_cast<APFloatBase::integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:525:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return -parts[0];
            ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:528:11: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return ~(APFloatBase::integerPart) 0; /* A lot.  */
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          static_cast<APFloatBase::integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:534:36: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
powerOf5(APFloatBase::integerPart *dst, unsigned int power) {
                                   ^~~~
                                   Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:534:54: warning: invalid case style for parameter 'power' [readability-identifier-naming]
powerOf5(APFloatBase::integerPart *dst, unsigned int power) {
                                                     ^~~~~~
                                                     Power
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:535:41: warning: invalid case style for variable 'firstEightPowers' [readability-identifier-naming]
  static const APFloatBase::integerPart firstEightPowers[] = { 1, 5, 25, 125, 625, 3125, 15625, 78125 };
                                        ^~~~~~~~~~~~~~~~~
                                        FirstEightPowers
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:536:28: warning: invalid case style for variable 'pow5s' [readability-identifier-naming]
  APFloatBase::integerPart pow5s[maxPowerOfFiveParts * 2 + 5];
                           ^~~~~~
                           Pow5s
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:539:16: warning: invalid case style for variable 'partsCount' [readability-identifier-naming]
  unsigned int partsCount[16] = { 1 };
               ^~~~~~~~~~~
               PartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:540:28: warning: invalid case style for variable 'scratch' [readability-identifier-naming]
  APFloatBase::integerPart scratch[maxPowerOfFiveParts], *p1, *p2, *pow5;
                           ^~~~~~~~
                           Scratch
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:540:59: warning: invalid case style for variable 'p1' [readability-identifier-naming]
  APFloatBase::integerPart scratch[maxPowerOfFiveParts], *p1, *p2, *pow5;
                                                          ^~~
                                                          P1
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:540:64: warning: invalid case style for variable 'p2' [readability-identifier-naming]
  APFloatBase::integerPart scratch[maxPowerOfFiveParts], *p1, *p2, *pow5;
                                                               ^~~
                                                               P2
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:540:69: warning: invalid case style for variable 'pow5' [readability-identifier-naming]
  APFloatBase::integerPart scratch[maxPowerOfFiveParts], *p1, *p2, *pow5;
                                                                    ^~~~~
                                                                    Pow5
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:541:16: warning: invalid case style for variable 'result' [readability-identifier-naming]
  unsigned int result;
               ^~~~~~~
               Result
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:542:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(power <= maxExponent);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:545:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  p2 = scratch;
       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:547:9: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  *p1 = firstEightPowers[power & 7];
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:547:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  *p1 = firstEightPowers[power & 7];
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:551:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  pow5 = pow5s;
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:553:21: warning: invalid case style for variable 'n' [readability-identifier-naming]
  for (unsigned int n = 0; power; power >>= 1, n++) {
                    ^                          ~~~
                    N                          N
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:553:28: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  for (unsigned int n = 0; power; power >>= 1, n++) {
                           ^    ~
                                 != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:554:18: warning: invalid case style for variable 'pc' [readability-identifier-naming]
    unsigned int pc;
                 ^~~
                 Pc
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:556:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    pc = partsCount[n];
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:560:12: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      pc = partsCount[n - 1];
           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:561:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      APInt::tcFullMultiply(pow5, pow5 - pc, pow5 - pc, pc, pc);
                                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:561:51: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      APInt::tcFullMultiply(pow5, pow5 - pc, pow5 - pc, pc, pc);
                                                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:563:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (pow5[pc - 1] == 0)
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:563:29: warning: statement should be inside braces [readability-braces-around-statements]
      if (pow5[pc - 1] == 0)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:565:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      partsCount[n] = pc;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:568:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (power & 1) {
        ^~~~~    ~
        (        ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:568:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:569:33: warning: invalid case style for variable 'tmp' [readability-identifier-naming]
      APFloatBase::integerPart *tmp;
                                ^~~~
                                Tmp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:573:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (p2[result - 1] == 0)
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:573:31: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (p2[result - 1] == 0)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:583:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    pow5 += pc;
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:586:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (p1 != dst)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:594:19: warning: invalid case style for variable 'hexDigitsLower' [readability-identifier-naming]
static const char hexDigitsLower[] = "0123456789abcdef0";
                  ^~~~~~~~~~~~~~~
                  HexDigitsLower
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:595:19: warning: invalid case style for variable 'hexDigitsUpper' [readability-identifier-naming]
static const char hexDigitsUpper[] = "0123456789ABCDEF0";
                  ^~~~~~~~~~~~~~~
                  HexDigitsUpper
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:596:19: warning: invalid case style for variable 'infinityL' [readability-identifier-naming]
static const char infinityL[] = "infinity";
                  ^~~~~~~~~~
                  InfinityL
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:597:19: warning: invalid case style for variable 'infinityU' [readability-identifier-naming]
static const char infinityU[] = "INFINITY";
                  ^~~~~~~~~~
                  InfinityU
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:605:18: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
partAsHex (char *dst, APFloatBase::integerPart part, unsigned int count,
                 ^~~~
                 Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:605:48: warning: invalid case style for parameter 'part' [readability-identifier-naming]
partAsHex (char *dst, APFloatBase::integerPart part, unsigned int count,
                                               ^~~~~
                                               Part
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:605:67: warning: invalid case style for parameter 'count' [readability-identifier-naming]
partAsHex (char *dst, APFloatBase::integerPart part, unsigned int count,
                                                                  ^~~~~~
                                                                  Count
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:606:24: warning: invalid case style for parameter 'hexDigitChars' [readability-identifier-naming]
           const char *hexDigitChars)
                       ^~~~~~~~~~~~~~
                       HexDigitChars
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:608:16: warning: invalid case style for variable 'result' [readability-identifier-naming]
  unsigned int result = count;
               ^~~~~~
               Result
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:610:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(count != 0 && count <= APFloatBase::integerPartWidth / 4);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:613:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (count--) {
         ^~~~~  ~
         (      ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:614:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[count] = hexDigitChars[part & 0xf];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:614:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst[count] = hexDigitChars[part & 0xf];
                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:614:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    dst[count] = hexDigitChars[part & 0xf];
                               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:623:29: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
writeUnsignedDecimal (char *dst, unsigned int n)
                            ^~~~
                            Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:623:47: warning: invalid case style for parameter 'n' [readability-identifier-naming]
writeUnsignedDecimal (char *dst, unsigned int n)
                                              ^~
                                              N
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:625:8: warning: invalid case style for variable 'buff' [readability-identifier-naming]
  char buff[40], *p;
       ^~~~~
       Buff
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:625:19: warning: invalid case style for variable 'p' [readability-identifier-naming]
  char buff[40], *p;
                  ^~
                  P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:627:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  p = buff;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:628:5: warning: statement should be inside braces [google-readability-braces-around-statements]
  do
    ^
     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:629:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *p++ = '0' + n % 10;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:630:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (n /= 10);
         ^      ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:632:5: warning: statement should be inside braces [hicpp-braces-around-statements]
  do
    ^
     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:633:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = *--p;
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:633:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = *--p;
              ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:634:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  while (p != buff);
              ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:641:27: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
writeSignedDecimal (char *dst, int value)
                          ^~~~
                          Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:641:36: warning: invalid case style for parameter 'value' [readability-identifier-naming]
writeSignedDecimal (char *dst, int value)
                                   ^~~~~~
                                   Value
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:644:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = '-';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:645:38: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    dst = writeUnsignedDecimal(dst, -(unsigned) value);
                                     ^~~~~~~~~~~~~~~~~
                                     static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:646:9: warning: statement should be inside braces [hicpp-braces-around-statements]
  } else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:654:48: warning: invalid case style for parameter 'ourSemantics' [readability-identifier-naming]
void IEEEFloat::initialize(const fltSemantics *ourSemantics) {
                                               ^~~~~~~~~~~~~
                                               OurSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:655:16: warning: invalid case style for variable 'count' [readability-identifier-naming]
  unsigned int count;
               ^~~~~~
               Count
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:659:17: warning: statement should be inside braces [readability-braces-around-statements]
  if (count > 1)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:660:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') [cppcoreguidelines-owning-memory]
    significand.parts = new integerPart[count];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:660:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    significand.parts = new integerPart[count];
                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:664:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (needsCleanup())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:665:27: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    delete [] significand.parts;
                          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:668:41: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
void IEEEFloat::assign(const IEEEFloat &rhs) {
                                        ^~~~
                                        Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:669:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:674:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isFiniteNonZero() || category == fcNaN)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:678:50: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
void IEEEFloat::copySignificand(const IEEEFloat &rhs) {
                                                 ^~~~
                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:679:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(isFiniteNonZero() || category == fcNaN);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:680:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(rhs.partCount() >= partCount());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:64: warning: invalid case style for parameter 'fill' [readability-identifier-naming]
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                                                               ^~~~~
                                                               Fill
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:691:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = Negative;
         ^~~~~~~~~
         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:693:16: warning: invalid case style for variable 'significand' [readability-identifier-naming]
  integerPart *significand = significandParts();
               ^~~~~~~~~~~
               Significand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:694:12: warning: invalid case style for variable 'numParts' [readability-identifier-naming]
  unsigned numParts = partCount();
           ^~~~~~~~
           NumParts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:697:8: warning: implicit conversion 'const llvm::APInt *' -> bool [readability-implicit-bool-conversion]
  if (!fill || fill->getNumWords() < numParts)
      ~^~~~
      ( == nullptr)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:697:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!fill || fill->getNumWords() < numParts)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:699:7: warning: implicit conversion 'const llvm::APInt *' -> bool [readability-implicit-bool-conversion]
  if (fill) {
      ^   ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:704:14: warning: invalid case style for variable 'bitsToPreserve' [readability-identifier-naming]
    unsigned bitsToPreserve = semantics->precision - 1;
             ^~~~~~~~~~~~~~
             BitsToPreserve
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:705:14: warning: invalid case style for variable 'part' [readability-identifier-naming]
    unsigned part = bitsToPreserve / 64;
             ^~~~
             Part
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:707:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significand[part] &= ((1ULL << bitsToPreserve) - 1);
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:708:43: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (part++; part != numParts; ++part)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:709:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      significand[part] = 0;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:721:48: warning: statement should be inside braces [readability-braces-around-statements]
    if (APInt::tcIsZero(significand, numParts))
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:731:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (semantics == &semX87DoubleExtended)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:735:50: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat &IEEEFloat::operator=(const IEEEFloat &rhs) {
                                                 ^~~~
                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:747:23: warning: move assignment operators should be marked noexcept [hicpp-noexcept-move]
IEEEFloat &IEEEFloat::operator=(IEEEFloat &&rhs) {
                      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:747:45: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat &IEEEFloat::operator=(IEEEFloat &&rhs) {
                                            ^~~~
                                            Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:779:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < PartCount - 1; i++)
                ^      ~                  ~~~
                I      I                  I
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:779:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0; i < PartCount - 1; i++)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:780:9: warning: implicit conversion 'llvm::APFloatBase::integerPart' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (~Parts[i])
        ^        ~
        (        ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:780:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (~Parts[i])
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:780:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (~Parts[i])
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:786:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NumHighBits <= integerPartWidth && "Can not have more high bits to "
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:790:7: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
  if (~(Parts[PartCount - 1] | HighBitFill))
      ^                                    ~
      (                                    ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:790:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (~(Parts[PartCount - 1] | HighBitFill))
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:790:45: warning: statement should be inside braces [readability-braces-around-statements]
  if (~(Parts[PartCount - 1] | HighBitFill))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:791:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return false;
~~~~~~~~~~~^~~~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:802:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < PartCount - 1; i++)
                ^      ~                  ~~~
                I      I                  I
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:802:47: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (unsigned i = 0; i < PartCount - 1; i++)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:803:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Parts[i])
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:803:9: warning: implicit conversion 'llvm::APFloatBase::integerPart' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (Parts[i])
        ^       ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:803:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Parts[i])
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:808:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NumHighBits <= integerPartWidth && "Can not have more high bits to "
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:812:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (Parts[PartCount - 1] & HighBitMask)
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:812:7: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
  if (Parts[PartCount - 1] & HighBitMask)
      ^~~~~                             ~
      (                                 ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:812:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Parts[PartCount - 1] & HighBitMask)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:813:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return false;
~~~~~~~~~~~^~~~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:827:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!isFinite()) return false;
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:828:13: warning: invalid case style for variable 'truncated' [readability-identifier-naming]
  IEEEFloat truncated = *this;
            ^~~~~~~~~
            Truncated
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:833:49: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
bool IEEEFloat::bitwiseIsEqual(const IEEEFloat &rhs) const {
                                                ^~~~
                                                Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:834:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (this == &rhs)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:838:24: warning: statement should be inside braces [google-readability-braces-around-statements]
      sign != rhs.sign)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:840:48: warning: statement should be inside braces [readability-braces-around-statements]
  if (category==fcZero || category==fcInfinity)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:843:53: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (isFiniteNonZero() && exponent != rhs.exponent)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:846:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return std::equal(significandParts(), significandParts() + partCount(),
                                                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:850:1: warning: constructor does not initialize these fields: semantics, significand [cppcoreguidelines-pro-type-member-init]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, integerPart value) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:850:42: warning: invalid case style for parameter 'ourSemantics' [readability-identifier-naming]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, integerPart value) {
                                         ^~~~~~~~~~~~~
                                         OurSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:850:68: warning: invalid case style for parameter 'value' [readability-identifier-naming]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, integerPart value) {
                                                                   ^~~~~~
                                                                   Value
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:856:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  significandParts()[0] = value;
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:860:1: warning: constructor does not initialize these fields: semantics, significand, exponent [cppcoreguidelines-pro-type-member-init]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:860:42: warning: invalid case style for parameter 'ourSemantics' [readability-identifier-naming]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics) {
                                         ^~~~~~~~~~~~~
                                         OurSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:863:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = false;
         ^~~~~~
         0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:868:42: warning: invalid case style for parameter 'ourSemantics' [readability-identifier-naming]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, uninitializedTag tag)
                                         ^~~~~~~~~~~~~
                                         OurSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:868:73: warning: invalid case style for parameter 'tag' [readability-identifier-naming]
IEEEFloat::IEEEFloat(const fltSemantics &ourSemantics, uninitializedTag tag)
                                                                        ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:868:73: warning: parameter 'tag' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:871:1: warning: constructor does not initialize these fields: semantics, significand, exponent, category, sign [hicpp-member-init]
IEEEFloat::IEEEFloat(const IEEEFloat &rhs) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:871:39: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::IEEEFloat(const IEEEFloat &rhs) {
                                      ^~~~
                                      Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:876:1: warning: constructor does not initialize these fields: significand, exponent, category, sign [hicpp-member-init]
IEEEFloat::IEEEFloat(IEEEFloat &&rhs) : semantics(&semBogus) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:876:12: warning: move constructors should be marked noexcept [hicpp-noexcept-move]
IEEEFloat::IEEEFloat(IEEEFloat &&rhs) : semantics(&semBogus) {
           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:876:34: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::IEEEFloat(IEEEFloat &&rhs) : semantics(&semBogus) {
                                 ^~~~
                                 Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:887:10: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
  return const_cast<IEEEFloat *>(this)->significandParts();
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:891:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (partCount() > 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:892:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return significand.parts;
                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:893:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:893:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:894:25: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return &significand.part;
                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:903:15: warning: invalid case style for variable 'carry' [readability-identifier-naming]
  integerPart carry;
              ^~~~~~
              Carry
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:908:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(carry == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:913:67: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::integerPart IEEEFloat::addSignificand(const IEEEFloat &rhs) {
                                                                  ^~~~
                                                                  Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:914:16: warning: invalid case style for variable 'parts' [readability-identifier-naming]
  integerPart *parts;
               ^~~~~~
               Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:918:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:919:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(exponent == rhs.exponent);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:926:72: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::integerPart IEEEFloat::subtractSignificand(const IEEEFloat &rhs,
                                                                       ^~~~
                                                                       Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:927:67: warning: invalid case style for parameter 'borrow' [readability-identifier-naming]
                                                      integerPart borrow) {
                                                                  ^~~~~~~
                                                                  Borrow
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:928:16: warning: invalid case style for variable 'parts' [readability-identifier-naming]
  integerPart *parts;
               ^~~~~~
               Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:932:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:933:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(exponent == rhs.exponent);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:942:62: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
lostFraction IEEEFloat::multiplySignificand(const IEEEFloat &rhs,
                                                             ^~~~
                                                             Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:943:62: warning: invalid case style for parameter 'addend' [readability-identifier-naming]
                                            const IEEEFloat *addend) {
                                                             ^~~~~~~
                                                             Addend
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:944:16: warning: invalid case style for variable 'omsb' [readability-identifier-naming]
  unsigned int omsb;        // One, not zero, based MSB.
               ^~~~~
               Omsb
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:945:16: warning: invalid case style for variable 'partsCount' [readability-identifier-naming]
  unsigned int partsCount, newPartsCount, precision;
               ^~~~~~~~~~~
               PartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:945:28: warning: invalid case style for variable 'newPartsCount' [readability-identifier-naming]
  unsigned int partsCount, newPartsCount, precision;
                           ^~~~~~~~~~~~~~
                           NewPartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:945:43: warning: invalid case style for variable 'precision' [readability-identifier-naming]
  unsigned int partsCount, newPartsCount, precision;
                                          ^~~~~~~~~~
                                          Precision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:946:16: warning: invalid case style for variable 'lhsSignificand' [readability-identifier-naming]
  integerPart *lhsSignificand;
               ^~~~~~~~~~~~~~~
               LhsSignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:947:15: warning: invalid case style for variable 'scratch' [readability-identifier-naming]
  integerPart scratch[4];
              ^~~~~~~~
              Scratch
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:948:16: warning: invalid case style for variable 'fullSignificand' [readability-identifier-naming]
  integerPart *fullSignificand;
               ^~~~~~~~~~~~~~~~
               FullSignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:949:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction;
               ^~~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:950:8: warning: invalid case style for variable 'ignored' [readability-identifier-naming]
  bool ignored;
       ^~~~~~~~
       Ignored
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:952:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:960:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (newPartsCount > 4)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:961:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') [cppcoreguidelines-owning-memory]
    fullSignificand = new integerPart[newPartsCount];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:962:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:963:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    fullSignificand = scratch;
                      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:987:7: warning: implicit conversion 'const llvm::detail::IEEEFloat *' -> bool [readability-implicit-bool-conversion]
  if (addend && addend->isNonZero()) {
      ^~~~~~
      ( != nullptr)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:991:17: warning: invalid case style for variable 'savedSignificand' [readability-identifier-naming]
    Significand savedSignificand = significand;
                ^~~~~~~~~~~~~~~~
                SavedSignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:992:25: warning: invalid case style for variable 'savedSemantics' [readability-identifier-naming]
    const fltSemantics *savedSemantics = semantics;
                        ^~~~~~~~~~~~~~
                        SavedSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:993:5: warning: uninitialized record type: 'extendedSemantics' [cppcoreguidelines-pro-type-member-init]
    fltSemantics extendedSemantics;
    ^                             ~
                                  {}
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:993:18: warning: invalid case style for variable 'extendedSemantics' [readability-identifier-naming]
    fltSemantics extendedSemantics;
                 ^~~~~~~~~~~~~~~~~~
                 ExtendedSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:994:14: warning: invalid case style for variable 'status' [readability-identifier-naming]
    opStatus status;
             ^~~~~~~
             Status
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:995:18: warning: invalid case style for variable 'extendedPrecision' [readability-identifier-naming]
    unsigned int extendedPrecision;
                 ^~~~~~~~~~~~~~~~~~
                 ExtendedPrecision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1000:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(extendedPrecision > omsb);
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1010:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (newPartsCount == 1)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1011:19: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      significand.part = fullSignificand[0];
                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1011:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      significand.part = fullSignificand[0];
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1012:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1013:19: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      significand.parts = fullSignificand;
                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1016:15: warning: invalid case style for variable 'extendedAddend' [readability-identifier-naming]
    IEEEFloat extendedAddend(*addend);
              ^~~~~~~~~~~~~~~
              ExtendedAddend
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1018:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(status == opOK);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1025:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(lost_fraction == lfExactlyZero &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1031:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (newPartsCount == 1)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1032:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      fullSignificand[0] = significand.part;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1032:40: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      fullSignificand[0] = significand.part;
                                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1053:18: warning: invalid case style for variable 'bits' [readability-identifier-naming]
    unsigned int bits, significantParts;
                 ^~~~~
                 Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1053:24: warning: invalid case style for variable 'significantParts' [readability-identifier-naming]
    unsigned int bits, significantParts;
                       ^~~~~~~~~~~~~~~~~
                       SignificantParts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1054:18: warning: invalid case style for variable 'lf' [readability-identifier-naming]
    lostFraction lf;
                 ^~~
                 Lf
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1065:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (newPartsCount > 4)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1066:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] fullSignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:948:3: note: variable declared here
  integerPart *fullSignificand;
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1072:60: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
lostFraction IEEEFloat::divideSignificand(const IEEEFloat &rhs) {
                                                           ^~~~
                                                           Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1073:16: warning: invalid case style for variable 'bit' [readability-identifier-naming]
  unsigned int bit, i, partsCount;
               ^~~~
               Bit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1073:21: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned int bit, i, partsCount;
                    ^~
                    I
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1073:24: warning: invalid case style for variable 'partsCount' [readability-identifier-naming]
  unsigned int bit, i, partsCount;
                       ^~~~~~~~~~~
                       PartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1074:22: warning: invalid case style for variable 'rhsSignificand' [readability-identifier-naming]
  const integerPart *rhsSignificand;
                     ^~~~~~~~~~~~~~~
                     RhsSignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1075:16: warning: invalid case style for variable 'lhsSignificand' [readability-identifier-naming]
  integerPart *lhsSignificand, *dividend, *divisor;
               ^~~~~~~~~~~~~~~
               LhsSignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1075:33: warning: invalid case style for variable 'dividend' [readability-identifier-naming]
  integerPart *lhsSignificand, *dividend, *divisor;
                                ^~~~~~~~~
                                Dividend
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1075:44: warning: invalid case style for variable 'divisor' [readability-identifier-naming]
  integerPart *lhsSignificand, *dividend, *divisor;
                                           ^~~~~~~~
                                           Divisor
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1076:15: warning: invalid case style for variable 'scratch' [readability-identifier-naming]
  integerPart scratch[4];
              ^~~~~~~~
              Scratch
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1077:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction;
               ^~~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1079:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1085:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (partsCount > 2)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1086:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') [cppcoreguidelines-owning-memory]
    dividend = new integerPart[partsCount * 2];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1087:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1088:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    dividend = scratch;
               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1090:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  divisor = dividend + partsCount;
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1094:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dividend[i] = lhsSignificand[i];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1094:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dividend[i] = lhsSignificand[i];
                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1095:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    divisor[i] = rhsSignificand[i];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1095:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    divisor[i] = rhsSignificand[i];
                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1096:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    lhsSignificand[i] = 0;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1101:16: warning: invalid case style for variable 'precision' [readability-identifier-naming]
  unsigned int precision = semantics->precision;
               ^~~~~~~~~
               Precision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1105:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (bit) {
      ^  ~
          != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1112:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (bit) {
      ^  ~
          != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1123:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(APInt::tcCompare(dividend, divisor, partsCount) >= 0);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1127:25: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  for (bit = precision; bit; bit -= 1) {
                        ^  ~
                            != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1137:7: warning: invalid case style for variable 'cmp' [readability-identifier-naming]
  int cmp = APInt::tcCompare(dividend, divisor, partsCount);
      ^~~
      Cmp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1139:15: warning: statement should be inside braces [readability-braces-around-statements]
  if (cmp > 0)
              ^
               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1141:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (cmp == 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1143:50: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (APInt::tcIsZero(dividend, partsCount))
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1145:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1148:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (partsCount > 2)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1149:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] dividend;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1075:3: note: variable declared here
  integerPart *lhsSignificand, *dividend, *divisor;
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1163:60: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
lostFraction IEEEFloat::shiftSignificandRight(unsigned int bits) {
                                                           ^~~~~
                                                           Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1165:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((ExponentType) (exponent + bits) >= exponent);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1173:51: warning: invalid case style for parameter 'bits' [readability-identifier-naming]
void IEEEFloat::shiftSignificandLeft(unsigned int bits) {
                                                  ^~~~~
                                                  Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1174:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(bits < semantics->precision);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1176:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (bits) {
      ^   ~
           != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1177:18: warning: invalid case style for variable 'partsCount' [readability-identifier-naming]
    unsigned int partsCount = partCount();
                 ^~~~~~~~~~
                 PartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1182:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(!APInt::tcIsZero(significandParts(), partsCount));
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1187:50: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::compareAbsoluteValue(const IEEEFloat &rhs) const {
                                                 ^~~~
                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1188:7: warning: invalid case style for variable 'compare' [readability-identifier-naming]
  int compare;
      ^~~~~~~~
      Compare
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1190:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1191:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(isFiniteNonZero());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1192:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(rhs.isFiniteNonZero());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1198:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (compare == 0)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1202:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (compare > 0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1204:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else if (compare < 0)
  ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1204:24: warning: statement should be inside braces [readability-braces-around-statements]
  else if (compare < 0)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1206:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1212:60: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::handleOverflow(roundingMode rounding_mode) {
                                                           ^~~~~~~~~~~~~~
                                                           RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1216:46: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      (rounding_mode == rmTowardPositive && !sign) ||
                                            ~^~~~~
                                            ( == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1217:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      (rounding_mode == rmTowardNegative && sign)) {
                                            ^~~~~
                                            ( != 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1219:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (opStatus) (opOverflow | opInexact);
           ^~~~~~~~~~~~
           static_cast<opStatus>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1236:48: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
bool IEEEFloat::roundAwayFromZero(roundingMode rounding_mode,
                                               ^~~~~~~~~~~~~~
                                               RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1237:48: warning: invalid case style for parameter 'lost_fraction' [readability-identifier-naming]
                                  lostFraction lost_fraction,
                                               ^~~~~~~~~~~~~~
                                               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1238:48: warning: invalid case style for parameter 'bit' [readability-identifier-naming]
                                  unsigned int bit) const {
                                               ^~~~
                                               Bit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1240:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(isFiniteNonZero() || category == fcZero);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1243:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(lost_fraction != lfExactlyZero);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1250:41: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (lost_fraction == lfMoreThanHalf)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1254:62: warning: statement should be inside braces [readability-braces-around-statements]
    if (lost_fraction == lfExactlyHalf && category != fcZero)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1255:14: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      return APInt::tcExtractBit(significandParts(), bit);
             ^                                           ~
                                                          != 0
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1263:13: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    return !sign;
           ~^~~~~
            == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1266:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    return sign;
           ^   ~
                != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1271:55: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::normalize(roundingMode rounding_mode,
                                                      ^~~~~~~~~~~~~~
                                                      RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1272:55: warning: invalid case style for parameter 'lost_fraction' [readability-identifier-naming]
                                         lostFraction lost_fraction) {
                                                      ^~~~~~~~~~~~~~
                                                      LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1273:16: warning: invalid case style for variable 'omsb' [readability-identifier-naming]
  unsigned int omsb;                /* One, not zero, based MSB.  */
               ^~~~~
               Omsb
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1274:7: warning: invalid case style for variable 'exponentChange' [readability-identifier-naming]
  int exponentChange;
      ^~~~~~~~~~~~~~~
      ExponentChange
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1276:26: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!isFiniteNonZero())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1282:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (omsb) {
      ^   ~
           != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1290:60: warning: statement should be inside braces [readability-braces-around-statements]
    if (exponent + exponentChange > semantics->maxExponent)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1295:60: warning: statement should be inside braces [readability-braces-around-statements]
    if (exponent + exponentChange < semantics->minExponent)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1300:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(lost_fraction == lfExactlyZero);
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1308:20: warning: invalid case style for variable 'lf' [readability-identifier-naming]
      lostFraction lf;
                   ^~~
                   Lf
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1316:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      if (omsb > (unsigned) exponentChange)
                 ^~~~~~~~~~~~~~~~~~~~~~~~~~
                 static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1316:44: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (omsb > (unsigned) exponentChange)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1318:11: warning: statement should be inside braces [google-readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1330:19: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (omsb == 0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1338:19: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (omsb == 0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1345:17: warning: redundant cast to the same type [google-readability-casting]
    if (omsb == (unsigned) semantics->precision + 1) {
                ^~~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1352:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        return (opStatus) (opOverflow | opInexact);
               ^~~~~~~~~~~~
               static_cast<opStatus>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1363:36: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (omsb == semantics->precision)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1367:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(omsb < semantics->precision);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1370:17: warning: statement should be inside braces [readability-braces-around-statements]
  if (omsb == 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1374:10: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return (opStatus) (opUnderflow | opInexact);
         ^~~~~~~~~~~~
         static_cast<opStatus>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1377:71: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::addOrSubtractSpecials(const IEEEFloat &rhs,
                                                                      ^~~~
                                                                      Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1378:59: warning: invalid case style for parameter 'subtract' [readability-identifier-naming]
                                                     bool subtract) {
                                                          ^~~~~~~~~
                                                          Subtract
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1397:23: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    sign = rhs.sign ^ subtract;
                      ^~~~~~~~~
                      static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1405:23: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    sign = rhs.sign ^ subtract;
                      ^~~~~~~~~
                      static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1410:23: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
    sign = rhs.sign ^ subtract;
                      ^~~~~~~~~
                      static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1421:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      makeNaN();
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:51: note: default parameter was declared here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                                                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1433:67: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
lostFraction IEEEFloat::addOrSubtractSignificand(const IEEEFloat &rhs,
                                                                  ^~~~
                                                                  Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1434:55: warning: invalid case style for parameter 'subtract' [readability-identifier-naming]
                                                 bool subtract) {
                                                      ^~~~~~~~~
                                                      Subtract
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1435:15: warning: invalid case style for variable 'carry' [readability-identifier-naming]
  integerPart carry;
              ^~~~~~
              Carry
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1436:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction;
               ^~~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1437:7: warning: invalid case style for variable 'bits' [readability-identifier-naming]
  int bits;
      ^~~~~
      Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1441:15: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
  subtract ^= static_cast<bool>(sign ^ rhs.sign);
              ^~~~~~~~~~~                       ~
              static_cast<int>(                 )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1448:15: warning: invalid case style for variable 'temp_rhs' [readability-identifier-naming]
    IEEEFloat temp_rhs(rhs);
              ^~~~~~~~~
              TempRhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1449:10: warning: invalid case style for variable 'reverse' [readability-identifier-naming]
    bool reverse;
         ^~~~~~~~
         Reverse
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1466:17: warning: implicit conversion bool -> 'llvm::APFloatBase::integerPart' (aka 'unsigned long') [readability-implicit-bool-conversion]
        (*this, lost_fraction != lfExactlyZero);
                ^~~~~~~~~~~~~                 ~
                static_cast<llvm::APFloatBase::integerPart>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1468:14: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      sign = !sign;
             ^    ~
             static_cast<unsigned int>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1468:15: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      sign = !sign;
             ~^~~~~
              == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1471:20: warning: implicit conversion bool -> 'llvm::APFloatBase::integerPart' (aka 'unsigned long') [readability-implicit-bool-conversion]
        (temp_rhs, lost_fraction != lfExactlyZero);
                   ^~~~~~~~~~~~~                 ~
                   static_cast<llvm::APFloatBase::integerPart>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1476:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (lost_fraction == lfLessThanHalf)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1478:46: warning: statement should be inside braces [readability-braces-around-statements]
    else if (lost_fraction == lfMoreThanHalf)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1483:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(!carry);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1487:17: warning: invalid case style for variable 'temp_rhs' [readability-identifier-naming]
      IEEEFloat temp_rhs(rhs);
                ^~~~~~~~~
                TempRhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1497:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(!carry);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1504:66: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::multiplySpecials(const IEEEFloat &rhs) {
                                                                 ^~~~
                                                                 Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1513:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = false;
           ^~~~~~
           0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1519:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = false;
           ^~~~~~
           0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1538:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    makeNaN();
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:51: note: default parameter was declared here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                                                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1546:64: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::divideSpecials(const IEEEFloat &rhs) {
                                                               ^~~~
                                                               Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1561:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = false;
           ^~~~~~
           0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1579:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    makeNaN();
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:25: note: default parameter was declared here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1587:61: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::modSpecials(const IEEEFloat &rhs) {
                                                            ^~~~
                                                            Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1604:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = false;
           ^~~~~~
           0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1614:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    makeNaN();
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:51: note: default parameter was declared here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                                                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1625:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = !sign;
         ^    ~
         static_cast<unsigned int>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1625:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  sign = !sign;
         ~^~~~~
          == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1629:63: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::addOrSubtract(const IEEEFloat &rhs,
                                                              ^~~~
                                                              Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1630:59: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                             roundingMode rounding_mode,
                                                          ^~~~~~~~~~~~~~
                                                          RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1631:51: warning: invalid case style for parameter 'subtract' [readability-identifier-naming]
                                             bool subtract) {
                                                  ^~~~~~~~~
                                                  Subtract
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1632:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1638:18: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
    lostFraction lost_fraction;
                 ^~~~~~~~~~~~~~
                 LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1644:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(category != fcZero || lost_fraction == lfExactlyZero);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1651:66: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (rhs.category != fcZero || (sign == rhs.sign) == subtract)
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1652:14: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      sign = (rounding_mode == rmTowardNegative);
             ^
             static_cast<unsigned int>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1659:53: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::add(const IEEEFloat &rhs,
                                                    ^~~~
                                                    Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1660:49: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                   roundingMode rounding_mode) {
                                                ^~~~~~~~~~~~~~
                                                RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1665:58: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::subtract(const IEEEFloat &rhs,
                                                         ^~~~
                                                         Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1666:54: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                        roundingMode rounding_mode) {
                                                     ^~~~~~~~~~~~~~
                                                     RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1671:58: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::multiply(const IEEEFloat &rhs,
                                                         ^~~~
                                                         Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1672:54: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                        roundingMode rounding_mode) {
                                                     ^~~~~~~~~~~~~~
                                                     RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1673:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1679:18: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
    lostFraction lost_fraction = multiplySignificand(rhs, nullptr);
                 ^~~~~~~~~~~~~
                 LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1681:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (lost_fraction != lfExactlyZero)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1682:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      fs = (opStatus) (fs | opInexact);
           ^~~~~~~~~~~~
           static_cast<opStatus>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1689:56: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::divide(const IEEEFloat &rhs,
                                                       ^~~~
                                                       Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1690:52: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                      roundingMode rounding_mode) {
                                                   ^~~~~~~~~~~~~~
                                                   RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1691:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1697:18: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
    lostFraction lost_fraction = divideSignificand(rhs);
                 ^~~~~~~~~~~~~
                 LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1699:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (lost_fraction != lfExactlyZero)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1700:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      fs = (opStatus) (fs | opInexact);
           ^~~~~~~~~~~~
           static_cast<opStatus>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1707:59: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::remainder(const IEEEFloat &rhs) {
                                                          ^~~~
                                                          Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1708:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1710:16: warning: invalid case style for variable 'origSign' [readability-identifier-naming]
  unsigned int origSign = sign;
               ^~~~~~~~
               OrigSign
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1713:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (fs == opDivByZero)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1716:7: warning: invalid case style for variable 'parts' [readability-identifier-naming]
  int parts = partCount();
      ^~~~~
      Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1717:3: warning: initializing non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  integerPart *x = new integerPart[parts];
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1717:3: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  integerPart *x = new integerPart[parts];
  ^~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1717:16: warning: invalid case style for variable 'x' [readability-identifier-naming]
  integerPart *x = new integerPart[parts];
               ^
               X
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1718:8: warning: invalid case style for variable 'ignored' [readability-identifier-naming]
  bool ignored;
       ^~~~~~~~
       Ignored
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1723:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete[] x;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1717:3: note: variable declared here
  integerPart *x = new integerPart[parts];
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1729:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(fs==opOK);   // should always work
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1732:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(fs==opOK || fs==opInexact);   // should not overflow or underflow
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1735:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(fs==opOK || fs==opInexact);   // likewise
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1737:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isZero())
               ^
                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1739:3: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  delete[] x;
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1717:3: note: variable declared here
  integerPart *x = new integerPart[parts];
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1744:53: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::mod(const IEEEFloat &rhs) {
                                                    ^~~~
                                                    Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1745:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1747:16: warning: invalid case style for variable 'origSign' [readability-identifier-naming]
  unsigned int origSign = sign;
               ^~~~~~~~
               OrigSign
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1752:48: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (compareAbsoluteValue(V) == cmpLessThan)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1757:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(fs==opOK);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1759:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isZero())
               ^
                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1765:66: warning: invalid case style for parameter 'multiplicand' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::fusedMultiplyAdd(const IEEEFloat &multiplicand,
                                                                 ^~~~~~~~~~~~~
                                                                 Multiplicand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1766:66: warning: invalid case style for parameter 'addend' [readability-identifier-naming]
                                                const IEEEFloat &addend,
                                                                 ^~~~~~~
                                                                 Addend
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1767:62: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                                roundingMode rounding_mode) {
                                                             ^~~~~~~~~~~~~~
                                                             RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1768:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1778:18: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
    lostFraction lost_fraction;
                 ^~~~~~~~~~~~~~
                 LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1782:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (lost_fraction != lfExactlyZero)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1783:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      fs = (opStatus) (fs | opInexact);
           ^~~~~~~~~~~~
           static_cast<opStatus>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1788:32: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (category == fcZero && !(fs & opUnderflow) && sign != addend.sign)
                              ~^
                              (                   == 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1788:74: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (category == fcZero && !(fs & opUnderflow) && sign != addend.sign)
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1789:14: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      sign = (rounding_mode == rmTowardNegative);
             ^
             static_cast<unsigned int>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1800:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (fs == opOK)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1808:61: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::roundToIntegral(roundingMode rounding_mode) {
                                                            ^~~~~~~~~~~~~~
                                                            RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1809:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1814:42: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  if (isFiniteNonZero() && exponent+1 >= (int)semanticsPrecision(*semantics))
                                         ^~~~~~~~~~~~~~~~~~~~~~~            ~
                                         static_cast<int>(                  )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1814:78: warning: statement should be inside braces [readability-braces-around-statements]
  if (isFiniteNonZero() && exponent+1 >= (int)semanticsPrecision(*semantics))
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1823:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt IntegerConstant(NextPowerOf2(semanticsPrecision(*semantics)), 1);
        ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1830:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (fs != opOK)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1834:8: warning: invalid case style for variable 'inputSign' [readability-identifier-naming]
  bool inputSign = isNegative();
       ^~~~~~~~~
       InputSign
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1837:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (fs != opOK && fs != opInexact)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1843:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (inputSign != isNegative())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1851:58: warning: invalid case style for parameter 'rhs' [readability-identifier-naming]
IEEEFloat::cmpResult IEEEFloat::compare(const IEEEFloat &rhs) const {
                                                         ^~~~
                                                         Rhs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1852:13: warning: invalid case style for variable 'result' [readability-identifier-naming]
  cmpResult result;
            ^~~~~~~
            Result
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1854:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == rhs.semantics);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1872:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (sign)
        ^   ~
             != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1872:14: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (sign)
             ^
              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1874:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1880:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (rhs.sign)
        ^       ~
                 != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1880:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (rhs.sign)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1882:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1886:26: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (sign == rhs.sign)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1888:14: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    else if (sign)
             ^   ~
                  != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1888:19: warning: statement should be inside braces [readability-braces-around-statements]
    else if (sign)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1890:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1902:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (sign)
        ^   ~
             != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1902:14: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (sign)
             ^
              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1904:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1910:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (sign) {
        ^   ~
             != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1911:33: warning: statement should be inside braces [readability-braces-around-statements]
      if (result == cmpLessThan)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1913:41: warning: statement should be inside braces [google-readability-braces-around-statements]
      else if (result == cmpGreaterThan)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1928:60: warning: invalid case style for parameter 'toSemantics' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::convert(const fltSemantics &toSemantics,
                                                           ^~~~~~~~~~~~
                                                           ToSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1929:53: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                       roundingMode rounding_mode,
                                                    ^~~~~~~~~~~~~~
                                                    RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1930:46: warning: invalid case style for parameter 'losesInfo' [readability-identifier-naming]
                                       bool *losesInfo) {
                                             ^~~~~~~~~~
                                             LosesInfo
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1931:16: warning: invalid case style for variable 'lostFraction' [readability-identifier-naming]
  lostFraction lostFraction;
               ^~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1932:16: warning: invalid case style for variable 'newPartCount' [readability-identifier-naming]
  unsigned int newPartCount, oldPartCount;
               ^~~~~~~~~~~~~
               NewPartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1932:30: warning: invalid case style for variable 'oldPartCount' [readability-identifier-naming]
  unsigned int newPartCount, oldPartCount;
                             ^~~~~~~~~~~~~
                             OldPartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1933:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1934:7: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  int shift;
      ^~~~~~
      Shift
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1935:23: warning: invalid case style for variable 'fromSemantics' [readability-identifier-naming]
  const fltSemantics &fromSemantics = *semantics;
                      ^~~~~~~~~~~~~
                      FromSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1945:9: warning: implicit conversion 'unsigned long long' -> bool [readability-implicit-bool-conversion]
      (!(*significandParts() & 0x8000000000000000ULL) ||
       ~^
       (                                              == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1946:9: warning: implicit conversion 'unsigned long long' -> bool [readability-implicit-bool-conversion]
       !(*significandParts() & 0x4000000000000000ULL))) {
       ~^                                            ~
       (                                              == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1958:9: warning: invalid case style for variable 'exponentChange' [readability-identifier-naming]
    int exponentChange = significandMSB() + 1 - fromSemantics.precision;
        ^~~~~~~~~~~~~~
        ExponentChange
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1959:61: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (exponent + exponentChange < toSemantics.minExponent)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1961:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (exponentChange < shift)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1970:59: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (shift < 0 && (isFiniteNonZero() || category==fcNaN))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1976:18: warning: invalid case style for variable 'newParts' [readability-identifier-naming]
    integerPart *newParts;
                 ^~~~~~~~~
                 NewParts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1977:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') [cppcoreguidelines-owning-memory]
    newParts = new integerPart[newPartCount];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1979:46: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isFiniteNonZero() || category==fcNaN)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1982:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    significand.parts = newParts;
                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1985:17: warning: invalid case style for variable 'newPart' [readability-identifier-naming]
    integerPart newPart = 0;
                ^~~~~~~
                NewPart
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1986:46: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isFiniteNonZero() || category==fcNaN)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1987:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      newPart = significandParts()[0];
                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1989:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    significand.part = newPart;
                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:1997:59: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (shift > 0 && (isFiniteNonZero() || category==fcNaN))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2008:62: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!X86SpecialNan && semantics == &semX87DoubleExtended)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2035:34: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
    MutableArrayRef<integerPart> parts, unsigned int width, bool isSigned,
                                 ^~~~~~
                                 Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2035:54: warning: invalid case style for parameter 'width' [readability-identifier-naming]
    MutableArrayRef<integerPart> parts, unsigned int width, bool isSigned,
                                                     ^~~~~~
                                                     Width
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2035:66: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
    MutableArrayRef<integerPart> parts, unsigned int width, bool isSigned,
                                                                 ^~~~~~~~~
                                                                 IsSigned
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2036:18: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
    roundingMode rounding_mode, bool *isExact) const {
                 ^~~~~~~~~~~~~~
                 RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2036:39: warning: invalid case style for parameter 'isExact' [readability-identifier-naming]
    roundingMode rounding_mode, bool *isExact) const {
                                      ^~~~~~~~
                                      IsExact
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2037:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction;
               ^~~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2038:22: warning: invalid case style for variable 'src' [readability-identifier-naming]
  const integerPart *src;
                     ^~~~
                     Src
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2039:16: warning: invalid case style for variable 'dstPartsCount' [readability-identifier-naming]
  unsigned int dstPartsCount, truncatedBits;
               ^~~~~~~~~~~~~~
               DstPartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2039:31: warning: invalid case style for variable 'truncatedBits' [readability-identifier-naming]
  unsigned int dstPartsCount, truncatedBits;
                              ^~~~~~~~~~~~~~
                              TruncatedBits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2044:51: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (category == fcInfinity || category == fcNaN)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2048:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(dstPartsCount <= parts.size() && "Integer too big");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2053:17: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    *isExact = !sign;
               ~^~~~~
               ( == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2070:18: warning: invalid case style for variable 'bits' [readability-identifier-naming]
    unsigned int bits = exponent + 1U;
                 ^~~~
                 Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2073:22: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (bits > width)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2092:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (truncatedBits) {
      ^            ~
                    != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2097:11: warning: implicit conversion 'llvm::APInt::WordType' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      if (APInt::tcIncrement(parts.data(), dstPartsCount))
          ^                                              ~
                                                          != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2097:59: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (APInt::tcIncrement(parts.data(), dstPartsCount))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2105:16: warning: invalid case style for variable 'omsb' [readability-identifier-naming]
  unsigned int omsb = APInt::tcMSB(parts.data(), dstPartsCount) + 1;
               ^~~~
               Omsb
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2107:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (sign) {
      ^   ~
           != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2110:21: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (omsb != 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2117:65: warning: statement should be inside braces [google-readability-braces-around-statements]
          APInt::tcLSB(parts.data(), dstPartsCount) + 1 != omsb)
                                                                ^
                                                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2121:24: warning: statement should be inside braces [readability-braces-around-statements]
      if (omsb > width)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2127:25: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    if (omsb >= width + !isSigned)
                        ^        ~
                        static_cast<unsigned int>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2127:35: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (omsb >= width + !isSigned)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2134:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else
    ^~~~
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2134:9: warning: statement should be inside braces [google-readability-braces-around-statements]
  } else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2148:58: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
IEEEFloat::convertToInteger(MutableArrayRef<integerPart> parts,
                                                         ^~~~~~
                                                         Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2149:42: warning: invalid case style for parameter 'width' [readability-identifier-naming]
                            unsigned int width, bool isSigned,
                                         ^~~~~~
                                         Width
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2149:54: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
                            unsigned int width, bool isSigned,
                                                     ^~~~~~~~~
                                                     IsSigned
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2150:42: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                            roundingMode rounding_mode, bool *isExact) const {
                                         ^~~~~~~~~~~~~~
                                         RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2150:63: warning: invalid case style for parameter 'isExact' [readability-identifier-naming]
                            roundingMode rounding_mode, bool *isExact) const {
                                                              ^~~~~~~~
                                                              IsExact
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2151:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2157:18: warning: invalid case style for variable 'bits' [readability-identifier-naming]
    unsigned int bits, dstPartsCount;
                 ^~~~~
                 Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2157:24: warning: invalid case style for variable 'dstPartsCount' [readability-identifier-naming]
    unsigned int bits, dstPartsCount;
                       ^~~~~~~~~~~~~~
                       DstPartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2160:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(dstPartsCount <= parts.size() && "Integer too big");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2162:27: warning: statement should be inside braces [readability-braces-around-statements]
    if (category == fcNaN)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2164:14: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    else if (sign)
             ^   ~
                  != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2164:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (sign)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2165:14: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      bits = isSigned;
             ^~~~~~~~~
             static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2166:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2167:22: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      bits = width - isSigned;
                     ^~~~~~~~~
                     static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2170:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (sign && isSigned)
        ^~~~
        ( != 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2170:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (sign && isSigned)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2181:24: warning: invalid case style for parameter 'src' [readability-identifier-naming]
    const integerPart *src, unsigned int srcCount, roundingMode rounding_mode) {
                       ^~~~
                       Src
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2181:42: warning: invalid case style for parameter 'srcCount' [readability-identifier-naming]
    const integerPart *src, unsigned int srcCount, roundingMode rounding_mode) {
                                         ^~~~~~~~~
                                         SrcCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2181:65: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
    const integerPart *src, unsigned int srcCount, roundingMode rounding_mode) {
                                                                ^~~~~~~~~~~~~~
                                                                RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2182:16: warning: invalid case style for variable 'omsb' [readability-identifier-naming]
  unsigned int omsb, precision, dstCount;
               ^~~~~
               Omsb
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2182:22: warning: invalid case style for variable 'precision' [readability-identifier-naming]
  unsigned int omsb, precision, dstCount;
                     ^~~~~~~~~~
                     Precision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2182:33: warning: invalid case style for variable 'dstCount' [readability-identifier-naming]
  unsigned int omsb, precision, dstCount;
                                ^~~~~~~~~
                                DstCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2183:16: warning: invalid case style for variable 'dst' [readability-identifier-naming]
  integerPart *dst;
               ^~~~
               Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2184:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction;
               ^~~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2208:72: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::convertFromAPInt(const APInt &Val, bool isSigned,
                                                                       ^~~~~~~~~
                                                                       IsSigned
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2209:62: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                                roundingMode rounding_mode) {
                                                             ^~~~~~~~~~~~~~
                                                             RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2210:16: warning: invalid case style for variable 'partCount' [readability-identifier-naming]
  unsigned int partCount = Val.getNumWords();
               ^~~~~~~~~
               PartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2211:9: warning: invalid case style for variable 'api' [readability-identifier-naming]
  APInt api = Val;
        ^~~
        Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2213:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = false;
         ^~~~~~
         0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2215:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = true;
           ^~~~~
           1u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2226:62: warning: invalid case style for parameter 'src' [readability-identifier-naming]
IEEEFloat::convertFromSignExtendedInteger(const integerPart *src,
                                                             ^~~~
                                                             Src
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2227:56: warning: invalid case style for parameter 'srcCount' [readability-identifier-naming]
                                          unsigned int srcCount, bool isSigned,
                                                       ^~~~~~~~~
                                                       SrcCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2227:71: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
                                          unsigned int srcCount, bool isSigned,
                                                                      ^~~~~~~~~
                                                                      IsSigned
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2228:56: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                          roundingMode rounding_mode) {
                                                       ^~~~~~~~~~~~~~
                                                       RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2229:12: warning: invalid case style for variable 'status' [readability-identifier-naming]
  opStatus status;
           ^~~~~~~
           Status
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2232:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      APInt::tcExtractBit(src, srcCount * integerPartWidth - 1)) {
      ^~~~~                                                    ~
      (                                                         != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2233:18: warning: invalid case style for variable 'copy' [readability-identifier-naming]
    integerPart *copy;
                 ^~~~~
                 Copy
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2236:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = true;
           ^~~~~
           1u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2237:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') [cppcoreguidelines-owning-memory]
    copy = new integerPart[srcCount];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2241:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] copy;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2233:5: note: variable declared here
    integerPart *copy;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2243:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = false;
           ^~~~~~
           0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2252:62: warning: invalid case style for parameter 'parts' [readability-identifier-naming]
IEEEFloat::convertFromZeroExtendedInteger(const integerPart *parts,
                                                             ^~~~~~
                                                             Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2253:56: warning: invalid case style for parameter 'width' [readability-identifier-naming]
                                          unsigned int width, bool isSigned,
                                                       ^~~~~~
                                                       Width
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2253:68: warning: invalid case style for parameter 'isSigned' [readability-identifier-naming]
                                          unsigned int width, bool isSigned,
                                                                   ^~~~~~~~~
                                                                   IsSigned
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2254:56: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                          roundingMode rounding_mode) {
                                                       ^~~~~~~~~~~~~~
                                                       RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2255:16: warning: invalid case style for variable 'partCount' [readability-identifier-naming]
  unsigned int partCount = partCountForBits(width);
               ^~~~~~~~~
               PartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2256:9: warning: invalid case style for variable 'api' [readability-identifier-naming]
  APInt api = APInt(width, makeArrayRef(parts, partCount));
        ^~~
        Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2258:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = false;
         ^~~~~~
         0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2259:19: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (isSigned && APInt::tcExtractBit(parts, width - 1)) {
                  ^~~~~                                ~
                  (                                     != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2260:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    sign = true;
           ^~~~~
           1u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2268:51: warning: invalid case style for parameter 's' [readability-identifier-naming]
IEEEFloat::convertFromHexadecimalString(StringRef s,
                                                  ^~
                                                  S
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2269:54: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                        roundingMode rounding_mode) {
                                                     ^~~~~~~~~~~~~~
                                                     RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2270:16: warning: invalid case style for variable 'lost_fraction' [readability-identifier-naming]
  lostFraction lost_fraction = lfExactlyZero;
               ^~~~~~~~~~~~~
               LostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2276:16: warning: invalid case style for variable 'significand' [readability-identifier-naming]
  integerPart *significand = significandParts();
               ^~~~~~~~~~~
               Significand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2277:12: warning: invalid case style for variable 'partsCount' [readability-identifier-naming]
  unsigned partsCount = partCount();
           ^~~~~~~~~~
           PartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2278:12: warning: invalid case style for variable 'bitPos' [readability-identifier-naming]
  unsigned bitPos = partsCount * integerPartWidth;
           ^~~~~~
           BitPos
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2279:8: warning: invalid case style for variable 'computedTrailingFraction' [readability-identifier-naming]
  bool computedTrailingFraction = false;
       ^~~~~~~~~~~~~~~~~~~~~~~~
       ComputedTrailingFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2282:23: warning: invalid case style for variable 'begin' [readability-identifier-naming]
  StringRef::iterator begin = s.begin();
                      ^~~~~
                      Begin
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2283:23: warning: invalid case style for variable 'end' [readability-identifier-naming]
  StringRef::iterator end = s.end();
                      ^~~
                      End
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2284:23: warning: invalid case style for variable 'dot' [readability-identifier-naming]
  StringRef::iterator dot;
                      ^~~~
                      Dot
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2285:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = skipLeadingZeroesAndAnyDot(begin, end, &dot);
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2286:23: warning: invalid case style for variable 'firstSignificantDigit' [readability-identifier-naming]
  StringRef::iterator firstSignificantDigit = p;
                      ^~~~~~~~~~~~~~~~~~~~~
                      FirstSignificantDigit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2289:17: warning: invalid case style for variable 'hex_value' [readability-identifier-naming]
    integerPart hex_value;
                ^~~~~~~~~~
                HexValue
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2292:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(dot == end && "String contains multiple dots");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2298:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (hex_value == -1U)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2304:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (bitPos) {
        ^     ~
               != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2307:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      significand[bitPos / integerPartWidth] |= hex_value;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2315:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(p != end && "Hex strings require an exponent");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2316:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((*p == 'p' || *p == 'P') && "Invalid character in significand");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2317:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(p != begin && "Significand has no digits");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2318:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((dot == end || p - begin != 1) && "Significand has no digits");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2322:9: warning: invalid case style for variable 'expAdjustment' [readability-identifier-naming]
    int expAdjustment;
        ^~~~~~~~~~~~~~
        ExpAdjustment
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2325:20: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (dot == end)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2331:27: warning: statement should be inside braces [readability-braces-around-statements]
    if (expAdjustment < 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2348:60: warning: invalid case style for parameter 'decSigParts' [readability-identifier-naming]
IEEEFloat::roundSignificandWithExponent(const integerPart *decSigParts,
                                                           ^~~~~~~~~~~~
                                                           DecSigParts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2349:50: warning: invalid case style for parameter 'sigPartCount' [readability-identifier-naming]
                                        unsigned sigPartCount, int exp,
                                                 ^~~~~~~~~~~~~
                                                 SigPartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2349:68: warning: invalid case style for parameter 'exp' [readability-identifier-naming]
                                        unsigned sigPartCount, int exp,
                                                                   ^~~~
                                                                   Exp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2350:54: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                        roundingMode rounding_mode) {
                                                     ^~~~~~~~~~~~~~
                                                     RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2351:16: warning: invalid case style for variable 'parts' [readability-identifier-naming]
  unsigned int parts, pow5PartCount;
               ^~~~~~
               Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2351:23: warning: invalid case style for variable 'pow5PartCount' [readability-identifier-naming]
  unsigned int parts, pow5PartCount;
                      ^~~~~~~~~~~~~~
                      Pow5PartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2352:16: warning: invalid case style for variable 'calcSemantics' [readability-identifier-naming]
  fltSemantics calcSemantics = { 32767, -32767, 0, 0 };
               ^~~~~~~~~~~~~
               CalcSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2353:15: warning: invalid case style for variable 'pow5Parts' [readability-identifier-naming]
  integerPart pow5Parts[maxPowerOfFiveParts];
              ^~~~~~~~~~
              Pow5Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2354:8: warning: invalid case style for variable 'isNearest' [readability-identifier-naming]
  bool isNearest;
       ^~~~~~~~~~
       IsNearest
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2362:28: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  pow5PartCount = powerOf5(pow5Parts, exp >= 0 ? exp: -exp);
                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2365:14: warning: invalid case style for variable 'sigStatus' [readability-identifier-naming]
    opStatus sigStatus, powStatus;
             ^~~~~~~~~~
             SigStatus
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2365:25: warning: invalid case style for variable 'powStatus' [readability-identifier-naming]
    opStatus sigStatus, powStatus;
                        ^~~~~~~~~~
                        PowStatus
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2366:18: warning: invalid case style for variable 'excessPrecision' [readability-identifier-naming]
    unsigned int excessPrecision, truncatedBits;
                 ^~~~~~~~~~~~~~~~
                 ExcessPrecision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2366:35: warning: invalid case style for variable 'truncatedBits' [readability-identifier-naming]
    unsigned int excessPrecision, truncatedBits;
                                  ^~~~~~~~~~~~~~
                                  TruncatedBits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2372:15: warning: invalid case style for variable 'decSig' [readability-identifier-naming]
    IEEEFloat decSig(calcSemantics, uninitialized);
              ^~~~~~~
              DecSig
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2373:21: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    decSig.makeZero(sign);
                    ^   ~
                         != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2374:15: warning: invalid case style for variable 'pow5' [readability-identifier-naming]
    IEEEFloat pow5(calcSemantics);
              ^~~~~
              Pow5
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2378:47: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    powStatus = pow5.convertFromUnsignedParts(pow5Parts, pow5PartCount,
                                              ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2383:18: warning: invalid case style for variable 'calcLostFraction' [readability-identifier-naming]
    lostFraction calcLostFraction;
                 ^~~~~~~~~~~~~~~~~
                 CalcLostFraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2385:18: warning: invalid case style for variable 'powHUerr' [readability-identifier-naming]
    unsigned int powHUerr;
                 ^~~~~~~~~
                 PowHUerr
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2390:18: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
      powHUerr = powStatus != opOK;
                 ^~~~~~~~~        ~
                 static_cast<unsigned int>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2397:55: warning: statement should be inside braces [readability-braces-around-statements]
        if (excessPrecision > calcSemantics.precision)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2406:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(APInt::tcExtractBit
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2409:59: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    HUerr = HUerrBound(calcLostFraction != lfExactlyZero, sigStatus != opOK,
                                                          ^~~~~~~~~        ~
                                                          static_cast<unsigned int>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2433:47: warning: invalid case style for parameter 'str' [readability-identifier-naming]
IEEEFloat::convertFromDecimalString(StringRef str, roundingMode rounding_mode) {
                                              ^~~~
                                              Str
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2433:65: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
IEEEFloat::convertFromDecimalString(StringRef str, roundingMode rounding_mode) {
                                                                ^~~~~~~~~~~~~~
                                                                RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2434:3: warning: uninitialized record type: 'D' [hicpp-member-init]
  decimalInfo D;
  ^            ~
               {}
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2435:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2438:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = str.begin();
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2480:49: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
               8651 * (semantics->minExponent - (int) semantics->precision)) {
                                                ^~~~~~~~~~~~~~~           ~
                                                static_cast<int>(         )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2492:18: warning: invalid case style for variable 'decSignificand' [readability-identifier-naming]
    integerPart *decSignificand;
                 ^~~~~~~~~~~~~~~
                 DecSignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2493:18: warning: invalid case style for variable 'partCount' [readability-identifier-naming]
    unsigned int partCount;
                 ^~~~~~~~~~
                 PartCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2501:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::APFloatBase::integerPart *' (aka 'unsigned long *') [cppcoreguidelines-owning-memory]
    decSignificand = new integerPart[partCount + 1];
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2509:19: warning: invalid case style for variable 'decValue' [readability-identifier-naming]
      integerPart decValue, val, multiplier;
                  ^~~~~~~~~
                  DecValue
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2509:29: warning: invalid case style for variable 'val' [readability-identifier-naming]
      integerPart decValue, val, multiplier;
                            ^~~~
                            Val
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2509:34: warning: invalid case style for variable 'multiplier' [readability-identifier-naming]
      integerPart decValue, val, multiplier;
                                 ^~~~~~~~~~~
                                 Multiplier
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2522:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        assert(decValue < 10U && "Invalid character in significand");
        ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2527:56: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      } while (p <= D.lastSigDigit && multiplier <= (~ (integerPart) 0 - 9) / 10);
                                                       ^~~~~~~~~~~~~~~
                                                       static_cast<integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2535:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (decSignificand[partCount])
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2535:11: warning: implicit conversion 'llvm::APFloatBase::integerPart' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      if (decSignificand[partCount])
          ^                        ~
                                    != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2535:37: warning: statement should be inside braces [readability-braces-around-statements]
      if (decSignificand[partCount])
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2543:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete [] decSignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2492:5: note: variable declared here
    integerPart *decSignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2549:53: warning: invalid case style for parameter 'str' [readability-identifier-naming]
bool IEEEFloat::convertFromStringSpecials(StringRef str) {
                                                    ^~~~
                                                    Str
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2561:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    makeNaN(false, false);
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:51: note: default parameter was declared here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                                                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2566:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    makeNaN(false, true);
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:689:51: note: default parameter was declared here
void IEEEFloat::makeNaN(bool SNaN, bool Negative, const APInt *fill) {
                                                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2573:60: warning: invalid case style for parameter 'str' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::convertFromString(StringRef str,
                                                           ^~~~
                                                           Str
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2574:63: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                                 roundingMode rounding_mode) {
                                                              ^~~~~~~~~~~~~~
                                                              RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2575:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!str.empty() && "Invalid string length");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2578:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (convertFromStringSpecials(str))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2582:23: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef::iterator p = str.begin();
                      ^
                      P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2583:10: warning: invalid case style for variable 'slen' [readability-identifier-naming]
  size_t slen = str.size();
         ^~~~
         Slen
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2588:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(slen && "String has no digits");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2592:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(slen - 2 && "Invalid string");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2624:50: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
unsigned int IEEEFloat::convertToHexString(char *dst, unsigned int hexDigits,
                                                 ^~~~
                                                 Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2624:68: warning: invalid case style for parameter 'hexDigits' [readability-identifier-naming]
unsigned int IEEEFloat::convertToHexString(char *dst, unsigned int hexDigits,
                                                                   ^~~~~~~~~~
                                                                   HexDigits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2625:49: warning: invalid case style for parameter 'upperCase' [readability-identifier-naming]
                                           bool upperCase,
                                                ^~~~~~~~~~
                                                UpperCase
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2626:57: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                           roundingMode rounding_mode) const {
                                                        ^~~~~~~~~~~~~~
                                                        RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2627:9: warning: invalid case style for variable 'p' [readability-identifier-naming]
  char *p;
        ^~
        P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2630:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (sign)
      ^   ~
           != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2630:12: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (sign)
           ^
            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2631:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = '-';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2635:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    memcpy (dst, upperCase ? infinityU: infinityL, sizeof infinityU - 1);
                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2636:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst += sizeof infinityL - 1;
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2640:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    memcpy (dst, upperCase ? NaNU: NaNL, sizeof NaNU - 1);
                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2641:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst += sizeof NaNU - 1;
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2645:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = '0';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2646:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = upperCase ? 'X': 'x';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2647:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = '0';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2649:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      *dst++ = '.';
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2651:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      dst += hexDigits - 1;
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2653:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = upperCase ? 'P': 'p';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2654:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *dst++ = '0';
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2671:49: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
char *IEEEFloat::convertNormalToHexString(char *dst, unsigned int hexDigits,
                                                ^~~~
                                                Dst
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2671:67: warning: invalid case style for parameter 'hexDigits' [readability-identifier-naming]
char *IEEEFloat::convertNormalToHexString(char *dst, unsigned int hexDigits,
                                                                  ^~~~~~~~~~
                                                                  HexDigits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2672:48: warning: invalid case style for parameter 'upperCase' [readability-identifier-naming]
                                          bool upperCase,
                                               ^~~~~~~~~~
                                               UpperCase
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2673:56: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                          roundingMode rounding_mode) const {
                                                       ^~~~~~~~~~~~~~
                                                       RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2674:16: warning: invalid case style for variable 'count' [readability-identifier-naming]
  unsigned int count, valueBits, shift, partsCount, outputDigits;
               ^~~~~~
               Count
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2674:23: warning: invalid case style for variable 'valueBits' [readability-identifier-naming]
  unsigned int count, valueBits, shift, partsCount, outputDigits;
                      ^~~~~~~~~~
                      ValueBits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2674:34: warning: invalid case style for variable 'shift' [readability-identifier-naming]
  unsigned int count, valueBits, shift, partsCount, outputDigits;
                                 ^~~~~~
                                 Shift
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2674:41: warning: invalid case style for variable 'partsCount' [readability-identifier-naming]
  unsigned int count, valueBits, shift, partsCount, outputDigits;
                                        ^~~~~~~~~~~
                                        PartsCount
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2674:53: warning: invalid case style for variable 'outputDigits' [readability-identifier-naming]
  unsigned int count, valueBits, shift, partsCount, outputDigits;
                                                    ^~~~~~~~~~~~~
                                                    OutputDigits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2675:15: warning: invalid case style for variable 'hexDigitChars' [readability-identifier-naming]
  const char *hexDigitChars;
              ^~~~~~~~~~~~~~
              HexDigitChars
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2676:22: warning: invalid case style for variable 'significand' [readability-identifier-naming]
  const integerPart *significand;
                     ^~~~~~~~~~~~
                     Significand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2677:9: warning: invalid case style for variable 'p' [readability-identifier-naming]
  char *p;
        ^~
        P
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2678:8: warning: invalid case style for variable 'roundUp' [readability-identifier-naming]
  bool roundUp;
       ^~~~~~~~
       RoundUp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2680:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  *dst++ = '0';
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2681:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  *dst++ = upperCase ? 'X': 'x';
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2684:19: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  hexDigitChars = upperCase ? hexDigitsUpper: hexDigitsLower;
                  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2701:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (hexDigits) {
      ^        ~
                != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2705:20: warning: invalid case style for variable 'bits' [readability-identifier-naming]
      unsigned int bits;
                   ^~~~~
                   Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2706:20: warning: invalid case style for variable 'fraction' [readability-identifier-naming]
      lostFraction fraction;
                   ^~~~~~~~~
                   Fraction
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2718:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  p = ++dst;
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2722:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (outputDigits && count) {
         ^~~~~~~~~~~~
         ( != 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2722:26: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  while (outputDigits && count) {
                         ^~~~~~
                         ( != 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2723:17: warning: invalid case style for variable 'part' [readability-identifier-naming]
    integerPart part;
                ^~~~~
                Part
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2726:31: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (--count == partsCount)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2728:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2729:14: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      part = significand[count] << shift;
             ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2731:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (count && shift)
        ^~~~~
        ( != 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2731:18: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (count && shift)
                 ^~~~~~
                 ( != 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2731:24: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (count && shift)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2732:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      part |= significand[count - 1] >> (integerPartWidth - shift);
              ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2735:18: warning: invalid case style for variable 'curDigits' [readability-identifier-naming]
    unsigned int curDigits = integerPartWidth / 4;
                 ^~~~~~~~~
                 CurDigits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2737:34: warning: statement should be inside braces [readability-braces-around-statements]
    if (curDigits > outputDigits)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2739:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst += partAsHex (dst, part, curDigits, hexDigitChars);
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2744:11: warning: invalid case style for variable 'q' [readability-identifier-naming]
    char *q = dst;
          ^
          Q
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2748:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      q--;
       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2749:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      *q = hexDigitChars[hexDigitValue (*q) + 1];
           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2751:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(q >= p);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2755:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst += outputDigits;
        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2761:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  p[-1] = p[0];
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2761:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  p[-1] = p[0];
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2762:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (dst -1 == p)
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2762:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (dst -1 == p)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2763:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    dst--;
       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2764:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2765:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    p[0] = '.';
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2768:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  *dst++ = upperCase ? 'P': 'p';
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2773:11: warning: invalid case style for function 'hash_value' [readability-identifier-naming]
hash_code hash_value(const IEEEFloat &Arg) {
          ^~~~~~~~~~~
          hashValue
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2774:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Arg.isFiniteNonZero())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2775:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return hash_combine((uint8_t)Arg.category,
                        ^~~~~~~~~~~~         ~
                        static_cast<uint8_t>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2777:39: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                        Arg.isNaN() ? (uint8_t)0 : (uint8_t)Arg.sign,
                                      ^~~~~~~~~~
                                      static_cast<uint8_t>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2777:52: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                        Arg.isNaN() ? (uint8_t)0 : (uint8_t)Arg.sign,
                                                   ^~~~~~~~~~~~     ~
                                                   static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2781:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return hash_combine((uint8_t)Arg.category, (uint8_t)Arg.sign,
                      ^~~~~~~~~~~~         ~
                      static_cast<uint8_t>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2781:46: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return hash_combine((uint8_t)Arg.category, (uint8_t)Arg.sign,
                                             ^~~~~~~~~~~~     ~
                                             static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2785:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                        Arg.significandParts() + Arg.partCount()));
                                               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2798:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semX87DoubleExtended);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2799:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==2);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2801:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint64_t myexponent, mysignificand;
           ^~~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2801:24: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint64_t myexponent, mysignificand;
                       ^~~~~~~~~~~~~~
                       Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2805:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mysignificand = significandParts()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2806:27: warning: implicit conversion 'unsigned long long' -> bool [readability-implicit-bool-conversion]
    if (myexponent==1 && !(mysignificand & 0x8000000000000000ULL))
                         ~^                                      ~
                         (                                        == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2806:67: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (myexponent==1 && !(mysignificand & 0x8000000000000000ULL))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2815:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(category == fcNaN && "Unknown category");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2817:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mysignificand = significandParts()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2820:12: warning: invalid case style for variable 'words' [readability-identifier-naming]
  uint64_t words[2];
           ^~~~~~
           Words
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2822:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  words[1] =  ((uint64_t)(sign & 1) << 15) |
               ^~~~~~~~~~~
               static_cast<uint64_t>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2822:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2822:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  words[1] =  ((uint64_t)(sign & 1) << 15) |
                          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2823:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
              (myexponent & 0x7fffLL);
               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2828:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics *)&semPPCDoubleDoubleLegacy);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2829:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==2);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2831:12: warning: invalid case style for variable 'words' [readability-identifier-naming]
  uint64_t words[2];
           ^~~~~~
           Words
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2832:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2833:8: warning: invalid case style for variable 'losesInfo' [readability-identifier-naming]
  bool losesInfo;
       ^~~~~~~~~~
       LosesInfo
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2841:16: warning: invalid case style for variable 'extendedSemantics' [readability-identifier-naming]
  fltSemantics extendedSemantics = *semantics;
               ^~~~~~~~~~~~~~~~~
               ExtendedSemantics
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2843:13: warning: invalid case style for variable 'extended' [readability-identifier-naming]
  IEEEFloat extended(*this);
            ^~~~~~~~~
            Extended
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2845:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(fs == opOK && !losesInfo);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2848:13: warning: invalid case style for variable 'u' [readability-identifier-naming]
  IEEEFloat u(extended);
            ^~
            U
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2850:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(fs == opOK || fs == opInexact);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2860:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(fs == opOK && !losesInfo);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2863:15: warning: invalid case style for variable 'v' [readability-identifier-naming]
    IEEEFloat v(extended);
              ^~
              V
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2866:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(fs == opOK && !losesInfo);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2877:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semIEEEquad);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2878:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==2);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2880:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint64_t myexponent, mysignificand, mysignificand2;
           ^~~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2880:24: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint64_t myexponent, mysignificand, mysignificand2;
                       ^~~~~~~~~~~~~~
                       Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2880:39: warning: invalid case style for variable 'mysignificand2' [readability-identifier-naming]
  uint64_t myexponent, mysignificand, mysignificand2;
                                      ^~~~~~~~~~~~~~~
                                      Mysignificand2
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2884:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mysignificand = significandParts()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2885:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mysignificand2 = significandParts()[1];
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2886:27: warning: implicit conversion 'unsigned long long' -> bool [readability-implicit-bool-conversion]
    if (myexponent==1 && !(mysignificand2 & 0x1000000000000LL))
                         ~^                                   ~
                         (                                     == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2886:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (myexponent==1 && !(mysignificand2 & 0x1000000000000LL))
                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2886:64: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (myexponent==1 && !(mysignificand2 & 0x1000000000000LL))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2895:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(category == fcNaN && "Unknown category!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2897:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mysignificand = significandParts()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2898:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    mysignificand2 = significandParts()[1];
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2901:12: warning: invalid case style for variable 'words' [readability-identifier-naming]
  uint64_t words[2];
           ^~~~~~
           Words
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2903:15: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  words[1] = ((uint64_t)(sign & 1) << 63) |
              ^~~~~~~~~~~
              static_cast<uint64_t>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2903:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2903:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  words[1] = ((uint64_t)(sign & 1) << 63) |
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2904:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
             ((myexponent & 0x7fff) << 48) |
              ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2904:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
             ((myexponent & 0x7fff) << 48) |
               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2905:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
             (mysignificand2 & 0xffffffffffffLL);
              ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2911:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2912:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2914:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint64_t myexponent, mysignificand;
           ^~~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2914:24: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint64_t myexponent, mysignificand;
                       ^~~~~~~~~~~~~~
                       Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2919:27: warning: implicit conversion 'unsigned long long' -> bool [readability-implicit-bool-conversion]
    if (myexponent==1 && !(mysignificand & 0x10000000000000LL))
                         ~^                                   ~
                         (                                     == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2919:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (myexponent==1 && !(mysignificand & 0x10000000000000LL))
                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2919:64: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (myexponent==1 && !(mysignificand & 0x10000000000000LL))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2928:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(category == fcNaN && "Unknown category!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2933:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return APInt(64, ((((uint64_t)(sign & 1) << 63) |
         ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2933:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return APInt(64, ((((uint64_t)(sign & 1) << 63) |
                      ^~~~~~~~~~~
                      static_cast<uint64_t>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2933:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2933:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(64, ((((uint64_t)(sign & 1) << 63) |
                                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2934:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                     ((myexponent & 0x7ff) <<  52) |
                      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2934:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                     ((myexponent & 0x7ff) <<  52) |
                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2935:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                     (mysignificand & 0xfffffffffffffLL))));
                      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2939:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semIEEEsingle);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2940:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2942:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint32_t myexponent, mysignificand;
           ^~~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2942:24: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint32_t myexponent, mysignificand;
                       ^~~~~~~~~~~~~~
                       Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2946:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    mysignificand = (uint32_t)*significandParts();
                    ^~~~~~~~~~~                  ~
                    static_cast<uint32_t>(       )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2947:29: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (myexponent == 1 && !(mysignificand & 0x800000))
                           ~^                         ~
                           (                           == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2947:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (myexponent == 1 && !(mysignificand & 0x800000))
                             ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2947:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (myexponent == 1 && !(mysignificand & 0x800000))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2956:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(category == fcNaN && "Unknown category!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2958:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    mysignificand = (uint32_t)*significandParts();
                    ^~~~~~~~~~~                  ~
                    static_cast<uint32_t>(       )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2961:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return APInt(32, (((sign&1) << 31) | ((myexponent&0xff) << 23) |
         ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2961:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(32, (((sign&1) << 31) | ((myexponent&0xff) << 23) |
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2961:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(32, (((sign&1) << 31) | ((myexponent&0xff) << 23) |
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2961:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(32, (((sign&1) << 31) | ((myexponent&0xff) << 23) |
                      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2961:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(32, (((sign&1) << 31) | ((myexponent&0xff) << 23) |
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2961:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(32, (((sign&1) << 31) | ((myexponent&0xff) << 23) |
                                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2962:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (mysignificand & 0x7fffff)));
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2966:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semIEEEhalf);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2967:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2969:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint32_t myexponent, mysignificand;
           ^~~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2969:24: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint32_t myexponent, mysignificand;
                       ^~~~~~~~~~~~~~
                       Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2973:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    mysignificand = (uint32_t)*significandParts();
                    ^~~~~~~~~~~                  ~
                    static_cast<uint32_t>(       )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2974:29: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (myexponent == 1 && !(mysignificand & 0x400))
                           ~^                      ~
                           (                        == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2974:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (myexponent == 1 && !(mysignificand & 0x400))
                             ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2974:53: warning: statement should be inside braces [readability-braces-around-statements]
    if (myexponent == 1 && !(mysignificand & 0x400))
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2983:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(category == fcNaN && "Unknown category!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2985:21: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    mysignificand = (uint32_t)*significandParts();
                    ^~~~~~~~~~~                  ~
                    static_cast<uint32_t>(       )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2988:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return APInt(16, (((sign&1) << 15) | ((myexponent&0x1f) << 10) |
         ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2988:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(16, (((sign&1) << 15) | ((myexponent&0x1f) << 10) |
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2988:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(16, (((sign&1) << 15) | ((myexponent&0x1f) << 10) |
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2988:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(16, (((sign&1) << 15) | ((myexponent&0x1f) << 10) |
                      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2988:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(16, (((sign&1) << 15) | ((myexponent&0x1f) << 10) |
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2988:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return APInt(16, (((sign&1) << 15) | ((myexponent&0x1f) << 10) |
                                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2989:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (mysignificand & 0x3ff)));
                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2997:20: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
  if (semantics == (const llvm::fltSemantics*)&semIEEEhalf)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~           ~
                   static_cast<const llvm::fltSemantics*>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:2997:60: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (semantics == (const llvm::fltSemantics*)&semIEEEhalf)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3000:20: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
  if (semantics == (const llvm::fltSemantics*)&semIEEEsingle)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~             ~
                   static_cast<const llvm::fltSemantics*>(  )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3000:62: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (semantics == (const llvm::fltSemantics*)&semIEEEsingle)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3003:20: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
  if (semantics == (const llvm::fltSemantics*)&semIEEEdouble)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~             ~
                   static_cast<const llvm::fltSemantics*>(  )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3003:62: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (semantics == (const llvm::fltSemantics*)&semIEEEdouble)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3006:20: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
  if (semantics == (const llvm::fltSemantics*)&semIEEEquad)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~           ~
                   static_cast<const llvm::fltSemantics*>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3006:60: warning: statement should be inside braces [readability-braces-around-statements]
  if (semantics == (const llvm::fltSemantics*)&semIEEEquad)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3009:20: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
  if (semantics == (const llvm::fltSemantics *)&semPPCDoubleDoubleLegacy)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~                        ~
                   static_cast<const llvm::fltSemantics *>(             )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3009:74: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (semantics == (const llvm::fltSemantics *)&semPPCDoubleDoubleLegacy)
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3012:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semX87DoubleExtended &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3018:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(semantics == (const llvm::fltSemantics*)&semIEEEsingle &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3020:9: warning: invalid case style for variable 'api' [readability-identifier-naming]
  APInt api = bitcastToAPInt();
        ^~~
        Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3025:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(semantics == (const llvm::fltSemantics*)&semIEEEdouble &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3027:9: warning: invalid case style for variable 'api' [readability-identifier-naming]
  APInt api = bitcastToAPInt();
        ^~~
        Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3038:57: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromF80LongDoubleAPInt(const APInt &api) {
                                                        ^~~~
                                                        Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3039:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(api.getBitWidth()==80);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3040:12: warning: invalid case style for variable 'i1' [readability-identifier-naming]
  uint64_t i1 = api.getRawData()[0];
           ^~
           I1
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3040:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t i1 = api.getRawData()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3041:12: warning: invalid case style for variable 'i2' [readability-identifier-naming]
  uint64_t i2 = api.getRawData()[1];
           ^~
           I2
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3041:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t i2 = api.getRawData()[1];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3042:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint64_t myexponent = (i2 & 0x7fff);
           ^~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3042:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t myexponent = (i2 & 0x7fff);
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3043:12: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint64_t mysignificand = i1;
           ^~~~~~~~~~~~~
           Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3044:11: warning: invalid case style for variable 'myintegerbit' [readability-identifier-naming]
  uint8_t myintegerbit = mysignificand >> 63;
          ^~~~~~~~~~~~
          Myintegerbit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3044:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint8_t myintegerbit = mysignificand >> 63;
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3047:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==2);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3049:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  sign = static_cast<unsigned int>(i2>>15);
                                   ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3060:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[0] = mysignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3061:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[1] = 0;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3065:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[0] = mysignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3066:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[1] = 0;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3067:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (myexponent==0)          // denormal
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3072:59: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromPPCDoubleDoubleAPInt(const APInt &api) {
                                                          ^~~~
                                                          Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3073:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(api.getBitWidth()==128);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3074:12: warning: invalid case style for variable 'i1' [readability-identifier-naming]
  uint64_t i1 = api.getRawData()[0];
           ^~
           I1
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3074:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t i1 = api.getRawData()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3075:12: warning: invalid case style for variable 'i2' [readability-identifier-naming]
  uint64_t i2 = api.getRawData()[1];
           ^~
           I2
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3075:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t i2 = api.getRawData()[1];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3076:12: warning: invalid case style for variable 'fs' [readability-identifier-naming]
  opStatus fs;
           ^~~
           Fs
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3077:8: warning: invalid case style for variable 'losesInfo' [readability-identifier-naming]
  bool losesInfo;
       ^~~~~~~~~~
       LosesInfo
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3080:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  initFromDoubleAPInt(APInt(64, i1));
                      ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3082:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(fs == opOK && !losesInfo);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3087:15: warning: invalid case style for variable 'v' [readability-identifier-naming]
    IEEEFloat v(semIEEEdouble, APInt(64, i2));
              ^~
              V
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3087:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    IEEEFloat v(semIEEEdouble, APInt(64, i2));
                               ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3089:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(fs == opOK && !losesInfo);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3096:53: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromQuadrupleAPInt(const APInt &api) {
                                                    ^~~~
                                                    Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3097:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(api.getBitWidth()==128);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3098:12: warning: invalid case style for variable 'i1' [readability-identifier-naming]
  uint64_t i1 = api.getRawData()[0];
           ^~
           I1
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3098:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t i1 = api.getRawData()[0];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3099:12: warning: invalid case style for variable 'i2' [readability-identifier-naming]
  uint64_t i2 = api.getRawData()[1];
           ^~
           I2
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3099:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t i2 = api.getRawData()[1];
                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3100:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint64_t myexponent = (i2 >> 48) & 0x7fff;
           ^~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3100:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t myexponent = (i2 >> 48) & 0x7fff;
                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3100:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t myexponent = (i2 >> 48) & 0x7fff;
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3101:12: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint64_t mysignificand  = i1;
           ^~~~~~~~~~~~~
           Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3102:12: warning: invalid case style for variable 'mysignificand2' [readability-identifier-naming]
  uint64_t mysignificand2 = i2 & 0xffffffffffffLL;
           ^~~~~~~~~~~~~~
           Mysignificand2
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3102:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t mysignificand2 = i2 & 0xffffffffffffLL;
                            ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3105:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(partCount()==2);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3107:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  sign = static_cast<unsigned int>(i2>>63);
                                   ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3120:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[0] = mysignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3121:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[1] = mysignificand2;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3125:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[0] = mysignificand;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3126:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    significandParts()[1] = mysignificand2;
    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3127:23: warning: statement should be inside braces [readability-braces-around-statements]
    if (myexponent==0)          // denormal
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3129:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3130:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      significandParts()[1] |= 0x1000000000000LL;  // integer bit
      ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3134:50: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromDoubleAPInt(const APInt &api) {
                                                 ^~~~
                                                 Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3135:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(api.getBitWidth()==64);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3136:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  uint64_t i = *api.getRawData();
           ^
           I
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3137:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint64_t myexponent = (i >> 52) & 0x7ff;
           ^~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3137:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t myexponent = (i >> 52) & 0x7ff;
                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3137:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t myexponent = (i >> 52) & 0x7ff;
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3138:12: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint64_t mysignificand = i & 0xfffffffffffffLL;
           ^~~~~~~~~~~~~
           Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3138:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t mysignificand = i & 0xfffffffffffffLL;
                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3141:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3143:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  sign = static_cast<unsigned int>(i>>63);
                                   ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3158:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (myexponent==0)          // denormal
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3160:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3165:49: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromFloatAPInt(const APInt &api) {
                                                ^~~~
                                                Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3166:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(api.getBitWidth()==32);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3167:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  uint32_t i = (uint32_t)*api.getRawData();
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3167:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  uint32_t i = (uint32_t)*api.getRawData();
           ^
           I
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3167:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  uint32_t i = (uint32_t)*api.getRawData();
               ^~~~~~~~~~~                ~
               static_cast<uint32_t>(     )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3168:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint32_t myexponent = (i >> 23) & 0xff;
           ^~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3168:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t myexponent = (i >> 23) & 0xff;
                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3168:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t myexponent = (i >> 23) & 0xff;
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3169:12: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint32_t mysignificand = i & 0x7fffff;
           ^~~~~~~~~~~~~
           Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3169:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t mysignificand = i & 0x7fffff;
                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3172:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(partCount()==1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3174:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  sign = i >> 31;
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3189:23: warning: statement should be inside braces [readability-braces-around-statements]
    if (myexponent==0)    // denormal
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3191:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3196:48: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromHalfAPInt(const APInt &api) {
                                               ^~~~
                                               Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3197:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(api.getBitWidth()==16);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3198:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  uint32_t i = (uint32_t)*api.getRawData();
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3198:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  uint32_t i = (uint32_t)*api.getRawData();
           ^
           I
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3198:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  uint32_t i = (uint32_t)*api.getRawData();
               ^~~~~~~~~~~                ~
               static_cast<uint32_t>(     )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3199:12: warning: invalid case style for variable 'myexponent' [readability-identifier-naming]
  uint32_t myexponent = (i >> 10) & 0x1f;
           ^~~~~~~~~~
           Myexponent
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3199:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t myexponent = (i >> 10) & 0x1f;
                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3199:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t myexponent = (i >> 10) & 0x1f;
                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3200:12: warning: invalid case style for variable 'mysignificand' [readability-identifier-naming]
  uint32_t mysignificand = i & 0x3ff;
           ^~~~~~~~~~~~~
           Mysignificand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3200:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint32_t mysignificand = i & 0x3ff;
                           ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3203:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(partCount()==1);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3205:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  sign = i >> 15;
         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3220:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (myexponent==0)    // denormal
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3222:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3231:69: warning: invalid case style for parameter 'api' [readability-identifier-naming]
void IEEEFloat::initFromAPInt(const fltSemantics *Sem, const APInt &api) {
                                                                    ^~~~
                                                                    Api
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3232:27: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Sem == &semIEEEhalf)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3234:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Sem == &semIEEEsingle)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3236:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Sem == &semIEEEdouble)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3238:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Sem == &semX87DoubleExtended)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3240:27: warning: statement should be inside braces [readability-braces-around-statements]
  if (Sem == &semIEEEquad)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3242:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Sem == &semPPCDoubleDoubleLegacy)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3256:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = Negative;
         ^~~~~~~~~
         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3260:16: warning: invalid case style for variable 'significand' [readability-identifier-naming]
  integerPart *significand = significandParts();
               ^~~~~~~~~~~
               Significand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3268:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  significand[PartCount - 1] = (NumUnusedHighBits < integerPartWidth)
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3281:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = Negative;
         ^~~~~~~~~
         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3294:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = Negative;
         ^~~~~~~~~
         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3296:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  significandParts()[partCountForBits(semantics->precision) - 1] |=
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3297:9: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      (((integerPart)1) << ((semantics->precision - 1) % integerPartWidth));
        ^~~~~~~~~~~~~~~
        static_cast<integerPart>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3300:1: warning: constructor does not initialize these fields: semantics, significand, exponent, category, sign [hicpp-member-init]
IEEEFloat::IEEEFloat(const fltSemantics &Sem, const APInt &API) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3304:1: warning: constructor does not initialize these fields: semantics, significand, exponent, category, sign [cppcoreguidelines-pro-type-member-init]
IEEEFloat::IEEEFloat(float f) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3304:28: warning: invalid case style for parameter 'f' [readability-identifier-naming]
IEEEFloat::IEEEFloat(float f) {
                           ^~
                           F
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3308:1: warning: constructor does not initialize these fields: semantics, significand, exponent, category, sign [cppcoreguidelines-pro-type-member-init]
IEEEFloat::IEEEFloat(double d) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3308:29: warning: invalid case style for parameter 'd' [readability-identifier-naming]
IEEEFloat::IEEEFloat(double d) {
                            ^~
                            D
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3313:38: warning: non-const reference parameter 'Buffer', make it const or use a pointer [google-runtime-references]
  void append(SmallVectorImpl<char> &Buffer, StringRef Str) {
                                     ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3319:8: warning: invalid case style for function 'AdjustToPrecision' [readability-identifier-naming]
  void AdjustToPrecision(APInt &significand,
       ^~~~~~~~~~~~~~~~~~
       adjustToPrecision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3319:33: warning: invalid case style for parameter 'significand' [readability-identifier-naming]
  void AdjustToPrecision(APInt &significand,
                                ^~~~~~~~~~~~
                                Significand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3319:33: warning: non-const reference parameter 'significand', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3320:31: warning: invalid case style for parameter 'exp' [readability-identifier-naming]
                         int &exp, unsigned FormatPrecision) {
                              ^~~~
                              Exp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3320:31: warning: non-const reference parameter 'exp', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3321:14: warning: invalid case style for variable 'bits' [readability-identifier-naming]
    unsigned bits = significand.getActiveBits();
             ^~~~
             Bits
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3324:14: warning: invalid case style for variable 'bitsRequired' [readability-identifier-naming]
    unsigned bitsRequired = (FormatPrecision * 196 + 58) / 59;
             ^~~~~~~~~~~~
             BitsRequired
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3326:30: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (bits <= bitsRequired) return;
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3328:14: warning: invalid case style for variable 'tensRemovable' [readability-identifier-naming]
    unsigned tensRemovable = (bits - bitsRequired) * 59 / 196;
             ^~~~~~~~~~~~~
             TensRemovable
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3329:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!tensRemovable) return;
        ~^~~~~~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3329:24: warning: statement should be inside braces [readability-braces-around-statements]
    if (!tensRemovable) return;
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3333:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    APInt divisor(significand.getBitWidth(), 1);
          ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3333:11: warning: invalid case style for variable 'divisor' [readability-identifier-naming]
    APInt divisor(significand.getBitWidth(), 1);
          ^~~~~~~~
          Divisor
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3334:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    APInt powten(significand.getBitWidth(), 10);
          ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3334:11: warning: invalid case style for variable 'powten' [readability-identifier-naming]
    APInt powten(significand.getBitWidth(), 10);
          ^~~~~~~
          Powten
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3336:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (tensRemovable & 1)
          ^~~~~~~~~~~~~    ~
          (                ) != 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3336:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3336:29: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (tensRemovable & 1)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3339:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (!tensRemovable) break;
          ~^~~~~~~~~~~~~~
           == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3339:26: warning: statement should be inside braces [readability-braces-around-statements]
      if (!tensRemovable) break;
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3350:8: warning: invalid case style for function 'AdjustToPrecision' [readability-identifier-naming]
  void AdjustToPrecision(SmallVectorImpl<char> &buffer,
       ^~~~~~~~~~~~~~~~~~
       adjustToPrecision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3350:49: warning: invalid case style for parameter 'buffer' [readability-identifier-naming]
  void AdjustToPrecision(SmallVectorImpl<char> &buffer,
                                                ^~~~~~~
                                                Buffer
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3350:49: warning: non-const reference parameter 'buffer', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3351:31: warning: invalid case style for parameter 'exp' [readability-identifier-naming]
                         int &exp, unsigned FormatPrecision) {
                              ^~~~
                              Exp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3351:31: warning: non-const reference parameter 'exp', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3353:30: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (N <= FormatPrecision) return;
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3364:70: warning: statement should be inside braces [readability-braces-around-statements]
      while (FirstSignificant < N && buffer[FirstSignificant] == '0')
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3394:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3312:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3400:22: warning: statement should be inside braces [readability-braces-around-statements]
    if (isNegative())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3402:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3408:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isNegative())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3411:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!FormatMaxPadding) {
        ~^~~~~~~~~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3412:24: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (TruncateZero)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3416:33: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (FormatPrecision > 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3420:11: warning: statement should be inside braces [readability-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3428:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (isNegative())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3432:7: warning: invalid case style for variable 'exp' [readability-identifier-naming]
  int exp = exponent - ((int) semantics->precision - 1);
      ^~~
      Exp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3432:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  int exp = exponent - ((int) semantics->precision - 1);
                        ^~~~~~~~~~~~~~~
                        static_cast<int>(         )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3433:9: warning: invalid case style for variable 'significand' [readability-identifier-naming]
  APInt significand(semantics->precision,
        ^~~~~~~~~~~~
        Significand
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3439:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!FormatPrecision) {
      ~^~~~~~~~~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3451:7: warning: invalid case style for variable 'trailingZeros' [readability-identifier-naming]
  int trailingZeros = significand.countTrailingZeros();
      ^~~~~~~~~~~~~
      TrailingZeros
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3464:9: warning: invalid case style for variable 'texp' [readability-identifier-naming]
    int texp = -exp;
        ^~~~
        Texp
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3475:14: warning: invalid case style for variable 'precision' [readability-identifier-naming]
    unsigned precision = semantics->precision + (137 * texp + 136) / 59;
             ^~~~~~~~~
             Precision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3480:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    APInt five_to_the_i(precision, 5);
          ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3480:11: warning: invalid case style for variable 'five_to_the_i' [readability-identifier-naming]
    APInt five_to_the_i(precision, 5);
          ^~~~~~~~~~~~~~
          FiveToTheI
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3482:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      if (texp & 1) significand *= five_to_the_i;
          ^~~~    ~
          (       ) != 0
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3482:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3482:20: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (texp & 1) significand *= five_to_the_i;
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3485:12: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      if (!texp) break;
          ~^~~~~
           == 0
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3485:17: warning: statement should be inside braces [readability-braces-around-statements]
      if (!texp) break;
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3492:26: warning: invalid case style for variable 'buffer' [readability-identifier-naming]
  SmallVector<char, 256> buffer;
                         ^~~~~~~
                         Buffer
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3495:12: warning: invalid case style for variable 'precision' [readability-identifier-naming]
  unsigned precision = significand.getBitWidth();
           ^~~~~~~~~
           Precision
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3496:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt ten(precision, 10);
        ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3496:9: warning: invalid case style for variable 'ten' [readability-identifier-naming]
  APInt ten(precision, 10);
        ^~~~
        Ten
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3497:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  APInt digit(precision, 0);
        ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3497:9: warning: invalid case style for variable 'digit' [readability-identifier-naming]
  APInt digit(precision, 0);
        ^~~~~~
        Digit
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3499:8: warning: invalid case style for variable 'inTrail' [readability-identifier-naming]
  bool inTrail = true;
       ^~~~~~~
       InTrail
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3505:14: warning: invalid case style for variable 'd' [readability-identifier-naming]
    unsigned d = digit.getZExtValue();
             ^
             D
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3508:21: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (inTrail && !d) exp++;
                   ~^~
                   ( == 0u)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3508:23: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (inTrail && !d) exp++;
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3510:24: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      buffer.push_back((char) ('0' + d));
                       ^~~~~~~~
                       static_cast<char>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3515:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!buffer.empty() && "no characters in buffer!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3518:3: warning: missing username/bug in TODO [google-readability-todo]
  // TODO: don't do more precise calculations above than are required.
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // TODO(jonas): don't do more precise calculations above than are required.
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3525:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!FormatMaxPadding)
      ~^~~~~~~~~~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3525:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (!FormatMaxPadding)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3532:27: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      FormatScientific = ((unsigned) exp > FormatMaxPadding ||
                          ^~~~~~~~~~~~~~
                          static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3533:37: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                          NDigits + (unsigned) exp > FormatPrecision);
                                    ^~~~~~~~~~~~~~
                                    static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3536:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      int MSD = exp + (int) (NDigits - 1);
                      ^~~~~~~
                      static_cast<int>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3543:29: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        FormatScientific = ((unsigned) -MSD) > FormatMaxPadding;
                            ^~~~~~~~~~~~   ~
                            static_cast<unsigned>( )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3554:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (NDigits == 1 && TruncateZero)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3556:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3557:46: warning: statement should be inside braces [readability-braces-around-statements]
      for (unsigned I = 1; I != NDigits; ++I)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3560:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!TruncateZero && FormatPrecision > NDigits - 1)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3566:17: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (exp < 0) exp = -exp;
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3567:26: warning: invalid case style for variable 'expbuf' [readability-identifier-naming]
    SmallVector<char, 6> expbuf;
                         ^~~~~~~
                         Expbuf
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3569:24: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      expbuf.push_back((char) ('0' + (exp % 10)));
                       ^~~~~~~~
                       static_cast<char>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3571:14: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    } while (exp);
             ^  ~
                 != 0
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3573:44: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!TruncateZero && expbuf.size() < 2)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3575:57: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (unsigned I = 0, E = expbuf.size(); I != E; ++I)
                                                        ^
                                                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3582:44: warning: statement should be inside braces [hicpp-braces-around-statements]
    for (unsigned I = 0; I != NDigits; ++I)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3584:31: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    for (unsigned I = 0; I != (unsigned) exp; ++I)
                              ^~~~~~~~~~~~~~~
                              static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3584:51: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (unsigned I = 0; I != (unsigned) exp; ++I)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3592:28: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  int NWholeDigits = exp + (int) NDigits;
                           ^~~~~~~~~~~~~~
                           static_cast<int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3596:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    for (; I != (unsigned) NWholeDigits; ++I)
                ^~~~~~~~~~~~~~~~~~~~~~~~
                static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3596:46: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (; I != (unsigned) NWholeDigits; ++I)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3600:27: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    unsigned NZeros = 1 + (unsigned) -NWholeDigits;
                          ^~~~~~~~~~~~            ~
                          static_cast<unsigned>(  )
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3604:43: warning: statement should be inside braces [readability-braces-around-statements]
    for (unsigned Z = 1; Z != NZeros; ++Z)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3608:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (; I != NDigits; ++I)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3612:42: warning: invalid case style for parameter 'inv' [readability-identifier-naming]
bool IEEEFloat::getExactInverse(APFloat *inv) const {
                                         ^~~~
                                         Inv
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3614:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!isFiniteNonZero())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3619:52: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (significandLSB() != semantics->precision - 1)
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3623:13: warning: invalid case style for variable 'reciprocal' [readability-identifier-naming]
  IEEEFloat reciprocal(*semantics, 1ULL);
            ^~~~~~~~~~~
            Reciprocal
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3624:61: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (reciprocal.divide(*this, rmNearestTiesToEven) != opOK)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3629:31: warning: statement should be inside braces [readability-braces-around-statements]
  if (reciprocal.isDenormal())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3632:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(reciprocal.isFiniteNonZero() &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3635:7: warning: implicit conversion 'llvm::APFloat *' -> bool [readability-implicit-bool-conversion]
  if (inv)
      ^  ~
          != nullptr
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3635:11: warning: statement should be inside braces [readability-braces-around-statements]
  if (inv)
          ^
           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3642:16: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!isNaN())
               ^
                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3647:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  return !APInt::tcExtractBit(significandParts(), semantics->precision - 2);
         ~^~~~~                                                            ~
                                                                            == 0
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3654:42: warning: invalid case style for parameter 'nextDown' [readability-identifier-naming]
IEEEFloat::opStatus IEEEFloat::next(bool nextDown) {
                                         ^~~~~~~~~
                                         NextDown
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3656:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (nextDown)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3660:12: warning: invalid case style for variable 'result' [readability-identifier-naming]
  opStatus result = opOK;
           ^~~~~~
           Result
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3666:23: warning: statement should be inside braces [readability-braces-around-statements]
    if (!isNegative())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3752:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
        assert(exponent != semantics->maxExponent &&
        ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3764:16: warning: statement should be inside braces [readability-braces-around-statements]
  if (nextDown)
               ^
                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3772:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = Negative;
         ^~~~~~~~~
         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3779:10: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
  sign = Negative;
         ^~~~~~~~~
         static_cast<unsigned int>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3785:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(isNaN());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3790:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Arg.isNaN())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3792:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Arg.isZero())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3794:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (Arg.isInfinity())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3796:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Arg.isDenormal())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3823:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (X.isNaN())
                ^
                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3838:33: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Exp == IEEEFloat::IEK_Inf)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3850:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3853:69: warning: all parameters should be named in a function [readability-named-parameter]
DoubleAPFloat::DoubleAPFloat(const fltSemantics &S, uninitializedTag)
                                                                    ^
                                                                     /*unused*/
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3857:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3863:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3869:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          APFloat(semIEEEdouble, APInt(64, I.getRawData()[0])),
                                 ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3869:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          APFloat(semIEEEdouble, APInt(64, I.getRawData()[0])),
                                             ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3870:34: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          APFloat(semIEEEdouble, APInt(64, I.getRawData()[1]))}) {
                                 ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3870:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          APFloat(semIEEEdouble, APInt(64, I.getRawData()[1]))}) {
                                             ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3871:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3878:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3879:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&Floats[0].getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3880:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&Floats[1].getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3888:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3891:16: warning: move constructors should be marked noexcept [hicpp-noexcept-move]
DoubleAPFloat::DoubleAPFloat(DoubleAPFloat &&RHS)
               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3894:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3911:57: warning: invalid case style for parameter 'a' [readability-identifier-naming]
APFloat::opStatus DoubleAPFloat::addImpl(const APFloat &a, const APFloat &aa,
                                                        ^~
                                                        A
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3911:75: warning: invalid case style for parameter 'aa' [readability-identifier-naming]
APFloat::opStatus DoubleAPFloat::addImpl(const APFloat &a, const APFloat &aa,
                                                                          ^~~
                                                                          Aa
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3912:57: warning: invalid case style for parameter 'c' [readability-identifier-naming]
                                         const APFloat &c, const APFloat &cc,
                                                        ^~
                                                        C
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3912:75: warning: invalid case style for parameter 'cc' [readability-identifier-naming]
                                         const APFloat &c, const APFloat &cc,
                                                                          ^~~
                                                                          Cc
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3915:11: warning: invalid case style for variable 'z' [readability-identifier-naming]
  APFloat z = a;
          ^
          Z
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3921:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      return (opStatus)Status;
             ^~~~~~~~~~~~~~~~~
             static_cast<opStatus>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3939:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      return (opStatus)Status;
             ^~~~~~~~~~~~~~~~~
             static_cast<opStatus>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3942:13: warning: invalid case style for variable 'zz' [readability-identifier-naming]
    APFloat zz = aa;
            ^~
            Zz
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3959:13: warning: invalid case style for variable 'q' [readability-identifier-naming]
    APFloat q = a;
            ^
            Q
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3964:10: warning: invalid case style for variable 'zz' [readability-identifier-naming]
    auto zz = q;
         ^~
         Zz
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3981:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      return (opStatus)Status;
             ^~~~~~~~~~~~~~~~~
             static_cast<opStatus>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:3987:10: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return (opStatus)Status;
         ^~~~~~~~~~~~~~~~~
         static_cast<opStatus>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4023:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(LHS.getCategory() == fcNormal && RHS.getCategory() == fcNormal);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4027:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&A.getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4028:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&AA.getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4029:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&C.getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4030:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&CC.getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4031:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&Out.Floats[0].getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4032:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&Out.Floats[1].getSemantics() == &semIEEEdouble);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4089:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(LHS.getCategory() == fcNormal && RHS.getCategory() == fcNormal &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4100:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    return (opStatus)Status;
           ^~~~~~~~~~~~~~~~~
           static_cast<opStatus>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4132:10: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  return (opStatus)Status;
         ^~~~~~~~~~~~~~~~~
         static_cast<opStatus>()
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4137:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4146:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4155:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4166:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4176:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4191:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Result != cmpEqual)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4197:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (Against && !RHSAgainst)
        ^~~~~~~
        ( != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4197:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (Against && !RHSAgainst)
                   ~^~~~~~~~~~~
                   ( == 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4197:32: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Against && !RHSAgainst)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4199:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (!Against && RHSAgainst)
        ~^~~~~~~
        ( == 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4199:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (!Against && RHSAgainst)
                    ^~~~~~~~~~~
                    ( != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4199:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Against && RHSAgainst)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4201:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (!Against && !RHSAgainst)
        ~^~~~~~~
        ( == 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4201:22: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (!Against && !RHSAgainst)
                    ~^~~~~~~~~~~
                    ( == 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4201:33: warning: statement should be inside braces [readability-braces-around-statements]
    if (!Against && !RHSAgainst)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4203:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (Against && RHSAgainst)
        ^~~~~~~
        ( != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4203:20: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (Against && RHSAgainst)
                   ^~~~~~~~~~~
                   ( != 0)
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4203:31: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Against && RHSAgainst)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4204:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      return (cmpResult)(cmpLessThan + cmpGreaterThan - Result);
             ^~~~~~~~~~~~
             static_cast<cmpResult>
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4226:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4227:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Floats[0] = APFloat(semIEEEdouble, APInt(64, 0x7fefffffffffffffull));
                                     ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4228:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Floats[1] = APFloat(semIEEEdouble, APInt(64, 0x7c8ffffffffffffeull));
                                     ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4229:11: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Neg)
          ^
           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4234:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4240:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4241:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Floats[0] = APFloat(semIEEEdouble, APInt(64, 0x0360000000000000ull));
                                     ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4242:11: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Neg)
          ^
           {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4247:63: warning: invalid case style for parameter 'fill' [readability-identifier-naming]
void DoubleAPFloat::makeNaN(bool SNaN, bool Neg, const APInt *fill) {
                                                              ^~~~~
                                                              Fill
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4255:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Result == APFloat::cmpEqual)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4265:11: warning: invalid case style for function 'hash_value' [readability-identifier-naming]
hash_code hash_value(const DoubleAPFloat &Arg) {
          ^~~~~~~~~~~
          hashValue
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4266:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (Arg.Floats)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4272:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4274:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Floats[0].bitcastToAPInt().getRawData()[0],
                                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4275:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Floats[1].bitcastToAPInt().getRawData()[0],
                                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4277:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  return APInt(128, 2, Data);
                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4282:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4289:44: warning: invalid case style for parameter 'nextDown' [readability-identifier-naming]
APFloat::opStatus DoubleAPFloat::next(bool nextDown) {
                                           ^~~~~~~~~
                                           NextDown
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4290:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4301:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4309:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4320:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4331:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4342:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4355:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getCategory() != fcNormal)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4363:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (getCategory() != fcNormal)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4371:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4379:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4384:46: warning: invalid case style for parameter 'inv' [readability-identifier-naming]
bool DoubleAPFloat::getExactInverse(APFloat *inv) const {
                                             ^~~~
                                             Inv
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4385:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4387:8: warning: implicit conversion 'llvm::APFloat *' -> bool [readability-implicit-bool-conversion]
  if (!inv)
      ~^~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4387:12: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!inv)
           ^
            {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4396:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Arg.Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4403:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Arg.Semantics == &semPPCDoubleDouble && "Unexpected Semantics");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4406:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arg.getCategory() == APFloat::fcNormal)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4411:2: warning: namespace 'detail' ends with an unrecognized comment [llvm-namespace-comment]
} // End detail namespace
 ^~~~~~~~~~~~~~~~~~~~~~~~
  // namespace detail
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:652:11: note: namespace 'detail' starts here
namespace detail {
          ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4413:1: warning: union constructor should initialize one of these fields: semantics, IEEE [cppcoreguidelines-pro-type-member-init]
APFloat::Storage::Storage(IEEEFloat F, const fltSemantics &Semantics) {
^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4420:56: warning: 'F' used after it was moved [hicpp-invalid-access-moved]
        DoubleAPFloat(Semantics, APFloat(std::move(F), F.getSemantics()),
                                                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4420:42: note: move occurred here
        DoubleAPFloat(Semantics, APFloat(std::move(F), F.getSemantics()),
                                         ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4420:56: note: the use and move are unsequenced, i.e. there is no guarantee about the order in which they are evaluated
        DoubleAPFloat(Semantics, APFloat(std::move(F), F.getSemantics()),
                                                       ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4428:3: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  APFLOAT_DISPATCH_ON_SEMANTICS(convertFromString(Str, RM));
  ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:33:16: note: expanded from macro 'APFLOAT_DISPATCH_ON_SEMANTICS'
      return U.IEEE.METHOD_CALL;                                               \
               ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4431:11: warning: invalid case style for function 'hash_value' [readability-identifier-naming]
hash_code hash_value(const APFloat &Arg) {
          ^~~~~~~~~~~
          hashValue
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4432:66: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (APFloat::usesLayout<detail::IEEEFloat>(Arg.getSemantics()))
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4433:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return hash_value(Arg.U.IEEE);
                            ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4434:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (APFloat::usesLayout<detail::DoubleAPFloat>(Arg.getSemantics()))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4435:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return hash_value(Arg.U.Double);
                            ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4445:59: warning: invalid case style for parameter 'losesInfo' [readability-identifier-naming]
                                   roundingMode RM, bool *losesInfo) {
                                                          ^~~~~~~~~~
                                                          LosesInfo
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4451:42: warning: statement should be inside braces [readability-braces-around-statements]
      usesLayout<IEEEFloat>(ToSemantics))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4452:14: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return U.IEEE.convert(ToSemantics, RM, losesInfo);
             ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4455:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(&ToSemantics == &semPPCDoubleDouble);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4456:18: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    auto Ret = U.IEEE.convert(semPPCDoubleDoubleLegacy, RM, losesInfo);
                 ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4457:36: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    *this = APFloat(ToSemantics, U.IEEE.bitcastToAPInt());
                                   ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4469:58: warning: invalid case style for parameter 'isIEEE' [readability-identifier-naming]
APFloat APFloat::getAllOnesValue(unsigned BitWidth, bool isIEEE) {
                                                         ^~~~~~~
                                                         IsIeee
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4486:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(BitWidth == 128);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4493:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  toString(Buffer);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/APFloat.h:1167:45: note: default parameter was declared here
  void toString(SmallVectorImpl<char> &Str, unsigned FormatPrecision = 0,
                                            ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4501:15: warning: invalid case style for function 'Profile' [readability-identifier-naming]
void APFloat::Profile(FoldingSetNodeID &NID) const {
              ^~~~~~~~
              profile
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4509:53: warning: invalid case style for parameter 'result' [readability-identifier-naming]
APFloat::opStatus APFloat::convertToInteger(APSInt &result,
                                                    ^~~~~~~
                                                    Result
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4510:58: warning: invalid case style for parameter 'rounding_mode' [readability-identifier-naming]
                                            roundingMode rounding_mode,
                                                         ^~~~~~~~~~~~~~
                                                         RoundingMode
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4511:51: warning: invalid case style for parameter 'isExact' [readability-identifier-naming]
                                            bool *isExact) const {
                                                  ^~~~~~~~
                                                  IsExact
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4512:12: warning: invalid case style for variable 'bitWidth' [readability-identifier-naming]
  unsigned bitWidth = result.getBitWidth();
           ^~~~~~~~
           BitWidth
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4513:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  SmallVector<uint64_t, 4> parts(result.getNumWords());
                           ^
../include/llvm/ADT/SmallVector.h:856:37: note: default parameter was declared here
  explicit SmallVector(size_t Size, const T &Value = T())
                                    ^
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4513:28: warning: invalid case style for variable 'parts' [readability-identifier-naming]
  SmallVector<uint64_t, 4> parts(result.getNumWords());
                           ^~~~~~
                           Parts
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4514:12: warning: invalid case style for variable 'status' [readability-identifier-naming]
  opStatus status = convertToInteger(parts, bitWidth, result.isSigned(),
           ^~~~~~
           Status
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:4521:2: warning: namespace 'llvm' ends with an unrecognized comment [llvm-namespace-comment]
} // End llvm namespace
 ^~~~~~~~~~~~~~~~~~~~~~
  // namespace llvm
/home/jonas/opt/llvm/lib/Support/APFloat.cpp:53:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:18:1: warning: cannot overload 'operator[]' [fuchsia-overloaded-operator]
Value &Object::operator[](const ObjectKey &K) {
^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:21:1: warning: cannot overload 'operator[]' [fuchsia-overloaded-operator]
Value &Object::operator[](ObjectKey &&K) {
^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:26:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (I == end())
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:32:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (I == end())
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:37:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:42:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:47:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:52:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:57:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:62:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:67:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:72:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:77:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (auto *V = get(K))
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:81:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool operator==(const Object &LHS, const Object &RHS) {
^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:82:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (LHS.size() != RHS.size())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:86:49: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (R == RHS.end() || L.second != R->second)
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:96:21: warning: std::move of the const variable 'V' has no effect; remove std::move() or make the variable non-const [hicpp-move-const-arg]
    back().moveFrom(std::move(V));
                    ^~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/JSON.cpp:110:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    memcpy(Union.buffer, M.Union.buffer, sizeof(Union.buffer));
           ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:110:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    memcpy(Union.buffer, M.Union.buffer, sizeof(Union.buffer));
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:134:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    memcpy(Union.buffer, M.Union.buffer, sizeof(Union.buffer));
           ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:134:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    memcpy(Union.buffer, M.Union.buffer, sizeof(Union.buffer));
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:176:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool operator==(const Value &L, const Value &R) {
^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:177:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (L.kind() != R.kind())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:200:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  Parser(StringRef JSON)
  ^~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/JSON.cpp:205:59: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isUTF8(StringRef(Start, End - Start), &ErrOffset))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:207:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    P = Start + ErrOffset; // For line/column calculation.
              ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:211:26: warning: non-const reference parameter 'Out', make it const or use a pointer [google-runtime-references]
  bool parseValue(Value &Out);
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:215:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (P == End)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:221:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Err);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:227:78: warning: statement should be inside braces [hicpp-braces-around-statements]
    while (P != End && (*P == ' ' || *P == '\r' || *P == '\n' || *P == '\t'))
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:228:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++P;
      ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:232:39: warning: non-const reference parameter 'Out', make it const or use a pointer [google-runtime-references]
  bool parseNumber(char First, Value &Out);
                                      ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:233:33: warning: non-const reference parameter 'Out', make it const or use a pointer [google-runtime-references]
  bool parseString(std::string &Out);
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:234:34: warning: non-const reference parameter 'Out', make it const or use a pointer [google-runtime-references]
  bool parseUnicode(std::string &Out);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:237:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  char next() { return P == End ? 0 : *P++; }
                                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:251:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (P == End)
               ^
                {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:280:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++P;
      ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:285:33: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!parseValue(A.back()))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:304:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++P;
      ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:308:25: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (next() != '"')
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:311:27: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!parseString(K))
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:314:25: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (next() != ':')
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:317:40: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!parseValue(O[std::move(K)]))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:332:21: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isNumber(C))
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:342:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (isNumber(peek()))
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:361:33: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (LLVM_UNLIKELY(P == End))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:363:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (LLVM_UNLIKELY((C & 0x1f) == C))
                       ^
../include/llvm/Support/Compiler.h:189:53: note: expanded from macro 'LLVM_UNLIKELY'
#define LLVM_UNLIKELY(EXPR) __builtin_expect((bool)(EXPR), false)
                                                    ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:363:40: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (LLVM_UNLIKELY((C & 0x1f) == C))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:392:30: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!parseUnicode(Out))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:402:13: warning: 'encodeUtf8' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
static void encodeUtf8(uint32_t Rune, std::string &Out) {
~~~~~~~~~~~~^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:402:52: warning: non-const reference parameter 'Out', make it const or use a pointer [google-runtime-references]
static void encodeUtf8(uint32_t Rune, std::string &Out) {
                                                   ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:404:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Out.push_back(Rune & 0x7F);
                  ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:406:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xC0 | ((Rune & 0x7C0) >> 6);
                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:406:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xC0 | ((Rune & 0x7C0) >> 6);
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:406:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xC0 | ((Rune & 0x7C0) >> 6);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:407:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | (Rune & 0x3F);
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:407:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | (Rune & 0x3F);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:411:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xE0 | ((Rune & 0xF000) >> 12);
                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:411:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xE0 | ((Rune & 0xF000) >> 12);
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:411:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xE0 | ((Rune & 0xF000) >> 12);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:412:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((Rune & 0xFC0) >> 6);
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:412:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((Rune & 0xFC0) >> 6);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:412:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((Rune & 0xFC0) >> 6);
                                  ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:413:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | (Rune & 0x3F);
                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:413:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | (Rune & 0x3F);
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:418:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xF0 | ((Rune & 0x1F0000) >> 18);
                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:418:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xF0 | ((Rune & 0x1F0000) >> 18);
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:418:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xF0 | ((Rune & 0x1F0000) >> 18);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:419:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((Rune & 0x3F000) >> 12);
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:419:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((Rune & 0x3F000) >> 12);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:419:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((Rune & 0x3F000) >> 12);
                                  ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:420:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | ((Rune & 0xFC0) >> 6);
                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:420:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | ((Rune & 0xFC0) >> 6);
                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:420:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | ((Rune & 0xFC0) >> 6);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:421:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FourthByte = 0x80 | (Rune & 0x3F);
                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:421:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FourthByte = 0x80 | (Rune & 0x3F);
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:443:12: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      if (!std::isxdigit(C))
          ~^~~             ~
                            == 0
/home/jonas/opt/llvm/lib/Support/JSON.cpp:443:29: warning: statement should be inside braces [readability-braces-around-statements]
      if (!std::isxdigit(C))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:446:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Out |= (C > '9') ? (C & ~0x20) - 'A' + 10 : (C - '0');
                          ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:446:31: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
      Out |= (C > '9') ? (C & ~0x20) - 'A' + 10 : (C - '0');
                              ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:451:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Parse4Hex(First))
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:470:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (LLVM_UNLIKELY(P + 2 > End || *P != '\\' || *(P + 1) != 'u')) {
                        ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:470:56: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (LLVM_UNLIKELY(P + 2 > End || *P != '\\' || *(P + 1) != 'u')) {
                                                       ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:474:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    P += 2;
      ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:476:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Parse4Hex(Second))
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:485:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    encodeUtf8(0x10000 | ((First - 0xD800) << 10) | (Second - 0xDC00), Out);
               ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:485:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    encodeUtf8(0x10000 | ((First - 0xD800) << 10) | (Second - 0xDC00), Out);
                          ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:493:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (const char *X = Start; X < P; ++X) {
                                     ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:496:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      StartOfLine = X + 1;
                      ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:508:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (P.checkUTF8())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:509:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (P.parseValue(E))
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:510:25: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (P.assertEnd())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:511:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return std::move(E);
               ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:518:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto &E : O)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:529:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (LLVM_LIKELY(isASCII(S)))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:532:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const UTF8 *Data = reinterpret_cast<const UTF8 *>(S.data()), *Rest = Data;
                     ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:533:49: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (LLVM_LIKELY(isLegalUTF8String(&Rest, Data + S.size())))
                                                ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:533:62: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (LLVM_LIKELY(isLegalUTF8String(&Rest, Data + S.size())))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:536:7: warning: implicit conversion 'size_t *' (aka 'unsigned long *') -> bool [readability-implicit-bool-conversion]
  if (ErrOffset)
      ^        ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/JSON.cpp:536:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (ErrOffset)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:543:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::vector<UTF32> Codepoints(S.size()); // 1 codepoint per byte suffices.
                     ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:415:29: note: default parameter was declared here
      vector(size_type __n, const allocator_type& __a = allocator_type())
                            ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:544:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  const UTF8 *In8 = reinterpret_cast<const UTF8 *>(S.data());
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/JSON.cpp:544:21: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const UTF8 *In8 = reinterpret_cast<const UTF8 *>(S.data());
                    ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:546:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ConvertUTF8toUTF32(&In8, In8 + S.size(), &Out32, Out32 + Codepoints.size(),
                               ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:546:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ConvertUTF8toUTF32(&In8, In8 + S.size(), &Out32, Out32 + Codepoints.size(),
                                                         ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:549:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Res(4 * Codepoints.size(), 0); // 4 bytes per codepoint suffice
              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:551:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  UTF8 *Out8 = reinterpret_cast<UTF8 *>(&Res[0]);
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/JSON.cpp:551:16: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  UTF8 *Out8 = reinterpret_cast<UTF8 *>(&Res[0]);
               ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:552:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ConvertUTF32toUTF8(&In32, In32 + Codepoints.size(), &Out8, Out8 + Res.size(),
                                 ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:552:67: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  ConvertUTF32toUTF8(&In32, In32 + Codepoints.size(), &Out8, Out8 + Res.size(),
                                                                  ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:554:14: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  Res.resize(reinterpret_cast<char *>(Out8) - Res.data());
             ^
/home/jonas/opt/llvm/lib/Support/JSON.cpp:564:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (C == 0x22 || C == 0x5C)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:626:17: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Comma)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:636:15: warning: statement should be inside braces [readability-braces-around-statements]
    if (Comma)
              ^
               {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:646:17: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Comma)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:653:15: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Comma)
              ^
               {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:668:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Options.getAsInteger(/*Radix=*/10, IndentAmount))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/JSON.cpp:690:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
llvm::raw_ostream &llvm::json::operator<<(raw_ostream &OS, const Value &E) {
^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:75:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:80:18: warning: invalid case style for variable 'ptr' [readability-identifier-naming]
  const uint8_t *ptr;
                 ^~~~
                 Ptr
/home/jonas/opt/llvm/lib/Support/MD5.cpp:81:15: warning: invalid case style for variable 'a' [readability-identifier-naming]
  MD5_u32plus a, b, c, d;
              ^~
              A
/home/jonas/opt/llvm/lib/Support/MD5.cpp:81:18: warning: invalid case style for variable 'b' [readability-identifier-naming]
  MD5_u32plus a, b, c, d;
                 ^~
                 B
/home/jonas/opt/llvm/lib/Support/MD5.cpp:81:21: warning: invalid case style for variable 'c' [readability-identifier-naming]
  MD5_u32plus a, b, c, d;
                    ^~
                    C
/home/jonas/opt/llvm/lib/Support/MD5.cpp:81:24: warning: invalid case style for variable 'd' [readability-identifier-naming]
  MD5_u32plus a, b, c, d;
                       ^~
                       D
/home/jonas/opt/llvm/lib/Support/MD5.cpp:82:15: warning: invalid case style for variable 'saved_a' [readability-identifier-naming]
  MD5_u32plus saved_a, saved_b, saved_c, saved_d;
              ^~~~~~~~
              SavedA
/home/jonas/opt/llvm/lib/Support/MD5.cpp:82:24: warning: invalid case style for variable 'saved_b' [readability-identifier-naming]
  MD5_u32plus saved_a, saved_b, saved_c, saved_d;
                       ^~~~~~~~
                       SavedB
/home/jonas/opt/llvm/lib/Support/MD5.cpp:82:33: warning: invalid case style for variable 'saved_c' [readability-identifier-naming]
  MD5_u32plus saved_a, saved_b, saved_c, saved_d;
                                ^~~~~~~~
                                SavedC
/home/jonas/opt/llvm/lib/Support/MD5.cpp:82:42: warning: invalid case style for variable 'saved_d' [readability-identifier-naming]
  MD5_u32plus saved_a, saved_b, saved_c, saved_d;
                                         ^~~~~~~~
                                         SavedD
/home/jonas/opt/llvm/lib/Support/MD5.cpp:83:3: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
  unsigned long Size = Data.size();
  ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:99:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:99:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:99:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:100:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:100:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:52: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                                   ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:100:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:38: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:101:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:101:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:101:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:71:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 2] << 16) |                                \
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:102:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:102:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:52: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                                   ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:102:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:38: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:103:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:103:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:103:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:104:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:104:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:22: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:104:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:71:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 2] << 16) |                                \
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:105:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:105:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:105:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:106:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:106:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:22: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:106:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:107:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:107:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:107:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:108:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:108:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:22: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:108:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:38: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:109:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:109:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:109:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:38: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:110:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:110:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:71:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 2] << 16) |                                \
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:110:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:71:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 2] << 16) |                                \
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:111:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:111:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:22: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:111:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:112:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:112:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:71:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 2] << 16) |                                \
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:112:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:72:9: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 3] << 24))
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:113:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:113:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:22: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:113:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:38: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:114:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:114:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:71:23: note: expanded from macro 'SET'
       ((MD5_u32plus) ptr[(n) * 4 + 2] << 16) |                                \
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:114:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
                        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:70:38: note: expanded from macro 'SET'
       (MD5_u32plus) ptr[(n) * 4] | ((MD5_u32plus) ptr[(n) * 4 + 1] << 8) |    \
                                     ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:62:30: note: expanded from macro 'STEP'
  (a) += f((b), (c), (d)) + (x) + (t);                                         \
                             ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:117:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:118:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:119:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:120:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:121:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:122:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:123:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:124:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:125:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:126:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:127:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:128:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:129:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:130:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:131:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:132:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:135:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:136:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, d, a, b, c, GET(8), 0x8771f681, 11)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:137:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:138:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, b, c, d, a, GET(14), 0xfde5380c, 23)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:139:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:140:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, d, a, b, c, GET(4), 0x4bdecfa9, 11)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:141:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:142:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, b, c, d, a, GET(10), 0xbebfbc70, 23)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:143:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:144:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, d, a, b, c, GET(0), 0xeaa127fa, 11)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:145:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:146:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, b, c, d, a, GET(6), 0x04881d05, 23)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:147:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:148:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, d, a, b, c, GET(12), 0xe6db99e5, 11)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:149:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:150:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(H, b, c, d, a, GET(2), 0xc4ac5665, 23)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:153:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:154:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:155:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:156:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:157:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:158:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:159:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:160:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:161:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:162:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:163:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:164:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:165:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:166:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:167:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:11: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:168:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:63:26: note: expanded from macro 'STEP'
  (a) = (((a) << (s)) | (((a) & 0xffffffff) >> (32 - (s))));                   \
                         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:175:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ptr += 64;
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:176:12: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
  } while (Size -= 64);
           ^         ~
                      != 0u
/home/jonas/opt/llvm/lib/Support/MD5.cpp:186:1: warning: constructor does not initialize these fields: buffer, block [hicpp-member-init]
MD5::MD5() = default;
^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:190:15: warning: invalid case style for variable 'saved_lo' [readability-identifier-naming]
  MD5_u32plus saved_lo;
              ^~~~~~~~~
              SavedLo
/home/jonas/opt/llvm/lib/Support/MD5.cpp:191:3: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
  unsigned long used, free;
  ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:191:17: warning: invalid case style for variable 'used' [readability-identifier-naming]
  unsigned long used, free;
                ^~~~~
                Used
/home/jonas/opt/llvm/lib/Support/MD5.cpp:191:23: warning: invalid case style for variable 'free' [readability-identifier-naming]
  unsigned long used, free;
                      ^~~~~
                      Free
/home/jonas/opt/llvm/lib/Support/MD5.cpp:193:3: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
  unsigned long Size = Data.size();
  ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:196:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((lo = (saved_lo + Size) & 0x1fffffff) < saved_lo)
            ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:196:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((lo = (saved_lo + Size) & 0x1fffffff) < saved_lo)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/MD5.cpp:198:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  hi += Size >> 29;
        ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:200:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  used = saved_lo & 0x3f;
         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:202:7: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
  if (used) {
      ^   ~
           != 0u
/home/jonas/opt/llvm/lib/Support/MD5.cpp:206:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      memcpy(&buffer[used], Ptr, Size);
              ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:210:13: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    memcpy(&buffer[used], Ptr, free);
            ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:211:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Ptr = Ptr + free;
              ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:213:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    body(makeArrayRef(buffer, 64));
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:217:42: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    Ptr = body(makeArrayRef(Ptr, Size & ~(unsigned long) 0x3f));
                                         ^~~~~~~~~~~~~~~~~~~~~
                                         static_cast<unsigned long>()
/home/jonas/opt/llvm/lib/Support/MD5.cpp:217:43: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
    Ptr = body(makeArrayRef(Ptr, Size & ~(unsigned long) 0x3f));
                                          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:221:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memcpy(buffer, Ptr, Size);
         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:228:26: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  ArrayRef<uint8_t> SVal((const uint8_t *)Str.data(), Str.size());
                         ^~~~~~~~~~~~~~~~~~~~       ~
                         reinterpret_cast<const uint8_t *>( )
/home/jonas/opt/llvm/lib/Support/MD5.cpp:228:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/MD5.cpp:235:3: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
  unsigned long used, free;
  ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:235:17: warning: invalid case style for variable 'used' [readability-identifier-naming]
  unsigned long used, free;
                ^~~~~
                Used
/home/jonas/opt/llvm/lib/Support/MD5.cpp:235:23: warning: invalid case style for variable 'free' [readability-identifier-naming]
  unsigned long used, free;
                      ^~~~~
                      Free
/home/jonas/opt/llvm/lib/Support/MD5.cpp:237:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  used = lo & 0x3f;
         ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:239:3: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  buffer[used++] = 0x80;
  ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:244:13: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    memset(&buffer[used], 0, free);
            ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:245:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    body(makeArrayRef(buffer, 64));
                      ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:250:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  memset(&buffer[used], 0, free - 8);
          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:256:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  body(makeArrayRef(buffer, 64));
                    ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:267:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (int i = 0; i < 16; ++i)
           ^      ~         ~~
           I      I         I
/home/jonas/opt/llvm/lib/Support/MD5.cpp:267:31: warning: statement should be inside braces [readability-braces-around-statements]
  for (int i = 0; i < 16; ++i)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/MD5.cpp:268:27: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    Res << format("%.2x", Bytes[i]);
                          ^
/home/jonas/opt/llvm/lib/Support/MD5.cpp:279:3: warning: uninitialized record type: 'Res' [hicpp-member-init]
  MD5::MD5Result Res;
  ^                 ~
                    {}
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/NativeFormatting.h:44:6: warning: function 'llvm::write_double' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
void write_double(raw_ostream &S, double D, FloatStyle Style,
     ^                                   ~~
                                         N
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:164:12: note: the definition seen here
void llvm::write_double(raw_ostream &S, double N, FloatStyle Style,
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/NativeFormatting.h:44:6: note: differing parameters are named here: ('D'), in definition: ('N')
void write_double(raw_ostream &S, double D, FloatStyle Style,
     ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:17:10: warning: inclusion of deprecated C++ header 'float.h'; consider using 'cfloat' instead [hicpp-deprecated-headers]
#include <float.h>
         ^~~~~~~~~
         <cfloat>
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:19:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:22:12: warning: invalid case style for function 'format_to_buffer' [readability-identifier-naming]
static int format_to_buffer(T Value, char (&Buffer)[N]) {
           ^~~~~~~~~~~~~~~~~
           formatToBuffer
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:27:6: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *--CurPtr = '0' + char(Value % 10);
     ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:34:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!Buffer.empty());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:42:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Buffer.size() % 3 == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:52:13: warning: invalid case style for function 'write_unsigned_impl' [readability-identifier-naming]
static void write_unsigned_impl(raw_ostream &S, T N, size_t MinDigits,
            ^~~~~~~~~~~~~~~~~~~~
            writeUnsignedImpl
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:57:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  std::memset(NumberBuffer, '0', sizeof(NumberBuffer));
              ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:62:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (IsNegative)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:66:45: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (size_t I = Len; I < MinDigits; ++I)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:71:62: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    writeWithCommas(S, ArrayRef<char>(std::end(NumberBuffer) - Len, Len));
                                                             ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:73:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    S.write(std::end(NumberBuffer) - Len, Len);
                                   ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:78:13: warning: invalid case style for function 'write_unsigned' [readability-identifier-naming]
static void write_unsigned(raw_ostream &S, T N, size_t MinDigits,
            ^~~~~~~~~~~~~~~
            writeUnsigned
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:79:48: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                           IntegerStyle Style, bool IsNegative = false) {
                                               ^              ~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:81:37: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (N == static_cast<uint32_t>(N))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:84:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:89:13: warning: invalid case style for function 'write_signed' [readability-identifier-naming]
static void write_signed(raw_ostream &S, T N, size_t MinDigits,
            ^~~~~~~~~~~~~
            writeSigned
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:96:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    write_unsigned(S, static_cast<UnsignedT>(N), MinDigits, Style);
    ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:79:48: note: default parameter was declared here
                           IntegerStyle Style, bool IsNegative = false) {
                                               ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:100:19: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  UnsignedT UN = -(UnsignedT)N;
                  ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:104:12: warning: invalid case style for function 'write_integer' [readability-identifier-naming]
void llvm::write_integer(raw_ostream &S, unsigned int N, size_t MinDigits,
           ^~~~~~~~~~~~~~
           writeInteger
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:106:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  write_unsigned(S, N, MinDigits, Style);
  ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:79:48: note: default parameter was declared here
                           IntegerStyle Style, bool IsNegative = false) {
                                               ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:109:12: warning: invalid case style for function 'write_integer' [readability-identifier-naming]
void llvm::write_integer(raw_ostream &S, int N, size_t MinDigits,
           ^~~~~~~~~~~~~~
           writeInteger
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:114:12: warning: invalid case style for function 'write_integer' [readability-identifier-naming]
void llvm::write_integer(raw_ostream &S, unsigned long N, size_t MinDigits,
           ^~~~~~~~~~~~~~
           writeInteger
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:114:42: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
void llvm::write_integer(raw_ostream &S, unsigned long N, size_t MinDigits,
                                         ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:116:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  write_unsigned(S, N, MinDigits, Style);
  ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:79:48: note: default parameter was declared here
                           IntegerStyle Style, bool IsNegative = false) {
                                               ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:119:12: warning: invalid case style for function 'write_integer' [readability-identifier-naming]
void llvm::write_integer(raw_ostream &S, long N, size_t MinDigits,
           ^~~~~~~~~~~~~~
           writeInteger
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:119:42: warning: consider replacing 'long' with 'int64' [google-runtime-int]
void llvm::write_integer(raw_ostream &S, long N, size_t MinDigits,
                                         ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:124:12: warning: invalid case style for function 'write_integer' [readability-identifier-naming]
void llvm::write_integer(raw_ostream &S, unsigned long long N, size_t MinDigits,
           ^~~~~~~~~~~~~~
           writeInteger
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:124:42: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
void llvm::write_integer(raw_ostream &S, unsigned long long N, size_t MinDigits,
                                         ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:126:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  write_unsigned(S, N, MinDigits, Style);
  ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:79:48: note: default parameter was declared here
                           IntegerStyle Style, bool IsNegative = false) {
                                               ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:129:12: warning: invalid case style for function 'write_integer' [readability-identifier-naming]
void llvm::write_integer(raw_ostream &S, long long N, size_t MinDigits,
           ^~~~~~~~~~~~~~
           writeInteger
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:129:42: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
void llvm::write_integer(raw_ostream &S, long long N, size_t MinDigits,
                                         ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:134:12: warning: invalid case style for function 'write_hex' [readability-identifier-naming]
void llvm::write_hex(raw_ostream &S, uint64_t N, HexPrintStyle Style,
           ^~~~~~~~~~
           writeHex
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:136:16: warning: invalid case style for variable 'kMaxWidth' [readability-identifier-naming]
  const size_t kMaxWidth = 128u;
               ^~~~~~~~~
               KMaxWidth
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:140:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  unsigned Nibbles = (64 - countLeadingZeros(N) + 3) / 4;
                           ^
../include/llvm/Support/MathExtras.h:189:38: note: default parameter was declared here
std::size_t countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                     ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:150:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  ::memset(NumberBuffer, '0', llvm::array_lengthof(NumberBuffer));
           ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:151:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Prefix)
             ^
              {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:153:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  char *EndPtr = NumberBuffer + NumChars;
                 ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:153:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  char *EndPtr = NumberBuffer + NumChars;
                              ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:155:10: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  while (N) {
         ^~
           != 0u
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:156:19: warning: invalid case style for variable 'x' [readability-identifier-naming]
    unsigned char x = static_cast<unsigned char>(N) % 16;
                  ^
                  X
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:157:6: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *--CurPtr = hexdigit(x, !Upper);
     ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:161:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  S.write(NumberBuffer, NumChars);
          ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:164:12: warning: invalid case style for function 'write_double' [readability-identifier-naming]
void llvm::write_double(raw_ostream &S, double N, FloatStyle Style,
           ^~~~~~~~~~~~~
           writeDouble
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:171:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (std::isinf(N)) {
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:177:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Style == FloatStyle::Exponent)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:179:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (Style == FloatStyle::ExponentUpper)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:181:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:240:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Style == FloatStyle::Percent)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:244:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  format(Spec.c_str(), N).snprint(Buf, sizeof(Buf));
                                  ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:245:8: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  S << Buf;
       ^
/home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp:246:36: warning: statement should be inside braces [readability-braces-around-statements]
  if (Style == FloatStyle::Percent)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Options.cpp:18:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Options.cpp:21:61: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto IT = Options.begin(); IT != Options.end(); ++IT)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/Options.cpp:22:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
    delete IT->second;
    ^
../include/llvm/ADT/DenseMap.h:1226:3: note: variable declared here
  pointer operator->() const {
  ^
/home/jonas/opt/llvm/lib/Support/Options.cpp:26:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Options.find(Key) == Options.end() &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/PrettyStackTrace.h:92:8: warning: function 'llvm::RestorePrettyStackState' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void RestorePrettyStackState(const void *State);
       ^                                   ~~~~~~
                                           Top
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:201:12: note: the definition seen here
void llvm::RestorePrettyStackState(const void *Top) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/PrettyStackTrace.h:92:8: note: differing parameters are named here: ('State'), in definition: ('Top')
  void RestorePrettyStackState(const void *State);
       ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:32:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:46:24: warning: invalid case style for function 'ReverseStackTrace' [readability-identifier-naming]
PrettyStackTraceEntry *ReverseStackTrace(PrettyStackTraceEntry *Head) {
                       ^~~~~~~~~~~~~~~~~~
                       reverseStackTrace
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:48:10: warning: implicit conversion 'llvm::PrettyStackTraceEntry *' -> bool [readability-implicit-bool-conversion]
  while (Head)
         ^   ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:48:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (Head)
              ^
               {
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:53:2: warning: namespace 'llvm' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace llvm
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:45:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:55:13: warning: invalid case style for function 'PrintStack' [readability-identifier-naming]
static void PrintStack(raw_ostream &OS) {
            ^~~~~~~~~~~
            printStack
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:62:60: warning: implicit conversion 'const llvm::PrettyStackTraceEntry *' -> bool [readability-implicit-bool-conversion]
  for (const PrettyStackTraceEntry *Entry = ReversedStack; Entry;
                                                           ^    ~
                                                                 != nullptr
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:72:13: warning: invalid case style for function 'PrintCurStackTrace' [readability-identifier-naming]
static void PrintCurStackTrace(raw_ostream &OS) {
            ^~~~~~~~~~~~~~~~~~~
            printCurStackTrace
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:74:8: warning: implicit conversion 'llvm::PrettyStackTraceEntry *' -> bool [readability-implicit-bool-conversion]
  if (!PrettyStackTraceHead) return;
      ~^~~~~~~~~~~~~~~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:74:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!PrettyStackTraceHead) return;
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:105:13: warning: invalid case style for function 'CrashHandler' [readability-identifier-naming]
static void CrashHandler(void *) {
            ^~~~~~~~~~~~~
            crashHandler
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:105:32: warning: all parameters should be named in a function [readability-named-parameter]
static void CrashHandler(void *) {
                               ^
                                /*unused*/
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:144:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(PrettyStackTraceHead == this &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:152:25: warning: do not define a C-style variadic function; consider using a function parameter pack or currying instead [cert-dcl50-cpp]
PrettyStackTraceFormat::PrettyStackTraceFormat(const char *Format, ...) {
                        ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:154:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  va_start(AP, Format);
  ^
/usr/include/clang/6.0.0/include/stdarg.h:33:29: note: expanded from macro 'va_start'
#define va_start(ap, param) __builtin_va_start(ap, param)
                            ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:154:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  va_start(AP, Format);
           ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:155:57: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  const int SizeOrError = vsnprintf(nullptr, 0, Format, AP);
                                                        ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:156:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  va_end(AP);
         ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:163:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  va_start(AP, Format);
  ^
/usr/include/clang/6.0.0/include/stdarg.h:33:29: note: expanded from macro 'va_start'
#define va_start(ap, param) __builtin_va_start(ap, param)
                            ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:163:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  va_start(AP, Format);
           ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:164:39: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  vsnprintf(Str.data(), Size, Format, AP);
                                      ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:165:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  va_end(AP);
         ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:173:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = ArgC; i != e; ++i)
                ^                ~         ~~
                I                I         I
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:173:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = ArgC; i != e; ++i)
                       ^              ~~
                       E              E
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:173:46: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned i = 0, e = ArgC; i != e; ++i)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:174:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    OS << ArgV[i] << ' ';
          ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:179:13: warning: invalid case style for function 'RegisterCrashPrinter' [readability-identifier-naming]
static bool RegisterCrashPrinter() {
            ^~~~~~~~~~~~~~~~~~~~~
            registerCrashPrinter
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:185:12: warning: invalid case style for function 'EnablePrettyStackTrace' [readability-identifier-naming]
void llvm::EnablePrettyStackTrace() {
           ^~~~~~~~~~~~~~~~~~~~~~~
           enablePrettyStackTrace
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:193:19: warning: invalid case style for function 'SavePrettyStackState' [readability-identifier-naming]
const void *llvm::SavePrettyStackState() {
                  ^~~~~~~~~~~~~~~~~~~~~
                  savePrettyStackState
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:201:12: warning: invalid case style for function 'RestorePrettyStackState' [readability-identifier-naming]
void llvm::RestorePrettyStackState(const void *Top) {
           ^~~~~~~~~~~~~~~~~~~~~~~~
           restorePrettyStackState
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:204:44: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
      static_cast<PrettyStackTraceEntry *>(const_cast<void *>(Top));
                                           ^
/home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp:208:6: warning: invalid case style for function 'LLVMEnablePrettyStackTrace' [readability-identifier-naming]
void LLVMEnablePrettyStackTrace() {
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~
     llvmEnablePrettyStackTrace
/home/jonas/opt/llvm/lib/Support/PluginLoader.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/PluginLoader.cpp:26:1: warning: cannot overload 'operator=' [fuchsia-overloaded-operator]
void PluginLoader::operator=(const std::string &Filename) {
^
/home/jonas/opt/llvm/lib/Support/PluginLoader.cpp:26:1: warning: operator=() should return 'PluginLoader&' [cppcoreguidelines-c-copy-assignment-signature]
/home/jonas/opt/llvm/lib/Support/PluginLoader.cpp:42:47: warning: invalid case style for parameter 'num' [readability-identifier-naming]
std::string &PluginLoader::getPlugin(unsigned num) {
                                              ^~~~
                                              Num
/home/jonas/opt/llvm/lib/Support/PluginLoader.cpp:44:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Plugins.isConstructed() && num < Plugins->size() &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Parallel.h:79:8: warning: function 'llvm::parallel::detail::TaskGroup::spawn' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void spawn(std::function<void()> f);
       ^                           ~~
                                   F
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:122:35: note: the definition seen here
void parallel::detail::TaskGroup::spawn(std::function<void()> F) {
                                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Parallel.h:79:8: note: differing parameters are named here: ('f'), in definition: ('F')
  void spawn(std::function<void()> f);
       ^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:26:7: warning: class 'Executor' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class Executor {
      ^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:29:42: warning: invalid case style for parameter 'func' [readability-identifier-naming]
  virtual void add(std::function<void()> func) = 0;
                                         ^~~~~
                                         Func
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:64:7: warning: class 'ThreadPoolExecutor' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
class ThreadPoolExecutor : public Executor {
      ^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:66:31: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
  explicit ThreadPoolExecutor(unsigned ThreadCount = hardware_concurrency())
                              ^                   ~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:71:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
      for (size_t i = 1; i < ThreadCount; ++i) {
                  ^      ~                  ~~
                  I      I                  I
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:98:16: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Stop)
               ^
                {
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:116:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  static ThreadPoolExecutor exec;
                            ^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:66:31: note: default parameter was declared here
  explicit ThreadPoolExecutor(unsigned ThreadCount = hardware_concurrency())
                              ^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:116:29: warning: invalid case style for variable 'exec' [readability-identifier-naming]
  static ThreadPoolExecutor exec;
                            ^~~~~
                            Exec
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:120:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:23:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/Parallel.cpp:122:63: warning: the parameter 'F' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
void parallel::detail::TaskGroup::spawn(std::function<void()> F) {
                                        ~~~                   ^
                                        const                &
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:26:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:34:16: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
static cl::opt<unsigned long long>
               ^
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:38:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
RandomNumberGenerator::RandomNumberGenerator(StringRef Salt) {
                       ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/random.h:488:31: note: default parameter was declared here
      mersenne_twister_engine(result_type __sd = default_seed)
                              ^
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:50:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Data[1] = Seed >> 32;
            ^
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:58:1: warning: cannot overload 'operator()' [fuchsia-overloaded-operator]
RandomNumberGenerator::result_type RandomNumberGenerator::operator()() {
^
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:74:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  int Fd = open("/dev/urandom", O_RDONLY);
           ^
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:74:41: warning: 'open' should use O_CLOEXEC where possible [android-cloexec-open]
  int Fd = open("/dev/urandom", O_RDONLY);
                                        ^
                                         | O_CLOEXEC
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:78:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (BytesRead == -1)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:80:54: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (BytesRead != static_cast<ssize_t>(Size))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:82:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (close(Fd) == -1)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp:87:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code(errno, std::system_category());
         ^
opt/llvm/lib/Support/ItaniumManglingCanonicalizer.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp9fyOAV.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/JamCRC.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpsPmc2I.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/JSON.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpkrf2h5.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/KnownBits.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp2Trg50.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/LEB128.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpETM6LZ.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/LineIterator.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpU9lQrW.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Locale.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp41VLDW.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/LockFileManager.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp14s1YE.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/LowLevelType.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpl66JIF.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ManagedStatic.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpuj6FWA.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/MathExtras.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpWfNDUL.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpkvlTcG.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/MD5.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpVPS_fb.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/NativeFormatting.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp4IG_0F.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Options.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpEvnVOz.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Parallel.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpYt8T87.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/PluginLoader.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpHpCH29.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/PrettyStackTrace.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpqL9fJl.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/RandomNumberGenerator.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmppVlWYo.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Regex.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpvNaUi_.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpPyHiaU.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpbhtlr8.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SHA1.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -ch/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Regex.h:48:5: warning: function 'llvm::Regex::Regex' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    Regex(StringRef Regex, unsigned Flags = NoFlags);
    ^               ~~~~~~
                    regex
/home/jonas/opt/llvm/lib/Support/Regex.cpp:29:8: note: the definition seen here
Regex::Regex(StringRef regex, unsigned Flags) {
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Regex.h:48:5: note: differing parameters are named here: ('Regex'), in definition: ('regex')
    Regex(StringRef Regex, unsigned Flags = NoFlags);
    ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:25:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:29:24: warning: invalid case style for parameter 'regex' [readability-identifier-naming]
Regex::Regex(StringRef regex, unsigned Flags) {
                       ^~~~~~
                       Regex
/home/jonas/opt/llvm/lib/Support/Regex.cpp:30:12: warning: invalid case style for variable 'flags' [readability-identifier-naming]
  unsigned flags = 0;
           ^~~~~
           Flags
/home/jonas/opt/llvm/lib/Support/Regex.cpp:31:3: warning: assigning newly created 'gsl::owner<>' to non-owner 'struct llvm_regex *' [cppcoreguidelines-owning-memory]
  preg = new llvm_regex();
  ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:33:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Flags & IgnoreCase)
      ^~~~~             ~
      (                 ) != 0u
/home/jonas/opt/llvm/lib/Support/Regex.cpp:33:26: warning: statement should be inside braces [readability-braces-around-statements]
  if (Flags & IgnoreCase)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:35:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Flags & Newline)
      ^~~~~          ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Regex.cpp:35:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (Flags & Newline)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:37:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!(Flags & BasicRegex))
      ~^                   ~
                            == 0u
/home/jonas/opt/llvm/lib/Support/Regex.cpp:37:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!(Flags & BasicRegex))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:39:44: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  error = llvm_regcomp(preg, regex.data(), flags|REG_PEND);
                                           ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:42:8: warning: move constructors should be marked noexcept [hicpp-noexcept-move]
Regex::Regex(Regex &&regex) {
       ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:42:22: warning: invalid case style for parameter 'regex' [readability-identifier-naming]
Regex::Regex(Regex &&regex) {
                     ^~~~~~
                     Regex
/home/jonas/opt/llvm/lib/Support/Regex.cpp:50:7: warning: implicit conversion 'struct llvm_regex *' -> bool [readability-implicit-bool-conversion]
  if (preg) {
      ^   ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/Regex.cpp:57:8: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (!error)
      ~^~~~~~
       == 0
/home/jonas/opt/llvm/lib/Support/Regex.cpp:57:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!error)
             ^
              {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:60:10: warning: invalid case style for variable 'len' [readability-identifier-naming]
  size_t len = llvm_regerror(error, preg, nullptr, 0);
         ^~~
         Len
/home/jonas/opt/llvm/lib/Support/Regex.cpp:74:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (error)
      ^    ~
            != 0
/home/jonas/opt/llvm/lib/Support/Regex.cpp:74:13: warning: statement should be inside braces [readability-braces-around-statements]
  if (error)
            ^
             {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:77:12: warning: invalid case style for variable 'nmatch' [readability-identifier-naming]
  unsigned nmatch = Matches ? preg->re_nsub+1 : 0;
           ^~~~~~
           Nmatch
/home/jonas/opt/llvm/lib/Support/Regex.cpp:77:21: warning: implicit conversion 'SmallVectorImpl<llvm::StringRef> *' -> bool [readability-implicit-bool-conversion]
  unsigned nmatch = Matches ? preg->re_nsub+1 : 0;
                    ^
                            != nullptr
/home/jonas/opt/llvm/lib/Support/Regex.cpp:80:35: warning: invalid case style for variable 'pm' [readability-identifier-naming]
  SmallVector<llvm_regmatch_t, 8> pm;
                                  ^~~
                                  Pm
/home/jonas/opt/llvm/lib/Support/Regex.cpp:85:7: warning: invalid case style for variable 'rc' [readability-identifier-naming]
  int rc = llvm_regexec(preg, String.data(), nmatch, pm.data(), REG_STARTEND);
      ^~
      Rc
/home/jonas/opt/llvm/lib/Support/Regex.cpp:87:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (rc == REG_NOMATCH)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:97:7: warning: implicit conversion 'SmallVectorImpl<llvm::StringRef> *' -> bool [readability-implicit-bool-conversion]
  if (Matches) { // match position requested
      ^      ~
              != nullptr
/home/jonas/opt/llvm/lib/Support/Regex.cpp:100:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i != nmatch; ++i) {
                  ^      ~              ~~
                  I      I              I
/home/jonas/opt/llvm/lib/Support/Regex.cpp:106:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(pm[i].rm_eo >= pm[i].rm_so);
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:107:49: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Matches->push_back(StringRef(String.data()+pm[i].rm_so,
                                                ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:120:7: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
  if (Error && !Error->empty()) *Error = "";
      ^~~~~
      ( != nullptr)
/home/jonas/opt/llvm/lib/Support/Regex.cpp:120:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (Error && !Error->empty()) *Error = "";
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:123:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!match(String, &Matches))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:128:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Res(String.begin(), Matches[0].begin());
              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:615:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:141:11: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
          Error && Error->empty())
          ^~~~~
          ( != nullptr)
/home/jonas/opt/llvm/lib/Support/Regex.cpp:141:35: warning: statement should be inside braces [readability-braces-around-statements]
          Error && Error->empty())
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:154:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Repl = Repl.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:160:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Repl = Repl.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:164:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Repl = Repl.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:171:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef Ref = Repl.slice(0, Repl.find_first_not_of("0123456789"));
                                    ^
../include/llvm/ADT/StringRef.h:416:47: note: default parameter was declared here
    size_t find_first_not_of(StringRef Chars, size_t From = 0) const;
                                              ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:172:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Repl = Repl.substr(Ref.size());
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:176:37: warning: statement should be inside braces [readability-braces-around-statements]
          RefValue < Matches.size())
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:178:16: warning: implicit conversion 'std::string *' (aka 'basic_string<char> *') -> bool [readability-implicit-bool-conversion]
      else if (Error && Error->empty())
               ^~~~~
               ( != nullptr)
/home/jonas/opt/llvm/lib/Support/Regex.cpp:178:40: warning: statement should be inside braces [readability-braces-around-statements]
      else if (Error && Error->empty())
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/Regex.cpp:198:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Str.find_first_of(RegexMetachars) == StringRef::npos;
         ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:198:28: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  return Str.find_first_of(RegexMetachars) == StringRef::npos;
                           ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:203:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = String.size(); i != e; ++i) {
                ^                         ~         ~~
                I                         I         I
/home/jonas/opt/llvm/lib/Support/Regex.cpp:203:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = String.size(); i != e; ++i) {
                       ^                       ~~
                       E                       E
/home/jonas/opt/llvm/lib/Support/Regex.cpp:204:9: warning: implicit conversion 'char *' -> bool [readability-implicit-bool-conversion]
    if (strchr(RegexMetachars, String[i]))
        ^                                ~
                                          != nullptr
/home/jonas/opt/llvm/lib/Support/Regex.cpp:204:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    if (strchr(RegexMetachars, String[i]))
               ^
/home/jonas/opt/llvm/lib/Support/Regex.cpp:204:43: warning: statement should be inside braces [readability-braces-around-statements]
    if (strchr(RegexMetachars, String[i]))
                                          ^
                                           {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/MemoryBuffer.h:132:3: warning: function 'llvm::MemoryBuffer::getFileSlice' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  getFileSlice(const Twine &Filename, uint64_t MapSize, uint64_t Offset,
  ^                         ~~~~~~~~~
                            FilePath
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:155:15: note: the definition seen here
MemoryBuffer::getFileSlice(const Twine &FilePath, uint64_t MapSize,
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/MemoryBuffer.h:132:3: note: differing parameters are named here: ('Filename'), in definition: ('FilePath')
  getFileSlice(const Twine &Filename, uint64_t MapSize, uint64_t Offset,
  ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:36:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:42:15: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
MemoryBuffer::~MemoryBuffer() { }
              ^               ~~~
                              = default;
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:48:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((!RequiresNullTerminator || BufEnd[0] == 0) &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:48:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  assert((!RequiresNullTerminator || BufEnd[0] == 0) &&
                                     ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:60:13: warning: invalid case style for function 'CopyStringRef' [readability-identifier-naming]
static void CopyStringRef(char *Memory, StringRef Data) {
            ^~~~~~~~~~~~~~
            copyStringRef
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:61:21: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Data.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:63:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Memory[Data.size()] = 0; // Null terminate string.
  ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:69:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  NamedBufferAlloc(const Twine &Name) : Name(Name) {}
  ^~~~~~~~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:71:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:66:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:73:1: warning: cannot overload 'operator new' [fuchsia-overloaded-operator]
void *operator new(size_t N, const NamedBufferAlloc &Alloc) {
^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:77:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  char *Mem = static_cast<char *>(operator new(N + NameRef.size() + 1));
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:78:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  CopyStringRef(Mem + N, NameRef);
                    ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:94:3: warning: cannot overload 'operator delete' [fuchsia-overloaded-operator]
  void operator delete(void *p) { ::operator delete(p); }
  ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:94:8: warning: declaration of 'operator delete' has no matching declaration of 'operator new' at the same scope [misc-new-delete-overloads]
  void operator delete(void *p) { ::operator delete(p); }
       ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:94:30: warning: invalid case style for parameter 'p' [readability-identifier-naming]
  void operator delete(void *p) { ::operator delete(p); }
                             ^~                     ~~
                             P                      P
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:98:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    return StringRef(reinterpret_cast<const char *>(this + 1));
                     ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:98:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return StringRef(reinterpret_cast<const char *>(this + 1));
                                                         ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:105:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:82:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:129:12: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Buf)
           ^
            {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:132:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::move(Buf);
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:138:11: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Buf)
          ^
           {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:149:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NameRef == "-")
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:151:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return getFile(Filename, FileSize, RequiresNullTerminator);
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/MemoryBuffer.h:82:47: note: default parameter was declared here
          bool RequiresNullTerminator = true, bool IsVolatile = false);
                                              ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:174:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return Offset & ~(sys::fs::mapped_file_region::alignment() - 1);
           ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:174:21: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
    return Offset & ~(sys::fs::mapped_file_region::alignment() - 1);
                    ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:181:33: warning: parameter 'Len' is unused [misc-unused-parameters]
  const char *getStart(uint64_t Len, uint64_t Offset) {
                       ~~~~~~~~~^~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:182:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return MFR.const_data() + (Offset - getLegalMapOffset(Offset));
                            ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:187:58: warning: non-const reference parameter 'EC', make it const or use a pointer [google-runtime-references]
                       uint64_t Offset, std::error_code &EC)
                                                         ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:192:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      MemoryBuffer::init(Start, Start + Len, RequiresNullTerminator);
                                      ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:198:3: warning: cannot overload 'operator delete' [fuchsia-overloaded-operator]
  void operator delete(void *p) { ::operator delete(p); }
  ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:198:8: warning: declaration of 'operator delete' has no matching declaration of 'operator new' at the same scope [misc-new-delete-overloads]
  void operator delete(void *p) { ::operator delete(p); }
       ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:198:30: warning: invalid case style for parameter 'p' [readability-identifier-naming]
  void operator delete(void *p) { ::operator delete(p); }
                             ^~                     ~~
                             P                      P
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:202:22: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    return StringRef(reinterpret_cast<const char *>(this + 1));
                     ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:202:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return StringRef(reinterpret_cast<const char *>(this + 1));
                                                         ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:209:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:165:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:220:25: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (ReadBytes == -1)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:247:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::error_code EC = sys::fs::openFileForRead(Filename, FD, sys::fs::OF_None);
                       ^
../include/llvm/Support/FileSystem.h:1011:33: note: default parameter was declared here
                                SmallVectorImpl<char> *RealPath = nullptr);
                                ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:249:10: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:278:3: warning: missing username/bug in TODO [google-readability-todo]
  // TODO: Is 16-byte alignment enough?  We copy small object files with large
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // TODO(jonas): Is 16-byte alignment enough?  We copy small object files with large
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:282:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t AlignedStringLen = alignTo(sizeof(MemBuffer) + NameRef.size() + 1, 16);
                            ^
../include/llvm/Support/MathExtras.h:685:57: note: default parameter was declared here
inline uint64_t alignTo(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:284:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  char *Mem = static_cast<char*>(operator new(RealLen, std::nothrow));
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:285:8: warning: implicit conversion 'char *' -> bool [readability-implicit-bool-conversion]
  if (!Mem)
      ~^~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:285:12: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Mem)
           ^
            {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:289:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  CopyStringRef(Mem + sizeof(MemBuffer), NameRef);
                    ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:292:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  char *Buf = Mem + AlignedStringLen;
                  ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:293:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buf[Size] = 0; // Null terminate buffer.
  ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:302:11: warning: statement should be inside braces [readability-braces-around-statements]
  if (!SB)
          ^
           {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:318:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (IsVolatile)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:323:39: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  if (MapSize < 4 * 4096 || MapSize < (unsigned)PageSize)
                                      ^~~~~~~~~~~~~~~~~~~
                                      static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:323:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (MapSize < 4 * 4096 || MapSize < (unsigned)PageSize)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:326:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!RequiresNullTerminator)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:335:37: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (sys::fs::status(FD, Status))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:343:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(End <= FileSize);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:344:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (End != FileSize)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:349:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((FileSize & (PageSize -1)) == 0)
       ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:349:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((FileSize & (PageSize -1)) == 0)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:367:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::error_code EC = sys::fs::openFileForReadWrite(
                       ^
../include/llvm/Support/FileSystem.h:971:45: note: default parameter was declared here
                                            unsigned Mode = 0666) {
                                            ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:370:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:380:14: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EC)
             ^
              {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:387:50: warning: statement should be inside braces [google-readability-braces-around-statements]
          Type != sys::fs::file_type::block_file)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:399:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:401:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::move(Result);
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:430:14: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EC)
             ^
              {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:438:50: warning: statement should be inside braces [hicpp-braces-around-statements]
          Type != sys::fs::file_type::block_file)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:439:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return getMemoryBufferForStream(FD, Filename);
               ^
../include/llvm/Support/ErrorOr.h:122:7: note: default parameter was declared here
      typename std::enable_if<std::is_convertible<OtherT, T>::value>::type * =
      ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:452:13: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!EC)
            ^
             {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:453:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return std::move(Result);
             ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:463:18: warning: redundant get() call on smart pointer [google-readability-redundant-smartptr-get]
  char *BufPtr = Buf.get()->getBufferStart();
                 ^~~~~~~~~~~
                 Buf
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:487:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    BufPtr += NumRead;
           ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:490:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::move(Buf);
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:503:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(MapSize != uint64_t(-1));
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:515:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return getMemoryBufferForStream(0, "<stdin>");
         ^
../include/llvm/Support/ErrorOr.h:122:7: note: default parameter was declared here
      typename std::enable_if<std::is_convertible<OtherT, T>::value>::type * =
      ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:521:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::error_code EC = sys::fs::openFileForRead(Filename, FD, sys::fs::OF_None);
                       ^
../include/llvm/Support/FileSystem.h:1011:33: note: default parameter was declared here
                                SmallVectorImpl<char> *RealPath = nullptr);
                                ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:522:10: warning: statement should be inside braces [readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:525:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      getMemoryBufferForStream(FD, Filename);
      ^
../include/llvm/Support/ErrorOr.h:122:7: note: default parameter was declared here
      typename std::enable_if<std::is_convertible<OtherT, T>::value>::type * =
      ^
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:533:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return MemoryBufferRef(Data, Identifier);
         ^~~~~~~~~~~~~~~~~~~~            ~~
         {                               }
/home/jonas/opt/llvm/lib/Support/MemoryBuffer.cpp:536:26: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
SmallVectorMemoryBuffer::~SmallVectorMemoryBuffer() {}
                         ^                          ~~
                                                    = default;
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SHA1.h:81:8: warning: function 'llvm::SHA1::writebyte' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void writebyte(uint8_t data);
       ^                 ~~~~~
                         Data
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:208:12: note: the definition seen here
void SHA1::writebyte(uint8_t Data) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SHA1.h:81:8: note: differing parameters are named here: ('data'), in definition: ('Data')
  void writebyte(uint8_t data);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SHA1.h:83:8: warning: function 'llvm::SHA1::addUncounted' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void addUncounted(uint8_t data);
       ^                    ~~~~~
                            Data
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:194:12: note: the definition seen here
void SHA1::addUncounted(uint8_t Data) {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SHA1.h:83:8: note: differing parameters are named here: ('data'), in definition: ('Data')
  void addUncounted(uint8_t data);
       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:23:10: warning: inclusion of deprecated C++ header 'stdint.h'; consider using 'cstdint' instead [hicpp-deprecated-headers]
#include <stdint.h>
         ^~~~~~~~~~
         <cstdint>
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:24:10: warning: inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead [modernize-deprecated-headers]
#include <string.h>
         ^~~~~~~~~~
         <cstring>
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:31:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return (Number << Bits) | (Number >> (32 - Bits));
          ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:31:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return (Number << Bits) | (Number >> (32 - Bits));
                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:34:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
static uint32_t blk0(uint32_t *Buf, int I) { return Buf[I]; }
                                                    ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
  ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
                    ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
                                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:62: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
                                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:37:66: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Buf[I & 15] = rol(Buf[(I + 13) & 15] ^ Buf[(I + 8) & 15] ^ Buf[(I + 2) & 15] ^
                                                                 ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:38:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                        Buf[I & 15],
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:38:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                        Buf[I & 15],
                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:40:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  return Buf[I & 15];
         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:40:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return Buf[I & 15];
             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:43:26: warning: non-const reference parameter 'A', make it const or use a pointer [google-runtime-references]
static void r0(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:43:39: warning: non-const reference parameter 'B', make it const or use a pointer [google-runtime-references]
static void r0(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:43:52: warning: non-const reference parameter 'C', make it const or use a pointer [google-runtime-references]
static void r0(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                   ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:43:65: warning: non-const reference parameter 'D', make it const or use a pointer [google-runtime-references]
static void r0(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:43:78: warning: non-const reference parameter 'E', make it const or use a pointer [google-runtime-references]
static void r0(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:49:26: warning: non-const reference parameter 'A', make it const or use a pointer [google-runtime-references]
static void r1(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:49:39: warning: non-const reference parameter 'B', make it const or use a pointer [google-runtime-references]
static void r1(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:49:52: warning: non-const reference parameter 'C', make it const or use a pointer [google-runtime-references]
static void r1(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                   ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:49:65: warning: non-const reference parameter 'D', make it const or use a pointer [google-runtime-references]
static void r1(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:49:78: warning: non-const reference parameter 'E', make it const or use a pointer [google-runtime-references]
static void r1(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:55:26: warning: non-const reference parameter 'A', make it const or use a pointer [google-runtime-references]
static void r2(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:55:39: warning: non-const reference parameter 'B', make it const or use a pointer [google-runtime-references]
static void r2(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:55:52: warning: non-const reference parameter 'C', make it const or use a pointer [google-runtime-references]
static void r2(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                   ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:55:65: warning: non-const reference parameter 'D', make it const or use a pointer [google-runtime-references]
static void r2(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:55:78: warning: non-const reference parameter 'E', make it const or use a pointer [google-runtime-references]
static void r2(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:61:26: warning: non-const reference parameter 'A', make it const or use a pointer [google-runtime-references]
static void r3(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:61:39: warning: non-const reference parameter 'B', make it const or use a pointer [google-runtime-references]
static void r3(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:61:52: warning: non-const reference parameter 'C', make it const or use a pointer [google-runtime-references]
static void r3(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                   ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:61:65: warning: non-const reference parameter 'D', make it const or use a pointer [google-runtime-references]
static void r3(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:61:78: warning: non-const reference parameter 'E', make it const or use a pointer [google-runtime-references]
static void r3(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:67:26: warning: non-const reference parameter 'A', make it const or use a pointer [google-runtime-references]
static void r4(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:67:39: warning: non-const reference parameter 'B', make it const or use a pointer [google-runtime-references]
static void r4(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:67:52: warning: non-const reference parameter 'C', make it const or use a pointer [google-runtime-references]
static void r4(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                   ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:67:65: warning: non-const reference parameter 'D', make it const or use a pointer [google-runtime-references]
static void r4(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:67:78: warning: non-const reference parameter 'E', make it const or use a pointer [google-runtime-references]
static void r4(uint32_t &A, uint32_t &B, uint32_t &C, uint32_t &D, uint32_t &E,
                                                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:103:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(A, B, C, D, E, 0, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:103:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(A, B, C, D, E, 0, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:104:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(E, A, B, C, D, 1, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:104:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(E, A, B, C, D, 1, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:105:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(D, E, A, B, C, 2, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:105:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(D, E, A, B, C, 2, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:106:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(C, D, E, A, B, 3, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:106:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(C, D, E, A, B, 3, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:107:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(B, C, D, E, A, 4, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:107:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(B, C, D, E, A, 4, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:108:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(A, B, C, D, E, 5, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:108:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(A, B, C, D, E, 5, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:109:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r0(E, A, B, C, D, 6, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:109:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(E, A, B, C, D, 6, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:110:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(D, E, A, B, C, 7, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:110:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(D, E, A, B, C, 7, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:111:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(C, D, E, A, B, 8, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:111:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(C, D, E, A, B, 8, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:112:24: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(B, C, D, E, A, 9, InternalState.Buffer.L);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:112:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(B, C, D, E, A, 9, InternalState.Buffer.L);
                                            ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:113:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(A, B, C, D, E, 10, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:113:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(A, B, C, D, E, 10, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:114:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(E, A, B, C, D, 11, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:114:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(E, A, B, C, D, 11, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:115:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r0(D, E, A, B, C, 12, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:115:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(D, E, A, B, C, 12, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:116:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(C, D, E, A, B, 13, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:116:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(C, D, E, A, B, 13, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:117:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(B, C, D, E, A, 14, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:117:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(B, C, D, E, A, 14, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:118:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r0(A, B, C, D, E, 15, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:118:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r0(A, B, C, D, E, 15, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:119:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r1(E, A, B, C, D, 16, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:119:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r1(E, A, B, C, D, 16, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:120:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r1(D, E, A, B, C, 17, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:120:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r1(D, E, A, B, C, 17, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:121:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r1(C, D, E, A, B, 18, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:121:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r1(C, D, E, A, B, 18, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:122:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r1(B, C, D, E, A, 19, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:122:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r1(B, C, D, E, A, 19, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:124:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(A, B, C, D, E, 20, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:124:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(A, B, C, D, E, 20, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:125:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(E, A, B, C, D, 21, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:125:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(E, A, B, C, D, 21, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:126:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(D, E, A, B, C, 22, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:126:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(D, E, A, B, C, 22, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:127:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(C, D, E, A, B, 23, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:127:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(C, D, E, A, B, 23, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:128:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(B, C, D, E, A, 24, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:128:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(B, C, D, E, A, 24, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:129:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r2(A, B, C, D, E, 25, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:129:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(A, B, C, D, E, 25, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:130:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(E, A, B, C, D, 26, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:130:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(E, A, B, C, D, 26, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:131:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(D, E, A, B, C, 27, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:131:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(D, E, A, B, C, 27, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:132:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r2(C, D, E, A, B, 28, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:132:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(C, D, E, A, B, 28, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:133:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(B, C, D, E, A, 29, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:133:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(B, C, D, E, A, 29, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:134:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(A, B, C, D, E, 30, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:134:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(A, B, C, D, E, 30, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:135:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(E, A, B, C, D, 31, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:135:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(E, A, B, C, D, 31, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:136:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(D, E, A, B, C, 32, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:136:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(D, E, A, B, C, 32, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:137:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(C, D, E, A, B, 33, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:137:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(C, D, E, A, B, 33, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:138:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r2(B, C, D, E, A, 34, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:138:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(B, C, D, E, A, 34, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:139:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(A, B, C, D, E, 35, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:139:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(A, B, C, D, E, 35, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:140:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(E, A, B, C, D, 36, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:140:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(E, A, B, C, D, 36, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:141:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r2(D, E, A, B, C, 37, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:141:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(D, E, A, B, C, 37, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:142:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r2(C, D, E, A, B, 38, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:142:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(C, D, E, A, B, 38, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:143:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r2(B, C, D, E, A, 39, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:143:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r2(B, C, D, E, A, 39, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:145:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(A, B, C, D, E, 40, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:145:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(A, B, C, D, E, 40, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:146:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(E, A, B, C, D, 41, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:146:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(E, A, B, C, D, 41, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:147:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r3(D, E, A, B, C, 42, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:147:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(D, E, A, B, C, 42, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:148:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(C, D, E, A, B, 43, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:148:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(C, D, E, A, B, 43, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:149:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(B, C, D, E, A, 44, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:149:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(B, C, D, E, A, 44, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:150:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(A, B, C, D, E, 45, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:150:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(A, B, C, D, E, 45, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:151:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(E, A, B, C, D, 46, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:151:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(E, A, B, C, D, 46, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:152:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(D, E, A, B, C, 47, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:152:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(D, E, A, B, C, 47, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:153:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r3(C, D, E, A, B, 48, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:153:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(C, D, E, A, B, 48, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:154:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(B, C, D, E, A, 49, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:154:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(B, C, D, E, A, 49, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:155:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(A, B, C, D, E, 50, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:155:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(A, B, C, D, E, 50, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:156:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(E, A, B, C, D, 51, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:156:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(E, A, B, C, D, 51, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:157:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r3(D, E, A, B, C, 52, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:157:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(D, E, A, B, C, 52, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:158:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(C, D, E, A, B, 53, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:158:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(C, D, E, A, B, 53, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:159:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(B, C, D, E, A, 54, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:159:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(B, C, D, E, A, 54, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:160:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(A, B, C, D, E, 55, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:160:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(A, B, C, D, E, 55, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:161:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(E, A, B, C, D, 56, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:161:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(E, A, B, C, D, 56, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:162:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(D, E, A, B, C, 57, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:162:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(D, E, A, B, C, 57, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:163:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r3(C, D, E, A, B, 58, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:163:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(C, D, E, A, B, 58, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:164:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r3(B, C, D, E, A, 59, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:164:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r3(B, C, D, E, A, 59, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:166:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(A, B, C, D, E, 60, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:166:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(A, B, C, D, E, 60, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:167:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(E, A, B, C, D, 61, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:167:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(E, A, B, C, D, 61, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:168:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(D, E, A, B, C, 62, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:168:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(D, E, A, B, C, 62, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:169:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(C, D, E, A, B, 63, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:169:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(C, D, E, A, B, 63, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:170:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(B, C, D, E, A, 64, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:170:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(B, C, D, E, A, 64, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:171:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r4(A, B, C, D, E, 65, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:171:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(A, B, C, D, E, 65, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:172:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(E, A, B, C, D, 66, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:172:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(E, A, B, C, D, 66, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:173:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(D, E, A, B, C, 67, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:173:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(D, E, A, B, C, 67, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:174:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r4(C, D, E, A, B, 68, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:174:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(C, D, E, A, B, 68, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:175:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(B, C, D, E, A, 69, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:175:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(B, C, D, E, A, 69, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:176:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(A, B, C, D, E, 70, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:176:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(A, B, C, D, E, 70, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:177:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(E, A, B, C, D, 71, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:177:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(E, A, B, C, D, 71, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:178:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(D, E, A, B, C, 72, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:178:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(D, E, A, B, C, 72, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:179:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(C, D, E, A, B, 73, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:179:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(C, D, E, A, B, 73, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:180:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r4(B, C, D, E, A, 74, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:180:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(B, C, D, E, A, 74, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:181:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(A, B, C, D, E, 75, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:181:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(A, B, C, D, E, 75, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:182:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(E, A, B, C, D, 76, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:182:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(E, A, B, C, D, 76, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:183:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r4(D, E, A, B, C, 77, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:183:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(D, E, A, B, C, 77, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:184:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  r4(C, D, E, A, B, 78, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:184:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(C, D, E, A, B, 78, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:185:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  r4(B, C, D, E, A, 79, InternalState.Buffer.L);
                        ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:185:46: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  r4(B, C, D, E, A, 79, InternalState.Buffer.L);
                                             ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:198:3: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  InternalState.Buffer.C[InternalState.BufferOffset ^ 3] = Data;
  ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:198:24: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  InternalState.Buffer.C[InternalState.BufferOffset ^ 3] = Data;
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:198:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  InternalState.Buffer.C[InternalState.BufferOffset ^ 3] = Data;
                         ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:214:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto &C : Data)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:223:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (InternalState.BufferOffset != 56)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:230:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  addUncounted(InternalState.ByteCount >> 29); // Shifting to multiply by 8
               ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:231:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  addUncounted(InternalState.ByteCount >>
               ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:233:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  addUncounted(InternalState.ByteCount >> 13); // byte.
               ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:234:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  addUncounted(InternalState.ByteCount >> 5);
               ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:235:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  addUncounted(InternalState.ByteCount << 3);
               ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:249:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (int i = 0; i < 5; i++) {
           ^      ~      ~~~
           I      I      I
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:250:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    HashResult[i] = (((InternalState.State[i]) << 24) & 0xff000000) |
    ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:250:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    HashResult[i] = (((InternalState.State[i]) << 24) & 0xff000000) |
                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:250:24: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    HashResult[i] = (((InternalState.State[i]) << 24) & 0xff000000) |
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:251:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (((InternalState.State[i]) << 8) & 0x00ff0000) |
                     ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:251:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (((InternalState.State[i]) << 8) & 0x00ff0000) |
                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:251:24: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
                    (((InternalState.State[i]) << 8) & 0x00ff0000) |
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:252:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (((InternalState.State[i]) >> 8) & 0x0000ff00) |
                     ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:252:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (((InternalState.State[i]) >> 8) & 0x0000ff00) |
                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:252:24: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
                    (((InternalState.State[i]) >> 8) & 0x0000ff00) |
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:253:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (((InternalState.State[i]) >> 24) & 0x000000ff);
                     ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:253:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    (((InternalState.State[i]) >> 24) & 0x000000ff);
                      ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:253:24: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
                    (((InternalState.State[i]) >> 24) & 0x000000ff);
                       ^
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:258:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef((char *)HashResult, HASH_LENGTH);
         ^~~~~~~~~~~                              ~~
         {                                        }
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:258:20: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  return StringRef((char *)HashResult, HASH_LENGTH);
                   ^~~~~~~~~~~~~~~~~~~
                   reinterpret_cast<char *>()
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:258:20: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/SHA1.cpp:278:3: warning: uninitialized record type: 'Arr' [cppcoreguidelines-pro-type-member-init]
  std::array<uint8_t, 20> Arr;
  ^                          ~
                             {}
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::ScaledNumbers;
^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:26:8: warning: invalid case style for variable 'getU' [readability-identifier-naming]
  auto getU = [](uint64_t N) { return N >> 32; };
       ^~~~
       GetU
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:26:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  auto getU = [](uint64_t N) { return N >> 32; };
                                      ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:27:8: warning: invalid case style for variable 'getL' [readability-identifier-naming]
  auto getL = [](uint64_t N) { return N & UINT32_MAX; };
       ^~~~
       GetL
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:35:8: warning: invalid case style for variable 'addWithCarry' [readability-identifier-naming]
  auto addWithCarry = [&](uint64_t N) {
       ^~~~~~~~~~~~
       AddWithCarry
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:36:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint64_t NewLower = Lower + (getL(N) << 32);
                                 ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:37:24: warning: implicit conversion bool -> 'unsigned long' [readability-implicit-bool-conversion]
    Upper += getU(N) + (NewLower < Lower);
                       ^
                       static_cast<unsigned long>
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:44:8: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (!Upper)
      ~^~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:44:14: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Upper)
             ^
              {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:48:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  unsigned LeadingZeros = countLeadingZeros(Upper);
                          ^
../include/llvm/Support/MathExtras.h:189:38: note: default parameter was declared here
std::size_t countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:50:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (LeadingZeros)
      ^           ~
                   != 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:50:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (LeadingZeros)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:51:37: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Upper = Upper << LeadingZeros | Lower >> Shift;
                                    ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:53:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                    Shift && (Lower & UINT64_C(1) << (Shift - 1)));
                    ^~~~~
                    ( != 0)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:53:30: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
                    Shift && (Lower & UINT64_C(1) << (Shift - 1)));
                             ^                                   ~
                             (                                    != 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:53:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    Shift && (Lower & UINT64_C(1) << (Shift - 1)));
                                      ^
/usr/include/stdint.h:272:23: note: expanded from macro 'UINT64_C'
#  define UINT64_C(c)   c ## UL
                        ^
note: expanded from here
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:56:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
static uint64_t getHalf(uint64_t N) { return (N >> 1) + (N & 1); }
                                              ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:56:58: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
static uint64_t getHalf(uint64_t N) { return (N >> 1) + (N & 1); }
                                                         ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:60:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Dividend && "expected non-zero dividend");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:61:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Divisor && "expected non-zero divisor");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:66:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (int Zeros = countLeadingZeros(Dividend64)) {
                  ^
../include/llvm/Support/MathExtras.h:189:38: note: default parameter was declared here
std::size_t countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:74:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Quotient > UINT32_MAX)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:83:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Dividend && "expected non-zero dividend");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:84:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Divisor && "expected non-zero divisor");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:88:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (int Zeros = countTrailingZeros(Divisor)) {
                  ^
../include/llvm/Support/MathExtras.h:120:39: note: default parameter was declared here
std::size_t countTrailingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                      ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:94:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Divisor == 1)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:98:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (int Zeros = countLeadingZeros(Dividend)) {
                  ^
../include/llvm/Support/MathExtras.h:189:38: note: default parameter was declared here
std::size_t countLeadingZeros(T Val, ZeroBehavior ZB = ZB_Width) {
                                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:108:11: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  while (!(Quotient >> 63) && Dividend) {
         ~^
         (                 == 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:108:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  while (!(Quotient >> 63) && Dividend) {
           ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:108:31: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  while (!(Quotient >> 63) && Dividend) {
                              ^~~~~~~~~
                              ( != 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:110:23: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    bool IsOverflow = Dividend >> 63;
                      ^~~~~~~~      ~
                      (             ) != 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:110:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:126:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(ScaleDiff >= 0 && "wrong argument order");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:127:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(ScaleDiff < 64 && "numbers too far apart");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:129:12: warning: invalid case style for variable 'L_adjusted' [readability-identifier-naming]
  uint64_t L_adjusted = L >> ScaleDiff;
           ^~~~~~~~~~
           LAdjusted
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:129:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t L_adjusted = L >> ScaleDiff;
                        ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:130:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (L_adjusted < R)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:132:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (L_adjusted > R)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:135:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return L > L_adjusted << ScaleDiff ? 1 : 0;
             ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:138:38: warning: non-const reference parameter 'Str', make it const or use a pointer [google-runtime-references]
static void appendDigit(std::string &Str, unsigned D) {
                                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:139:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(D < 10);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:140:10: warning: an integer is interpreted as a character code when assigning it to a string; if this is intended, cast the integer to the appropriate character type; if you want a string representation, use the appropriate conversion facility [misc-string-integer-assignment]
  Str += '0' + D % 10;
         ^~~         ~
         std::to_string( )
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:143:39: warning: non-const reference parameter 'Str', make it const or use a pointer [google-runtime-references]
static void appendNumber(std::string &Str, uint64_t N) {
                                      ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:144:10: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  while (N) {
         ^~
           != 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:164:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(E >= ScaledNumbers::MinScale);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:165:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(E <= ScaledNumbers::MaxScale);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:171:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Shift <= LeadingZeros);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:172:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Shift == LeadingZeros || NewE == ScaledNumbers::MaxScale);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:173:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Shift >= 0 && Shift < 64 && "undefined behavior");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:179:8: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (!(D >> 63)) {
      ~^        ~
                 == 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:179:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (!(D >> 63)) {
        ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:180:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(E == ScaledNumbers::MaxScale);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:188:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Float.toString(Chars, Precision, 0);
  ^
../include/llvm/ADT/APFloat.h:1168:48: note: default parameter was declared here
                unsigned FormatMaxPadding = 3, bool TruncateZero = true) const {
                                               ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:189:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::string(Chars.begin(), Chars.end());
         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:615:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:193:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t NonZero = Float.find_last_not_of('0');
                   ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:2799:36: note: default parameter was declared here
      find_last_not_of(_CharT __c, size_type __pos = npos) const
                                   ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:194:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(NonZero != std::string::npos && "no . in floating point string");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:196:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Float[NonZero] == '.')
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:204:8: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (!D)
      ~^~
       == 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:204:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!D)
         ^
          {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:205:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "0.0";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:219:12: warning: implicit conversion 'int16_t' (aka 'short') -> bool [readability-implicit-bool-conversion]
      if (!E)
          ~^~
           == 0
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:219:14: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!E)
             ^
              {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:223:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Above0 = D >> -E;
             ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:224:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Below0 = D << (64 + E);
             ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:229:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Below0 = D >> (-E - 64);
             ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:230:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Extra = D << (128 + E);
            ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:235:8: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (!Above0 && !Below0)
      ~^~~~~~
      ( == 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:235:19: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (!Above0 && !Below0)
                 ~^~~~~~~
                 ( == 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:235:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Above0 && !Below0)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:241:7: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (Above0) {
      ^     ~
             != 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:244:9: warning: statement should be inside braces [readability-braces-around-statements]
  } else
        ^
         {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:249:8: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  if (!Below0)
      ~^~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:249:15: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Below0)
              ^
               {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:254:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  uint64_t Error = UINT64_C(1) << (64 - Width);
                   ^
/usr/include/stdint.h:272:23: note: expanded from macro 'UINT64_C'
#  define UINT64_C(c)   c ## UL
                        ^
note: expanded from here
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:258:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Extra = (Below0 & 0xf) << 56 | (Extra >> 8);
          ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:258:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Extra = (Below0 & 0xf) << 56 | (Extra >> 8);
           ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:258:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Extra = (Below0 & 0xf) << 56 | (Extra >> 8);
                                  ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:263:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (ExtraShift) {
        ^         ~
                   != 0
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:266:11: warning: statement should be inside braces [google-readability-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:271:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Below0 += (Extra >> 60);
               ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:272:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Extra = Extra & (UINT64_MAX >> 4);
                     ^
/usr/include/stdint.h:140:22: note: expanded from macro 'UINT64_MAX'
# define UINT64_MAX             (__UINT64_C(18446744073709551615))
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:273:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    appendDigit(Str, Below0 >> 60);
                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:274:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Below0 = Below0 & (UINT64_MAX >> 4);
                       ^
/usr/include/stdint.h:140:22: note: expanded from macro 'UINT64_MAX'
# define UINT64_MAX             (__UINT64_C(18446744073709551615))
                                ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:275:9: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (DigitsOut || Str.back() != '0')
        ^~~~~~~~~
        ( != 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:275:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (DigitsOut || Str.back() != '0')
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:278:12: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
  } while (Error && (Below0 << 4 | Extra >> 60) >= Error / 2 &&
           ^~~~~
           ( != 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:278:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } while (Error && (Below0 << 4 | Extra >> 60) >= Error / 2 &&
                     ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:278:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } while (Error && (Below0 << 4 | Extra >> 60) >= Error / 2 &&
                                   ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:279:14: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
           (!Precision || DigitsOut <= Precision || SinceDot < 2));
            ~^~~~~~~~~
            ( == 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:282:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!Precision || DigitsOut <= Precision)
      ~^~~~~~~~~
      ( == 0u)
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:282:44: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Precision || DigitsOut <= Precision)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:290:30: warning: statement should be inside braces [readability-braces-around-statements]
  if (Truncate >= Str.size())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:294:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Carry)
             ^
              {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:300:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (*I == '.')
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:313:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return stripTrailingZeros(std::string(Carry, '1') + Str.substr(0, Truncate));
                            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/ScaledNumber.cpp:313:41: warning: implicit conversion bool -> 'std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::size_type' (aka 'unsigned long') [readability-implicit-bool-conversion]
  return stripTrailingZeros(std::string(Carry, '1') + Str.substr(0, Truncate));
                                        ^~~~~~
                                        static_cast<std::__cxx11::basic_string<char, struct std::char_traits<char>, class std::allocator<char> >::size_type>()
/home/jonas/opt/llvm/lib/Support/SmallVector.cpp:15:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/SmallVector.cpp:25:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/SmallVector.cpp:18:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/SmallVector.cpp:43:23: warning: invalid case style for function 'grow_pod' [readability-identifier-naming]
void SmallVectorBase::grow_pod(void *FirstEl, size_t MinCapacity,
                      ^~~~~~~~~
                      growPod
/home/jonas/opt/llvm/lib/Support/SmallVector.cpp:46:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (MinCapacity > UINT32_MAX)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/SmallVector.cpp:47:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    report_bad_alloc_error("SmallVector capacity overflow during allocation");
    ^
../include/llvm/Support/ErrorHandling.h:117:49: note: default parameter was declared here
void report_bad_alloc_error(const char *Reason, bool GenCrashDiag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:17:1: warning: #includes are not sorted properly [llvm-include-order]
#include "llvm/Support/MathExtras.h"
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         "llvm/Support/ErrorHandling.h"
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:25:27: warning: invalid case style for function 'shrink_and_clear' [readability-identifier-naming]
void SmallPtrSetImplBase::shrink_and_clear() {
                          ^~~~~~~~~~~~~~~~~
                          shrinkAndClear
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:26:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!isSmall() && "Can't shrink a small set!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:27:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(CurArray);
  ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:27:3: warning: do not manage memory manually; use RAII [hicpp-no-malloc]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:31:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  CurArraySize = Size > 16 ? 1 << (Log2_32_Ceil(Size) + 1) : 32;
                             ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:35:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  CurArray = (const void**)safe_malloc(sizeof(void*) * CurArraySize);
             ^~~~~~~~~~~~~~~~~~~~~~~~~                              ~
             static_cast<const void**>(                             )
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:35:14: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:41:22: warning: invalid case style for function 'insert_imp_big' [readability-identifier-naming]
SmallPtrSetImplBase::insert_imp_big(const void *Ptr) {
                     ^~~~~~~~~~~~~~~
                     insertImpBig
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:52:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const void **Bucket = const_cast<const void**>(FindBucketFor(Ptr));
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:52:25: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
  const void **Bucket = const_cast<const void**>(FindBucketFor(Ptr));
                        ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:53:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Bucket == Ptr)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:57:39: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*Bucket == getTombstoneMarker())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:59:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:66:42: warning: invalid case style for function 'FindBucketFor' [readability-identifier-naming]
const void * const *SmallPtrSetImplBase::FindBucketFor(const void *Ptr) const {
                                         ^~~~~~~~~~~~~~
                                         findBucketFor
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:76:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (LLVM_LIKELY(Array[Bucket] == getEmptyMarker()))
                    ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:76:56: warning: statement should be inside braces [readability-braces-around-statements]
    if (LLVM_LIKELY(Array[Bucket] == getEmptyMarker()))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:77:14: warning: implicit conversion 'const void *const *' -> bool [readability-implicit-bool-conversion]
      return Tombstone ? Tombstone : Array+Bucket;
             ^
                       != nullptr
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:77:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return Tombstone ? Tombstone : Array+Bucket;
                                          ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:80:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (LLVM_LIKELY(Array[Bucket] == Ptr))
                    ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:80:43: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (LLVM_LIKELY(Array[Bucket] == Ptr))
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:81:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return Array+Bucket;
                  ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:85:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Array[Bucket] == getTombstoneMarker() && !Tombstone)
        ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:85:51: warning: implicit conversion 'const void *const *' -> bool [readability-implicit-bool-conversion]
    if (Array[Bucket] == getTombstoneMarker() && !Tombstone)
                                                 ~^~~~~~~~~~
                                                 ( == nullptr)
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:85:61: warning: statement should be inside braces [readability-braces-around-statements]
    if (Array[Bucket] == getTombstoneMarker() && !Tombstone)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:86:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      Tombstone = Array+Bucket;  // Remember the first tombstone found.
                       ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:95:27: warning: invalid case style for function 'Grow' [readability-identifier-naming]
void SmallPtrSetImplBase::Grow(unsigned NewSize) {
                          ^~~~~
                          grow
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:101:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const void **NewBuckets = (const void**) safe_malloc(sizeof(void*) * NewSize);
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:101:29: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  const void **NewBuckets = (const void**) safe_malloc(sizeof(void*) * NewSize);
                            ^~~~~~~~~~~~~~~~~~~~~~~~~~                         ~
                            static_cast<const void**>(                         )
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:101:29: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:109:66: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  for (const void **BucketPtr = OldBuckets; BucketPtr != OldEnd; ++BucketPtr) {
                                                                 ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:112:64: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Elt != getTombstoneMarker() && Elt != getEmptyMarker())
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:113:8: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
      *const_cast<void**>(FindBucketFor(Elt)) = const_cast<void*>(Elt);
       ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:113:49: warning: do not use const_cast [cppcoreguidelines-pro-type-const-cast]
      *const_cast<void**>(FindBucketFor(Elt)) = const_cast<void*>(Elt);
                                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:116:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!WasSmall)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:117:5: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    free(OldBuckets);
    ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:117:5: warning: do not manage memory manually; use RAII [hicpp-no-malloc]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:122:1: warning: constructor does not initialize these fields: CurArraySize, NumNonEmpty, NumTombstones [cppcoreguidelines-pro-type-member-init]
SmallPtrSetImplBase::SmallPtrSetImplBase(const void **SmallStorage,
^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:123:69: warning: invalid case style for parameter 'that' [readability-identifier-naming]
                                         const SmallPtrSetImplBase &that) {
                                                                    ^~~~~
                                                                    That
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:131:16: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    CurArray = (const void**)safe_malloc(sizeof(void*) * that.CurArraySize);
               ^~~~~~~~~~~~~~~~~~~~~~~~~                                   ~
               static_cast<const void**>(                                  )
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:131:16: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:138:1: warning: constructor does not initialize these fields: CurArray, CurArraySize, NumNonEmpty, NumTombstones [cppcoreguidelines-pro-type-member-init]
SmallPtrSetImplBase::SmallPtrSetImplBase(const void **SmallStorage,
^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:140:64: warning: invalid case style for parameter 'that' [readability-identifier-naming]
                                         SmallPtrSetImplBase &&that) {
                                                               ^~~~~
                                                               That
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:145:27: warning: invalid case style for function 'CopyFrom' [readability-identifier-naming]
void SmallPtrSetImplBase::CopyFrom(const SmallPtrSetImplBase &RHS) {
                          ^~~~~~~~~
                          copyFrom
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:146:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(&RHS != this && "Self-copy should be handled by the caller.");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:148:34: warning: statement should be inside braces [readability-braces-around-statements]
  if (isSmall() && RHS.isSmall())
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:149:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(CurArraySize == RHS.CurArraySize &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:154:20: warning: statement should be inside braces [readability-braces-around-statements]
    if (!isSmall())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:155:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      free(CurArray);
      ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:155:7: warning: do not manage memory manually; use RAII [hicpp-no-malloc]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:159:19: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (isSmall())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:160:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      CurArray = (const void**)safe_malloc(sizeof(void*) * RHS.CurArraySize);
                 ^~~~~~~~~~~~~~~~~~~~~~~~~                                  ~
                 static_cast<const void**>(                                 )
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:160:18: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:162:13: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
      const void **T = (const void**)safe_realloc(CurArray,
            ^~~~
            auto
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:162:24: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      const void **T = (const void**)safe_realloc(CurArray,
                       ^~~~~~~~~~~~~~~~~~~~~~~~~~
                       static_cast<const void**>(
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:162:24: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:171:27: warning: invalid case style for function 'CopyHelper' [readability-identifier-naming]
void SmallPtrSetImplBase::CopyHelper(const SmallPtrSetImplBase &RHS) {
                          ^~~~~~~~~~~
                          copyHelper
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:182:27: warning: invalid case style for function 'MoveFrom' [readability-identifier-naming]
void SmallPtrSetImplBase::MoveFrom(unsigned SmallSize,
                          ^~~~~~~~~
                          moveFrom
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:184:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (!isSmall())
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:185:5: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
    free(CurArray);
    ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:185:5: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:189:27: warning: invalid case style for function 'MoveHelper' [readability-identifier-naming]
void SmallPtrSetImplBase::MoveHelper(unsigned SmallSize,
                          ^~~~~~~~~~~
                          moveHelper
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:191:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(&RHS != this && "Self-move should be handled by the caller.");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:196:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::copy(RHS.CurArray, RHS.CurArray + RHS.NumNonEmpty, CurArray);
                                         ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:209:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(RHS.CurArray == RHS.SmallArray);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:215:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (this == &RHS) return;
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:231:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(RHS.CurArray == RHS.SmallArray);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:232:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::copy(RHS.CurArray, RHS.CurArray + RHS.NumNonEmpty, this->SmallArray);
                                         ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:244:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(this->CurArray == this->SmallArray);
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:245:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::copy(this->CurArray, this->CurArray + this->NumNonEmpty,
                                             ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:256:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(this->isSmall() && RHS.isSmall());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:258:55: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  std::swap_ranges(this->SmallArray, this->SmallArray + MinNonEmpty,
                                                      ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:261:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::copy(this->SmallArray + MinNonEmpty,
                               ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:262:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              this->SmallArray + this->NumNonEmpty,
                               ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:263:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              RHS.SmallArray + MinNonEmpty);
                             ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:265:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::copy(RHS.SmallArray + MinNonEmpty, RHS.SmallArray + RHS.NumNonEmpty,
                             ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:265:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    std::copy(RHS.SmallArray + MinNonEmpty, RHS.SmallArray + RHS.NumNonEmpty,
                                                           ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:266:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
              this->SmallArray + MinNonEmpty);
                               ^
/home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp:268:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(this->CurArraySize == RHS.CurArraySize);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ScopedPrinter.h:346:8: warning: function 'llvm::ScopedPrinter::printBinaryImpl' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void printBinaryImpl(StringRef Label, StringRef Str, ArrayRef<uint8_t> Value,
       ^                                                                 ~~~~~~
                                                                         Data
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:22:21: note: the definition seen here
void ScopedPrinter::printBinaryImpl(StringRef Label, StringRef Str,
                    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ScopedPrinter.h:346:8: note: differing parameters are named here: ('Value'), in definition: ('Data')
  void printBinaryImpl(StringRef Label, StringRef Str, ArrayRef<uint8_t> Value,
       ^
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:6:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::support;
^
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:10:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &operator<<(raw_ostream &OS, const HexNumber &Value) {
^
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:11:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS << "0x" << to_hexString(Value.Value);
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ScopedPrinter.h:60:48: note: default parameter was declared here
const std::string to_hexString(uint64_t Value, bool UpperCase = true);
                                               ^
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:15:19: warning: invalid case style for function 'to_hexString' [readability-identifier-naming]
const std::string to_hexString(uint64_t Value, bool UpperCase) {
                  ^~~~~~~~~~~~~
                  toHexString
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:16:15: warning: invalid case style for variable 'number' [readability-identifier-naming]
  std::string number;
              ^~~~~~~
              Number
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:17:28: warning: invalid case style for variable 'stream' [readability-identifier-naming]
  llvm::raw_string_ostream stream(number);
                           ^~~~~~~
                           Stream
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:25:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (Data.size() > 16)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:30:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Str.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:33:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Data.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/ScopedPrinter.cpp:40:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Str.empty())
                     ^
                      {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/StringPool.h:67:21: warning: function 'llvm::StringPool::intern' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    PooledStringPtr intern(StringRef Str);
                    ^                ~~~~
                                     Key
/home/jonas/opt/llvm/lib/Support/StringPool.cpp:25:29: note: the definition seen here
PooledStringPtr StringPool::intern(StringRef Key) {
                            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/StringPool.h:67:21: note: differing parameters are named here: ('Str'), in definition: ('Key')
    PooledStringPtr intern(StringRef Str);
                    ^
/home/jonas/opt/llvm/lib/Support/StringPool.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/StringPool.cpp:19:13: warning: use '= default' to define a trivial default constructor [hicpp-use-equals-default]
StringPool::StringPool() {}
            ^            ~~
                         = default;
/home/jonas/opt/llvm/lib/Support/StringPool.cpp:22:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(InternTable.empty() && "PooledStringPtr leaked!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/StringPool.cpp:27:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (I != InternTable.end())
                             ^
                              {
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/StringMap.h:74:3: warning: function 'llvm::StringMapImpl::StringMapImpl' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  StringMapImpl(unsigned InitSize, unsigned ItemSize);
  ^                                         ~~~~~~~~~
                                            itemSize
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:34:16: note: the definition seen here
StringMapImpl::StringMapImpl(unsigned InitSize, unsigned itemSize) {
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/StringMap.h:74:3: note: differing parameters are named here: ('ItemSize'), in definition: ('itemSize')
  StringMapImpl(unsigned InitSize, unsigned ItemSize);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/StringMap.h:82:12: warning: function 'llvm::StringMapImpl::LookupBucketFor' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  unsigned LookupBucketFor(StringRef Key);
           ^                         ~~~~
                                     Name
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:78:25: note: the definition seen here
unsigned StringMapImpl::LookupBucketFor(StringRef Name) {
                        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/StringMap.h:82:12: note: differing parameters are named here: ('Key'), in definition: ('Name')
  unsigned LookupBucketFor(StringRef Key);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/StringMap.h:99:8: warning: function 'llvm::StringMapImpl::init' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void init(unsigned Size);
       ^             ~~~~~
                     InitSize
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:53:21: note: the definition seen here
void StringMapImpl::init(unsigned InitSize) {
                    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/StringMap.h:99:8: note: differing parameters are named here: ('Size'), in definition: ('InitSize')
  void init(unsigned Size);
       ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:21:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:27:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NumEntries == 0)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:34:58: warning: invalid case style for parameter 'itemSize' [readability-identifier-naming]
StringMapImpl::StringMapImpl(unsigned InitSize, unsigned itemSize) {
                                                         ^~~~~~~~~
                                                         ItemSize
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:38:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (InitSize) {
      ^       ~
               != 0u
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:54:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert((InitSize & (InitSize-1)) == 0 &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:57:28: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  unsigned NewNumBuckets = InitSize ? InitSize : 16;
                           ^
                                    != 0u
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:70:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  TheTable[NumBuckets] = (StringMapEntryBase*)2;
  ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:70:26: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  TheTable[NumBuckets] = (StringMapEntryBase*)2;
                         ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:70:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:78:25: warning: invalid case style for function 'LookupBucketFor' [readability-identifier-naming]
unsigned StringMapImpl::LookupBucketFor(StringRef Name) {
                        ^~~~~~~~~~~~~~~~
                        lookupBucketFor
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:86:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:86:25: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                        ^~~~~~~~~~~~~
                        reinterpret_cast<unsigned *>
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:86:25: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:86:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:86:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                                                           ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:91:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    StringMapEntryBase *BucketItem = TheTable[BucketNo];
                                     ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:97:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        HashTable[FirstTombstone] = FullHashValue;
        ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:101:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      HashTable[BucketNo] = FullHashValue;
      ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:107:32: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (FirstTombstone == -1) FirstTombstone = BucketNo;
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:108:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    } else if (LLVM_LIKELY(HashTable[BucketNo] == FullHashValue)) {
                           ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:116:23: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
      char *ItemStr = (char*)BucketItem+ItemSize;
                      ^~~~~~~~~~~~~~~~~~
                      reinterpret_cast<char*>()
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:116:23: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:116:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      char *ItemStr = (char*)BucketItem+ItemSize;
                                       ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:135:20: warning: invalid case style for function 'FindKey' [readability-identifier-naming]
int StringMapImpl::FindKey(StringRef Key) const {
                   ^~~~~~~~
                   findKey
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:137:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (HTSize == 0) return -1;  // Really empty table?
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:140:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:140:25: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                        ^~~~~~~~~~~~~
                        reinterpret_cast<unsigned *>
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:140:25: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:140:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:140:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                                                           ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:144:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    StringMapEntryBase *BucketItem = TheTable[BucketNo];
                                     ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:146:34: warning: statement should be inside braces [readability-braces-around-statements]
    if (LLVM_LIKELY(!BucketItem))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:151:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    } else if (LLVM_LIKELY(HashTable[BucketNo] == FullHashValue)) {
                           ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:159:23: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
      char *ItemStr = (char*)BucketItem+ItemSize;
                      ^~~~~~~~~~~~~~~~~~
                      reinterpret_cast<char*>()
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:159:23: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:159:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      char *ItemStr = (char*)BucketItem+ItemSize;
                                       ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:177:21: warning: invalid case style for function 'RemoveKey' [readability-identifier-naming]
void StringMapImpl::RemoveKey(StringMapEntryBase *V) {
                    ^~~~~~~~~~
                    removeKey
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:178:22: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  const char *VStr = (char*)V + ItemSize;
                     ^~~~~~~~
                     reinterpret_cast<char*>()
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:178:22: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:178:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const char *VStr = (char*)V + ItemSize;
                              ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:181:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(V == V2 && "Didn't find key?");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:186:36: warning: invalid case style for function 'RemoveKey' [readability-identifier-naming]
StringMapEntryBase *StringMapImpl::RemoveKey(StringRef Key) {
                                   ^~~~~~~~~~
                                   removeKey
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:188:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Bucket == -1) return nullptr;
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:190:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  StringMapEntryBase *Result = TheTable[Bucket];
                               ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:191:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  TheTable[Bucket] = getTombstoneVal();
  ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:194:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(NumItems + NumTombstones <= NumBuckets);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:201:25: warning: invalid case style for function 'RehashTable' [readability-identifier-naming]
unsigned StringMapImpl::RehashTable(unsigned BucketNo) {
                        ^~~~~~~~~~~~
                        rehashTable
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:203:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:203:25: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                        ^~~~~~~~~~~~~
                        reinterpret_cast<unsigned *>
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:203:25: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:203:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:203:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  unsigned *HashTable = (unsigned *)(TheTable + NumBuckets + 1);
                                                           ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:223:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  unsigned *NewHashArray = (unsigned *)(NewTableArray + NewSize + 1);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:223:28: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  unsigned *NewHashArray = (unsigned *)(NewTableArray + NewSize + 1);
                           ^~~~~~~~~~~~~
                           reinterpret_cast<unsigned *>
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:223:28: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:224:28: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  NewTableArray[NewSize] = (StringMapEntryBase*)2;
                           ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:224:28: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:229:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    StringMapEntryBase *Bucket = TheTable[I];
                                 ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:230:9: warning: implicit conversion 'llvm::StringMapEntryBase *' -> bool [readability-implicit-bool-conversion]
    if (Bucket && Bucket != getTombstoneVal()) {
        ^~~~~~
        ( != nullptr)
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:232:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      unsigned FullHash = HashTable[I];
                          ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:234:12: warning: implicit conversion 'llvm::StringMapEntryBase *' -> bool [readability-implicit-bool-conversion]
      if (!NewTableArray[NewBucket]) {
          ~^~~~~~~~~~~~~           ~
                                    == nullptr
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:236:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        NewHashArray[FullHash & (NewSize-1)] = FullHash;
        ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:237:27: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (I == BucketNo)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:246:16: warning: implicit conversion 'llvm::StringMapEntryBase *' -> bool [readability-implicit-bool-conversion]
      } while (NewTableArray[NewBucket]);
               ^                       ~
                                        != nullptr
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:250:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      NewHashArray[NewBucket] = FullHash;
      ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:251:25: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (I == BucketNo)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:256:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(TheTable);
  ^
/home/jonas/opt/llvm/lib/Support/StringMap.cpp:256:3: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:26:10: warning: inclusion of deprecated C++ header 'stdio.h'; consider using 'cstdio' instead [hicpp-deprecated-headers]
#include <stdio.h>
         ^~~~~~~~~
         <cstdio>
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:44:15: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  for (size_t pos = 0; (pos = Regexp.find('*', pos)) != std::string::npos;
              ^~~       ~~~                    ~~~~
              Pos       Pos                    Pos
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:52:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Regex CheckRE(Regexp);
        ^
../include/llvm/Support/Regex.h:48:28: note: default parameter was declared here
    Regex(StringRef Regex, unsigned Flags = NoFlags);
                           ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:53:33: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!CheckRE.isValid(REError))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:63:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (It != Strings.end())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:65:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Trigrams.isDefinitelyOut(Query))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:66:12: warning: implicit conversion bool -> 'unsigned int' [readability-implicit-bool-conversion]
    return false;
           ^~~~~~
           0u
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:67:32: warning: statement should be inside braces [readability-braces-around-statements]
  for (auto& RegExKV : RegExes)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:68:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (RegExKV.first->match(Query))
        ^
../include/llvm/Support/Regex.h:74:34: note: default parameter was declared here
    bool match(StringRef String, SmallVectorImpl<StringRef> *Matches = nullptr);
                                 ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:68:37: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (RegExKV.first->match(Query))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:77:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (SCL->createInternal(Paths, Error))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:85:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (SCL->createInternal(MB, Error))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:93:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto SCL = create(Paths, Error))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:95:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  report_fatal_error(Error);
  ^
../include/llvm/Support/ErrorHandling.h:75:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:103:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        MemoryBuffer::getFile(Path);
        ^
../include/llvm/Support/MemoryBuffer.h:82:11: note: default parameter was declared here
          bool RequiresNullTerminator = true, bool IsVolatile = false);
          ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:120:35: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!parse(MB, Sections, Error))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:121:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return false;
~~~~~~~~~~~^~~~~~
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:130:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  MB->getBuffer().split(Lines, '\n');
  ^
../include/llvm/ADT/StringRef.h:799:63: note: default parameter was declared here
    void split(SmallVectorImpl<StringRef> &A, char Separator, int MaxSplit = -1,
                                                              ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:136:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    *I = I->trim();
         ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:138:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I->empty() || I->startswith("#"))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:152:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Regex CheckRE(Section);
            ^
../include/llvm/Support/Regex.h:48:28: note: default parameter was declared here
    Regex(StringRef Regex, unsigned Flags = NoFlags);
                           ^
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:201:18: warning: use '= default' to define a trivial destructor [hicpp-use-equals-default]
SpecialCaseList::~SpecialCaseList() {}
                 ^                  ~~
                                    = default;
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:205:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  return inSectionBlame(Section, Prefix, Query, Category);
         ^                                               ~
                                                          != 0u
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:211:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto &SectionIter : Sections)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:212:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (SectionIter.SectionMatcher->match(Section)) {
        ^                                         ~
                                                   != 0u
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:215:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Blame)
          ^    ~
                != 0u
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:215:17: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Blame)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:225:26: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (I == Entries.end()) return 0;
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp:227:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (II == I->second.end()) return 0;
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:22:28: warning: invalid case style for function 'StrInStrNoCase' [readability-identifier-naming]
StringRef::size_type llvm::StrInStrNoCase(StringRef s1, StringRef s2) {
                           ^~~~~~~~~~~~~~~
                           strInStrNoCase
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:22:53: warning: invalid case style for parameter 's1' [readability-identifier-naming]
StringRef::size_type llvm::StrInStrNoCase(StringRef s1, StringRef s2) {
                                                    ^~~
                                                    S1
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:22:67: warning: invalid case style for parameter 's2' [readability-identifier-naming]
StringRef::size_type llvm::StrInStrNoCase(StringRef s1, StringRef s2) {
                                                                  ^~~
                                                                  S2
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:24:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (N > M)
            ^
             {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:26:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = M - N + 1; i != e; ++i)
              ^                     ~         ~~
              I                     I         I
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:26:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = M - N + 1; i != e; ++i)
                     ^                   ~~
                     E                   E
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:26:49: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (size_t i = 0, e = M - N + 1; i != e; ++i)
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:27:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (s1.substr(i, N).equals_lower(s2))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:41:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef::size_type Start = Source.find_first_not_of(Delimiters);
                               ^
../include/llvm/ADT/StringRef.h:416:47: note: default parameter was declared here
    size_t find_first_not_of(StringRef Chars, size_t From = 0) const;
                                              ^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:46:51: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::make_pair(Source.slice(Start, End), Source.substr(End));
                                                  ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:51:12: warning: invalid case style for function 'SplitString' [readability-identifier-naming]
void llvm::SplitString(StringRef Source,
           ^~~~~~~~~~~~
           splitString
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:62:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = Name.size(); i != e; ++i) {
                ^                       ~         ~~
                I                       I         I
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:62:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = Name.size(); i != e; ++i) {
                       ^                     ~~
                       E                     E
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:64:45: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isPrint(C) && C != '\\' && C != '"')
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:66:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:67:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Out << '\\' << hexdigit(C >> 4) << hexdigit(C & 0x0F);
                     ^
../include/llvm/ADT/StringExtras.h:37:34: note: default parameter was declared here
inline char hexdigit(unsigned X, bool LowerCase = false) {
                                 ^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:67:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Out << '\\' << hexdigit(C >> 4) << hexdigit(C & 0x0F);
                              ^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:67:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Out << '\\' << hexdigit(C >> 4) << hexdigit(C & 0x0F);
                                         ^
../include/llvm/ADT/StringExtras.h:37:34: note: default parameter was declared here
inline char hexdigit(unsigned X, bool LowerCase = false) {
                                 ^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:67:51: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Out << '\\' << hexdigit(C >> 4) << hexdigit(C & 0x0F);
                                                  ^
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:73:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (C == '&')
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:75:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (C == '<')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:77:23: warning: statement should be inside braces [readability-braces-around-statements]
    else if (C == '>')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:79:24: warning: statement should be inside braces [readability-braces-around-statements]
    else if (C == '\"')
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:81:24: warning: statement should be inside braces [readability-braces-around-statements]
    else if (C == '\'')
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:83:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/StringExtras.cpp:89:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const char C : String)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/StringSaver.cpp:12:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/StringSaver.cpp:15:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  char *P = Alloc.Allocate<char>(S.size() + 1);
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/StringSaver.cpp:16:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!S.empty())
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringSaver.cpp:18:3: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  P[S.size()] = '\0';
  ^
/home/jonas/opt/llvm/lib/Support/StringSaver.cpp:19:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef(P, S.size());
         ^~~~~~~~~~~          ~~
         {                    }
/home/jonas/opt/llvm/lib/Support/StringSaver.cpp:24:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (R.second)                 // cache miss, need to actually save the string
               ^
                {
/home/jonas/opt/llvm/lib/Support/SystemUtils.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/SystemUtils.cpp:19:12: warning: invalid case style for function 'CheckBitcodeOutputToConsole' [readability-identifier-naming]
bool llvm::CheckBitcodeOutputToConsole(raw_ostream &stream_to_check,
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
           checkBitcodeOutputToConsole
/home/jonas/opt/llvm/lib/Support/SystemUtils.cpp:19:53: warning: invalid case style for parameter 'stream_to_check' [readability-identifier-naming]
bool llvm::CheckBitcodeOutputToConsole(raw_ostream &stream_to_check,
                                                    ^~~~~~~~~~~~~~~~
                                                    StreamToCheck
/home/jonas/opt/llvm/lib/Support/SystemUtils.cpp:20:45: warning: invalid case style for parameter 'print_warning' [readability-identifier-naming]
                                       bool print_warning) {
                                            ^~~~~~~~~~~~~~
                                            PrintWarning
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:37:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:60:7: warning: class 'StatisticInfo' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
class StatisticInfo {
      ^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:63:21: warning: invalid case style for function 'PrintStatistics' [readability-identifier-naming]
  friend void llvm::PrintStatistics();
                    ^~~~~~~~~~~~~~~~
                    printStatistics
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:64:21: warning: invalid case style for function 'PrintStatistics' [readability-identifier-naming]
  friend void llvm::PrintStatistics(raw_ostream &OS);
                    ^~~~~~~~~~~~~~~~
                    printStatistics
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:65:21: warning: invalid case style for function 'PrintStatisticsJSON' [readability-identifier-naming]
  friend void llvm::PrintStatisticsJSON(raw_ostream &OS);
                    ^~~~~~~~~~~~~~~~~~~~
                    printStatisticsJson
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:94:17: warning: invalid case style for function 'RegisterStatistic' [readability-identifier-naming]
void Statistic::RegisterStatistic() {
                ^~~~~~~~~~~~~~~~~~
                registerStatistic
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:108:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Initialized.load(std::memory_order_relaxed))
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:110:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Stats || Enabled)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:125:30: warning: statement should be inside braces [readability-braces-around-statements]
  if (::Stats || PrintOnExit)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:129:12: warning: invalid case style for function 'EnableStatistics' [readability-identifier-naming]
void llvm::EnableStatistics(bool PrintOnExit) {
           ^~~~~~~~~~~~~~~~~
           enableStatistics
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:134:12: warning: invalid case style for function 'AreStatisticsEnabled' [readability-identifier-naming]
bool llvm::AreStatisticsEnabled() {
           ^~~~~~~~~~~~~~~~~~~~~
           areStatisticsEnabled
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:141:73: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (int Cmp = std::strcmp(LHS->getDebugType(), RHS->getDebugType()))
                                                                        ^
                                                                         {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:144:63: warning: statement should be inside braces [readability-braces-around-statements]
    if (int Cmp = std::strcmp(LHS->getName(), RHS->getName()))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:173:12: warning: invalid case style for function 'PrintStatistics' [readability-identifier-naming]
void llvm::PrintStatistics(raw_ostream &OS) {
           ^~~~~~~~~~~~~~~~
           printStatistics
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:178:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = Stats.Stats.size(); i != e; ++i) {
              ^                              ~         ~~
              I                              I         I
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:178:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = Stats.Stats.size(); i != e; ++i) {
                     ^                            ~~
                     E                            E
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:180:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                         (unsigned)utostr(Stats.Stats[i]->getValue()).size());
                         ^~~~~~~~~~~~~~~~                                   ~
                         static_cast<unsigned>(                             )
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:180:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                         (unsigned)utostr(Stats.Stats[i]->getValue()).size());
                                   ^
../include/llvm/ADT/StringExtras.h:224:39: note: default parameter was declared here
inline std::string utostr(uint64_t X, bool isNeg = false) {
                                      ^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:182:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
                         (unsigned)std::strlen(Stats.Stats[i]->getDebugType()));
                         ^~~~~~~~~~~~~                                        ~
                         static_cast<unsigned>(                               )
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:188:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS << "===" << std::string(73, '-') << "===\n"
                 ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:190:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
     << "===" << std::string(73, '-') << "===\n\n";
                 ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:193:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = Stats.Stats.size(); i != e; ++i)
              ^                              ~         ~~
              I                              I         I
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:193:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = Stats.Stats.size(); i != e; ++i)
                     ^                            ~~
                     E                            E
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:193:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_t i = 0, e = Stats.Stats.size(); i != e; ++i)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:203:12: warning: invalid case style for function 'PrintStatisticsJSON' [readability-identifier-naming]
void llvm::PrintStatisticsJSON(raw_ostream &OS) {
           ^~~~~~~~~~~~~~~~~~~~
           printStatisticsJson
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:211:15: warning: invalid case style for variable 'delim' [readability-identifier-naming]
  const char *delim = "";
              ^~~~~
              Delim
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:214:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(yaml::needsQuotes(Stat->getDebugType()) == yaml::QuotingType::None &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:216:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(yaml::needsQuotes(Stat->getName()) == yaml::QuotingType::None &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:229:12: warning: invalid case style for function 'PrintStatistics' [readability-identifier-naming]
void llvm::PrintStatistics() {
           ^~~~~~~~~~~~~~~~
           printStatistics
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:235:27: warning: statement should be inside braces [readability-braces-around-statements]
  if (Stats.Stats.empty()) return;
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:239:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (StatsAsJSON)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:241:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:257:57: warning: invalid case style for function 'GetStatistics' [readability-identifier-naming]
const std::vector<std::pair<StringRef, unsigned>> llvm::GetStatistics() {
                                                        ^~~~~~~~~~~~~~
                                                        getStatistics
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:261:50: warning: statement should be inside braces [readability-braces-around-statements]
  for (const auto &Stat : StatInfo->statistics())
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/Statistic.cpp:266:12: warning: invalid case style for function 'ResetStatistics' [readability-identifier-naming]
void llvm::ResetStatistics() {
           ^~~~~~~~~~~~~~~~
           resetStatistics
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:31:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:59:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memcpy(Hdr.Magic, "ustar", 5); // Ustar magic
         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:60:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memcpy(Hdr.Version, "00", 2);  // Ustar version
         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:85:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS.seek(alignTo(Pos, BlockSize));
          ^
../include/llvm/Support/MathExtras.h:685:57: note: default parameter was declared here
inline uint64_t alignTo(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:89:42: warning: non-const reference parameter 'Hdr', make it const or use a pointer [google-runtime-references]
static void computeChecksum(UstarHeader &Hdr) {
                                         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:92:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memset(Hdr.Checksum, ' ', sizeof(Hdr.Checksum));
         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:96:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_t I = 0; I < sizeof(Hdr); ++I)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:97:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Chksum += reinterpret_cast<uint8_t *>(&Hdr)[I];
              ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:97:15: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:98:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  snprintf(Hdr.Checksum, sizeof(Hdr.Checksum), "%06o", Chksum);
  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:98:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  snprintf(Hdr.Checksum, sizeof(Hdr.Checksum), "%06o", Chksum);
           ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:109:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  snprintf(Hdr.Size, sizeof(Hdr.Size), "%011zo", PaxAttr.size());
  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:109:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  snprintf(Hdr.Size, sizeof(Hdr.Size), "%011zo", PaxAttr.size());
           ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:114:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  OS << StringRef(reinterpret_cast<char *>(&Hdr), sizeof(Hdr));
                  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:128:51: warning: non-const reference parameter 'Prefix', make it const or use a pointer [google-runtime-references]
static bool splitUstar(StringRef Path, StringRef &Prefix, StringRef &Name) {
                                                  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:128:70: warning: non-const reference parameter 'Name', make it const or use a pointer [google-runtime-references]
static bool splitUstar(StringRef Path, StringRef &Prefix, StringRef &Name) {
                                                                     ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:136:30: warning: statement should be inside braces [readability-braces-around-statements]
  if (Sep == StringRef::npos)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:138:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Path.size() - Sep - 1 >= sizeof(UstarHeader::Name))
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:142:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Name = Path.substr(Sep + 1);
         ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:151:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memcpy(Hdr.Name, Name.data(), Name.size());
         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:152:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memcpy(Hdr.Mode, "0000664", 8);
         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:153:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  snprintf(Hdr.Size, sizeof(Hdr.Size), "%011zo", Size);
  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:153:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  snprintf(Hdr.Size, sizeof(Hdr.Size), "%011zo", Size);
           ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:154:10: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  memcpy(Hdr.Prefix, Prefix.data(), Prefix.size());
         ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:156:19: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  OS << StringRef(reinterpret_cast<char *>(&Hdr), sizeof(Hdr));
                  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:162:3: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
  using namespace sys::fs;
  ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:165:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          openFileForWrite(OutputPath, FD, CD_CreateAlways, OF_None))
          ^
../include/llvm/Support/FileSystem.h:929:45: note: default parameter was declared here
                 OpenFlags Flags = OF_None, unsigned Mode = 0666) {
                                            ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:165:70: warning: statement should be inside braces [google-readability-braces-around-statements]
          openFileForWrite(OutputPath, FD, CD_CreateAlways, OF_None))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:167:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::unique_ptr<TarWriter>(new TarWriter(FD, BaseDir));
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:176:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Fullpath = BaseDir + "/" + sys::path::convert_to_slash(Path);
                                         ^
../include/llvm/Support/Path.h:225:46: note: default parameter was declared here
std::string convert_to_slash(StringRef path, Style style = Style::native);
                                             ^
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:179:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Files.insert(Fullpath).second)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/TarWriter.cpp:198:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS << std::string(BlockSize * 2, '\0');
        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SourceMgr.h:279:3: warning: function 'llvm::SMDiagnostic::SMDiagnostic' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN,
  ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:265:15: note: the definition seen here
SMDiagnostic::SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN,
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SourceMgr.h:279:3: note: differing parameters are named here: ('FixIts'), in definition: ('Hints')
  SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN,
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SourceMgr.h:303:8: warning: function 'llvm::SMDiagnostic::print' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void print(const char *ProgName, raw_ostream &S, bool ShowColors = true,
       ^                                        ~~
                                                OS
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:374:20: note: the definition seen here
void SMDiagnostic::print(const char *ProgName, raw_ostream &OS,
                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SourceMgr.h:303:8: note: differing parameters are named here: ('S'), in definition: ('OS')
  void print(const char *ProgName, raw_ostream &S, bool ShowColors = true,
       ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:37:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:41:21: warning: invalid case style for function 'AddIncludeFile' [readability-identifier-naming]
unsigned SourceMgr::AddIncludeFile(const std::string &Filename,
                    ^~~~~~~~~~~~~~~
                    addIncludeFile
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:46:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    MemoryBuffer::getFile(IncludedFile);
    ^
../include/llvm/Support/MemoryBuffer.h:81:34: note: default parameter was declared here
  getFile(const Twine &Filename, int64_t FileSize = -1,
                                 ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:49:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = IncludeDirectories.size(); i != e && !NewBufOrErr;
                ^                                     ~
                I                                     I
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:49:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = IncludeDirectories.size(); i != e && !NewBufOrErr;
                       ^                                   ~
                       E                                   E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:52:33: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        IncludeDirectories[i] + sys::path::get_separator().data() + Filename;
                                ^
../include/llvm/Support/Path.h:345:25: note: default parameter was declared here
StringRef get_separator(Style style = Style::native);
                        ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:53:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    NewBufOrErr = MemoryBuffer::getFile(IncludedFile);
                  ^
../include/llvm/Support/MemoryBuffer.h:81:34: note: default parameter was declared here
  getFile(const Twine &Filename, int64_t FileSize = -1,
                                 ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:56:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (!NewBufOrErr)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:62:21: warning: invalid case style for function 'FindBufferContainingLoc' [readability-identifier-naming]
unsigned SourceMgr::FindBufferContainingLoc(SMLoc Loc) const {
                    ^~~~~~~~~~~~~~~~~~~~~~~~
                    findBufferContainingLoc
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:63:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = Buffers.size(); i != e; ++i)
                ^                          ~         ~~
                I                          I         I
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:63:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = Buffers.size(); i != e; ++i)
                       ^                        ~~
                       E                        E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:63:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0, e = Buffers.size(); i != e; ++i)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:67:63: warning: statement should be inside braces [google-readability-braces-around-statements]
        Loc.getPointer() <= Buffers[i].Buffer->getBufferEnd())
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:79:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'std::vector<T> *' [cppcoreguidelines-owning-memory]
    Offsets = new std::vector<T>();
    ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:79:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'std::vector<unsigned char> *' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:79:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'std::vector<unsigned int> *' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:79:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'std::vector<unsigned long> *' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:79:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'std::vector<unsigned short> *' [cppcoreguidelines-owning-memory]
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:82:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(Sz <= std::numeric_limits<T>::max());
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:94:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Ptr >= BufStart && Ptr <= Buffer->getBufferEnd());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:96:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(PtrDiff >= 0 && static_cast<size_t>(PtrDiff) <= std::numeric_limits<T>::max());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:97:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  T PtrOffset = static_cast<T>(PtrDiff);
  ^
  auto
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:109:23: warning: move constructors should be marked noexcept [performance-noexcept-move-constructor]
SourceMgr::SrcBuffer::SrcBuffer(SourceMgr::SrcBuffer &&Other)
                      ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:118:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (OffsetCache.is<std::vector<uint8_t>*>())
        ^                                      ~
                                                != 0
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:118:49: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (OffsetCache.is<std::vector<uint8_t>*>())
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:120:14: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    else if (OffsetCache.is<std::vector<uint16_t>*>())
             ^                                       ~
                                                      != 0
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:120:55: warning: statement should be inside braces [readability-braces-around-statements]
    else if (OffsetCache.is<std::vector<uint16_t>*>())
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:122:14: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    else if (OffsetCache.is<std::vector<uint32_t>*>())
             ^                                       ~
                                                      != 0
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:122:55: warning: statement should be inside braces [hicpp-braces-around-statements]
    else if (OffsetCache.is<std::vector<uint32_t>*>())
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:124:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:132:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!BufferID)
      ~^~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:132:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!BufferID)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:134:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(BufferID && "Invalid Location!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:141:49: warning: statement should be inside braces [readability-braces-around-statements]
  if (Sz <= std::numeric_limits<uint8_t>::max())
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:143:55: warning: statement should be inside braces [hicpp-braces-around-statements]
  else if (Sz <= std::numeric_limits<uint16_t>::max())
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:145:55: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (Sz <= std::numeric_limits<uint32_t>::max())
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:147:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:151:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t NewlineOffs = StringRef(BufStart, Ptr-BufStart).find_last_of("\n\r");
                       ^
../include/llvm/ADT/StringRef.h:430:42: note: default parameter was declared here
    size_t find_last_of(StringRef Chars, size_t From = npos) const;
                                         ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:152:38: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (NewlineOffs == StringRef::npos) NewlineOffs = ~(size_t)0;
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:152:54: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  if (NewlineOffs == StringRef::npos) NewlineOffs = ~(size_t)0;
                                                     ^~~~~~~~~~
                                                     static_cast<size_t>()
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:156:17: warning: invalid case style for function 'PrintIncludeStack' [readability-identifier-naming]
void SourceMgr::PrintIncludeStack(SMLoc IncludeLoc, raw_ostream &OS) const {
                ^~~~~~~~~~~~~~~~~~
                printIncludeStack
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:157:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (IncludeLoc == SMLoc()) return;  // Top of stack.
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:160:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(CurBuf && "Invalid or unspecified location!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:169:25: warning: invalid case style for function 'GetMessage' [readability-identifier-naming]
SMDiagnostic SourceMgr::GetMessage(SMLoc Loc, SourceMgr::DiagKind Kind,
                        ^~~~~~~~~~~
                        getMessage
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:182:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(CurBuf && "Invalid or unspecified location!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:190:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (LineStart != BufStart && LineStart[-1] != '\n' &&
                                    ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:191:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           LineStart[-1] != '\r')
           ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:191:34: warning: statement should be inside braces [readability-braces-around-statements]
           LineStart[-1] != '\r')
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:192:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      --LineStart;
      ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:197:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (LineEnd != BufEnd && LineEnd[0] != '\n' && LineEnd[0] != '\r')
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:197:55: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    while (LineEnd != BufEnd && LineEnd[0] != '\n' && LineEnd[0] != '\r')
                                                      ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:197:74: warning: statement should be inside braces [readability-braces-around-statements]
    while (LineEnd != BufEnd && LineEnd[0] != '\n' && LineEnd[0] != '\r')
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:198:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++LineEnd;
      ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:199:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    LineStr = std::string(LineStart, LineEnd);
              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:615:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:203:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = Ranges.size(); i != e; ++i) {
                  ^                         ~         ~~
                  I                         I         I
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:203:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = Ranges.size(); i != e; ++i) {
                         ^                       ~~
                         E                       E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:205:24: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (!R.isValid()) continue;
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:208:76: warning: statement should be inside braces [readability-braces-around-statements]
      if (R.Start.getPointer() > LineEnd || R.End.getPointer() < LineStart)
                                                                           ^
                                                                            {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:212:44: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (R.Start.getPointer() < LineStart)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:214:40: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (R.End.getPointer() > LineEnd)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:231:17: warning: invalid case style for function 'PrintMessage' [readability-identifier-naming]
void SourceMgr::PrintMessage(raw_ostream &OS, const SMDiagnostic &Diagnostic,
                ^~~~~~~~~~~~~
                printMessage
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:234:7: warning: implicit conversion 'llvm::SourceMgr::DiagHandlerTy' (aka 'void (*)(const llvm::SMDiagnostic &, void *)') -> bool [readability-implicit-bool-conversion]
  if (DiagHandler) {
      ^          ~
                  != nullptr
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:241:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(CurBuf && "Invalid or unspecified location!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:245:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Diagnostic.print(nullptr, OS, ShowColors);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/SourceMgr.h:304:14: note: default parameter was declared here
             bool ShowKindLabel = true) const;
             ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:248:17: warning: invalid case style for function 'PrintMessage' [readability-identifier-naming]
void SourceMgr::PrintMessage(raw_ostream &OS, SMLoc Loc,
                ^~~~~~~~~~~~~
                printMessage
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:255:17: warning: invalid case style for function 'PrintMessage' [readability-identifier-naming]
void SourceMgr::PrintMessage(SMLoc Loc, SourceMgr::DiagKind Kind,
                ^~~~~~~~~~~~~
                printMessage
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:265:45: warning: invalid case style for parameter 'sm' [readability-identifier-naming]
SMDiagnostic::SMDiagnostic(const SourceMgr &sm, SMLoc L, StringRef FN,
                                            ^~~
                                            Sm
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:276:41: warning: non-const reference parameter 'CaretLine', make it const or use a pointer [google-runtime-references]
static void buildFixItLine(std::string &CaretLine, std::string &FixItLine,
                                        ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:276:65: warning: non-const reference parameter 'FixItLine', make it const or use a pointer [google-runtime-references]
static void buildFixItLine(std::string &CaretLine, std::string &FixItLine,
                                                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:278:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FixIts.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:289:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (I->getText().find_first_of("\n\r\t") != StringRef::npos)
        ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:289:65: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I->getText().find_first_of("\n\r\t") != StringRef::npos)
                                                                ^
                                                                 {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:295:74: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (R.Start.getPointer() > LineEnd || R.End.getPointer() < LineStart)
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:302:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (R.Start.getPointer() < LineStart)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:304:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:315:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (HintCol < PrevHintEndCol)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:321:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert((size_t)sys::locale::columnWidth(I->getText()) ==
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:326:47: warning: statement should be inside braces [readability-braces-around-statements]
    if (LastColumnModified > FixItLine.size())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:337:39: warning: statement should be inside braces [readability-braces-around-statements]
    if (R.End.getPointer() >= LineEnd)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:339:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:348:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = LineContents.size(), OutCol = 0; i != e; ++i) {
                ^                                           ~         ~~
                I                                           I         I
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:348:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = LineContents.size(), OutCol = 0; i != e; ++i) {
                       ^                                         ~~
                       E                                         E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:370:29: warning: invalid case style for parameter 'c' [readability-identifier-naming]
static bool isNonASCII(char c) {
                            ^~
                            C
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:371:10: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  return c & 0x80;
         ^       ~
         (       ) != 0
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:371:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:379:9: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
    if (ProgName && ProgName[0])
        ^~~~~~~~
        ( != nullptr)
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:379:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (ProgName && ProgName[0])
                    ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:379:21: warning: implicit conversion 'char' -> bool [readability-implicit-bool-conversion]
    if (ProgName && ProgName[0])
                    ^~~~~~~~   ~
                    (           != 0)
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:379:33: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ProgName && ProgName[0])
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:383:27: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Filename == "-")
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:385:11: warning: statement should be inside braces [google-readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:390:28: warning: statement should be inside braces [readability-braces-around-statements]
        if (ColumnNo != -1)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:417:38: warning: statement should be inside braces [readability-braces-around-statements]
  if (LineNo == -1 || ColumnNo == -1)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:432:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string CaretLine(NumColumns+1, ' ');
              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:435:17: warning: invalid case style for variable 'r' [readability-identifier-naming]
  for (unsigned r = 0, e = Ranges.size(); r != e; ++r) {
                ^                         ~         ~~
                R                         R         R
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:435:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned r = 0, e = Ranges.size(); r != e; ++r) {
                       ^                       ~~
                       E                       E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:438:35: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
              &CaretLine[std::min((size_t)R.second, CaretLine.size())],
                                  ^~~~~~~~~       ~
                                  static_cast<size_t>( )
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:446:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                 makeArrayRef(Loc.getPointer() - ColumnNo,
                                               ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:450:40: warning: statement should be inside braces [readability-braces-around-statements]
  if (unsigned(ColumnNo) <= NumColumns)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:452:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:458:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  CaretLine.erase(CaretLine.find_last_not_of(' ')+1);
  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:1789:34: note: default parameter was declared here
      erase(size_type __pos = 0, size_type __n = npos)
                                 ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:458:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  CaretLine.erase(CaretLine.find_last_not_of(' ')+1);
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:2799:36: note: default parameter was declared here
      find_last_not_of(_CharT __c, size_type __pos = npos) const
                                   ^
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:466:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = CaretLine.size(), OutCol = 0; i != e; ++i) {
                  ^                                        ~         ~~
                  I                                        I         I
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:466:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = CaretLine.size(), OutCol = 0; i != e; ++i) {
                         ^                                      ~~
                         E                                      E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:483:34: warning: statement should be inside braces [readability-braces-around-statements]
  if (FixItInsertionLine.empty())
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:486:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = FixItInsertionLine.size(), OutCol = 0; i < e; ++i) {
              ^                                                 ~        ~~
              I                                                 I        I
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:486:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = FixItInsertionLine.size(), OutCol = 0; i < e; ++i) {
                     ^                                              ~~
                     E                                              E
/home/jonas/opt/llvm/lib/Support/SourceMgr.cpp:501:40: warning: statement should be inside braces [readability-braces-around-statements]
      if (FixItInsertionLine[i] != ' ')
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/SymbolRemappingReader.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/SymbolRemappingReader.cpp:31:32: warning: twine variables are prone to use-after-free bugs [llvm-twine-local]
  auto ReportError = [&](Twine Msg) {
                               ^
/home/jonas/opt/llvm/lib/Support/SymbolRemappingReader.cpp:40:46: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Line.startswith("#") || Line.empty())
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/SymbolRemappingReader.cpp:46:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Parts.size() != 3)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/SymbolRemappingReader.cpp:56:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!FragmentKind)
                      ^
                       {
../include/llvm/ADT/edit_distance.h:97:3: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
  unsigned Result = Row[n];
  ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:98:10: note: Calling 'ComputeEditDistance'
  return llvm::ComputeEditDistance(
         ^
../include/llvm/ADT/edit_distance.h:65:7: note: Assuming the condition is false
  if (n + 1 > SmallBufferSize) {
      ^
../include/llvm/ADT/edit_distance.h:65:3: note: Taking false branch
  if (n + 1 > SmallBufferSize) {
  ^
../include/llvm/ADT/edit_distance.h:70:24: note: Assuming 'i' is > 'n'
  for (unsigned i = 1; i <= n; ++i)
                       ^
../include/llvm/ADT/edit_distance.h:70:3: note: Loop condition is false. Execution continues on line 73
  for (unsigned i = 1; i <= n; ++i)
  ^
../include/llvm/ADT/edit_distance.h:73:47: note: Assuming 'y' is > 'm'
  for (typename ArrayRef<T>::size_type y = 1; y <= m; ++y) {
                                              ^
../include/llvm/ADT/edit_distance.h:73:3: note: Loop condition is false. Execution continues on line 97
  for (typename ArrayRef<T>::size_type y = 1; y <= m; ++y) {
  ^
../include/llvm/ADT/edit_distance.h:97:3: note: Assigned value is garbage or undefined
  unsigned Result = Row[n];
  ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:18:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:22:25: warning: invalid case style for variable 'npos' [readability-identifier-naming]
const size_t StringRef::npos;
                        ^~~~~
                        Npos
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:27:12: warning: invalid case style for function 'ascii_strncasecmp' [readability-identifier-naming]
static int ascii_strncasecmp(const char *LHS, const char *RHS, size_t Length) {
           ^~~~~~~~~~~~~~~~~~
           asciiStrncasecmp
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:29:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    unsigned char LHC = toLower(LHS[I]);
                                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:30:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    unsigned char RHC = toLower(RHS[I]);
                                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:31:20: warning: statement should be inside braces [readability-braces-around-statements]
    if (LHC != RHC)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:38:16: warning: invalid case style for function 'compare_lower' [readability-identifier-naming]
int StringRef::compare_lower(StringRef RHS) const {
               ^~~~~~~~~~~~~~
               compareLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:39:81: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (int Res = ascii_strncasecmp(Data, RHS.Data, std::min(Length, RHS.Length)))
                                                                                ^
                                                                                 {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:41:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (Length == RHS.Length)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:47:17: warning: invalid case style for function 'startswith_lower' [readability-identifier-naming]
bool StringRef::startswith_lower(StringRef Prefix) const {
                ^~~~~~~~~~~~~~~~~
                startswithLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:53:17: warning: invalid case style for function 'endswith_lower' [readability-identifier-naming]
bool StringRef::endswith_lower(StringRef Suffix) const {
                ^~~~~~~~~~~~~~~
                endswithLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:58:19: warning: invalid case style for function 'find_lower' [readability-identifier-naming]
size_t StringRef::find_lower(char C, size_t From) const {
                  ^~~~~~~~~~~
                  findLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:60:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return find_if([L](char D) { return toLower(D) == L; }, From);
                 ^
../include/llvm/ADT/STLExtras.h:126:16: note: default parameter was declared here
               typename std::enable_if<
               ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:64:16: warning: invalid case style for function 'compare_numeric' [readability-identifier-naming]
int StringRef::compare_numeric(StringRef RHS) const {
               ^~~~~~~~~~~~~~~~
               compareNumeric
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:67:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (isDigit(Data[I]) && isDigit(RHS.Data[I])) {
                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:67:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (isDigit(Data[I]) && isDigit(RHS.Data[I])) {
                                    ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:72:14: warning: invalid case style for variable 'ld' [readability-identifier-naming]
        bool ld = J < Length && isDigit(Data[J]);
             ^~
             Ld
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:72:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        bool ld = J < Length && isDigit(Data[J]);
                                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:73:14: warning: invalid case style for variable 'rd' [readability-identifier-naming]
        bool rd = J < RHS.Length && isDigit(RHS.Data[J]);
             ^~
             Rd
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:73:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        bool rd = J < RHS.Length && isDigit(RHS.Data[J]);
                                            ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:74:22: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (ld != rd)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:76:17: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (!rd)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:80:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (int Res = compareMemory(Data + I, RHS.Data + I, J - I))
                                       ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:80:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      if (int Res = compareMemory(Data + I, RHS.Data + I, J - I))
                                                     ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:80:66: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (int Res = compareMemory(Data + I, RHS.Data + I, J - I))
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:86:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Data[I] != RHS.Data[I])
        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:86:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Data[I] != RHS.Data[I])
                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:86:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Data[I] != RHS.Data[I])
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:87:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      return (unsigned char)Data[I] < (unsigned char)RHS.Data[I] ? -1 : 1;
             ^~~~~~~~~~~~~~~~~~~
             static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:87:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return (unsigned char)Data[I] < (unsigned char)RHS.Data[I] ? -1 : 1;
                            ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:87:39: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      return (unsigned char)Data[I] < (unsigned char)RHS.Data[I] ? -1 : 1;
                                      ^~~~~~~~~~~~~~~~~~
                                      static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:87:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      return (unsigned char)Data[I] < (unsigned char)RHS.Data[I] ? -1 : 1;
                                                     ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:89:28: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Length == RHS.Length)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:95:21: warning: invalid case style for function 'edit_distance' [readability-identifier-naming]
unsigned StringRef::edit_distance(llvm::StringRef Other,
                    ^~~~~~~~~~~~~~
                    editDistance
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:109:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Result(size(), char());
              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:110:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = 0, e = size(); i != e; ++i) {
                 ^                  ~         ~~
                 I                  I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:110:25: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = 0, e = size(); i != e; ++i) {
                        ^                ~~
                        E                E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:111:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result[i] = toLower(Data[i]);
                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:117:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string Result(size(), char());
              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:118:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = 0, e = size(); i != e; ++i) {
                 ^                  ~         ~~
                 I                  I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:118:25: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = 0, e = size(); i != e; ++i) {
                        ^                ~~
                        E                E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:119:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Result[i] = toUpper(Data[i]);
                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:134:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (From > Length)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:137:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const char *Start = Data + From;
                           ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:142:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (N == 0)
             ^
              {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:144:16: warning: statement should be inside braces [readability-braces-around-statements]
  if (Size < N)
               ^
                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:147:11: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    const char *Ptr = (const char *)::memchr(Start, Needle[0], Size);
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:147:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    const char *Ptr = (const char *)::memchr(Start, Needle[0], Size);
                      ^~~~~~~~~~~~~~~                               ~
                      static_cast<const char *>(                    )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:147:23: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:147:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    const char *Ptr = (const char *)::memchr(Start, Needle[0], Size);
                                                    ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:151:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const char *Stop = Start + (Size - N + 1);
                           ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:156:46: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (std::memcmp(Start, Needle, N) == 0)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:158:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ++Start;
      ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:165:15: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  std::memset(BadCharSkip, N, 256);
              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:166:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != N-1; ++i)
                ^      ~           ~~
                I      I           I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:166:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (unsigned i = 0; i != N-1; ++i)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:167:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    BadCharSkip[(uint8_t)Str[i]] = N-1-i;
    ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:167:17: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    BadCharSkip[(uint8_t)Str[i]] = N-1-i;
                ^~~~~~~~~~~~   ~
                static_cast<uint8_t>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:170:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint8_t Last = Start[N - 1];
                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:171:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (LLVM_UNLIKELY(Last == (uint8_t)Needle[N - 1]))
                                       ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:171:55: warning: statement should be inside braces [readability-braces-around-statements]
    if (LLVM_UNLIKELY(Last == (uint8_t)Needle[N - 1]))
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:172:50: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (std::memcmp(Start, Needle, N - 1) == 0)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:176:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Start += BadCharSkip[Last];
          ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:176:14: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    Start += BadCharSkip[Last];
             ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:182:19: warning: invalid case style for function 'find_lower' [readability-identifier-naming]
size_t StringRef::find_lower(StringRef Str, size_t From) const {
                  ^~~~~~~~~~~
                  findLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:183:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef This = substr(From);
                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:185:36: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (This.startswith_lower(Str))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:187:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    This = This.drop_front();
           ^
../include/llvm/ADT/StringRef.h:645:26: note: default parameter was declared here
    StringRef drop_front(size_t N = 1) const {
                         ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:193:19: warning: invalid case style for function 'rfind_lower' [readability-identifier-naming]
size_t StringRef::rfind_lower(char C, size_t From) const {
                  ^~~~~~~~~~~~
                  rfindLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:195:10: warning: invalid case style for variable 'i' [readability-identifier-naming]
  size_t i = From;
         ^
         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:198:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (toLower(Data[i]) == toLower(C))
                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:198:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (toLower(Data[i]) == toLower(C))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:210:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (N > Length)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:212:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = Length - N + 1, e = 0; i != e;) {
              ^                          ~
              I                          I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:212:35: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = Length - N + 1, e = 0; i != e;) {
                                  ^           ~~
                                  E           E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:214:34: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (substr(i, N).equals(Str))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:220:19: warning: invalid case style for function 'rfind_lower' [readability-identifier-naming]
size_t StringRef::rfind_lower(StringRef Str) const {
                  ^~~~~~~~~~~~
                  rfindLower
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:222:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (N > Length)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:224:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = Length - N + 1, e = 0; i != e;) {
              ^                          ~
              I                          I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:224:35: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = Length - N + 1, e = 0; i != e;) {
                                  ^           ~~
                                  E           E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:226:40: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (substr(i, N).equals_lower(Str))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:236:33: warning: invalid case style for function 'find_first_of' [readability-identifier-naming]
StringRef::size_type StringRef::find_first_of(StringRef Chars,
                                ^~~~~~~~~~~~~~
                                findFirstOf
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:238:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  std::bitset<1 << CHAR_BIT> CharBits;
              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:239:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = 0; i != Chars.size(); ++i)
                 ^      ~                    ~~
                 I      I                    I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:239:48: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = 0; i != Chars.size(); ++i)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:240:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CharBits.set((unsigned char)Chars[i]);
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bitset:1085:30: note: default parameter was declared here
      set(size_t __position, bool __val = true)
                             ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:240:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    CharBits.set((unsigned char)Chars[i]);
                 ^~~~~~~~~~~~~~~~~~~~   ~
                 static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:242:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                 ^                                       ~         ~~
                 I                                       I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:242:46: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                                             ^                ~~
                                             E                E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:242:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:243:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    if (CharBits.test((unsigned char)Data[i]))
                      ^~~~~~~~~~~~~~~~~~~   ~
                      static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:243:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (CharBits.test((unsigned char)Data[i]))
                                     ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:243:47: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (CharBits.test((unsigned char)Data[i]))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:250:33: warning: invalid case style for function 'find_first_not_of' [readability-identifier-naming]
StringRef::size_type StringRef::find_first_not_of(char C, size_t From) const {
                                ^~~~~~~~~~~~~~~~~~
                                findFirstNotOf
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:251:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                 ^                                       ~         ~~
                 I                                       I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:251:46: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                                             ^                ~~
                                             E                E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:251:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:252:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Data[i] != C)
        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:252:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Data[i] != C)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:261:33: warning: invalid case style for function 'find_first_not_of' [readability-identifier-naming]
StringRef::size_type StringRef::find_first_not_of(StringRef Chars,
                                ^~~~~~~~~~~~~~~~~~
                                findFirstNotOf
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:263:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  std::bitset<1 << CHAR_BIT> CharBits;
              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:264:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = 0; i != Chars.size(); ++i)
                 ^      ~                    ~~
                 I      I                    I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:264:48: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (size_type i = 0; i != Chars.size(); ++i)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:265:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CharBits.set((unsigned char)Chars[i]);
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bitset:1085:30: note: default parameter was declared here
      set(size_t __position, bool __val = true)
                             ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:265:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    CharBits.set((unsigned char)Chars[i]);
                 ^~~~~~~~~~~~~~~~~~~~   ~
                 static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:267:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                 ^                                       ~         ~~
                 I                                       I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:267:46: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                                             ^                ~~
                                             E                E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:267:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = std::min(From, Length), e = Length; i != e; ++i)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:268:24: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    if (!CharBits.test((unsigned char)Data[i]))
                       ^~~~~~~~~~~~~~~~~~~   ~
                       static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:268:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (!CharBits.test((unsigned char)Data[i]))
                                      ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:268:48: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!CharBits.test((unsigned char)Data[i]))
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:277:33: warning: invalid case style for function 'find_last_of' [readability-identifier-naming]
StringRef::size_type StringRef::find_last_of(StringRef Chars,
                                ^~~~~~~~~~~~~
                                findLastOf
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:279:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  std::bitset<1 << CHAR_BIT> CharBits;
              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:280:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = 0; i != Chars.size(); ++i)
                 ^      ~                    ~~
                 I      I                    I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:280:48: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = 0; i != Chars.size(); ++i)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:281:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CharBits.set((unsigned char)Chars[i]);
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bitset:1085:30: note: default parameter was declared here
      set(size_t __position, bool __val = true)
                             ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:281:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    CharBits.set((unsigned char)Chars[i]);
                 ^~~~~~~~~~~~~~~~~~~~   ~
                 static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:283:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                 ^                                       ~         ~~
                 I                                       I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:283:50: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                                                 ^            ~~
                                                 E            E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:283:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:284:23: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    if (CharBits.test((unsigned char)Data[i]))
                      ^~~~~~~~~~~~~~~~~~~   ~
                      static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:284:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (CharBits.test((unsigned char)Data[i]))
                                     ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:284:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CharBits.test((unsigned char)Data[i]))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:291:33: warning: invalid case style for function 'find_last_not_of' [readability-identifier-naming]
StringRef::size_type StringRef::find_last_not_of(char C, size_t From) const {
                                ^~~~~~~~~~~~~~~~~
                                findLastNotOf
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:292:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                 ^                                       ~         ~~
                 I                                       I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:292:50: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                                                 ^            ~~
                                                 E            E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:292:70: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:293:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (Data[i] != C)
        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:293:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Data[i] != C)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:302:33: warning: invalid case style for function 'find_last_not_of' [readability-identifier-naming]
StringRef::size_type StringRef::find_last_not_of(StringRef Chars,
                                ^~~~~~~~~~~~~~~~~
                                findLastNotOf
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:304:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  std::bitset<1 << CHAR_BIT> CharBits;
              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:305:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = 0, e = Chars.size(); i != e; ++i)
                 ^                        ~         ~~
                 I                        I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:305:25: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = 0, e = Chars.size(); i != e; ++i)
                        ^                      ~~
                        E                      E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:305:55: warning: statement should be inside braces [readability-braces-around-statements]
  for (size_type i = 0, e = Chars.size(); i != e; ++i)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:306:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CharBits.set((unsigned char)Chars[i]);
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bitset:1085:30: note: default parameter was declared here
      set(size_t __position, bool __val = true)
                             ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:306:18: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    CharBits.set((unsigned char)Chars[i]);
                 ^~~~~~~~~~~~~~~~~~~~   ~
                 static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:308:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                 ^                                       ~         ~~
                 I                                       I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:308:50: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                                                 ^            ~~
                                                 E            E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:308:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_type i = std::min(From, Length) - 1, e = -1; i != e; --i)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:309:24: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    if (!CharBits.test((unsigned char)Data[i]))
                       ^~~~~~~~~~~~~~~~~~~   ~
                       static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:309:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (!CharBits.test((unsigned char)Data[i]))
                                      ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:309:48: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!CharBits.test((unsigned char)Data[i]))
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:324:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t Idx = S.find(Separator);
                 ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:133:39: note: default parameter was declared here
size_t StringRef::find(StringRef Str, size_t From) const {
                                      ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:325:21: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Idx == npos)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:329:30: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (KeepEmpty || Idx > 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:337:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (KeepEmpty || !S.empty())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:350:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t Idx = S.find(Separator);
                 ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:351:21: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Idx == npos)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:355:30: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (KeepEmpty || Idx > 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:363:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (KeepEmpty || !S.empty())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:376:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (N > Length)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:378:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = Length - N + 1; i != e; ++i)
              ^                          ~         ~~
              I                          I         I
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:378:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = Length - N + 1; i != e; ++i)
                     ^                        ~~
                     E                        E
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:378:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (size_t i = 0, e = Length - N + 1; i != e; ++i)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:379:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (substr(i, N).equals(Str))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:384:17: warning: invalid case style for function 'GetAutoSenseRadix' [readability-identifier-naming]
static unsigned GetAutoSenseRadix(StringRef &Str) {
                ^~~~~~~~~~~~~~~~~~
                getAutoSenseRadix
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:384:46: warning: non-const reference parameter 'Str', make it const or use a pointer [google-runtime-references]
static unsigned GetAutoSenseRadix(StringRef &Str) {
                                             ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:385:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Str.empty())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:389:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(2);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:394:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(2);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:399:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(2);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:404:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:412:35: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
                                  unsigned long long &Result) {
                                  ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:414:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Radix == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:418:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Str.empty()) return true;
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:425:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Str2[0] >= '0' && Str2[0] <= '9')
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:427:47: warning: statement should be inside braces [readability-braces-around-statements]
    else if (Str2[0] >= 'a' && Str2[0] <= 'z')
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:429:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (Str2[0] >= 'A' && Str2[0] <= 'Z')
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:431:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:436:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CharVal >= Radix)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:440:5: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
    unsigned long long PrevResult = Result;
    ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:444:37: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Result / Radix < PrevResult)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:447:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str2 = Str2.substr(1);
           ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:452:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Str.size() == Str2.size())
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:460:33: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
                                long long &Result) {
                                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:461:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long ULLVal;
  ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:467:9: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        (long long)ULLVal < 0)
        ^~~~~~~~~~~~~~~~~
        static_cast<long long>()
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:467:10: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
        (long long)ULLVal < 0)
         ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:467:31: warning: statement should be inside braces [google-readability-braces-around-statements]
        (long long)ULLVal < 0)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:479:7: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
      (long long)-ULLVal > 0)
      ^~~~~~~~~~~~
      static_cast<long long>( )
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:479:8: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
      (long long)-ULLVal > 0)
       ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:479:30: warning: statement should be inside braces [hicpp-braces-around-statements]
      (long long)-ULLVal > 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:490:33: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
                                unsigned long long &Result) {
                                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:491:50: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (consumeUnsignedInteger(Str, Radix, Result))
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:500:31: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
                              long long &Result) {
                              ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:501:48: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (consumeSignedInteger(Str, Radix, Result))
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:513:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Radix == 0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:516:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Radix > 1 && Radix <= 36);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:519:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Str.empty()) return true;
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:523:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (!Str.empty() && Str.front() == '0')
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:524:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:528:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Result = APInt(64, 0);
             ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:534:36: warning: statement should be inside braces [hicpp-braces-around-statements]
  while ((1U << Log2Radix) < Radix) Log2Radix++;
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:538:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BitWidth < Result.getBitWidth())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:540:44: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (BitWidth > Result.getBitWidth())
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:546:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    RadixAP = APInt(BitWidth, Radix);
              ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:547:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CharAP = APInt(BitWidth, 0);
             ^
../include/llvm/ADT/APInt.h:278:41: note: default parameter was declared here
  APInt(unsigned numBits, uint64_t val, bool isSigned = false)
                                        ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:554:40: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Str[0] >= '0' && Str[0] <= '9')
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:556:45: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (Str[0] >= 'a' && Str[0] <= 'z')
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:558:45: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (Str[0] >= 'A' && Str[0] <= 'Z')
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:560:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:565:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CharVal >= Radix)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:578:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:589:27: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (!AllowInexact || !(Status & APFloat::opInexact))
                         ~^                            ~
                         (                              == 0)
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:589:57: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!AllowInexact || !(Status & APFloat::opInexact))
                                                        ^
                                                         {
/home/jonas/opt/llvm/lib/Support/StringRef.cpp:598:17: warning: invalid case style for function 'hash_value' [readability-identifier-naming]
hash_code llvm::hash_value(StringRef S) {
                ^~~~~~~~~~~
                hashValue
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:25:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:30:17: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  return strchr(RegexAdvancedMetachars, Char) != nullptr;
                ^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:34:16: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Defeated) return;
               ^
                {
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:64:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Tri = ((Tri << 8) + Char) & 0xFFFFFF;
          ^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:64:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Tri = ((Tri << 8) + Char) & 0xFFFFFF;
            ^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:66:17: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Len < 3)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:72:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Index[Tri].size() >= 4)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:75:10: warning: implicit conversion 'std::set<unsigned int, std::less<unsigned int>, std::allocator<unsigned int> >::size_type' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (!Was.count(Tri)) {
        ~^~~           ~
                        == 0u
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:81:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!Cnt) {
      ~^~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:91:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Defeated)
               ^
                {
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:93:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::vector<unsigned> CurCounts(Counts.size());
                        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:415:29: note: default parameter was declared here
      vector(size_type __n, const allocator_type& __a = allocator_type())
                            ^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:96:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Tri = ((Tri << 8) + Query[I]) & 0xFFFFFF;
          ^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:96:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Tri = ((Tri << 8) + Query[I]) & 0xFFFFFF;
            ^
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:97:15: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I < 2)
              ^
               {
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:100:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (II == Index.end())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp:106:37: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (CurCounts[J] >= Counts[J])
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:22:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Filename != "-")
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:23:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::RemoveFileOnSignal(Filename);
    ^
../include/llvm/Support/Signals.h:33:47: note: default parameter was declared here
  bool RemoveFileOnSignal(StringRef Filename, std::string* ErrMsg = nullptr);
                                              ^
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:28:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Keep && Filename != "-")
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:29:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::fs::remove(Filename);
    ^
../include/llvm/Support/FileSystem.h:372:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:33:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Filename != "-")
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:41:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp:46:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    : Installer(Filename), OS(FD, true) {}
                           ^
../include/llvm/Support/raw_ostream.h:422:44: note: default parameter was declared here
  raw_fd_ostream(int fd, bool shouldClose, bool unbuffered=false);
                                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ThreadPool.h:75:28: warning: function 'llvm::ThreadPool::asyncImpl' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  std::shared_future<void> asyncImpl(TaskTy F);
                           ^                ~~
                                            Task
/home/jonas/opt/llvm/lib/Support/ThreadPool.cpp:82:38: note: the definition seen here
std::shared_future<void> ThreadPool::asyncImpl(TaskTy Task) {
                                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/ThreadPool.h:75:28: note: differing parameters are named here: ('F'), in definition: ('Task')
  std::shared_future<void> asyncImpl(TaskTy F);
                           ^
/home/jonas/opt/llvm/lib/Support/ThreadPool.cpp:20:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ThreadPool.cpp:42:44: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (!EnableFlag && Tasks.empty())
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/ThreadPool.cpp:79:42: warning: implicit conversion 'std::__atomic_base<unsigned int>::__int_type' (aka 'unsigned int') -> bool [readability-implicit-bool-conversion]
                           [&] { return !ActiveThreads && Tasks.empty(); });
                                        ~^~~~~~~~~~~~~
                                        ( == 0u)
/home/jonas/opt/llvm/lib/Support/ThreadPool.cpp:91:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(EnableFlag && "Queuing a thread during ThreadPool destruction");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/ThreadPool.cpp:106:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto &Worker : Threads)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:16:25: warning: function 'foldCharSimple' exceeds recommended size/complexity thresholds [hicpp-function-size]
int llvm::sys::unicode::foldCharSimple(int C) {
                        ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:16:25: note: 808 statements (threshold 800)
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:17:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0041)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:20:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x005a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:23:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x00b5)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:25:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x00c0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:28:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x00d6)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:30:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x00d8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:33:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x00de)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:35:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C < 0x0100)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:38:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x012e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:39:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:40:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0132)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:43:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x0136)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:44:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:45:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0139)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:48:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x0147 && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:50:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x014a)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:53:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x0176)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:54:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:56:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0178)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:58:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0179)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:61:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x017d && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:64:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x017f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:67:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0181)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:69:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0182)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:72:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x0184)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:73:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:75:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0186)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:78:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0187)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:80:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0189)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:83:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x018a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:86:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x018b)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:89:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x018e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:92:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x018f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:95:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x0190)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:98:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0191)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:101:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0193)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:104:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0194)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:107:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x0196)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:110:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0197)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:113:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0198)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:116:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x019c)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:119:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x019d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:122:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C == 0x019f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:124:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01a0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:127:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x01a4)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:128:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:130:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01a6)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:133:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01a7)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:136:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01a9)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:139:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01ac)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:142:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01ae)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:145:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x01af)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:147:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01b1)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:150:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x01b2)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:152:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01b3)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:155:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x01b5 && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:158:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01b7)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:160:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01b8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:163:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x01bc && C % 4 == 0)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:166:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01c4)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:169:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01c5)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:172:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01c7)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:175:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01c8)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:178:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x01ca)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:180:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01cb)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:183:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x01db && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:185:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01de)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:188:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x01ee)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:189:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:191:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x01f1)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:193:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01f2)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:196:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x01f4)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:197:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:199:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x01f6)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:202:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C == 0x01f7)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:204:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x01f8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:207:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x021e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:208:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:210:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x0220)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:212:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0222)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:215:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x0232)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:216:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:218:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x023a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:221:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x023b)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:224:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C == 0x023d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:227:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x023e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:230:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0241)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:233:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0243)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:236:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C == 0x0244)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:239:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0245)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:241:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0246)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:244:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x024e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:245:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:247:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x0345)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:249:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0370)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:252:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x0372)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:253:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:255:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0376)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:258:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x037f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:261:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x0386)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:263:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0388)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:266:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x038a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:269:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x038c)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:271:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x038e)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:274:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x038f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:276:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0391)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:279:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x03a1)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:281:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0x03a3)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:284:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x03ab)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:287:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03c2)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:290:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03cf)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:293:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03d0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:296:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03d1)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:299:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03d5)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:302:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03d6)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:304:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x03d8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:307:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x03ee)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:308:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:310:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03f0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:313:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03f1)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:316:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03f4)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:319:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x03f5)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:322:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03f7)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:325:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03f9)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:328:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x03fa)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:330:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0x03fd)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:333:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x03ff)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:335:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0400)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:338:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x040f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:340:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0x0410)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:343:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x042f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:345:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0460)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:348:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x0480)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:349:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:350:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x048a)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:353:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x04be)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:354:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:356:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x04c0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:358:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x04c1)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:361:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x04cd && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:363:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x04d0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:366:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x052e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:367:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:368:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x0531)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:371:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C <= 0x0556)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:373:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x10a0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:376:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x10c5)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:378:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x10c7)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:381:33: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x10cd && C % 6 == 5)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:383:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x13f8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:386:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x13fd)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:389:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1c80)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:392:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1c81)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:395:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1c82)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:397:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1c83)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:400:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1c84)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:403:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1c85)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:406:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1c86)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:409:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1c87)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:412:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x1c88)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:414:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1e00)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:417:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1e94)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:418:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:420:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1e9b)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:423:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1e9e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:425:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1ea0)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:428:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1efe)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:429:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:430:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0x1f08)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:433:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f0f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:435:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f18)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:438:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f1d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:440:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f28)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:443:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f2f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:445:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f38)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:448:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f3f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:450:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f48)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:453:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f4d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:455:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f59)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:458:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f5f && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:460:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f68)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:463:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x1f6f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:465:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f88)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:468:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1f8f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:470:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1f98)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:473:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x1f9f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:475:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fa8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:478:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1faf)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:480:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fb8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:483:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1fb9)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:485:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fba)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:488:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1fbb)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:491:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1fbc)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:494:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1fbe)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:496:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0x1fc8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:499:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1fcb)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:502:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1fcc)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:504:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fd8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:507:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C <= 0x1fd9)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:509:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fda)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:512:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1fdb)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:514:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fe8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:517:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x1fe9)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:519:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1fea)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:522:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1feb)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:525:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1fec)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:527:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1ff8)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:530:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1ff9)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:532:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1ffa)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:535:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1ffb)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:538:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x1ffc)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:541:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2126)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:544:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x212a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:547:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x212b)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:550:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2132)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:552:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0x2160)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:555:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x216f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:558:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2183)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:560:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x24b6)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:563:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x24cf)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:565:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2c00)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:568:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x2c2e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:571:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c60)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:574:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c62)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:577:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c63)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:580:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c64)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:582:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2c67)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:585:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x2c6b && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:588:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c6d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:591:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0x2c6e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:594:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c6f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:597:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0x2c70)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:599:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2c72)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:602:33: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C <= 0x2c75 && C % 3 == 2)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:604:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2c7e)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:607:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x2c7f)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:609:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2c80)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:612:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x2ce2)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:613:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:614:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2ceb)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:617:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x2ced && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:619:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x2cf2)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:622:41: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0xa640 && C % 31054 == 11506)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:624:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa642)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:627:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa66c)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:628:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:629:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa680)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:632:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa69a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:633:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:634:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa722)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:637:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa72e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:638:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:639:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0xa732)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:642:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa76e)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:643:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:644:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa779)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:647:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa77b && C % 2 == 1)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:650:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0xa77d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:652:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C < 0xa77e)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:655:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa786)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:656:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:658:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa78b)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:661:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa78d)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:663:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa790)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:666:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa792)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:667:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:668:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa796)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:671:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0xa7a8)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:672:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:674:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7aa)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:677:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7ab)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:680:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7ac)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:683:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (C == 0xa7ad)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:686:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7ae)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:689:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7b0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:692:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7b1)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:695:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (C == 0xa7b2)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:698:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C == 0xa7b3)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:700:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xa7b4)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:703:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xa7b6)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:704:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    return C | 1;
           ^
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:705:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (C < 0xab70)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:708:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xabbf)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:710:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0xff21)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:713:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0xff3a)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:715:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x10400)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:718:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x10427)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:720:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x104b0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:723:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x104d3)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:725:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x10c80)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:728:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (C <= 0x10cb2)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:730:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x118a0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:733:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x118bf)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:735:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C < 0x1e900)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp:738:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (C <= 0x1e921)
                   ^
                    {
ecks=* -export-fixes /tmp/tmpfTtvIF/tmpBgn0hV.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SmallPtrSet.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpBZslyV.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SmallVector.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpjYeq_N.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SourceMgr.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpi2rSoG.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SpecialCaseList.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp3ppYkB.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Statistic.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpPzggXi.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/StringExtras.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmphAe7Uw.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/StringMap.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmplt9kbm.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/StringPool.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpUdUdtF.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/StringSaver.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpvGciLv.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/StringRef.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpR8cWHr.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SymbolRemappingReader.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpWtHS91.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/SystemUtils.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpi44I5D.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/TarWriter.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpOEe6aq.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/TargetParser.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpA4D19E.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ThreadPool.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpF5FHQT.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Timer.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpIie6XQ.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ToolOutputFile.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpEtq0Ot.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/TrigramIndex.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp2SJDu2.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Triple.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpb4a1FV.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Twine.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp8ktV8P.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Unicode.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpo0ptX2.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/UnicodeCaseFold.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpcEgHQL.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/S/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VersionTuple.h:147:8: warning: function 'llvm::VersionTuple::tryParse' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool tryParse(StringRef string);
       ^                  ~~~~~~~
                          input
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:61:20: note: the definition seen here
bool VersionTuple::tryParse(StringRef input) {
                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VersionTuple.h:147:8: note: differing parameters are named here: ('string'), in definition: ('input')
  bool tryParse(StringRef string);
       ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:28:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &llvm::operator<<(raw_ostream &Out, const VersionTuple &V) {
^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:30:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Optional<unsigned> Minor = V.getMinor())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:32:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Optional<unsigned> Subminor = V.getSubminor())
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:34:47: warning: statement should be inside braces [readability-braces-around-statements]
  if (Optional<unsigned> Build = V.getBuild())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:39:33: warning: invalid case style for parameter 'input' [readability-identifier-naming]
static bool parseInt(StringRef &input, unsigned &value) {
                                ^~~~~~
                                Input
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:39:33: warning: non-const reference parameter 'input', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:39:50: warning: invalid case style for parameter 'value' [readability-identifier-naming]
static bool parseInt(StringRef &input, unsigned &value) {
                                                 ^~~~~~
                                                 Value
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:39:50: warning: non-const reference parameter 'value', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:40:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(value == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:41:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (input.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:44:8: warning: invalid case style for variable 'next' [readability-identifier-naming]
  char next = input[0];
       ^~~~
       Next
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:45:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  input = input.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:46:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (next < '0' || next > '9')
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:48:11: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  value = (unsigned)(next - '0');
          ^~~~~~~~~~~
          static_cast<unsigned>
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:52:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (next < '0' || next > '9')
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:54:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    input = input.substr(1);
            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:55:26: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    value = value * 10 + (unsigned)(next - '0');
                         ^~~~~~~~~~~
                         static_cast<unsigned>
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:61:39: warning: invalid case style for parameter 'input' [readability-identifier-naming]
bool VersionTuple::tryParse(StringRef input) {
                                      ^~~~~~
                                      Input
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:62:12: warning: invalid case style for variable 'major' [readability-identifier-naming]
  unsigned major = 0, minor = 0, micro = 0, build = 0;
           ^~~~~
           Major
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:62:23: warning: invalid case style for variable 'minor' [readability-identifier-naming]
  unsigned major = 0, minor = 0, micro = 0, build = 0;
                      ^~~~~
                      Minor
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:62:34: warning: invalid case style for variable 'micro' [readability-identifier-naming]
  unsigned major = 0, minor = 0, micro = 0, build = 0;
                                 ^~~~~
                                 Micro
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:62:45: warning: invalid case style for variable 'build' [readability-identifier-naming]
  unsigned major = 0, minor = 0, micro = 0, build = 0;
                                            ^~~~~
                                            Build
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:65:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (parseInt(input, major))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:74:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (input[0] != '.')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:76:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  input = input.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:77:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (parseInt(input, minor))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:86:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (input[0] != '.')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:88:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  input = input.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:89:30: warning: statement should be inside braces [readability-braces-around-statements]
  if (parseInt(input, micro))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:98:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (input[0] != '.')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:100:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  input = input.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:101:30: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (parseInt(input, build))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/VersionTuple.cpp:105:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!input.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:229:25: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!isPrintable(UCS))
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:312:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CombiningCharacters.contains(UCS))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:338:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (DoubleWidthCharacters.contains(UCS))
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:346:15: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (size_t i = 0, e = Text.size(); i < e; i += Length) {
              ^                       ~      ~
              I                       I      I
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:346:22: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (size_t i = 0, e = Text.size(); i < e; i += Length) {
                     ^                    ~~
                     E                    E
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:348:49: warning: statement should be inside braces [readability-braces-around-statements]
    if (Length <= 0 || i + Length > Text.size())
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:350:11: warning: invalid case style for variable 'buf' [readability-identifier-naming]
    UTF32 buf[1];
          ^~~~
          Buf
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:351:11: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
    const UTF8 *Start = reinterpret_cast<const UTF8 *>(Text.data() + i);
          ^~~~
          auto
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:351:25: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
    const UTF8 *Start = reinterpret_cast<const UTF8 *>(Text.data() + i);
                        ^
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:351:68: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    const UTF8 *Start = reinterpret_cast<const UTF8 *>(Text.data() + i);
                                                                   ^
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:353:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (conversionOK != ConvertUTF8toUTF32(&Start, Start + Length, &Target,
                                                         ^
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:354:51: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                                           Target + 1, strictConversion))
                                                  ^
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:354:74: warning: statement should be inside braces [google-readability-braces-around-statements]
                                           Target + 1, strictConversion))
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/Unicode.cpp:357:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Width < 0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:16:1: warning: #includes are not sorted properly [llvm-include-order]
#include "llvm/Support/TargetParser.h"
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         "llvm/ADT/ArrayRef.h"
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:22:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace ARM;
^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:24:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace AArch64;
^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:25:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace AMDGPU;
^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:41:38: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  StringRef getName() const { return StringRef(NameCStr, NameLength); }
                                     ^~~~~~~~~~~~~~~~~~            ~~
                                     {                             }
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:42:3: warning: 'FPUNames' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
} FPUNames[] = {
  ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:100:38: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  StringRef getName() const { return StringRef(NameCStr, NameLength); }
                                     ^~~~~~~~~~~~~~~~~~            ~~
                                     {                             }
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:101:3: warning: 'ARCHExtNames' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
} ARCHExtNames[] = {
  ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:105:3: warning: 'AArch64ARCHExtNames' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
},AArch64ARCHExtNames[] = {
  ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:119:38: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  StringRef getName() const { return StringRef(NameCStr, NameLength); }
                                     ^~~~~~~~~~~~~~~~~~            ~~
                                     {                             }
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:120:3: warning: 'HWDivNames' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
} HWDivNames[] = {
  ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:158:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FPUKind >= ARM::FK_LAST)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:159:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:160:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return FPUNames[FPUKind].getName();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:164:31: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (FPUKind >= ARM::FK_LAST)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:166:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return FPUNames[FPUKind].FPUVersion;
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:170:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FPUKind >= ARM::FK_LAST)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:172:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return FPUNames[FPUKind].NeonSupport;
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:176:31: warning: statement should be inside braces [readability-braces-around-statements]
  if (FPUKind >= ARM::FK_LAST)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:178:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return FPUNames[FPUKind].Restriction;
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:182:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CPU == "generic")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:183:12: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    return ARCHNames[static_cast<unsigned>(AK)].DefaultFPU;
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:193:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CPU == "generic")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:194:12: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    return ARCHNames[static_cast<unsigned>(AK)].ArchBaseExtensions;
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:199:35: warning: macro argument should be enclosed in parentheses [misc-macro-parentheses]
            .ArchBaseExtensions | DEFAULT_EXT)
                                  ^~~~~~~~~~~~
                                  ()
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:207:37: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (HWDivKind == ARM::AEK_INVALID)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:210:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HWDivKind & ARM::AEK_HWDIVARM)
      ^~~~~~~~~                    ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:210:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HWDivKind & ARM::AEK_HWDIVARM)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:211:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+hwdiv-arm");
             ^~~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:212:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:213:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-hwdiv-arm");
             ^~~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:215:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HWDivKind & ARM::AEK_HWDIVTHUMB)
      ^~~~~~~~~                      ~
      (                              ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:215:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HWDivKind & ARM::AEK_HWDIVTHUMB)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:216:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+hwdiv");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:217:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:218:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-hwdiv");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:226:38: warning: statement should be inside braces [readability-braces-around-statements]
  if (Extensions == ARM::AEK_INVALID)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:229:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & ARM::AEK_CRC)
      ^~~~~~~~~~               ~
      (                        ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:229:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & ARM::AEK_CRC)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:230:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+crc");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:231:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:232:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-crc");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:234:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & ARM::AEK_DSP)
      ^~~~~~~~~~               ~
      (                        ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:234:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & ARM::AEK_DSP)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:235:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+dsp");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:236:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:237:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("-dsp");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:239:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & ARM::AEK_FP16FML)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:239:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & ARM::AEK_FP16FML)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:240:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+fp16fml");
             ^~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:241:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:242:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp16fml");
             ^~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:244:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & ARM::AEK_RAS)
      ^~~~~~~~~~               ~
      (                        ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:244:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & ARM::AEK_RAS)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:245:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+ras");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:246:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:247:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-ras");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:249:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & ARM::AEK_DOTPROD)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:249:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & ARM::AEK_DOTPROD)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:250:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+dotprod");
             ^~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:251:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:252:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-dotprod");
             ^~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:260:61: warning: statement should be inside braces [readability-braces-around-statements]
  if (FPUKind >= ARM::FK_LAST || FPUKind == ARM::FK_INVALID)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:265:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  switch (FPUNames[FPUKind].Restriction) {
          ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:267:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+fp-only-sp");
             ^~~~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:268:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+d16");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:271:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp-only-sp");
             ^~~~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:272:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+d16");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:275:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("-fp-only-sp");
             ^~~~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:276:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-d16");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:284:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  switch (FPUNames[FPUKind].FPUVersion) {
          ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:286:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:289:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+vfp4");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:290:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:293:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+vfp3");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:294:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+fp16");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:295:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp4");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:296:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:299:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+vfp3");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:300:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp16");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:301:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp4");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:302:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("-fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:305:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+vfp2");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:306:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp3");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:307:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp16");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:308:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp4");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:309:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:312:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp2");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:313:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp3");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:314:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp16");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:315:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-vfp4");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:316:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:321:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  switch (FPUNames[FPUKind].NeonSupport) {
          ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:323:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+neon");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:324:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+crypto");
             ^~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:327:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+neon");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:328:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-crypto");
             ^~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:331:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("-neon");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:332:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("-crypto");
             ^~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:340:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return ARCHNames[static_cast<unsigned>(AK)].getName();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:344:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return ARCHNames[static_cast<unsigned>(AK)].getCPUAttr();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:348:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return ARCHNames[static_cast<unsigned>(AK)].getSubArch();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:352:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return ARCHNames[static_cast<unsigned>(AK)].ArchAttr;
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:357:30: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ArchExtKind == AE.ID)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:360:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:365:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef ArchExtBase(ArchExt.substr(2));
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:367:11: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
      if (AE.NegFeature && ArchExtBase == AE.getName())
          ^~
          (             != nullptr)
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:367:56: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (AE.NegFeature && ArchExtBase == AE.getName())
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:368:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
        return StringRef(AE.NegFeature);
               ^~~~~~~~~~~~           ~~
               {                      }
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:372:9: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
    if (AE.Feature && ArchExt == AE.getName())
        ^~
        (          != nullptr)
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:372:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (AE.Feature && ArchExt == AE.getName())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:381:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (HWDivKind == D.ID)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:384:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:389:36: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (AK == ARM::ArchKind::INVALID)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:390:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:394:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU.ArchID == AK && CPU.Default)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:419:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CPU == "generic")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:420:12: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    return AArch64ARCHNames[static_cast<unsigned>(AK)].DefaultFPU;
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:430:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CPU == "generic")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:431:12: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    return AArch64ARCHNames[static_cast<unsigned>(AK)].ArchBaseExtensions;
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:438:13: warning: macro argument should be enclosed in parentheses [misc-macro-parentheses]
            DEFAULT_EXT)
            ^~~~~~~~~~~~
            ()
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:444:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (CPU == "generic")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:457:42: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions == AArch64::AEK_INVALID)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:460:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_FP)
      ^~~~~~~~~~                  ~
      (                           ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:460:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & AArch64::AEK_FP)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:461:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+fp-armv8");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:462:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_SIMD)
      ^~~~~~~~~~                    ~
      (                             ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:462:38: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_SIMD)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:463:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+neon");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:464:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_CRC)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:464:37: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_CRC)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:465:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+crc");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:466:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_CRYPTO)
      ^~~~~~~~~~                      ~
      (                               ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:466:40: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_CRYPTO)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:467:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+crypto");
             ^~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:468:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_DOTPROD)
      ^~~~~~~~~~                       ~
      (                                ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:468:41: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_DOTPROD)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:469:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+dotprod");
             ^~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:470:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_FP16FML)
      ^~~~~~~~~~                       ~
      (                                ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:470:41: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_FP16FML)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:471:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+fp16fml");
             ^~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:472:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_FP16)
      ^~~~~~~~~~                    ~
      (                             ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:472:38: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_FP16)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:473:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+fullfp16");
             ^~~~~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:474:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_PROFILE)
      ^~~~~~~~~~                       ~
      (                                ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:474:41: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_PROFILE)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:475:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+spe");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:476:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_RAS)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:476:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Extensions & AArch64::AEK_RAS)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:477:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+ras");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:478:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_LSE)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:478:37: warning: statement should be inside braces [readability-braces-around-statements]
  if (Extensions & AArch64::AEK_LSE)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:479:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+lse");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:480:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_RDM)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:480:37: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_RDM)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:481:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+rdm");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:482:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_SVE)
      ^~~~~~~~~~                   ~
      (                            ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:482:37: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Extensions & AArch64::AEK_SVE)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:483:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+sve");
             ^~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:484:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Extensions & AArch64::AEK_RCPC)
      ^~~~~~~~~~                    ~
      (                             ) != 0u
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:484:38: warning: statement should be inside braces [readability-braces-around-statements]
  if (Extensions & AArch64::AEK_RCPC)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:485:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+rcpc");
             ^~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:497:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (AK == AArch64::ArchKind::ARMV8_1A)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:498:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+v8.1a");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:499:41: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (AK == AArch64::ArchKind::ARMV8_2A)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:500:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+v8.2a");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:501:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (AK == AArch64::ArchKind::ARMV8_3A)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:502:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+v8.3a");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:503:41: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (AK == AArch64::ArchKind::ARMV8_4A)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:504:14: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Features.push_back("+v8.4a");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:505:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (AK == AArch64::ArchKind::ARMV8_5A)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:506:14: warning: use emplace_back instead of push_back [modernize-use-emplace]
    Features.push_back("+v8.5a");
             ^~~~~~~~~~~~~~~~~~
             emplace_back(
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:512:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return AArch64ARCHNames[static_cast<unsigned>(AK)].getName();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:516:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return AArch64ARCHNames[static_cast<unsigned>(AK)].getCPUAttr();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:520:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return AArch64ARCHNames[static_cast<unsigned>(AK)].getSubArch();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:524:10: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
  return AArch64ARCHNames[static_cast<unsigned>(AK)].ArchAttr;
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:528:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto &AE : AArch64ARCHExtNames)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:529:30: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ArchExtKind == AE.ID)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:531:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:536:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef ArchExtBase(ArchExt.substr(2));
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:538:11: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
      if (AE.NegFeature && ArchExtBase == AE.getName())
          ^~
          (             != nullptr)
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:538:56: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (AE.NegFeature && ArchExtBase == AE.getName())
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:539:16: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
        return StringRef(AE.NegFeature);
               ^~~~~~~~~~~~           ~~
               {                      }
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:543:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto &AE : AArch64ARCHExtNames)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:544:9: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
    if (AE.Feature && ArchExt == AE.getName())
        ^~
        (          != nullptr)
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:544:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (AE.Feature && ArchExt == AE.getName())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:551:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (AK == ArchKind::INVALID)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:552:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:555:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto &CPU : AArch64CPUNames)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:556:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU.ArchID == AK && CPU.Default)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:564:45: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (Arch.size() >= 2 && Arch[0] == 'v' && std::isdigit(Arch[1]))
                                            ^~~                  ~
                                            (                     != 0)
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:564:67: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arch.size() >= 2 && Arch[0] == 'v' && std::isdigit(Arch[1]))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:625:10: warning: invalid case style for variable 'offset' [readability-identifier-naming]
  size_t offset = StringRef::npos;
         ^~~~~~
         Offset
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:630:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (A.startswith("arm64"))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:632:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (A.startswith("arm"))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:634:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (A.startswith("thumb"))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:639:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (A.find("eb") != StringRef::npos)
        ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:639:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (A.find("eb") != StringRef::npos)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:641:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (A.substr(offset, 3) == "_be")
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:646:64: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (offset != StringRef::npos && A.substr(offset, 2) == "eb")
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:649:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (A.endswith("eb"))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:652:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (offset != StringRef::npos)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:653:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    A = A.substr(offset);
        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:656:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (A.empty())
                ^
                 {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:662:43: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (A.size() >= 2 && (A[0] != 'v' || !std::isdigit(A[1])))
                                         ~^~~               ~
                                         (                   == 0)
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:662:63: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (A.size() >= 2 && (A[0] != 'v' || !std::isdigit(A[1])))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:665:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (A.find("eb") != StringRef::npos)
        ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:665:41: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (A.find("eb") != StringRef::npos)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:676:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Syn == D.getName())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:685:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Syn == F.getName())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:696:35: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (A.getName().endswith(Syn))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:704:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ArchExt == A.getName())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:712:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU == C.getName())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:720:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Arch.ArchID != ARM::ArchKind::INVALID)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:727:51: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Arch.ArchID != AArch64::ArchKind::INVALID)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:745:37: warning: statement should be inside braces [google-readability-braces-around-statements]
      Arch.startswith("aarch64_be"))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:749:29: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Arch.endswith("eb"))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:751:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:751:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:755:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Arch.startswith("aarch64"))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:864:70: warning: statement should be inside braces [google-readability-braces-around-statements]
        llvm::ARM::parseArchProfile(ArchName) == ARM::ProfileKind::M)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:866:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (TT.isWatchABI())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:869:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (TT.isOSWindows())
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:869:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  } else if (TT.isOSWindows())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:885:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (TT.isOSNetBSD())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:887:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (TT.isOSOpenBSD())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:904:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (checkArchVersion(Arch) < 8)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:909:35: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (A.getName().endswith(Syn))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:917:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ArchExt == A.getName())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:925:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU == C.getName())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1044:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (I == Table.end())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1052:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (const auto *Entry = getArchEntry(AK, AMDGCNGPUs))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1058:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (const auto *Entry = getArchEntry(AK, R600GPUs))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1065:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU == C.Name)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1074:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPU == C.Name)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1082:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (const auto *Entry = getArchEntry(AK, AMDGCNGPUs))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1088:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (const auto *Entry = getArchEntry(AK, R600GPUs))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1095:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto C : AMDGCNGPUs)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1100:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const auto C : R600GPUs)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1105:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (GPU == "generic")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/TargetParser.cpp:1109:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (AK == AMDGPU::GPUKind::GK_NONE)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::ARMBuildAttrs;
^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:74:30: warning: invalid case style for function 'ParseInteger' [readability-identifier-naming]
uint64_t ARMAttributeParser::ParseInteger(const uint8_t *Data,
                             ^~~~~~~~~~~~~
                             parseInteger
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:77:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  uint64_t Value = decodeULEB128(Data + Offset, &Length);
                   ^
../include/llvm/Support/LEB128.h:130:31: note: default parameter was declared here
                              const uint8_t *end = nullptr,
                              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:77:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  uint64_t Value = decodeULEB128(Data + Offset, &Length);
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:82:31: warning: invalid case style for function 'ParseString' [readability-identifier-naming]
StringRef ARMAttributeParser::ParseString(const uint8_t *Data,
                              ^~~~~~~~~~~~
                              parseString
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:84:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const char *String = reinterpret_cast<const char*>(Data + Offset);
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:84:24: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const char *String = reinterpret_cast<const char*>(Data + Offset);
                       ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:84:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const char *String = reinterpret_cast<const char*>(Data + Offset);
                                                          ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:87:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef(String, Length);
         ^~~~~~~~~~~~~~~~        ~~
         {                       }
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:90:26: warning: invalid case style for function 'IntegerAttribute' [readability-identifier-naming]
void ARMAttributeParser::IntegerAttribute(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~
                         integerAttribute
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:96:7: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
  if (SW)
      ^ ~
         != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:96:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (SW)
         ^
          {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:97:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SW->printNumber(ARMBuildAttrs::AttrTypeAsString(Tag), Value);
                    ^
../include/llvm/Support/ARMBuildAttributes.h:86:43: note: default parameter was declared here
StringRef AttrTypeAsString(AttrType Attr, bool HasTagPrefix = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:100:26: warning: invalid case style for function 'StringAttribute' [readability-identifier-naming]
void ARMAttributeParser::StringAttribute(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         stringAttribute
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:105:7: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
  if (SW) {
      ^ ~
         != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:108:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!TagName.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:114:26: warning: invalid case style for function 'PrintAttribute' [readability-identifier-naming]
void ARMAttributeParser::PrintAttribute(unsigned Tag, unsigned Value,
                         ^~~~~~~~~~~~~~~
                         printAttribute
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:118:7: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
  if (SW) {
      ^ ~
         != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:124:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!TagName.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:126:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!ValueDesc.empty())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:131:26: warning: invalid case style for function 'CPU_arch' [readability-identifier-naming]
void ARMAttributeParser::CPU_arch(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~
                         cpuArch
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:141:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:145:26: warning: invalid case style for function 'CPU_arch_profile' [readability-identifier-naming]
void ARMAttributeParser::CPU_arch_profile(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~
                         cpuArchProfile
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:162:26: warning: invalid case style for function 'ARM_ISA_use' [readability-identifier-naming]
void ARMAttributeParser::ARM_ISA_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~
                         armIsaUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:168:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:172:26: warning: invalid case style for function 'THUMB_ISA_use' [readability-identifier-naming]
void ARMAttributeParser::THUMB_ISA_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~
                         thumbIsaUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:178:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:182:26: warning: invalid case style for function 'FP_arch' [readability-identifier-naming]
void ARMAttributeParser::FP_arch(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~
                         fpArch
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:191:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:195:26: warning: invalid case style for function 'WMMX_arch' [readability-identifier-naming]
void ARMAttributeParser::WMMX_arch(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~
                         wmmxArch
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:201:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:205:26: warning: invalid case style for function 'Advanced_SIMD_arch' [readability-identifier-naming]
void ARMAttributeParser::Advanced_SIMD_arch(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~
                         advancedSimdArch
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:213:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:217:26: warning: invalid case style for function 'PCS_config' [readability-identifier-naming]
void ARMAttributeParser::PCS_config(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~
                         pcsConfig
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:226:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:230:26: warning: invalid case style for function 'ABI_PCS_R9_use' [readability-identifier-naming]
void ARMAttributeParser::ABI_PCS_R9_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~
                         abiPcsR9Use
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:236:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:240:26: warning: invalid case style for function 'ABI_PCS_RW_data' [readability-identifier-naming]
void ARMAttributeParser::ABI_PCS_RW_data(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         abiPcsRwData
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:248:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:252:26: warning: invalid case style for function 'ABI_PCS_RO_data' [readability-identifier-naming]
void ARMAttributeParser::ABI_PCS_RO_data(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         abiPcsRoData
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:260:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:264:26: warning: invalid case style for function 'ABI_PCS_GOT_use' [readability-identifier-naming]
void ARMAttributeParser::ABI_PCS_GOT_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         abiPcsGotUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:272:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:276:26: warning: invalid case style for function 'ABI_PCS_wchar_t' [readability-identifier-naming]
void ARMAttributeParser::ABI_PCS_wchar_t(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         abiPcsWcharT
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:284:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:288:26: warning: invalid case style for function 'ABI_FP_rounding' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_rounding(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         abiFpRounding
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:294:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:298:26: warning: invalid case style for function 'ABI_FP_denormal' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_denormal(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         abiFpDenormal
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:306:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:310:26: warning: invalid case style for function 'ABI_FP_exceptions' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_exceptions(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~
                         abiFpExceptions
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:316:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:320:26: warning: invalid case style for function 'ABI_FP_user_exceptions' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_user_exceptions(AttrType Tag,
                         ^~~~~~~~~~~~~~~~~~~~~~~
                         abiFpUserExceptions
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:327:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:331:26: warning: invalid case style for function 'ABI_FP_number_model' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_number_model(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~~
                         abiFpNumberModel
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:339:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:343:26: warning: invalid case style for function 'ABI_align_needed' [readability-identifier-naming]
void ARMAttributeParser::ABI_align_needed(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~
                         abiAlignNeeded
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:352:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Value < array_lengthof(Strings))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:353:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Description = std::string(Strings[Value]);
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:353:31: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    Description = std::string(Strings[Value]);
                              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:354:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (Value <= 12)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:355:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Description = std::string("8-byte alignment, ") + utostr(1ULL << Value)
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:355:55: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Description = std::string("8-byte alignment, ") + utostr(1ULL << Value)
                                                      ^
../include/llvm/ADT/StringExtras.h:224:39: note: default parameter was declared here
inline std::string utostr(uint64_t X, bool isNeg = false) {
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:356:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                + std::string("-byte extended alignment");
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:357:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:363:26: warning: invalid case style for function 'ABI_align_preserved' [readability-identifier-naming]
void ARMAttributeParser::ABI_align_preserved(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~~
                         abiAlignPreserved
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:373:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Value < array_lengthof(Strings))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:374:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Description = std::string(Strings[Value]);
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:374:31: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    Description = std::string(Strings[Value]);
                              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:375:24: warning: statement should be inside braces [hicpp-braces-around-statements]
  else if (Value <= 12)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:376:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Description = std::string("8-byte stack alignment, ") +
                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:377:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                  utostr(1ULL << Value) + std::string("-byte data alignment");
                  ^
../include/llvm/ADT/StringExtras.h:224:39: note: default parameter was declared here
inline std::string utostr(uint64_t X, bool isNeg = false) {
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:377:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                  utostr(1ULL << Value) + std::string("-byte data alignment");
                                          ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:378:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:384:26: warning: invalid case style for function 'ABI_enum_size' [readability-identifier-naming]
void ARMAttributeParser::ABI_enum_size(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~
                         abiEnumSize
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:392:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:396:26: warning: invalid case style for function 'ABI_HardFP_use' [readability-identifier-naming]
void ARMAttributeParser::ABI_HardFP_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~
                         abiHardFpUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:404:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:408:26: warning: invalid case style for function 'ABI_VFP_args' [readability-identifier-naming]
void ARMAttributeParser::ABI_VFP_args(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~
                         abiVfpArgs
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:416:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:420:26: warning: invalid case style for function 'ABI_WMMX_args' [readability-identifier-naming]
void ARMAttributeParser::ABI_WMMX_args(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~
                         abiWmmxArgs
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:426:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:430:26: warning: invalid case style for function 'ABI_optimization_goals' [readability-identifier-naming]
void ARMAttributeParser::ABI_optimization_goals(AttrType Tag,
                         ^~~~~~~~~~~~~~~~~~~~~~~
                         abiOptimizationGoals
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:440:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:444:26: warning: invalid case style for function 'ABI_FP_optimization_goals' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_optimization_goals(AttrType Tag,
                         ^~~~~~~~~~~~~~~~~~~~~~~~~~
                         abiFpOptimizationGoals
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:454:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:463:7: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
  if (SW) {
      ^ ~
         != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:482:26: warning: invalid case style for function 'CPU_unaligned_access' [readability-identifier-naming]
void ARMAttributeParser::CPU_unaligned_access(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~~~
                         cpuUnalignedAccess
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:488:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:492:26: warning: invalid case style for function 'FP_HP_extension' [readability-identifier-naming]
void ARMAttributeParser::FP_HP_extension(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         fpHpExtension
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:498:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:502:26: warning: invalid case style for function 'ABI_FP_16bit_format' [readability-identifier-naming]
void ARMAttributeParser::ABI_FP_16bit_format(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~~
                         abiFp16bitFormat
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:508:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:512:26: warning: invalid case style for function 'MPextension_use' [readability-identifier-naming]
void ARMAttributeParser::MPextension_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~
                         mPextensionUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:518:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:522:26: warning: invalid case style for function 'DIV_use' [readability-identifier-naming]
void ARMAttributeParser::DIV_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~
                         divUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:530:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:534:26: warning: invalid case style for function 'DSP_extension' [readability-identifier-naming]
void ARMAttributeParser::DSP_extension(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~
                         dspExtension
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:540:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:544:26: warning: invalid case style for function 'T2EE_use' [readability-identifier-naming]
void ARMAttributeParser::T2EE_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~
                         t2EeUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:550:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:554:26: warning: invalid case style for function 'Virtualization_use' [readability-identifier-naming]
void ARMAttributeParser::Virtualization_use(AttrType Tag, const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~
                         virtualizationUse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:563:41: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    (Value < array_lengthof(Strings)) ? Strings[Value] : nullptr;
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:573:26: warning: invalid case style for function 'ParseIndexList' [readability-identifier-naming]
void ARMAttributeParser::ParseIndexList(const uint8_t *Data, uint32_t &Offset,
                         ^~~~~~~~~~~~~~~
                         parseIndexList
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:577:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    uint64_t Value = decodeULEB128(Data + Offset, &Length);
                     ^
../include/llvm/Support/LEB128.h:130:31: note: default parameter was declared here
                              const uint8_t *end = nullptr,
                              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:577:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t Value = decodeULEB128(Data + Offset, &Length);
                                        ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:579:20: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Value == 0)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:585:26: warning: invalid case style for function 'ParseAttributeList' [readability-identifier-naming]
void ARMAttributeParser::ParseAttributeList(const uint8_t *Data,
                         ^~~~~~~~~~~~~~~~~~~
                         parseAttributeList
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:589:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    uint64_t Tag = decodeULEB128(Data + Offset, &Length);
                   ^
../include/llvm/Support/LEB128.h:130:31: note: default parameter was declared here
                              const uint8_t *end = nullptr,
                              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:589:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint64_t Tag = decodeULEB128(Data + Offset, &Length);
                                      ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:595:20: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (uint64_t(DisplayRoutines[AHI].Attribute) == Tag) {
                   ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:596:17: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        (this->*DisplayRoutines[AHI].Routine)(ARMBuildAttrs::AttrType(Tag),
                ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:605:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
               << " (" << ARMBuildAttrs::AttrTypeAsString(Tag) << ")\n";
                          ^
../include/llvm/Support/ARMBuildAttributes.h:85:43: note: default parameter was declared here
StringRef AttrTypeAsString(unsigned Attr, bool HasTagPrefix = true);
                                          ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:609:24: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Tag % 2 == 0)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:611:11: warning: statement should be inside braces [hicpp-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:617:26: warning: invalid case style for function 'ParseSubsection' [readability-identifier-naming]
void ARMAttributeParser::ParseSubsection(const uint8_t *Data, uint32_t Length) {
                         ^~~~~~~~~~~~~~~~
                         parseSubsection
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:620:9: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  const char *VendorName = reinterpret_cast<const char*>(Data + Offset);
        ^~~~
        auto
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:620:28: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  const char *VendorName = reinterpret_cast<const char*>(Data + Offset);
                           ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:620:63: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  const char *VendorName = reinterpret_cast<const char*>(Data + Offset);
                                                              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:624:7: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
  if (SW) {
      ^ ~
         != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:635:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    uint8_t Tag = Data[Offset];
                  ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:639:8: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
      *reinterpret_cast<const support::ulittle32_t*>(Data + Offset);
       ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:639:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      *reinterpret_cast<const support::ulittle32_t*>(Data + Offset);
                                                          ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:642:9: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
    if (SW) {
        ^ ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:673:9: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
    if (SW) {
        ^ ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:675:29: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (!Indicies.empty())
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:684:26: warning: invalid case style for function 'Parse' [readability-identifier-naming]
void ARMAttributeParser::Parse(ArrayRef<uint8_t> Section, bool isLittle) {
                         ^~~~~~
                         parse
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:684:64: warning: invalid case style for parameter 'isLittle' [readability-identifier-naming]
void ARMAttributeParser::Parse(ArrayRef<uint8_t> Section, bool isLittle) {
                                                               ^~~~~~~~~
                                                               IsLittle
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:690:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      support::endian::read32le(Section.data() + Offset) :
                                               ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:691:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      support::endian::read32be(Section.data() + Offset);
                                               ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:693:9: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
    if (SW) {
        ^ ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:695:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      SW->indent();
      ^
../include/llvm/Support/ScopedPrinter.h:75:15: note: default parameter was declared here
  void indent(int Levels = 1) { IndentLevel += Levels; }
              ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:698:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ParseSubsection(Section.data() + Offset, SectionLength);
                                   ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:701:9: warning: implicit conversion 'llvm::ScopedPrinter *' -> bool [readability-implicit-bool-conversion]
    if (SW) {
        ^ ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:702:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      SW->unindent();
      ^
../include/llvm/Support/ScopedPrinter.h:77:17: note: default parameter was declared here
  void unindent(int Levels = 1) {
                ^
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:707:2: warning: namespace 'llvm' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace llvm
/home/jonas/opt/llvm/lib/Support/ARMAttributeParser.cpp:26:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:20:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (LHSKind == StdStringKind && RHSKind == EmptyKind)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/Twine.cpp:21:17: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return *LHS.stdString;
                ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:25:60: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (LHSKind == FormatvObjectKind && RHSKind == EmptyKind)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/Twine.cpp:26:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    return LHS.formatvObject->str();
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:43:14: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
      return StringRef(LHS.cString);
             ^~~~~~~~~~~~~        ~~
             {                    }
/home/jonas/opt/llvm/lib/Support/Twine.cpp:43:28: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      return StringRef(LHS.cString);
                           ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:45:26: warning: invalid case style for variable 'str' [readability-identifier-naming]
      const std::string *str = LHS.stdString;
                         ^~~
                         Str
/home/jonas/opt/llvm/lib/Support/Twine.cpp:45:36: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
      const std::string *str = LHS.stdString;
                                   ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:64:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Ptr.twine->print(OS);
        ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:67:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << Ptr.cString;
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:70:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.stdString;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:73:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.stringRef;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:76:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.smallString;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:79:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.formatvObject;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:82:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << Ptr.character;
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:85:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << Ptr.decUI;
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:88:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << Ptr.decI;
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:91:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.decUL;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:94:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.decL;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:97:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.decULL;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:100:16: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << *Ptr.decLL;
               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:103:23: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS.write_hex(*Ptr.uHex);
                      ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:117:9: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    Ptr.twine->printRepr(OS);
        ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:121:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
       << Ptr.cString << "\"";
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:125:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
       << Ptr.stdString << "\"";
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:129:15: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
       << Ptr.stringRef << "\"";
              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:132:36: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "smallstring:\"" << *Ptr.smallString << "\"";
                                   ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:135:32: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "formatv:\"" << *Ptr.formatvObject << "\"";
                               ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:138:28: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "char:\"" << Ptr.character << "\"";
                           ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:141:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "decUI:\"" << Ptr.decUI << "\"";
                            ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:144:28: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "decI:\"" << Ptr.decI << "\"";
                           ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:147:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "decUL:\"" << *Ptr.decUL << "\"";
                             ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:150:29: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "decL:\"" << *Ptr.decL << "\"";
                            ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:153:31: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "decULL:\"" << *Ptr.decULL << "\"";
                              ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:156:30: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "decLL:\"" << *Ptr.decLL << "\"";
                             ^
/home/jonas/opt/llvm/lib/Support/Twine.cpp:159:28: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
    OS << "uhex:\"" << Ptr.uHex << "\"";
                           ^
/home/jonas/opt/llvm/lib/Support/raw_os_ostream.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/WithColor.h:48:3: warning: function 'llvm::WithColor::WithColor' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  WithColor(raw_ostream &OS, HighlightColor S, bool DisableColors = false);
  ^                                         ~~
                                            Color
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:22:12: note: the definition seen here
WithColor::WithColor(raw_ostream &OS, HighlightColor Color, bool DisableColors)
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/WithColor.h:48:3: note: differing parameters are named here: ('S'), in definition: ('Color')
  WithColor(raw_ostream &OS, HighlightColor S, bool DisableColors = false);
  ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:13:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:15:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
cl::OptionCategory llvm::ColorCategory("Color Options");
                         ^
../include/llvm/Support/CommandLine.h:180:18: note: default parameter was declared here
                 StringRef const Description = "")
                 ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:28:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::YELLOW);
      ^
../include/llvm/Support/raw_ostream.h:258:36: note: default parameter was declared here
                                   bool Bold = false,
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:31:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::GREEN);
      ^
../include/llvm/Support/raw_ostream.h:258:36: note: default parameter was declared here
                                   bool Bold = false,
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:34:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::BLUE);
      ^
../include/llvm/Support/raw_ostream.h:258:36: note: default parameter was declared here
                                   bool Bold = false,
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:37:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::CYAN);
      ^
../include/llvm/Support/raw_ostream.h:258:36: note: default parameter was declared here
                                   bool Bold = false,
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:40:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::MAGENTA);
      ^
../include/llvm/Support/raw_ostream.h:258:36: note: default parameter was declared here
                                   bool Bold = false,
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:43:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::RED);
      ^
../include/llvm/Support/raw_ostream.h:259:36: note: default parameter was declared here
                                   bool BG = false) {
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:46:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::RED, true);
      ^
../include/llvm/Support/raw_ostream.h:259:36: note: default parameter was declared here
                                   bool BG = false) {
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:49:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::MAGENTA, true);
      ^
../include/llvm/Support/raw_ostream.h:259:36: note: default parameter was declared here
                                   bool BG = false) {
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:52:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::BLACK, true);
      ^
../include/llvm/Support/raw_ostream.h:259:36: note: default parameter was declared here
                                   bool BG = false) {
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:55:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      OS.changeColor(raw_ostream::BLUE, true);
      ^
../include/llvm/Support/raw_ostream.h:259:36: note: default parameter was declared here
                                   bool BG = false) {
                                   ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:61:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
raw_ostream &WithColor::error() { return error(errs()); }
                                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/WithColor.h:86:46: note: default parameter was declared here
  static raw_ostream &error(raw_ostream &OS, StringRef Prefix = "",
                                             ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:63:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
raw_ostream &WithColor::warning() { return warning(errs()); }
                                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/WithColor.h:89:48: note: default parameter was declared here
  static raw_ostream &warning(raw_ostream &OS, StringRef Prefix = "",
                                               ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:65:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
raw_ostream &WithColor::note() { return note(errs()); }
                                        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/WithColor.h:92:45: note: default parameter was declared here
  static raw_ostream &note(raw_ostream &OS, StringRef Prefix = "",
                                            ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:67:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
raw_ostream &WithColor::remark() { return remark(errs()); }
                                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/WithColor.h:95:47: note: default parameter was declared here
  static raw_ostream &remark(raw_ostream &OS, StringRef Prefix = "",
                                              ^
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:71:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Prefix.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:79:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Prefix.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:87:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Prefix.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:94:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Prefix.empty())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:101:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (DisableColors)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:103:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (UseColor == cl::BOU_UNSET)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:110:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (colorsEnabled())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/WithColor.cpp:116:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (colorsEnabled())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regerror.c:38:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^        ~~~~~~~~~~~~~
         "regex_impl.h"
/home/jonas/opt/llvm/lib/Support/regerror.c:52:48: warning: all parameters should be named in a function [readability-named-parameter]
static const char *regatoi(const llvm_regex_t *, char *, int);
                                               ^       ~    ~
                                                /*preg*/  /*localbuf*/  /*localbufsize*/
/home/jonas/opt/llvm/lib/Support/regerror.c:55:6: warning: invalid case style for member 'code' [readability-identifier-naming]
        int code;
            ^~~~~
            Code
/home/jonas/opt/llvm/lib/Support/regerror.c:56:14: warning: invalid case style for member 'name' [readability-identifier-naming]
        const char *name;
                    ^~~~~
                    Name
/home/jonas/opt/llvm/lib/Support/regerror.c:57:14: warning: invalid case style for member 'explain' [readability-identifier-naming]
        const char *explain;
                    ^~~~~~~~
                    Explain
/home/jonas/opt/llvm/lib/Support/regerror.c:58:3: warning: invalid case style for variable 'rerrs' [readability-identifier-naming]
} rerrs[] = {
  ^~~~~~
  Rerrs
/home/jonas/opt/llvm/lib/Support/regerror.c:84:1: warning: invalid case style for function 'llvm_regerror' [readability-identifier-naming]
llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
^~~~~~~~~~~~~~
llvmRegerror
/home/jonas/opt/llvm/lib/Support/regerror.c:84:19: warning: invalid case style for parameter 'errcode' [readability-identifier-naming]
llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
                  ^~~~~~~~
                  Errcode
/home/jonas/opt/llvm/lib/Support/regerror.c:84:48: warning: invalid case style for parameter 'preg' [readability-identifier-naming]
llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
                                               ^~~~~
                                               Preg
/home/jonas/opt/llvm/lib/Support/regerror.c:84:60: warning: invalid case style for parameter 'errbuf' [readability-identifier-naming]
llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
                                                           ^~~~~~~
                                                           Errbuf
/home/jonas/opt/llvm/lib/Support/regerror.c:84:75: warning: invalid case style for parameter 'errbuf_size' [readability-identifier-naming]
llvm_regerror(int errcode, const llvm_regex_t *preg, char *errbuf, size_t errbuf_size)
                                                                          ^~~~~~~~~~~~
                                                                          ErrbufSize
/home/jonas/opt/llvm/lib/Support/regerror.c:86:15: warning: invalid case style for variable 'r' [readability-identifier-naming]
        struct rerr *r;
                     ^~
                     R
/home/jonas/opt/llvm/lib/Support/regerror.c:87:9: warning: invalid case style for variable 'len' [readability-identifier-naming]
        size_t len;
               ^~~~
               Len
/home/jonas/opt/llvm/lib/Support/regerror.c:88:6: warning: invalid case style for variable 'target' [readability-identifier-naming]
        int target = errcode &~ REG_ITOA;
            ^~~~~~
            Target
/home/jonas/opt/llvm/lib/Support/regerror.c:88:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        int target = errcode &~ REG_ITOA;
                     ^
/home/jonas/opt/llvm/lib/Support/regerror.c:88:24: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
        int target = errcode &~ REG_ITOA;
                              ^
/home/jonas/opt/llvm/lib/Support/regerror.c:89:14: warning: invalid case style for variable 's' [readability-identifier-naming]
        const char *s;
                    ^~
                    S
/home/jonas/opt/llvm/lib/Support/regerror.c:90:7: warning: invalid case style for variable 'convbuf' [readability-identifier-naming]
        char convbuf[50];
             ^~~~~~~~
             Convbuf
/home/jonas/opt/llvm/lib/Support/regerror.c:92:26: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (errcode == REG_ATOI)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regerror.c:95:37: warning: statement should be inside braces [google-readability-braces-around-statements]
                for (r = rerrs; r->code != 0; r++)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/regerror.c:96:26: warning: statement should be inside braces [google-readability-braces-around-statements]
                        if (r->code == target)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/regerror.c:99:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if (errcode&REG_ITOA) {
                    ^
/home/jonas/opt/llvm/lib/Support/regerror.c:103:10: warning: statement should be inside braces [google-readability-braces-around-statements]
                        } else
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/regerror.c:107:9: warning: statement should be inside braces [readability-braces-around-statements]
                } else
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regerror.c:123:29: warning: invalid case style for parameter 'preg' [readability-identifier-naming]
regatoi(const llvm_regex_t *preg, char *localbuf, int localbufsize)
                            ^~~~~
                            Preg
/home/jonas/opt/llvm/lib/Support/regerror.c:123:41: warning: invalid case style for parameter 'localbuf' [readability-identifier-naming]
regatoi(const llvm_regex_t *preg, char *localbuf, int localbufsize)
                                        ^~~~~~~~~
                                        Localbuf
/home/jonas/opt/llvm/lib/Support/regerror.c:123:55: warning: invalid case style for parameter 'localbufsize' [readability-identifier-naming]
regatoi(const llvm_regex_t *preg, char *localbuf, int localbufsize)
                                                      ^~~~~~~~~~~~~
                                                      Localbufsize
/home/jonas/opt/llvm/lib/Support/regerror.c:125:15: warning: invalid case style for variable 'r' [readability-identifier-naming]
        struct rerr *r;
                     ^~
                     R
/home/jonas/opt/llvm/lib/Support/regerror.c:127:36: warning: statement should be inside braces [readability-braces-around-statements]
        for (r = rerrs; r->code != 0; r++)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/regerror.c:128:43: warning: statement should be inside braces [readability-braces-around-statements]
                if (strcmp(r->name, preg->re_endp) == 0)
                                                        ^
                                                         {
/home/jonas/opt/llvm/lib/Support/regerror.c:130:19: warning: statement should be inside braces [readability-braces-around-statements]
        if (r->code == 0)
                         ^
                          {
../lib/Support/regengine.inc:775:39: warning: Dereference of null pointer [clang-analyzer-core.NullDereference]
        int c = (start == m->beginp) ? OUT : *(start-1);
                                             ^
/home/jonas/opt/llvm/lib/Support/regexec.c:151:6: note: Assuming the condition is false
        if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
            ^
/home/jonas/opt/llvm/lib/Support/regexec.c:151:6: note: Left side of '||' is false
/home/jonas/opt/llvm/lib/Support/regexec.c:151:34: note: Assuming the condition is false
        if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
                                        ^
/home/jonas/opt/llvm/lib/Support/regexec.c:151:2: note: Taking false branch
        if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
        ^
/home/jonas/opt/llvm/lib/Support/regexec.c:154:6: note: Assuming the condition is false
        if (g->iflags&REGEX_BAD)                /* backstop for no-debug case */
            ^
/home/jonas/opt/llvm/lib/Support/regexec.c:154:2: note: Taking false branch
        if (g->iflags&REGEX_BAD)                /* backstop for no-debug case */
        ^
/home/jonas/opt/llvm/lib/Support/regexec.c:158:6: note: Assuming the condition is false
        if (g->nstates <= (long)(CHAR_BIT*sizeof(states1)) && !(eflags&REG_LARGE))
            ^
/home/jonas/opt/llvm/lib/Support/regexec.c:158:53: note: Left side of '&&' is false
        if (g->nstates <= (long)(CHAR_BIT*sizeof(states1)) && !(eflags&REG_LARGE))
                                                           ^
/home/jonas/opt/llvm/lib/Support/regexec.c:161:10: note: Calling 'lmatcher'
                return(lmatcher(g, string, nmatch, pmatch, eflags));
                       ^
../lib/Support/regengine.inc:146:6: note: Assuming the condition is false
        if (g->cflags&REG_NOSUB)
            ^
../lib/Support/regengine.inc:146:2: note: Taking false branch
        if (g->cflags&REG_NOSUB)
        ^
../lib/Support/regengine.inc:148:6: note: Assuming the condition is false
        if (eflags&REG_STARTEND) {
            ^
../lib/Support/regengine.inc:148:2: note: Taking false branch
        if (eflags&REG_STARTEND) {
        ^
../lib/Support/regengine.inc:155:2: note: Taking false branch
        if (stop < start)
        ^
../lib/Support/regengine.inc:159:6: note: Assuming the condition is false
        if (g->must != NULL) {
            ^
../lib/Support/regengine.inc:159:2: note: Taking false branch
        if (g->must != NULL) {
        ^
../lib/Support/regengine.inc:184:2: note: Loop condition is true.  Entering loop body
        for (;;) {
        ^
../lib/Support/regengine.inc:185:10: note: Calling 'lfast'
                endp = fast(m, start, stop, gf, gl);
                       ^
../lib/Support/regengine.inc:59:14: note: expanded from macro 'fast'
#define fast    lfast
                ^
../lib/Support/regengine.inc:690:10: note: '?' condition is true
        int c = (start == m->beginp) ? OUT : *(start-1);
                ^
../lib/Support/regengine.inc:698:7: note: Calling 'lstep'
        st = step(m->g, startst, stopst, st, NOTHING, st);
             ^
../lib/Support/regengine.inc:63:14: note: expanded from macro 'step'
#define step    lstep
                ^
../lib/Support/regengine.inc:863:2: note: Loop condition is false. Execution continues on line 958
        for (pc = start, INIT(here, pc); pc != stop; pc++, INC(here)) {
        ^
../lib/Support/regengine.inc:698:7: note: Returning from 'lstep'
        st = step(m->g, startst, stopst, st, NOTHING, st);
             ^
../lib/Support/regengine.inc:63:14: note: expanded from macro 'step'
#define step    lstep
                ^
../lib/Support/regengine.inc:701:2: note: Null pointer value stored to 'coldp'
        coldp = NULL;
        ^
../lib/Support/regengine.inc:702:2: note: Loop condition is true.  Entering loop body
        for (;;) {
        ^
../lib/Support/regengine.inc:705:7: note: '?' condition is false
                c = (p == m->endp) ? OUT : *p;
                    ^
../lib/Support/regengine.inc:706:7: note: Assuming the condition is false
                if (EQ(st, fresh))
                    ^
/home/jonas/opt/llvm/lib/Support/regexec.c:112:19: note: expanded from macro 'EQ'
#define EQ(a, b)        (memcmp(a, b, m->g->nstates) == 0)
                         ^
../lib/Support/regengine.inc:706:3: note: Taking false branch
                if (EQ(st, fresh))
                ^
../lib/Support/regengine.inc:712:23: note: Left side of '&&' is false
                if ( (lastc == '\n' && m->g->cflags&REG_NEWLINE) ||
                                    ^
../lib/Support/regengine.inc:713:6: note: Left side of '&&' is true
                                (lastc == OUT && !(m->eflags&REG_NOTBOL)) ) {
                                 ^
../lib/Support/regengine.inc:713:22: note: Assuming the condition is false
                                (lastc == OUT && !(m->eflags&REG_NOTBOL)) ) {
                                                 ^
../lib/Support/regengine.inc:712:3: note: Taking false branch
                if ( (lastc == '\n' && m->g->cflags&REG_NEWLINE) ||
                ^
../lib/Support/regengine.inc:717:9: note: Assuming the condition is false
                if ( (c == '\n' && m->g->cflags&REG_NEWLINE) ||
                      ^
../lib/Support/regengine.inc:717:19: note: Left side of '&&' is false
                if ( (c == '\n' && m->g->cflags&REG_NEWLINE) ||
                                ^
../lib/Support/regengine.inc:718:15: note: Left side of '&&' is false
                                (c == OUT && !(m->eflags&REG_NOTEOL)) ) {
                                          ^
../lib/Support/regengine.inc:722:3: note: Taking false branch
                if (i != 0) {
                ^
../lib/Support/regengine.inc:729:9: note: Left side of '||' is false
                if ( (flagch == BOL || (lastc != OUT && !ISWORD(lastc))) &&
                      ^
../lib/Support/regengine.inc:729:40: note: Left side of '&&' is false
                if ( (flagch == BOL || (lastc != OUT && !ISWORD(lastc))) &&
                                                     ^
../lib/Support/regengine.inc:733:22: note: Left side of '&&' is false
                if ( (lastc != OUT && ISWORD(lastc)) &&
                                   ^
../lib/Support/regengine.inc:737:7: note: Left side of '||' is false
                if (flagch == BOW || flagch == EOW) {
                    ^
../lib/Support/regengine.inc:737:3: note: Taking false branch
                if (flagch == BOW || flagch == EOW) {
                ^
../lib/Support/regengine.inc:743:25: note: Left side of '||' is true
                if (ISSET(st, stopst) || p == stop)
                                      ^
../lib/Support/regengine.inc:744:4: note:  Execution continues on line 756
                        break;          /* NOTE BREAK OUT */
                        ^
../lib/Support/regengine.inc:757:2: note: Null pointer value stored to 'mv.coldp'
        m->coldp = coldp;
        ^
../lib/Support/regengine.inc:758:2: note: Taking true branch
        if (ISSET(st, stopst))
        ^
../lib/Support/regengine.inc:185:10: note: Returning from 'lfast'
                endp = fast(m, start, stop, gf, gl);
                       ^
../lib/Support/regengine.inc:59:14: note: expanded from macro 'fast'
#define fast    lfast
                ^
../lib/Support/regengine.inc:186:3: note: Taking false branch
                if (endp == NULL) {             /* a miss */
                ^
../lib/Support/regengine.inc:192:7: note: Assuming 'nmatch' is not equal to 0
                if (nmatch == 0 && !g->backrefs)
                    ^
../lib/Support/regengine.inc:192:19: note: Left side of '&&' is false
                if (nmatch == 0 && !g->backrefs)
                                ^
../lib/Support/regengine.inc:197:3: note: Loop condition is true.  Entering loop body
                for (;;) {
                ^
../lib/Support/regengine.inc:199:19: note: Passing null pointer value via 2nd parameter 'start'
                        endp = slow(m, m->coldp, stop, gf, gl);
                                       ^
../lib/Support/regengine.inc:199:11: note: Calling 'lslow'
                        endp = slow(m, m->coldp, stop, gf, gl);
                               ^
../lib/Support/regengine.inc:60:14: note: expanded from macro 'slow'
#define slow    lslow
                ^
../lib/Support/regengine.inc:775:10: note: '?' condition is false
        int c = (start == m->beginp) ? OUT : *(start-1);
                ^
../lib/Support/regengine.inc:775:39: note: Dereference of null pointer
        int c = (start == m->beginp) ? OUT : *(start-1);
                                             ^
/home/jonas/opt/llvm/lib/Support/regexec.c:45:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^        ~~~~~~~~~~~~~
         "regex_impl.h"
/home/jonas/opt/llvm/lib/Support/regexec.c:53:1: warning: #includes are not sorted properly [llvm-include-order]
#include "regutils.h"
^        ~~~~~~~~~~~~
         "regex2.h"
/home/jonas/opt/llvm/lib/Support/regexec.c:141:1: warning: invalid case style for function 'llvm_regexec' [readability-identifier-naming]
llvm_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,
^~~~~~~~~~~~~
llvmRegexec
/home/jonas/opt/llvm/lib/Support/regexec.c:141:34: warning: invalid case style for parameter 'preg' [readability-identifier-naming]
llvm_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,
                                 ^~~~~
                                 Preg
/home/jonas/opt/llvm/lib/Support/regexec.c:141:52: warning: invalid case style for parameter 'string' [readability-identifier-naming]
llvm_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,
                                                   ^~~~~~~
                                                   String
/home/jonas/opt/llvm/lib/Support/regexec.c:141:67: warning: invalid case style for parameter 'nmatch' [readability-identifier-naming]
llvm_regexec(const llvm_regex_t *preg, const char *string, size_t nmatch,
                                                                  ^~~~~~~
                                                                  Nmatch
/home/jonas/opt/llvm/lib/Support/regexec.c:142:30: warning: invalid case style for parameter 'pmatch' [readability-identifier-naming]
             llvm_regmatch_t pmatch[], int eflags)
                             ^~~~~~~
                             Pmatch
/home/jonas/opt/llvm/lib/Support/regexec.c:142:44: warning: invalid case style for parameter 'eflags' [readability-identifier-naming]
             llvm_regmatch_t pmatch[], int eflags)
                                           ^~~~~~~
                                           Eflags
/home/jonas/opt/llvm/lib/Support/regexec.c:144:18: warning: invalid case style for variable 'g' [readability-identifier-naming]
        struct re_guts *g = preg->re_g;
                        ^
                        G
/home/jonas/opt/llvm/lib/Support/regexec.c:151:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
                              ^
../lib/Support/regex2.h:47:19: note: expanded from macro 'MAGIC1'
#define MAGIC1  ((('r'^0200)<<8) | 'e')
                   ^
/home/jonas/opt/llvm/lib/Support/regexec.c:151:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
                                                    ^
../lib/Support/regex2.h:134:21: note: expanded from macro 'MAGIC2'
#               define  MAGIC2  ((('R'^0200)<<8)|'E')
                                   ^
/home/jonas/opt/llvm/lib/Support/regexec.c:151:53: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (preg->re_magic != MAGIC1 || g->magic != MAGIC2)
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/regexec.c:154:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (g->iflags&REGEX_BAD)                /* backstop for no-debug case */
            ^
/home/jonas/opt/llvm/lib/Support/regexec.c:154:26: warning: statement should be inside braces [readability-braces-around-statements]
        if (g->iflags&REGEX_BAD)                /* backstop for no-debug case */
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regexec.c:156:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        eflags = GOODFLAGS(eflags);
                 ^
/home/jonas/opt/llvm/lib/Support/regexec.c:148:29: note: expanded from macro 'GOODFLAGS'
#       define  GOODFLAGS(f)    ((f)&(REG_NOTBOL|REG_NOTEOL|REG_STARTEND))
                                      ^
../lib/Support/regex_impl.h:86:20: note: expanded from macro 'REG_NOTBOL'
#define REG_NOTBOL      00001
                        ^
/home/jonas/opt/llvm/lib/Support/regexec.c:158:58: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (g->nstates <= (long)(CHAR_BIT*sizeof(states1)) && !(eflags&REG_LARGE))
                                                                ^
/home/jonas/opt/llvm/lib/Support/regexec.c:158:76: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g->nstates <= (long)(CHAR_BIT*sizeof(states1)) && !(eflags&REG_LARGE))
                                                                                  ^
                                                                                   {
/home/jonas/opt/llvm/lib/Support/regexec.c:160:2: warning: do not use 'else' after 'return' [readability-else-after-return]
        else
        ^~~~
/home/jonas/opt/llvm/lib/Support/regexec.c:160:6: warning: statement should be inside braces [readability-braces-around-statements]
        else
            ^
             {
/home/jonas/opt/llvm/lib/Support/regfree.c:38:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^        ~~~~~~~~~~~~~
         "regex_impl.h"
/home/jonas/opt/llvm/lib/Support/regfree.c:43:1: warning: #includes are not sorted properly [llvm-include-order]
#include "regutils.h"
^        ~~~~~~~~~~~~
         "regex2.h"
/home/jonas/opt/llvm/lib/Support/regfree.c:50:1: warning: invalid case style for function 'llvm_regfree' [readability-identifier-naming]
llvm_regfree(llvm_regex_t *preg)
^~~~~~~~~~~~~
llvmRegfree
/home/jonas/opt/llvm/lib/Support/regfree.c:50:28: warning: invalid case style for parameter 'preg' [readability-identifier-naming]
llvm_regfree(llvm_regex_t *preg)
                           ^~~~~
                           Preg
/home/jonas/opt/llvm/lib/Support/regfree.c:52:18: warning: invalid case style for variable 'g' [readability-identifier-naming]
        struct re_guts *g;
                        ^~
                        G
/home/jonas/opt/llvm/lib/Support/regfree.c:54:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (preg->re_magic != MAGIC1)   /* oops */
                              ^
../lib/Support/regex2.h:47:17: note: expanded from macro 'MAGIC1'
#define MAGIC1  ((('r'^0200)<<8) | 'e')
                 ^
/home/jonas/opt/llvm/lib/Support/regfree.c:54:31: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (preg->re_magic != MAGIC1)   /* oops */
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/regfree.c:58:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (g == NULL || g->magic != MAGIC2)    /* oops again */
                                     ^
../lib/Support/regex2.h:134:20: note: expanded from macro 'MAGIC2'
#               define  MAGIC2  ((('R'^0200)<<8)|'E')
                                  ^
/home/jonas/opt/llvm/lib/Support/regfree.c:58:38: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g == NULL || g->magic != MAGIC2)    /* oops again */
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/regfree.c:63:23: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (g->strip != NULL)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/regfree.c:65:22: warning: statement should be inside braces [readability-braces-around-statements]
        if (g->sets != NULL)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/regfree.c:67:25: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g->setbits != NULL)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/regfree.c:69:22: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g->must != NULL)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:19:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^        ~~~~~~~~~~~~~
         <string.h>
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:29:1: warning: invalid case style for function 'llvm_strlcpy' [readability-identifier-naming]
llvm_strlcpy(char *dst, const char *src, size_t siz)
^~~~~~~~~~~~~
llvmStrlcpy
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:29:20: warning: invalid case style for parameter 'dst' [readability-identifier-naming]
llvm_strlcpy(char *dst, const char *src, size_t siz)
                   ^~~~
                   Dst
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:29:37: warning: invalid case style for parameter 'src' [readability-identifier-naming]
llvm_strlcpy(char *dst, const char *src, size_t siz)
                                    ^~~~
                                    Src
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:29:49: warning: invalid case style for parameter 'siz' [readability-identifier-naming]
llvm_strlcpy(char *dst, const char *src, size_t siz)
                                                ^~~~
                                                Siz
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:31:8: warning: invalid case style for variable 'd' [readability-identifier-naming]
        char *d = dst;
              ^
              D
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:32:14: warning: invalid case style for variable 's' [readability-identifier-naming]
        const char *s = src;
                    ^
                    S
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:33:9: warning: invalid case style for variable 'n' [readability-identifier-naming]
        size_t n = siz;
               ^
               N
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:38:30: warning: statement should be inside braces [hicpp-braces-around-statements]
                        if ((*d++ = *s++) == '\0')
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:45:16: warning: statement should be inside braces [readability-braces-around-statements]
                if (siz != 0)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/regstrlcpy.c:47:15: warning: statement should be inside braces [readability-braces-around-statements]
                while (*s++)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:27:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:45:3: warning: 'TrackSpace' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
  TrackSpace("track-memory", cl::desc("Enable -time-passes memory "
  ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:50:3: warning: 'InfoOutputFilename' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
  InfoOutputFilename("info-output-file", cl::value_desc("filename"),
  ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:53:2: warning: anonymous namespace not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace
/home/jonas/opt/llvm/lib/Support/Timer.cpp:43:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:55:39: warning: invalid case style for function 'CreateInfoOutputFile' [readability-identifier-naming]
std::unique_ptr<raw_fd_ostream> llvm::CreateInfoOutputFile() {
                                      ^~~~~~~~~~~~~~~~~~~~~
                                      createInfoOutputFile
/home/jonas/opt/llvm/lib/Support/Timer.cpp:57:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (OutputFilename.empty())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:59:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (OutputFilename == "-")
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:69:11: warning: statement should be inside braces [readability-braces-around-statements]
  if (!EC)
          ^
           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:95:69: warning: invalid case style for parameter 'tg' [readability-identifier-naming]
void Timer::init(StringRef Name, StringRef Description, TimerGroup &tg) {
                                                                    ^~~
                                                                    Tg
/home/jonas/opt/llvm/lib/Support/Timer.cpp:96:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!TG && "Timer already initialized");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:105:8: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
  if (!TG) return;  // Never initialized, or already cleared.
      ~^~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:105:11: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!TG) return;  // Never initialized, or already cleared.
          ^
           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:110:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!TrackSpace) return 0;
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:117:20: warning: invalid case style for variable 'now' [readability-identifier-naming]
  sys::TimePoint<> now;
                   ^~~~
                   Now
/home/jonas/opt/llvm/lib/Support/Timer.cpp:118:28: warning: invalid case style for variable 'user' [readability-identifier-naming]
  std::chrono::nanoseconds user, sys;
                           ^~~~~
                           User
/home/jonas/opt/llvm/lib/Support/Timer.cpp:118:34: warning: invalid case style for variable 'sys' [readability-identifier-naming]
  std::chrono::nanoseconds user, sys;
                                 ^~~~
                                 Sys
/home/jonas/opt/llvm/lib/Support/Timer.cpp:135:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!Running && "Cannot start a running timer");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:141:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Running && "Cannot stop a paused timer");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:153:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total < 1e-7)   // Avoid dividing by zero.
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:155:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:160:7: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
  if (Total.getUserTime())
      ^                  ~
                          != 0.0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:160:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total.getUserTime())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:162:7: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
  if (Total.getSystemTime())
      ^                    ~
                            != 0.0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:162:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total.getSystemTime())
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:164:7: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
  if (Total.getProcessTime())
      ^                     ~
                             != 0.0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:164:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total.getProcessTime())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:170:7: warning: implicit conversion 'ssize_t' (aka 'long') -> bool [readability-implicit-bool-conversion]
  if (Total.getMemUsed())
      ^                 ~
                         != 0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:170:26: warning: statement should be inside braces [readability-braces-around-statements]
  if (Total.getMemUsed())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:171:36: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
    OS << format("%9" PRId64 "  ", (int64_t)getMemUsed());
                                   ^~~~~~~~~~~~~~~~~~~  ~
                                   static_cast<int64_t>()
/home/jonas/opt/llvm/lib/Support/Timer.cpp:181:1: warning: use 'using' instead of 'typedef' [modernize-use-using]
typedef StringMap<Timer> Name2TimerMap;
^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Name2TimerMap = StringMap<Timer>
/home/jonas/opt/llvm/lib/Support/Timer.cpp:183:7: warning: class 'Name2PairMap' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class Name2PairMap {
      ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:187:5: warning: use range-based for loop instead [modernize-loop-convert]
    for (StringMap<std::pair<TimerGroup*, Name2TimerMap> >::iterator
    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        (auto & I : Map)
/home/jonas/opt/llvm/lib/Support/Timer.cpp:188:54: warning: statement should be inside braces [google-readability-braces-around-statements]
         I = Map.begin(), E = Map.end(); I != E; ++I)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:189:7: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
      delete I->second.first;
      ^
../include/llvm/ADT/iterator.h:170:3: note: variable declared here
  PointerT operator->() { return &static_cast<DerivedT *>(this)->operator*(); }
  ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:198:10: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
    if (!GroupEntry.first)
        ~^~~~~~~~~~      ~
                          == nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:198:27: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!GroupEntry.first)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:199:7: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::TimerGroup *' [cppcoreguidelines-owning-memory]
      GroupEntry.first = new TimerGroup(GroupName, GroupDescription);
      ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:202:28: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!T.isInitialized())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:208:2: warning: anonymous namespace not terminated with a closing comment [google-readability-namespace-comments]
}
 ^
   // namespace
/home/jonas/opt/llvm/lib/Support/Timer.cpp:179:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:228:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  : Name(Name.begin(), Name.end()),
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:615:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:229:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Description(Description.begin(), Description.end()) {
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:615:8: note: default parameter was declared here
                     const _Alloc& __a = _Alloc())
                     ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:232:7: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
  if (TimerGroupList)
      ^             ~
                     != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:232:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (TimerGroupList)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:243:32: warning: statement should be inside braces [readability-braces-around-statements]
  for (const auto &P : Records)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:245:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(TimersToPrint.size() == Records.size() && "Size mismatch");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:251:10: warning: implicit conversion 'llvm::Timer *' -> bool [readability-implicit-bool-conversion]
  while (FirstTimer)
         ^         ~
                    != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:251:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  while (FirstTimer)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:257:7: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
  if (Next)
      ^   ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:257:12: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Next)
           ^
            {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:266:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (T.hasTriggered())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:273:7: warning: implicit conversion 'llvm::Timer *' -> bool [readability-implicit-bool-conversion]
  if (T.Next)
      ^     ~
             != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:273:14: warning: statement should be inside braces [readability-braces-around-statements]
  if (T.Next)
             ^
              {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:278:7: warning: implicit conversion 'llvm::Timer *' -> bool [readability-implicit-bool-conversion]
  if (FirstTimer || TimersToPrint.empty())
      ^~~~~~~~~~
      ( != nullptr)
/home/jonas/opt/llvm/lib/Support/Timer.cpp:278:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FirstTimer || TimersToPrint.empty())
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:289:7: warning: implicit conversion 'llvm::Timer *' -> bool [readability-implicit-bool-conversion]
  if (FirstTimer)
      ^         ~
                 != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:289:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (FirstTimer)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:296:18: warning: invalid case style for function 'PrintQueuedTimers' [readability-identifier-naming]
void TimerGroup::PrintQueuedTimers(raw_ostream &OS) {
                 ^~~~~~~~~~~~~~~~~~
                 printQueuedTimers
/home/jonas/opt/llvm/lib/Support/Timer.cpp:301:50: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const PrintRecord &Record : TimersToPrint)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:305:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS << "===" << std::string(73, '-') << "===\n";
                 ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:308:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Padding > 80) Padding = 0;         // Don't allow "negative" numbers
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:310:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS << "===" << std::string(73, '-') << "===\n";
                 ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:315:38: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (this != getDefaultTimerGroup())
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:320:7: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
  if (Total.getUserTime())
      ^                  ~
                          != 0.0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:320:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total.getUserTime())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:322:7: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
  if (Total.getSystemTime())
      ^                    ~
                            != 0.0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:322:29: warning: statement should be inside braces [readability-braces-around-statements]
  if (Total.getSystemTime())
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:324:7: warning: implicit conversion 'double' -> bool [readability-implicit-bool-conversion]
  if (Total.getProcessTime())
      ^                     ~
                             != 0.0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:324:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total.getProcessTime())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:327:7: warning: implicit conversion 'ssize_t' (aka 'long') -> bool [readability-implicit-bool-conversion]
  if (Total.getMemUsed())
      ^                 ~
                         != 0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:327:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Total.getMemUsed())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:347:31: warning: implicit conversion 'llvm::Timer *' -> bool [readability-implicit-bool-conversion]
  for (Timer *T = FirstTimer; T; T = T->Next) {
                              ^~
                                != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:348:28: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!T->hasTriggered()) continue;
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:350:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (WasRunning)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:355:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (WasRunning)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:366:30: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!TimersToPrint.empty())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:372:31: warning: implicit conversion 'llvm::Timer *' -> bool [readability-implicit-bool-conversion]
  for (Timer *T = FirstTimer; T; T = T->Next)
                              ^~
                                != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:372:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (Timer *T = FirstTimer; T; T = T->Next)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:379:41: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
  for (TimerGroup *TG = TimerGroupList; TG; TG = TG->Next)
                                        ^ ~
                                           != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:379:59: warning: statement should be inside braces [readability-braces-around-statements]
  for (TimerGroup *TG = TimerGroupList; TG; TG = TG->Next)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:385:41: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
  for (TimerGroup *TG = TimerGroupList; TG; TG = TG->Next)
                                        ^ ~
                                           != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:385:59: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (TimerGroup *TG = TimerGroupList; TG; TG = TG->Next)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:390:45: warning: invalid case style for parameter 'suffix' [readability-identifier-naming]
                                const char *suffix, double Value) {
                                            ^~~~~~~
                                            Suffix
/home/jonas/opt/llvm/lib/Support/Timer.cpp:391:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(yaml::needsQuotes(Name) == yaml::QuotingType::None &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:393:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(yaml::needsQuotes(R.Name) == yaml::QuotingType::None &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Timer.cpp:395:18: warning: invalid case style for variable 'max_digits10' [readability-identifier-naming]
  constexpr auto max_digits10 = std::numeric_limits<double>::max_digits10;
                 ^~~~~~~~~~~~
                 MaxDigits10
/home/jonas/opt/llvm/lib/Support/Timer.cpp:400:70: warning: invalid case style for parameter 'delim' [readability-identifier-naming]
const char *TimerGroup::printJSONValues(raw_ostream &OS, const char *delim) {
                                                                     ^~~~~~
                                                                     Delim
/home/jonas/opt/llvm/lib/Support/Timer.cpp:414:9: warning: implicit conversion 'ssize_t' (aka 'long') -> bool [readability-implicit-bool-conversion]
    if (T.getMemUsed()) {
        ^             ~
                       != 0
/home/jonas/opt/llvm/lib/Support/Timer.cpp:423:73: warning: invalid case style for parameter 'delim' [readability-identifier-naming]
const char *TimerGroup::printAllJSONValues(raw_ostream &OS, const char *delim) {
                                                                        ^~~~~~
                                                                        Delim
/home/jonas/opt/llvm/lib/Support/Timer.cpp:425:41: warning: implicit conversion 'llvm::TimerGroup *' -> bool [readability-implicit-bool-conversion]
  for (TimerGroup *TG = TimerGroupList; TG; TG = TG->Next)
                                        ^ ~
                                           != nullptr
/home/jonas/opt/llvm/lib/Support/Timer.cpp:425:59: warning: statement should be inside braces [readability-braces-around-statements]
  for (TimerGroup *TG = TimerGroupList; TG; TG = TG->Next)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/Timer.cpp:430:18: warning: invalid case style for function 'ConstructTimerLists' [readability-identifier-naming]
void TimerGroup::ConstructTimerLists() {
                 ^~~~~~~~~~~~~~~~~~~~
                 constructTimerLists
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:17:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:31:11: warning: invalid case style for function 'MemoryFence' [readability-identifier-naming]
void sys::MemoryFence() {
          ^~~~~~~~~~~~
          memoryFence
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:45:20: warning: invalid case style for function 'CompareAndSwap' [readability-identifier-naming]
sys::cas_flag sys::CompareAndSwap(volatile sys::cas_flag* ptr,
                   ^~~~~~~~~~~~~~~
                   compareAndSwap
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:45:59: warning: invalid case style for parameter 'ptr' [readability-identifier-naming]
sys::cas_flag sys::CompareAndSwap(volatile sys::cas_flag* ptr,
                                                          ^~~~
                                                          Ptr
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:46:49: warning: invalid case style for parameter 'new_value' [readability-identifier-naming]
                                  sys::cas_flag new_value,
                                                ^~~~~~~~~~
                                                NewValue
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:47:49: warning: invalid case style for parameter 'old_value' [readability-identifier-naming]
                                  sys::cas_flag old_value) {
                                                ^~~~~~~~~~
                                                OldValue
/home/jonas/opt/llvm/lib/Support/Atomic.cpp:54:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  return __sync_val_compare_and_swap(ptr, old_value, new_value);
         ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:41:10: warning: inclusion of deprecated C++ header 'stdlib.h'; consider using 'cstdlib' instead [hicpp-deprecated-headers]
#include <stdlib.h>
         ^~~~~~~~~~
         <cstdlib>
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:42:10: warning: inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead [modernize-deprecated-headers]
#include <string.h>
         ^~~~~~~~~~
         <cstring>
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:44:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:45:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace support;
^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:51:23: warning: invalid case style for variable 'PRIME64_1' [readability-identifier-naming]
static const uint64_t PRIME64_1 = 11400714785074694791ULL;
                      ^~~~~~~~~
                      PrimE641
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:52:23: warning: invalid case style for variable 'PRIME64_2' [readability-identifier-naming]
static const uint64_t PRIME64_2 = 14029467366897019727ULL;
                      ^~~~~~~~~
                      PrimE642
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:53:23: warning: invalid case style for variable 'PRIME64_3' [readability-identifier-naming]
static const uint64_t PRIME64_3 = 1609587929392839161ULL;
                      ^~~~~~~~~
                      PrimE643
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:54:23: warning: invalid case style for variable 'PRIME64_4' [readability-identifier-naming]
static const uint64_t PRIME64_4 = 9650029242287828579ULL;
                      ^~~~~~~~~
                      PrimE644
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:55:23: warning: invalid case style for variable 'PRIME64_5' [readability-identifier-naming]
static const uint64_t PRIME64_5 = 2870177450012600261ULL;
                      ^~~~~~~~~
                      PrimE645
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:79:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    const unsigned char *const Limit = BEnd - 32;
                                            ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:87:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      P += 8;
        ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:89:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      P += 8;
        ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:91:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      P += 8;
        ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:93:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      P += 8;
        ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:106:10: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
  H64 += (uint64_t)Len;
         ^~~~~~~~~~~~~~
         static_cast<uint64_t>()
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:108:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  while (P + 8 <= BEnd) {
           ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:112:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    P += 8;
      ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:115:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (P + 4 <= BEnd) {
        ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:116:12: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    H64 ^= (uint64_t)(endian::read32le(P)) * PRIME64_1;
           ^~~~~~~~~~~
           static_cast<uint64_t>
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:118:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    P += 4;
      ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:124:6: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    P++;
     ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:127:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  H64 ^= H64 >> 33;
         ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:129:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  H64 ^= H64 >> 29;
         ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:131:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  H64 ^= H64 >> 32;
         ^
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:137:20: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
  return xxHash64({(const char *)Data.data(), Data.size()});
                   ^~~~~~~~~~~~~~~~~~       ~
                   reinterpret_cast<const char *>( )
/home/jonas/opt/llvm/lib/Support/xxhash.cpp:137:20: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/Triple.h:778:13: warning: function 'llvm::Triple::getARMCPUForArch' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  StringRef getARMCPUForArch(StringRef Arch = StringRef()) const;
            ^                          ~~~~
                                       MArch
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1576:19: note: the definition seen here
StringRef Triple::getARMCPUForArch(StringRef MArch) const {
                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/Triple.h:778:13: note: differing parameters are named here: ('Arch'), in definition: ('MArch')
  StringRef getARMCPUForArch(StringRef Arch = StringRef()) const;
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/Triple.h:822:19: warning: function 'llvm::Triple::getArchTypeForLLVMName' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static ArchType getArchTypeForLLVMName(StringRef Str);
                  ^                                ~~~~
                                                   Name
/home/jonas/opt/llvm/lib/Support/Triple.cpp:259:26: note: the definition seen here
Triple::ArchType Triple::getArchTypeForLLVMName(StringRef Name) {
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/ADT/Triple.h:822:19: note: differing parameters are named here: ('Str'), in definition: ('Name')
  static ArchType getArchTypeForLLVMName(StringRef Str);
                  ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:18:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:82:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:246:33: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (sys::IsLittleEndianHost)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:248:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/Triple.cpp:248:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:320:20: warning: invalid case style for variable 'arch' [readability-identifier-naming]
  Triple::ArchType arch = Triple::UnknownArch;
                   ^~~~
                   Arch
/home/jonas/opt/llvm/lib/Support/Triple.cpp:360:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (ArchName.empty())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:365:64: warning: statement should be inside braces [readability-braces-around-statements]
      (ArchName.startswith("v2") || ArchName.startswith("v3")))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:372:40: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (ENDIAN == ARM::EndianKind::BIG)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:374:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/Triple.cpp:374:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:446:40: warning: statement should be inside braces [google-readability-braces-around-statements]
        ArchName.startswith("aarch64"))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:448:36: warning: statement should be inside braces [readability-braces-around-statements]
    if (ArchName.startswith("bpf"))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:548:68: warning: statement should be inside braces [google-readability-braces-around-statements]
      (SubArchName.endswith("r6el") || SubArchName.endswith("r6")))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:554:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ARMSubArch.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:639:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (T.isOSDarwin())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:641:30: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (T.isOSWindows())
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:690:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (T.isOSDarwin())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:711:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef(Data).split(Components, '-', /*MaxSplit*/ 3);
  ^
../include/llvm/ADT/StringRef.h:800:16: note: default parameter was declared here
               bool KeepEmpty = true) const;
               ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:712:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
  if (Components.size() > 0) {
      ^~~~~~~~~~~~~~~~~~~~~~
      !Components.empty()
../include/llvm/ADT/SmallVector.h:56:23: note: method 'SmallVectorBase'::empty() defined here
  LLVM_NODISCARD bool empty() const { return !Size; }
                      ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:735:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ObjectFormat == UnknownObjectFormat)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:770:51: warning: statement should be inside braces [readability-braces-around-statements]
  if (ObjectFormat == Triple::UnknownObjectFormat)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:780:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Str.split(Components, '-');
  ^
../include/llvm/ADT/StringRef.h:799:63: note: default parameter was declared here
    void split(SmallVectorImpl<StringRef> &A, char Separator, int MaxSplit = -1,
                                                              ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:788:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
  if (Components.size() > 0)
      ^~~~~~~~~~~~~~~~~~~~~~
      !Components.empty()
../include/llvm/ADT/SmallVector.h:56:23: note: method 'SmallVectorBase'::empty() defined here
  LLVM_NODISCARD bool empty() const { return !Size; }
                      ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:788:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Components.size() > 0)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:791:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Components.size() > 1)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:800:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Components.size() > 3)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:803:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Components.size() > 4)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:818:9: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (Found[Pos])
        ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:818:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Found[Pos])
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:823:42: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (Idx < array_lengthof(Found) && Found[Idx])
                                         ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:823:53: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Idx < array_lengthof(Found) && Found[Idx])
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:854:18: warning: statement should be inside braces [readability-braces-around-statements]
      if (!Valid)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:869:23: warning: invalid case style for variable 'i' [readability-identifier-naming]
        for (unsigned i = Pos; !CurrentComponent.empty(); ++i) {
                      ^                                     ~~
                      I                                     I
/home/jonas/opt/llvm/lib/Support/Triple.cpp:871:47: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
          while (i < array_lengthof(Found) && Found[i])
                                              ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:871:56: warning: statement should be inside braces [google-readability-braces-around-statements]
          while (i < array_lengthof(Found) && Found[i])
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:884:25: warning: invalid case style for variable 'i' [readability-identifier-naming]
          for (unsigned i = Idx; i < Components.size();) {
                        ^        ~
                        I        I
/home/jonas/opt/llvm/lib/Support/Triple.cpp:889:42: warning: statement should be inside braces [google-readability-braces-around-statements]
            if (CurrentComponent.empty())
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:892:51: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
            while (++i < array_lengthof(Found) && Found[i])
                                                  ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:892:60: warning: statement should be inside braces [google-readability-braces-around-statements]
            while (++i < array_lengthof(Found) && Found[i])
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:896:41: warning: statement should be inside braces [hicpp-braces-around-statements]
          if (!CurrentComponent.empty())
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:900:51: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
          while (++Idx < array_lengthof(Found) && Found[Idx])
                                                  ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:900:62: warning: statement should be inside braces [google-readability-braces-around-statements]
          while (++Idx < array_lengthof(Found) && Found[Idx])
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:904:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(Pos < Components.size() && Components[Pos] == Comp &&
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:906:7: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      Found[Pos] = true;
      ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:912:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = Components.size(); i < e; ++i) {
                ^                             ~        ~~
                I                             I        I
/home/jonas/opt/llvm/lib/Support/Triple.cpp:912:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = Components.size(); i < e; ++i) {
                       ^                          ~~
                       E                          E
/home/jonas/opt/llvm/lib/Support/Triple.cpp:913:31: warning: statement should be inside braces [readability-braces-around-statements]
    if (Components[i].empty())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:931:70: warning: statement should be inside braces [readability-braces-around-statements]
  if (Vendor == Triple::SUSE && Environment == llvm::Triple::GNUEABI)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:938:79: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (ObjectFormat == UnknownObjectFormat || ObjectFormat == Triple::COFF)
                                                                              ^
                                                                               {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:940:11: warning: statement should be inside braces [google-readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:962:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = Components.size(); i != e; ++i) {
                ^                             ~         ~~
                I                             I         I
/home/jonas/opt/llvm/lib/Support/Triple.cpp:962:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = Components.size(); i != e; ++i) {
                       ^                           ~~
                       E                           E
/home/jonas/opt/llvm/lib/Support/Triple.cpp:963:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (i) Normalized += '-';
        ^~
          != 0u
/home/jonas/opt/llvm/lib/Support/Triple.cpp:963:11: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (i) Normalized += '-';
          ^
           {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:995:17: warning: invalid case style for function 'EatNumber' [readability-identifier-naming]
static unsigned EatNumber(StringRef &Str) {
                ^~~~~~~~~~
                eatNumber
/home/jonas/opt/llvm/lib/Support/Triple.cpp:995:38: warning: non-const reference parameter 'Str', make it const or use a pointer [google-runtime-references]
static unsigned EatNumber(StringRef &Str) {
                                     ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:996:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1004:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Str = Str.substr(1);
          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1010:60: warning: non-const reference parameter 'Major', make it const or use a pointer [google-runtime-references]
static void parseVersionFromName(StringRef Name, unsigned &Major,
                                                           ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1011:44: warning: non-const reference parameter 'Minor', make it const or use a pointer [google-runtime-references]
                                 unsigned &Minor, unsigned &Micro) {
                                           ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1011:61: warning: non-const reference parameter 'Micro', make it const or use a pointer [google-runtime-references]
                                 unsigned &Minor, unsigned &Micro) {
                                                            ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1017:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i != 3; ++i) {
                ^      ~         ~~
                I      I         I
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1018:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Name.empty() || Name[0] < '0' || Name[0] > '9')
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1022:6: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    *Components[i] = EatNumber(Name);
     ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1025:30: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Name.startswith("."))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1026:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Name = Name.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1034:55: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EnvironmentName.startswith(EnvironmentTypeName))
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1035:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    EnvironmentName = EnvironmentName.substr(EnvironmentTypeName.size());
                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1045:37: warning: statement should be inside braces [readability-braces-around-statements]
  if (OSName.startswith(OSTypeName))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1046:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    OSName = OSName.substr(OSTypeName.size());
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1047:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (getOS() == MacOSX)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1061:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Major == 0)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1064:19: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Major < 4)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1076:21: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Major != 10)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1112:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Major == 0)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1136:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Major == 0)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1161:47: warning: statement should be inside braces [readability-braces-around-statements]
  if (ObjectFormat == getDefaultFormat(*this))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1169:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Environment == UnknownEnvironment)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1192:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (hasEnvironment())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1195:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1415:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!isLittleEndian())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1469:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isLittleEndian())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1549:38: warning: statement should be inside braces [readability-braces-around-statements]
    if (getVendor() == Triple::Apple)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1552:5: warning: do not use 'else' after 'return' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1552:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1560:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getVendor() == Triple::Apple)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1569:36: warning: statement should be inside braces [readability-braces-around-statements]
  if (getVendor() == Triple::Apple)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1570:36: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Other.isOSVersionLT(*this))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1577:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (MArch.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1585:41: warning: statement should be inside braces [readability-braces-around-statements]
    if (!MArch.empty() && MArch == "v6")
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1595:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (MArch == "v7k")
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1602:21: warning: statement should be inside braces [readability-braces-around-statements]
  if (MArch.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1603:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/Triple.cpp:1606:46: warning: statement should be inside braces [readability-braces-around-statements]
  if (!CPU.empty() && !CPU.equals("invalid"))
                                             ^
                                              {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:58:11: warning: function 'llvm::sys::DynamicLibrary::getAddressOfSymbol' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    void *getAddressOfSymbol(const char *symbolName);
          ^                              ~~~~~~~~~~~
                                         SymbolName
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:174:23: note: the definition seen here
void *DynamicLibrary::getAddressOfSymbol(const char *SymbolName) {
                      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:58:11: note: differing parameters are named here: ('symbolName'), in definition: ('SymbolName')
    void *getAddressOfSymbol(const char *symbolName);
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:68:27: warning: function 'llvm::sys::DynamicLibrary::getPermanentLibrary' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    static DynamicLibrary getPermanentLibrary(const char *filename,
                          ^                               ~~~~~~~~~
                                                          FileName
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:149:32: note: the definition seen here
DynamicLibrary DynamicLibrary::getPermanentLibrary(const char *FileName,
                               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:68:27: note: differing parameters are named here: ('filename', 'errMsg'), in definition: ('FileName', 'Err')
    static DynamicLibrary getPermanentLibrary(const char *filename,
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:78:27: warning: function 'llvm::sys::DynamicLibrary::addPermanentLibrary' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    static DynamicLibrary addPermanentLibrary(void *handle,
                          ^                         ~~~~~~~
                                                    Handle
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:164:32: note: the definition seen here
DynamicLibrary DynamicLibrary::addPermanentLibrary(void *Handle,
                               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:78:27: note: differing parameters are named here: ('handle', 'errMsg'), in definition: ('Handle', 'Err')
    static DynamicLibrary addPermanentLibrary(void *handle,
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:114:18: warning: function 'llvm::sys::DynamicLibrary::SearchForAddressOfSymbol' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    static void *SearchForAddressOfSymbol(const char *symbolName);
                 ^                                    ~~~~~~~~~~~
                                                      SymbolName
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:180:23: note: the definition seen here
void *DynamicLibrary::SearchForAddressOfSymbol(const char *SymbolName) {
                      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:114:18: note: differing parameters are named here: ('symbolName'), in definition: ('SymbolName')
    static void *SearchForAddressOfSymbol(const char *symbolName);
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:125:17: warning: function 'llvm::sys::DynamicLibrary::AddSymbol' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
    static void AddSymbol(StringRef symbolName, void *symbolValue);
                ^                   ~~~~~~~~~~~       ~~~~~~~~~~~~
                                    SymbolName        SymbolValue
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:144:22: note: the definition seen here
void DynamicLibrary::AddSymbol(StringRef SymbolName, void *SymbolValue) {
                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:125:17: note: differing parameters are named here: ('symbolName', 'symbolValue'), in definition: ('SymbolName', 'SymbolValue')
    static void AddSymbol(StringRef symbolName, void *symbolValue);
                ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:26:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:27:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::sys;
^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:30:23: warning: class 'HandleSet' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
class DynamicLibrary::HandleSet {
                      ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:31:3: warning: use 'using' instead of 'typedef' [modernize-use-using]
  typedef std::vector<void *> HandleList;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  using HandleList = std::vector<void *>
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:33:9: warning: use default member initializer for 'Process' [modernize-use-default-member-init]
  void *Process;
        ^      ~
               {nullptr}
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:36:16: warning: function 'llvm::sys::DynamicLibrary::HandleSet::DLOpen' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static void *DLOpen(const char *Filename, std::string *Err);
               ^                  ~~~~~~~~~
                                  File
../lib/Support/Unix/DynamicLibrary.inc:28:34: note: the definition seen here
void *DynamicLibrary::HandleSet::DLOpen(const char *File, std::string *Err) {
                                 ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:36:16: note: differing parameters are named here: ('Filename'), in definition: ('File')
  static void *DLOpen(const char *Filename, std::string *Err);
               ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:36:16: warning: invalid case style for function 'DLOpen' [readability-identifier-naming]
  static void *DLOpen(const char *Filename, std::string *Err);
               ^~~~~~~
               dlOpen
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:37:15: warning: invalid case style for function 'DLClose' [readability-identifier-naming]
  static void DLClose(void *Handle);
              ^~~~~~~~
              dlClose
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:38:16: warning: invalid case style for function 'DLSym' [readability-identifier-naming]
  static void *DLSym(void *Handle, const char *Symbol);
               ^~~~~~
               dlSym
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:43:24: warning: invalid case style for function 'Find' [readability-identifier-naming]
  HandleList::iterator Find(void *Handle) {
                       ^~~~~
                       find
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:47:8: warning: invalid case style for function 'Contains' [readability-identifier-naming]
  bool Contains(void *Handle) {
       ^~~~~~~~~
       contains
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:51:8: warning: invalid case style for function 'AddLibrary' [readability-identifier-naming]
  bool AddLibrary(void *Handle, bool IsProcess = false, bool CanClose = true) {
       ^~~~~~~~~~~
       addLibrary
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:51:33: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
  bool AddLibrary(void *Handle, bool IsProcess = false, bool CanClose = true) {
                                ^             ~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:51:57: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
  bool AddLibrary(void *Handle, bool IsProcess = false, bool CanClose = true) {
                                                        ^            ~~~~~~~~
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:58:22: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (CanClose)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:65:11: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
      if (Process) {
          ^      ~
                  != nullptr
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:66:22: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (CanClose)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:68:31: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (Process == Handle)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:77:9: warning: invalid case style for function 'LibLookup' [readability-identifier-naming]
  void *LibLookup(const char *Symbol, DynamicLibrary::SearchOrdering Order) {
        ^~~~~~~~~~
        libLookup
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:78:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (Order & SO_LoadOrder) {
        ^~~~~               ~
        (                   ) != 0
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:80:47: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (void *Ptr = DLSym(Handle, Symbol))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:84:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      for (void *Handle : llvm::reverse(Handles)) {
                          ^
../include/llvm/ADT/STLExtras.h:258:14: note: default parameter was declared here
             typename std::enable_if<has_rbegin<ContainerTy>::value>::type * =
             ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:85:47: warning: statement should be inside braces [readability-braces-around-statements]
        if (void *Ptr = DLSym(Handle, Symbol))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:92:9: warning: invalid case style for function 'Lookup' [readability-identifier-naming]
  void *Lookup(const char *Symbol, DynamicLibrary::SearchOrdering Order) {
        ^~~~~~~
        lookup
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:93:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(!((Order & SO_LoadedFirst) && (Order & SO_LoadedLast)) &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:96:10: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
    if (!Process || (Order & SO_LoadedFirst)) {
        ~^~~~~~~
        ( == nullptr)
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:96:21: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    if (!Process || (Order & SO_LoadedFirst)) {
                    ^                       ~
                    (                        != 0)
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:97:48: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (void *Ptr = LibLookup(Symbol, Order))
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:100:9: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
    if (Process) {
        ^      ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:102:46: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (void *Ptr = DLSym(Process, Symbol))
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:106:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      if (Order & SO_LoadedLast) {
          ^~~~~                ~
          (                    ) != 0
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:107:50: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (void *Ptr = LibLookup(Symbol, Order))
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:117:53: warning: 'ExplicitSymbols' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
static llvm::ManagedStatic<llvm::StringMap<void *>> ExplicitSymbols;
~~~~~~~~~~~                                         ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:119:55: warning: 'OpenedHandles' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
static llvm::ManagedStatic<DynamicLibrary::HandleSet> OpenedHandles;
~~~~~~~~~~~                                           ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:121:57: warning: 'SymbolsMutex' is a static definition in anonymous namespace; static is redundant here [readability-static-definition-in-anonymous-namespace]
static llvm::ManagedStatic<llvm::sys::SmartMutex<true>> SymbolsMutex;
~~~~~~~~~~~                                             ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:122:2: warning: anonymous namespace not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:115:11: note: anonymous namespace starts here
namespace {
          ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:139:7: warning: invalid case style for function 'SearchForAddressOfSpecialSymbol' [readability-identifier-naming]
void *SearchForAddressOfSpecialSymbol(const char *SymbolName) {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      searchForAddressOfSpecialSymbol
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:142:2: warning: namespace 'llvm' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace llvm
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:138:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:144:22: warning: invalid case style for function 'AddSymbol' [readability-identifier-naming]
void DynamicLibrary::AddSymbol(StringRef SymbolName, void *SymbolValue) {
                     ^~~~~~~~~~
                     addSymbol
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:158:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    HS.AddLibrary(Handle, /*IsProcess*/ FileName == nullptr);
    ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:51:57: note: default parameter was declared here
  bool AddLibrary(void *Handle, bool IsProcess = false, bool CanClose = true) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:168:81: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!OpenedHandles->AddLibrary(Handle, /*IsProcess*/false, /*CanClose*/false))
                                                                                ^
                                                                                 {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:175:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (!isValid())
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:180:23: warning: invalid case style for function 'SearchForAddressOfSymbol' [readability-identifier-naming]
void *DynamicLibrary::SearchForAddressOfSymbol(const char *SymbolName) {
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
                      searchForAddressOfSymbol
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:186:35: warning: invalid case style for variable 'i' [readability-identifier-naming]
      StringMap<void *>::iterator i = ExplicitSymbols->find(SymbolName);
                                  ^
                                  I
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:188:39: warning: statement should be inside braces [readability-braces-around-statements]
      if (i != ExplicitSymbols->end())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:194:70: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (void *Ptr = OpenedHandles->Lookup(SymbolName, SearchOrder))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:206:10: warning: invalid case style for function 'LLVMLoadLibraryPermanently' [readability-identifier-naming]
LLVMBool LLVMLoadLibraryPermanently(const char *Filename) {
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
         llvmLoadLibraryPermanently
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:207:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return llvm::sys::DynamicLibrary::LoadLibraryPermanently(Filename);
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/DynamicLibrary.h:87:40: note: default parameter was declared here
                                       std::string *ErrMsg = nullptr) {
                                       ^
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:207:10: warning: implicit conversion bool -> 'LLVMBool' (aka 'int') [readability-implicit-bool-conversion]
  return llvm::sys::DynamicLibrary::LoadLibraryPermanently(Filename);
         ^~~~                                                       ~
         static_cast<LLVMBool>(                                     )
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:210:7: warning: invalid case style for function 'LLVMSearchForAddressOfSymbol' [readability-identifier-naming]
void *LLVMSearchForAddressOfSymbol(const char *symbolName) {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      llvmSearchForAddressOfSymbol
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:210:48: warning: invalid case style for parameter 'symbolName' [readability-identifier-naming]
void *LLVMSearchForAddressOfSymbol(const char *symbolName) {
                                               ^~~~~~~~~~~
                                               SymbolName
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:214:6: warning: invalid case style for function 'LLVMAddSymbol' [readability-identifier-naming]
void LLVMAddSymbol(const char *symbolName, void *symbolValue) {
     ^~~~~~~~~~~~~~
     llvmAddSymbol
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:214:32: warning: invalid case style for parameter 'symbolName' [readability-identifier-naming]
void LLVMAddSymbol(const char *symbolName, void *symbolValue) {
                               ^~~~~~~~~~~
                               SymbolName
/home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp:214:50: warning: invalid case style for parameter 'symbolValue' [readability-identifier-naming]
void LLVMAddSymbol(const char *symbolName, void *symbolValue) {
                                                 ^~~~~~~~~~~~
                                                 SymbolValue
/home/jonas/opt/llvm/lib/Support/Errno.cpp:17:10: warning: inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead [modernize-deprecated-headers]
#include <string.h>
         ^~~~~~~~~~
         <cstring>
/home/jonas/opt/llvm/lib/Support/Errno.cpp:20:10: warning: inclusion of deprecated C++ header 'errno.h'; consider using 'cerrno' instead [modernize-deprecated-headers]
#include <errno.h>
         ^~~~~~~~~
         <cerrno>
/home/jonas/opt/llvm/lib/Support/Errno.cpp:32:13: warning: invalid case style for function 'StrError' [readability-identifier-naming]
std::string StrError() {
            ^~~~~~~~~
            strError
/home/jonas/opt/llvm/lib/Support/Errno.cpp:37:13: warning: invalid case style for function 'StrError' [readability-identifier-naming]
std::string StrError(int errnum) {
            ^~~~~~~~~
            strError
/home/jonas/opt/llvm/lib/Support/Errno.cpp:37:26: warning: invalid case style for parameter 'errnum' [readability-identifier-naming]
std::string StrError(int errnum) {
                         ^~~~~~~
                         Errnum
/home/jonas/opt/llvm/lib/Support/Errno.cpp:38:15: warning: invalid case style for variable 'str' [readability-identifier-naming]
  std::string str;
              ^~~~
              Str
/home/jonas/opt/llvm/lib/Support/Errno.cpp:39:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (errnum == 0)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/Errno.cpp:43:8: warning: invalid case style for variable 'buffer' [readability-identifier-naming]
  char buffer[MaxErrStrLen];
       ^~~~~~~
       Buffer
/home/jonas/opt/llvm/lib/Support/Errno.cpp:52:28: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  str = strerror_r(errnum, buffer, MaxErrStrLen - 1);
                           ^
../include/llvm/Support/raw_ostream.h:541:8: warning: function 'llvm::raw_null_ostream::write_impl' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void write_impl(const char *Ptr, size_t size) override;
       ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:906:24: note: the definition seen here
void raw_null_ostream::write_impl(const char *Ptr, size_t Size) {
                       ^
../include/llvm/Support/raw_ostream.h:541:8: note: differing parameters are named here: ('size'), in definition: ('Size')
  void write_impl(const char *Ptr, size_t size) override;
       ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:67:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:72:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(OutBufCur == OutBufStart &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:75:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BufferMode == InternalBuffer)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:79:21: warning: invalid case style for function 'preferred_buffer_size' [readability-identifier-naming]
size_t raw_ostream::preferred_buffer_size() const {
                    ^~~~~~~~~~~~~~~~~~~~~~
                    preferredBufferSize
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:84:19: warning: invalid case style for function 'SetBuffered' [readability-identifier-naming]
void raw_ostream::SetBuffered() {
                  ^~~~~~~~~~~~
                  setBuffered
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:86:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (size_t Size = preferred_buffer_size())
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:88:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:93:19: warning: invalid case style for function 'SetBufferAndMode' [readability-identifier-naming]
void raw_ostream::SetBufferAndMode(char *BufferStart, size_t Size,
                  ^~~~~~~~~~~~~~~~~
                  setBufferAndMode
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:95:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(((Mode == Unbuffered && !BufferStart && Size == 0) ||
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:100:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:102:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BufferMode == InternalBuffer)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:105:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  OutBufEnd = OutBufStart+Size;
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:109:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(OutBufStart <= OutBufEnd && "Invalid size!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:112:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(unsigned long N) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:112:38: warning: consider replacing 'unsigned long' with 'uint64' [google-runtime-int]
raw_ostream &raw_ostream::operator<<(unsigned long N) {
                                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:117:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(long N) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:117:38: warning: consider replacing 'long' with 'int64' [google-runtime-int]
raw_ostream &raw_ostream::operator<<(long N) {
                                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:122:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(unsigned long long N) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:122:38: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
raw_ostream &raw_ostream::operator<<(unsigned long long N) {
                                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:127:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(long long N) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:127:38: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
raw_ostream &raw_ostream::operator<<(long long N) {
                                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:132:27: warning: invalid case style for function 'write_hex' [readability-identifier-naming]
raw_ostream &raw_ostream::write_hex(unsigned long long N) {
                          ^~~~~~~~~~
                          writeHex
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:132:37: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
raw_ostream &raw_ostream::write_hex(unsigned long long N) {
                                    ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:133:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  llvm::write_hex(*this, N, HexPrintStyle::Lower);
  ^
../include/llvm/Support/NativeFormatting.h:43:16: note: default parameter was declared here
               Optional<size_t> Width = None);
               ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:137:27: warning: invalid case style for function 'write_uuid' [readability-identifier-naming]
raw_ostream &raw_ostream::write_uuid(const uuid_t UUID) {
                          ^~~~~~~~~~~
                          writeUuid
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:139:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    *this << format("%02" PRIX32, UUID[Idx]);
                                  ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:140:54: warning: statement should be inside braces [readability-braces-around-statements]
    if (Idx == 3 || Idx == 5 || Idx == 7 || Idx == 9)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:147:27: warning: invalid case style for function 'write_escaped' [readability-identifier-naming]
raw_ostream &raw_ostream::write_escaped(StringRef Str,
                          ^~~~~~~~~~~~~~
                          writeEscaped
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:149:22: warning: invalid case style for variable 'c' [readability-identifier-naming]
  for (unsigned char c : Str) {
                     ^
                     C
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:172:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        *this << hexdigit((c >> 4 & 0xF));
                 ^
../include/llvm/ADT/StringExtras.h:37:34: note: default parameter was declared here
inline char hexdigit(unsigned X, bool LowerCase = false) {
                                 ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:172:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << hexdigit((c >> 4 & 0xF));
                           ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:173:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        *this << hexdigit((c >> 0) & 0xF);
                 ^
../include/llvm/ADT/StringExtras.h:37:34: note: default parameter was declared here
inline char hexdigit(unsigned X, bool LowerCase = false) {
                                 ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:173:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << hexdigit((c >> 0) & 0xF);
                          ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:173:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << hexdigit((c >> 0) & 0xF);
                           ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:177:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << char('0' + ((c >> 6) & 7));
                             ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:177:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << char('0' + ((c >> 6) & 7));
                              ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:178:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << char('0' + ((c >> 3) & 7));
                             ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:178:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << char('0' + ((c >> 3) & 7));
                              ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:179:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << char('0' + ((c >> 0) & 7));
                             ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:179:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        *this << char('0' + ((c >> 0) & 7));
                              ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:187:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(const void *P) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:188:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  llvm::write_hex(*this, (uintptr_t)P, HexPrintStyle::PrefixLower);
  ^
../include/llvm/Support/NativeFormatting.h:43:16: note: default parameter was declared here
               Optional<size_t> Width = None);
               ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:188:26: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  llvm::write_hex(*this, (uintptr_t)P, HexPrintStyle::PrefixLower);
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:188:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:192:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(double N) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:193:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  llvm::write_double(*this, N, FloatStyle::Exponent);
  ^
../include/llvm/Support/NativeFormatting.h:45:19: note: default parameter was declared here
                  Optional<size_t> Precision = None);
                  ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:197:19: warning: invalid case style for function 'flush_nonempty' [readability-identifier-naming]
void raw_ostream::flush_nonempty() {
                  ^~~~~~~~~~~~~~~
                  flushNonempty
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:198:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(OutBufCur > OutBufStart && "Invalid call to flush_nonempty.");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:209:20: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
        write_impl(reinterpret_cast<char*>(&C), 1);
                   ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:220:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  *OutBufCur++ = C;
            ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:243:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(NumBytes != 0 && "undefined behavior");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:249:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        return write(Ptr + BytesToWrite, BytesRemaining);
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:251:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      copy_to_buffer(Ptr + BytesToWrite, BytesRemaining);
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:259:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    return write(Ptr + NumBytes, Size - NumBytes);
                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:267:19: warning: invalid case style for function 'copy_to_buffer' [readability-identifier-naming]
void raw_ostream::copy_to_buffer(const char *Ptr, size_t Size) {
                  ^~~~~~~~~~~~~~~
                  copyToBuffer
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:268:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Size <= size_t(OutBufEnd - OutBufCur) && "Buffer overrun!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:273:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 4: OutBufCur[3] = Ptr[3]; LLVM_FALLTHROUGH;
          ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:273:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 4: OutBufCur[3] = Ptr[3]; LLVM_FALLTHROUGH;
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:274:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 3: OutBufCur[2] = Ptr[2]; LLVM_FALLTHROUGH;
          ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:274:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 3: OutBufCur[2] = Ptr[2]; LLVM_FALLTHROUGH;
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:275:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 2: OutBufCur[1] = Ptr[1]; LLVM_FALLTHROUGH;
          ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:275:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 2: OutBufCur[1] = Ptr[1]; LLVM_FALLTHROUGH;
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:276:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 1: OutBufCur[0] = Ptr[0]; LLVM_FALLTHROUGH;
          ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:276:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  case 1: OutBufCur[0] = Ptr[0]; LLVM_FALLTHROUGH;
                         ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:283:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  OutBufCur += Size;
            ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:287:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(const format_object_base &Fmt) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:297:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      OutBufCur += BytesUsed;
                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:318:37: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (BytesUsed <= NextBufferSize)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:322:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(BytesUsed > NextBufferSize && "Didn't grow buffer!?");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:327:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(const formatv_object_base &Obj) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:333:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(const FormattedString &FS) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:361:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(const FormattedNumber &FN) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:364:34: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (FN.Upper && FN.HexPrefix)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:366:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (FN.Upper && !FN.HexPrefix)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:368:40: warning: statement should be inside braces [readability-braces-around-statements]
    else if (!FN.Upper && FN.HexPrefix)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:370:9: warning: statement should be inside braces [readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:377:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Buffer.size() < FN.Width)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:384:1: warning: cannot overload 'operator<<' [fuchsia-overloaded-operator]
raw_ostream &raw_ostream::operator<<(const FormattedBytes &FB) {
^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:385:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FB.Bytes.empty())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:400:23: warning: statement should be inside braces [readability-braces-around-statements]
    if (MaxOffset > 0)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:402:41: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    OffsetWidth = std::max<uint64_t>(4, llvm::alignTo(Power, 4) / 4);
                                        ^
../include/llvm/Support/MathExtras.h:685:57: note: default parameter was declared here
inline uint64_t alignTo(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:407:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      alignTo(FB.NumPerLine, FB.ByteGroupSize) / FB.ByteGroupSize;
      ^
../include/llvm/Support/MathExtras.h:685:57: note: default parameter was declared here
inline uint64_t alignTo(uint64_t Value, uint64_t Align, uint64_t Skew = 0) {
                                                        ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:424:11: warning: implicit conversion 'size_t' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
      if (I && (I % FB.ByteGroupSize) == 0) {
          ^
          ( != 0u)
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:434:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(BlockCharWidth >= CharsPrinted);
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:440:27: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (isPrint(Byte))
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:442:13: warning: statement should be inside braces [readability-braces-around-statements]
        else
            ^
             {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:450:26: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (LineIndex < Size)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:457:21: warning: invalid case style for function 'write_padding' [readability-identifier-naming]
static raw_ostream &write_padding(raw_ostream &OS, unsigned NumChars) {
                    ^~~~~~~~~~~~~~
                    writePadding
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:465:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NumChars < array_lengthof(Chars))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:466:21: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    return OS.write(Chars, NumChars);
                    ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:470:36: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
                                   (unsigned)array_lengthof(Chars)-1);
                                   ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:471:14: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    OS.write(Chars, NumToWrite);
             ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:483:27: warning: invalid case style for function 'write_zeros' [readability-identifier-naming]
raw_ostream &raw_ostream::write_zeros(unsigned NumZeros) {
                          ^~~~~~~~~~~~
                          writeZeros
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:501:55: warning: non-const reference parameter 'EC', make it const or use a pointer [google-runtime-references]
static int getFD(StringRef Filename, std::error_code &EC,
                                                      ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:504:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((Access & sys::fs::FA_Write) &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:513:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!(Flags & sys::fs::OF_Text))
        ~^                         ~
                                    == 0u
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:513:37: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!(Flags & sys::fs::OF_Text))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:519:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Access & sys::fs::FA_Read)
      ^~~~~~                   ~
      (                        ) != 0u
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:519:33: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Access & sys::fs::FA_Read)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:520:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    EC = sys::fs::openFileForReadWrite(Filename, FD, Disp, Flags);
         ^
../include/llvm/Support/FileSystem.h:971:45: note: default parameter was declared here
                                            unsigned Mode = 0666) {
                                            ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:521:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:522:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    EC = sys::fs::openFileForWrite(Filename, FD, Disp, Flags);
         ^
../include/llvm/Support/FileSystem.h:929:45: note: default parameter was declared here
                 OpenFlags Flags = OF_None, unsigned Mode = 0666) {
                                            ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:523:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:551:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    : raw_fd_ostream(getFD(Filename, EC, Disp, Access, Flags), true) {}
      ^
../include/llvm/Support/raw_ostream.h:422:44: note: default parameter was declared here
  raw_fd_ostream(int fd, bool shouldClose, bool unbuffered=false);
                                           ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:555:36: warning: invalid case style for parameter 'fd' [readability-identifier-naming]
raw_fd_ostream::raw_fd_ostream(int fd, bool shouldClose, bool unbuffered)
                                   ^~~
                                   Fd
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:555:45: warning: invalid case style for parameter 'shouldClose' [readability-identifier-naming]
raw_fd_ostream::raw_fd_ostream(int fd, bool shouldClose, bool unbuffered)
                                            ^~~~~~~~~~~~
                                            ShouldClose
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:555:63: warning: invalid case style for parameter 'unbuffered' [readability-identifier-naming]
raw_fd_ostream::raw_fd_ostream(int fd, bool shouldClose, bool unbuffered)
                                                              ^~~~~~~~~~~
                                                              Unbuffered
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:568:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FD <= STDERR_FILENO)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:578:9: warning: invalid case style for variable 'loc' [readability-identifier-naming]
  off_t loc = ::lseek(FD, 0, SEEK_CUR);
        ^~~
        Loc
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:585:28: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  SupportsSeeking = loc != (off_t)-1;
                           ^~~~~~~~ ~
                           static_cast<off_t>( )
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:587:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!SupportsSeeking)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:589:7: warning: statement should be inside braces [google-readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:597:65: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (auto EC = sys::Process::SafelyCloseFileDescriptor(FD))
                                                                ^
                                                                 {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:614:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (has_error())
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:616:24: warning: argument name 'GenCrashDiag' in comment does not match parameter name 'gen_crash_diag' [bugprone-argument-comment]
                       /*GenCrashDiag=*/false);
                       ^~~~~~~~~~~~~~~~~~~~~~
                       /*gen_crash_diag=*/
../include/llvm/Support/ErrorHandling.h:75:54: note: 'gen_crash_diag' declared here
                                                bool gen_crash_diag = true);
                                                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:670:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(FD >= 0 && "File already closed.");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:694:13: warning: invalid case style for variable 'ret' [readability-identifier-naming]
    ssize_t ret = ::write(FD, Ptr, ChunkSize);
            ^~~
            Ret
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:720:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    Ptr += ret;
        ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:726:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(ShouldClose);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:729:61: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = sys::Process::SafelyCloseFileDescriptor(FD))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:734:40: warning: invalid case style for parameter 'off' [readability-identifier-naming]
uint64_t raw_fd_ostream::seek(uint64_t off) {
                                       ^~~~
                                       Off
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:735:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(SupportsSeeking && "Stream does not support seeking!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:744:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  if (pos == (uint64_t)-1)
             ^~~~~~~~~~~ ~
             static_cast<uint64_t>( )
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:744:27: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (pos == (uint64_t)-1)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:769:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(FD >= 0 && "File not yet open!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:770:3: warning: uninitialized record type: 'statbuf' [cppcoreguidelines-pro-type-member-init]
  struct stat statbuf;
  ^                  ~
                     {}
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:770:15: warning: invalid case style for variable 'statbuf' [readability-identifier-naming]
  struct stat statbuf;
              ^~~~~~~~
              Statbuf
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:771:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (fstat(FD, &statbuf) != 0)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:777:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (S_ISCHR(statbuf.st_mode) && isatty(FD))
      ^
/usr/include/x86_64-linux-gnu/sys/stat.h:126:24: note: expanded from macro 'S_ISCHR'
#define S_ISCHR(mode)    __S_ISTYPE((mode), __S_IFCHR)
                         ^
/usr/include/x86_64-linux-gnu/sys/stat.h:123:34: note: expanded from macro '__S_ISTYPE'
#define __S_ISTYPE(mode, mask)  (((mode) & __S_IFMT) == (mask))
                                  ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:777:35: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (S_ISCHR(statbuf.st_mode) && isatty(FD))
                                  ^~~~~~    ~
                                  (          != 0)
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:777:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (S_ISCHR(statbuf.st_mode) && isatty(FD))
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:786:30: warning: default arguments on virtual or override methods are prohibited [google-default-arguments]
raw_ostream &raw_fd_ostream::changeColor(enum Colors colors, bool bold,
                             ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:786:54: warning: invalid case style for parameter 'colors' [readability-identifier-naming]
raw_ostream &raw_fd_ostream::changeColor(enum Colors colors, bool bold,
                                                     ^~~~~~~
                                                     Colors
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:786:67: warning: invalid case style for parameter 'bold' [readability-identifier-naming]
raw_ostream &raw_fd_ostream::changeColor(enum Colors colors, bool bold,
                                                                  ^~~~~
                                                                  Bold
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:787:47: warning: invalid case style for parameter 'bg' [readability-identifier-naming]
                                         bool bg) {
                                              ^~~
                                              Bg
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:788:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (sys::Process::ColorNeedsFlush())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:790:15: warning: invalid case style for variable 'colorcode' [readability-identifier-naming]
  const char *colorcode =
              ^~~~~~~~~
              Colorcode
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:793:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (colorcode) {
      ^        ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:794:12: warning: invalid case style for variable 'len' [readability-identifier-naming]
    size_t len = strlen(colorcode);
           ^~~
           Len
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:803:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (sys::Process::ColorNeedsFlush())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:805:15: warning: invalid case style for variable 'colorcode' [readability-identifier-naming]
  const char *colorcode = sys::Process::ResetColor();
              ^~~~~~~~~
              Colorcode
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:806:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (colorcode) {
      ^        ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:807:12: warning: invalid case style for variable 'len' [readability-identifier-naming]
    size_t len = strlen(colorcode);
           ^~~
           Len
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:816:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (sys::Process::ColorNeedsFlush())
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:818:15: warning: invalid case style for variable 'colorcode' [readability-identifier-naming]
  const char *colorcode = sys::Process::OutputReverse();
              ^~~~~~~~~
              Colorcode
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:819:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (colorcode) {
      ^        ~
                != nullptr
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:820:12: warning: invalid case style for variable 'len' [readability-identifier-naming]
    size_t len = strlen(colorcode);
           ^~~
           Len
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:848:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!EC);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:885:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  OS.append(Ptr, Ptr + Size);
                     ^
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:906:47: warning: parameter 'Ptr' is unused [misc-unused-parameters]
void raw_null_ostream::write_impl(const char *Ptr, size_t Size) {
                                              ^~~~
                                               /*Ptr*/
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:906:59: warning: parameter 'Size' is unused [misc-unused-parameters]
void raw_null_ostream::write_impl(const char *Ptr, size_t Size) {
                                                          ^~~~~
                                                           /*Size*/
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:913:48: warning: parameter 'Ptr' is unused [misc-unused-parameters]
void raw_null_ostream::pwrite_impl(const char *Ptr, size_t Size,
                                               ^~~~
                                                /*Ptr*/
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:913:60: warning: parameter 'Size' is unused [misc-unused-parameters]
void raw_null_ostream::pwrite_impl(const char *Ptr, size_t Size,
                                                           ^~~~~
                                                            /*Size*/
/home/jonas/opt/llvm/lib/Support/raw_ostream.cpp:914:45: warning: parameter 'Offset' is unused [misc-unused-parameters]
                                   uint64_t Offset) {}
                                            ^~~~~~~
                                             /*Offset*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:38:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^        ~~~~~~~~~~~~~
         "regex_impl.h"
/home/jonas/opt/llvm/lib/Support/regcomp.c:47:1: warning: #includes are not sorted properly [llvm-include-order]
#include "regutils.h"
^        ~~~~~~~~~~~~
         "regex2.h"
/home/jonas/opt/llvm/lib/Support/regcomp.c:54:14: warning: invalid case style for member 'name' [readability-identifier-naming]
        const char *name;
                    ^~~~~
                    Name
/home/jonas/opt/llvm/lib/Support/regcomp.c:55:14: warning: invalid case style for member 'chars' [readability-identifier-naming]
        const char *chars;
                    ^~~~~~
                    Chars
/home/jonas/opt/llvm/lib/Support/regcomp.c:56:14: warning: invalid case style for member 'multis' [readability-identifier-naming]
        const char *multis;
                    ^~~~~~~
                    Multis
/home/jonas/opt/llvm/lib/Support/regcomp.c:57:3: warning: invalid case style for variable 'cclasses' [readability-identifier-naming]
} cclasses[] = {
  ^~~~~~~~~
  Cclasses
/home/jonas/opt/llvm/lib/Support/regcomp.c:86:14: warning: invalid case style for member 'name' [readability-identifier-naming]
        const char *name;
                    ^~~~~
                    Name
/home/jonas/opt/llvm/lib/Support/regcomp.c:87:7: warning: invalid case style for member 'code' [readability-identifier-naming]
        char code;
             ^~~~~
             Code
/home/jonas/opt/llvm/lib/Support/regcomp.c:88:3: warning: invalid case style for variable 'cnames' [readability-identifier-naming]
} cnames[] = {
  ^~~~~~~
  Cnames
/home/jonas/opt/llvm/lib/Support/regcomp.c:192:8: warning: invalid case style for member 'next' [readability-identifier-naming]
        char *next;             /* next character in RE */
              ^~~~~
              Next
/home/jonas/opt/llvm/lib/Support/regcomp.c:193:8: warning: invalid case style for member 'end' [readability-identifier-naming]
        char *end;              /* end of string (-> NUL normally) */
              ^~~~
              End
/home/jonas/opt/llvm/lib/Support/regcomp.c:194:6: warning: invalid case style for member 'error' [readability-identifier-naming]
        int error;              /* has an error been seen? */
            ^~~~~~
            Error
/home/jonas/opt/llvm/lib/Support/regcomp.c:195:7: warning: invalid case style for member 'strip' [readability-identifier-naming]
        sop *strip;             /* malloced strip */
             ^~~~~~
             Strip
/home/jonas/opt/llvm/lib/Support/regcomp.c:196:8: warning: invalid case style for member 'ssize' [readability-identifier-naming]
        sopno ssize;            /* malloced strip size (allocated) */
              ^~~~~~
              Ssize
/home/jonas/opt/llvm/lib/Support/regcomp.c:197:8: warning: invalid case style for member 'slen' [readability-identifier-naming]
        sopno slen;             /* malloced strip length (used) */
              ^~~~~
              Slen
/home/jonas/opt/llvm/lib/Support/regcomp.c:198:6: warning: invalid case style for member 'ncsalloc' [readability-identifier-naming]
        int ncsalloc;           /* number of csets allocated */
            ^~~~~~~~~
            Ncsalloc
/home/jonas/opt/llvm/lib/Support/regcomp.c:199:18: warning: invalid case style for member 'g' [readability-identifier-naming]
        struct re_guts *g;
                        ^~
                        G
/home/jonas/opt/llvm/lib/Support/regcomp.c:201:8: warning: invalid case style for member 'pbegin' [readability-identifier-naming]
        sopno pbegin[NPAREN];   /* -> ( ([0] unused) */
              ^~~~~~~
              Pbegin
/home/jonas/opt/llvm/lib/Support/regcomp.c:202:8: warning: invalid case style for member 'pend' [readability-identifier-naming]
        sopno pend[NPAREN];     /* -> ) ([0] unused) */
              ^~~~~
              Pend
/home/jonas/opt/llvm/lib/Support/regcomp.c:205:13: warning: invalid case style for function 'p_ere' [readability-identifier-naming]
static void p_ere(struct parse *, int);
            ^~~~~~
            pEre
/home/jonas/opt/llvm/lib/Support/regcomp.c:205:33: warning: all parameters should be named in a function [readability-named-parameter]
static void p_ere(struct parse *, int);
                                ^    ~
                                 /*p*/  /*stop*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:206:13: warning: invalid case style for function 'p_ere_exp' [readability-identifier-naming]
static void p_ere_exp(struct parse *);
            ^~~~~~~~~~
            pEreExp
/home/jonas/opt/llvm/lib/Support/regcomp.c:206:37: warning: all parameters should be named in a function [readability-named-parameter]
static void p_ere_exp(struct parse *);
                                    ^
                                     /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:207:13: warning: invalid case style for function 'p_str' [readability-identifier-naming]
static void p_str(struct parse *);
            ^~~~~~
            pStr
/home/jonas/opt/llvm/lib/Support/regcomp.c:207:33: warning: all parameters should be named in a function [readability-named-parameter]
static void p_str(struct parse *);
                                ^
                                 /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:208:13: warning: invalid case style for function 'p_bre' [readability-identifier-naming]
static void p_bre(struct parse *, int, int);
            ^~~~~~
            pBre
/home/jonas/opt/llvm/lib/Support/regcomp.c:208:33: warning: all parameters should be named in a function [readability-named-parameter]
static void p_bre(struct parse *, int, int);
                                ^    ~    ~
                                 /*p*/  /*end1*/  /*end2*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:209:12: warning: invalid case style for function 'p_simp_re' [readability-identifier-naming]
static int p_simp_re(struct parse *, int);
           ^~~~~~~~~~
           pSimpRe
/home/jonas/opt/llvm/lib/Support/regcomp.c:209:36: warning: all parameters should be named in a function [readability-named-parameter]
static int p_simp_re(struct parse *, int);
                                   ^    ~
                                    /*p*/  /*starordinary*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:210:12: warning: invalid case style for function 'p_count' [readability-identifier-naming]
static int p_count(struct parse *);
           ^~~~~~~~
           pCount
/home/jonas/opt/llvm/lib/Support/regcomp.c:210:34: warning: all parameters should be named in a function [readability-named-parameter]
static int p_count(struct parse *);
                                 ^
                                  /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:211:13: warning: invalid case style for function 'p_bracket' [readability-identifier-naming]
static void p_bracket(struct parse *);
            ^~~~~~~~~~
            pBracket
/home/jonas/opt/llvm/lib/Support/regcomp.c:211:37: warning: all parameters should be named in a function [readability-named-parameter]
static void p_bracket(struct parse *);
                                    ^
                                     /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:212:13: warning: invalid case style for function 'p_b_term' [readability-identifier-naming]
static void p_b_term(struct parse *, cset *);
            ^~~~~~~~~
            pBTerm
/home/jonas/opt/llvm/lib/Support/regcomp.c:212:36: warning: all parameters should be named in a function [readability-named-parameter]
static void p_b_term(struct parse *, cset *);
                                   ^       ~
                                    /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:213:13: warning: invalid case style for function 'p_b_cclass' [readability-identifier-naming]
static void p_b_cclass(struct parse *, cset *);
            ^~~~~~~~~~~
            pBCclass
/home/jonas/opt/llvm/lib/Support/regcomp.c:213:38: warning: all parameters should be named in a function [readability-named-parameter]
static void p_b_cclass(struct parse *, cset *);
                                     ^       ~
                                      /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:214:13: warning: invalid case style for function 'p_b_eclass' [readability-identifier-naming]
static void p_b_eclass(struct parse *, cset *);
            ^~~~~~~~~~~
            pBEclass
/home/jonas/opt/llvm/lib/Support/regcomp.c:214:38: warning: all parameters should be named in a function [readability-named-parameter]
static void p_b_eclass(struct parse *, cset *);
                                     ^       ~
                                      /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:215:13: warning: invalid case style for function 'p_b_symbol' [readability-identifier-naming]
static char p_b_symbol(struct parse *);
            ^~~~~~~~~~~
            pBSymbol
/home/jonas/opt/llvm/lib/Support/regcomp.c:215:38: warning: all parameters should be named in a function [readability-named-parameter]
static char p_b_symbol(struct parse *);
                                     ^
                                      /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:216:13: warning: invalid case style for function 'p_b_coll_elem' [readability-identifier-naming]
static char p_b_coll_elem(struct parse *, int);
            ^~~~~~~~~~~~~~
            pBCollElem
/home/jonas/opt/llvm/lib/Support/regcomp.c:216:41: warning: all parameters should be named in a function [readability-named-parameter]
static char p_b_coll_elem(struct parse *, int);
                                        ^    ~
                                         /*p*/  /*endc*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:217:26: warning: all parameters should be named in a function [readability-named-parameter]
static char othercase(int);
                         ^
                          /*ch*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:218:37: warning: all parameters should be named in a function [readability-named-parameter]
static void bothcases(struct parse *, int);
                                    ^    ~
                                     /*p*/  /*ch*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:219:36: warning: all parameters should be named in a function [readability-named-parameter]
static void ordinary(struct parse *, int);
                                   ^    ~
                                    /*p*/  /*ch*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:220:38: warning: all parameters should be named in a function [readability-named-parameter]
static void nonnewline(struct parse *);
                                     ^
                                      /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:221:34: warning: all parameters should be named in a function [readability-named-parameter]
static void repeat(struct parse *, sopno, int, int);
                                 ^      ~    ~    ~
                                  /*p*/  /*start*/  /*from*/  /*to*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:222:33: warning: all parameters should be named in a function [readability-named-parameter]
static int seterr(struct parse *, int);
                                ^    ~
                                 /*p*/  /*e*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:223:37: warning: all parameters should be named in a function [readability-named-parameter]
static cset *allocset(struct parse *);
                                    ^
                                     /*p*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:224:35: warning: all parameters should be named in a function [readability-named-parameter]
static void freeset(struct parse *, cset *);
                                  ^       ~
                                   /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:225:36: warning: all parameters should be named in a function [readability-named-parameter]
static int freezeset(struct parse *, cset *);
                                   ^       ~
                                    /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:226:34: warning: all parameters should be named in a function [readability-named-parameter]
static int firstch(struct parse *, cset *);
                                 ^       ~
                                  /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:227:30: warning: all parameters should be named in a function [readability-named-parameter]
static int nch(struct parse *, cset *);
                             ^       ~
                              /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:228:33: warning: all parameters should be named in a function [readability-named-parameter]
static void mcadd(struct parse *, cset *, const char *);
                                ^       ~             ~
                                 /*p*/   /*cs*/        /*cp*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:229:36: warning: all parameters should be named in a function [readability-named-parameter]
static void mcinvert(struct parse *, cset *);
                                   ^       ~
                                    /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:230:34: warning: all parameters should be named in a function [readability-named-parameter]
static void mccase(struct parse *, cset *);
                                 ^       ~
                                  /*p*/   /*cs*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:231:37: warning: all parameters should be named in a function [readability-named-parameter]
static int isinsets(struct re_guts *, int);
                                    ^    ~
                                     /*g*/  /*c*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:232:37: warning: all parameters should be named in a function [readability-named-parameter]
static int samesets(struct re_guts *, int, int);
                                    ^    ~    ~
                                     /*g*/  /*c1*/  /*c2*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:233:38: warning: all parameters should be named in a function [readability-named-parameter]
static void categorize(struct parse *, struct re_guts *);
                                     ^                 ~
                                      /*p*/             /*g*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:234:33: warning: all parameters should be named in a function [readability-named-parameter]
static sopno dupl(struct parse *, sopno, sopno);
                                ^      ~      ~
                                 /*p*/  /*start*/  /*finish*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:235:34: warning: all parameters should be named in a function [readability-named-parameter]
static void doemit(struct parse *, sop, size_t);
                                 ^    ~       ~
                                  /*p*/  /*op*/  /*opnd*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:236:36: warning: all parameters should be named in a function [readability-named-parameter]
static void doinsert(struct parse *, sop, size_t, sopno);
                                   ^    ~       ~      ~
                                    /*p*/  /*op*/  /*opnd*/  /*pos*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:237:33: warning: all parameters should be named in a function [readability-named-parameter]
static void dofwd(struct parse *, sopno, sop);
                                ^      ~    ~
                                 /*p*/  /*pos*/  /*value*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:238:35: warning: all parameters should be named in a function [readability-named-parameter]
static void enlarge(struct parse *, sopno);
                                  ^      ~
                                   /*p*/  /*size*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:239:37: warning: all parameters should be named in a function [readability-named-parameter]
static void stripsnug(struct parse *, struct re_guts *);
                                    ^                 ~
                                     /*p*/             /*g*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:240:36: warning: all parameters should be named in a function [readability-named-parameter]
static void findmust(struct parse *, struct re_guts *);
                                   ^                 ~
                                    /*p*/             /*g*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:241:38: warning: all parameters should be named in a function [readability-named-parameter]
static sopno pluscount(struct parse *, struct re_guts *);
                                     ^                 ~
                                      /*p*/             /*g*/
/home/jonas/opt/llvm/lib/Support/regcomp.c:243:13: warning: invalid case style for variable 'nuls' [readability-identifier-naming]
static char nuls[10];           /* place to point scanner in event of error */
            ^~~~~
            Nuls
/home/jonas/opt/llvm/lib/Support/regcomp.c:269:43: warning: macro argument should be enclosed in parentheses [misc-macro-parentheses]
#define ASTERN(sop, pos)        EMIT(sop, HERE()-pos)
                                                 ^~~~
                                                 ()
/home/jonas/opt/llvm/lib/Support/regcomp.c:292:1: warning: invalid case style for function 'llvm_regcomp' [readability-identifier-naming]
llvm_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)
^~~~~~~~~~~~~
llvmRegcomp
/home/jonas/opt/llvm/lib/Support/regcomp.c:292:28: warning: invalid case style for parameter 'preg' [readability-identifier-naming]
llvm_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)
                           ^~~~~
                           Preg
/home/jonas/opt/llvm/lib/Support/regcomp.c:292:46: warning: invalid case style for parameter 'pattern' [readability-identifier-naming]
llvm_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)
                                             ^~~~~~~~
                                             Pattern
/home/jonas/opt/llvm/lib/Support/regcomp.c:292:59: warning: invalid case style for parameter 'cflags' [readability-identifier-naming]
llvm_regcomp(llvm_regex_t *preg, const char *pattern, int cflags)
                                                          ^~~~~~~
                                                          Cflags
/home/jonas/opt/llvm/lib/Support/regcomp.c:294:15: warning: invalid case style for variable 'pa' [readability-identifier-naming]
        struct parse pa;
                     ^~~
                     Pa
/home/jonas/opt/llvm/lib/Support/regcomp.c:295:18: warning: invalid case style for variable 'g' [readability-identifier-naming]
        struct re_guts *g;
                        ^~
                        G
/home/jonas/opt/llvm/lib/Support/regcomp.c:297:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:298:9: warning: invalid case style for variable 'len' [readability-identifier-naming]
        size_t len;
               ^~~~
               Len
/home/jonas/opt/llvm/lib/Support/regcomp.c:305:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        cflags = GOODFLAGS(cflags);
                 ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:302:24: note: expanded from macro 'GOODFLAGS'
#       define  GOODFLAGS(f)    ((f)&~REG_DUMP)
                                 ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:305:11: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
        cflags = GOODFLAGS(cflags);
                 ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:302:28: note: expanded from macro 'GOODFLAGS'
#       define  GOODFLAGS(f)    ((f)&~REG_DUMP)
                                     ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:306:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if ((cflags&REG_EXTENDED) && (cflags&REG_NOSPEC))
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:306:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if ((cflags&REG_EXTENDED) && (cflags&REG_NOSPEC))
                                      ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:306:51: warning: statement should be inside braces [readability-braces-around-statements]
        if ((cflags&REG_EXTENDED) && (cflags&REG_NOSPEC))
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:309:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (cflags&REG_PEND) {
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:310:31: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (preg->re_endp < pattern)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:313:8: warning: statement should be inside braces [hicpp-braces-around-statements]
        } else
              ^
               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:314:16: warning: redundant cast to the same type [google-readability-casting]
                len = strlen((const char *)pattern);
                             ^~~~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/regcomp.c:319:16: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g == NULL)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regcomp.c:358:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (cflags&REG_EXTENDED)
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:358:26: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (cflags&REG_EXTENDED)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:360:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        else if (cflags&REG_NOSPEC)
                 ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:360:29: warning: statement should be inside braces [google-readability-braces-around-statements]
        else if (cflags&REG_NOSPEC)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/regcomp.c:362:6: warning: statement should be inside braces [google-readability-braces-around-statements]
        else
            ^
             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:372:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        g->magic = MAGIC2;
                   ^
../lib/Support/regex2.h:134:19: note: expanded from macro 'MAGIC2'
#               define  MAGIC2  ((('R'^0200)<<8)|'E')
                                 ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:375:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        preg->re_magic = MAGIC1;
                         ^
../lib/Support/regex2.h:47:18: note: expanded from macro 'MAGIC1'
#define MAGIC1  ((('r'^0200)<<8) | 'e')
                  ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:378:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (g->iflags&REGEX_BAD)
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:378:26: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g->iflags&REGEX_BAD)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:383:20: warning: statement should be inside braces [readability-braces-around-statements]
        if (p->error != 0)      /* lose */
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:392:1: warning: invalid case style for function 'p_ere' [readability-identifier-naming]
p_ere(struct parse *p, int stop)        /* character this ERE should end at */
^~~~~~
pEre
/home/jonas/opt/llvm/lib/Support/regcomp.c:392:28: warning: invalid case style for parameter 'stop' [readability-identifier-naming]
p_ere(struct parse *p, int stop)        /* character this ERE should end at */
                           ^~~~~
                           Stop
/home/jonas/opt/llvm/lib/Support/regcomp.c:394:7: warning: invalid case style for variable 'c' [readability-identifier-naming]
        char c;
             ^~
             C
/home/jonas/opt/llvm/lib/Support/regcomp.c:395:8: warning: invalid case style for variable 'prevback' [readability-identifier-naming]
        sopno prevback = 0;
              ^~~~~~~~
              Prevback
/home/jonas/opt/llvm/lib/Support/regcomp.c:396:8: warning: invalid case style for variable 'prevfwd' [readability-identifier-naming]
        sopno prevfwd = 0;
              ^~~~~~~
              Prevfwd
/home/jonas/opt/llvm/lib/Support/regcomp.c:397:8: warning: invalid case style for variable 'conc' [readability-identifier-naming]
        sopno conc;
              ^~~~~
              Conc
/home/jonas/opt/llvm/lib/Support/regcomp.c:398:6: warning: invalid case style for variable 'first' [readability-identifier-naming]
        int first = 1;          /* is this the first alternative? */
            ^~~~~
            First
/home/jonas/opt/llvm/lib/Support/regcomp.c:403:53: warning: statement should be inside braces [google-readability-braces-around-statements]
                while (MORE() && (c = PEEK()) != '|' && c != stop)
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/regcomp.c:407:17: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (!EAT('|'))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:435:1: warning: invalid case style for function 'p_ere_exp' [readability-identifier-naming]
p_ere_exp(struct parse *p)
^~~~~~~~~~
pEreExp
/home/jonas/opt/llvm/lib/Support/regcomp.c:437:7: warning: invalid case style for variable 'c' [readability-identifier-naming]
        char c;
             ^~
             C
/home/jonas/opt/llvm/lib/Support/regcomp.c:438:8: warning: invalid case style for variable 'pos' [readability-identifier-naming]
        sopno pos;
              ^~~~
              Pos
/home/jonas/opt/llvm/lib/Support/regcomp.c:439:6: warning: invalid case style for variable 'count' [readability-identifier-naming]
        int count;
            ^~~~~~
            Count
/home/jonas/opt/llvm/lib/Support/regcomp.c:440:6: warning: invalid case style for variable 'count2' [readability-identifier-naming]
        int count2;
            ^~~~~~~
            Count2
/home/jonas/opt/llvm/lib/Support/regcomp.c:441:6: warning: invalid case style for variable 'backrefnum' [readability-identifier-naming]
        int backrefnum;
            ^~~~~~~~~~~
            Backrefnum
/home/jonas/opt/llvm/lib/Support/regcomp.c:442:8: warning: invalid case style for variable 'subno' [readability-identifier-naming]
        sopno subno;
              ^~~~~~
              Subno
/home/jonas/opt/llvm/lib/Support/regcomp.c:443:6: warning: invalid case style for variable 'wascaret' [readability-identifier-naming]
        int wascaret = 0;
            ^~~~~~~~
            Wascaret
/home/jonas/opt/llvm/lib/Support/regcomp.c:454:22: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (subno < NPAREN)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/regcomp.c:457:17: warning: statement should be inside braces [readability-braces-around-statements]
                if (!SEE(')'))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:498:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if (p->g->cflags&REG_NEWLINE)
                    ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:498:32: warning: statement should be inside braces [readability-braces-around-statements]
                if (p->g->cflags&REG_NEWLINE)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/regcomp.c:500:7: warning: statement should be inside braces [hicpp-braces-around-statements]
                else
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/regcomp.c:546:14: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (!MORE())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/regcomp.c:551:54: warning: statement should be inside braces [readability-braces-around-statements]
                                (c == '{' && MORE2() && isdigit((uch)PEEK2())) ))
                                                                                 ^
                                                                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:583:10: warning: statement should be inside braces [google-readability-braces-around-statements]
                        } else          /* single number with comma */
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:585:9: warning: statement should be inside braces [hicpp-braces-around-statements]
                } else          /* just a single number */
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regcomp.c:589:35: warning: statement should be inside braces [hicpp-braces-around-statements]
                        while (MORE() && PEEK() != '}')
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/regcomp.c:597:14: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (!MORE())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/regcomp.c:601:55: warning: statement should be inside braces [google-readability-braces-around-statements]
                                (c == '{' && MORE2() && isdigit((uch)PEEK2())) ) )
                                                                                  ^
                                                                                   {
/home/jonas/opt/llvm/lib/Support/regcomp.c:610:1: warning: invalid case style for function 'p_str' [readability-identifier-naming]
p_str(struct parse *p)
^~~~~~
pStr
/home/jonas/opt/llvm/lib/Support/regcomp.c:613:16: warning: statement should be inside braces [hicpp-braces-around-statements]
        while (MORE())
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regcomp.c:628:1: warning: invalid case style for function 'p_bre' [readability-identifier-naming]
p_bre(struct parse *p,
^~~~~~
pBre
/home/jonas/opt/llvm/lib/Support/regcomp.c:629:9: warning: invalid case style for parameter 'end1' [readability-identifier-naming]
    int end1,           /* first terminating character */
        ^~~~~
        End1
/home/jonas/opt/llvm/lib/Support/regcomp.c:630:9: warning: invalid case style for parameter 'end2' [readability-identifier-naming]
    int end2)           /* second terminating character */
        ^~~~~
        End2
/home/jonas/opt/llvm/lib/Support/regcomp.c:632:8: warning: invalid case style for variable 'start' [readability-identifier-naming]
        sopno start = HERE();
              ^~~~~
              Start
/home/jonas/opt/llvm/lib/Support/regcomp.c:633:6: warning: invalid case style for variable 'first' [readability-identifier-naming]
        int first = 1;                  /* first subexpression? */
            ^~~~~
            First
/home/jonas/opt/llvm/lib/Support/regcomp.c:634:6: warning: invalid case style for variable 'wasdollar' [readability-identifier-naming]
        int wasdollar = 0;
            ^~~~~~~~~
            Wasdollar
/home/jonas/opt/llvm/lib/Support/regcomp.c:659:1: warning: invalid case style for function 'p_simp_re' [readability-identifier-naming]
p_simp_re(struct parse *p,
^~~~~~~~~~
pSimpRe
/home/jonas/opt/llvm/lib/Support/regcomp.c:660:9: warning: invalid case style for parameter 'starordinary' [readability-identifier-naming]
    int starordinary)           /* is a leading * an ordinary character? */
        ^~~~~~~~~~~~~
        Starordinary
/home/jonas/opt/llvm/lib/Support/regcomp.c:662:6: warning: invalid case style for variable 'c' [readability-identifier-naming]
        int c;
            ^~
            C
/home/jonas/opt/llvm/lib/Support/regcomp.c:663:6: warning: invalid case style for variable 'count' [readability-identifier-naming]
        int count;
            ^~~~~~
            Count
/home/jonas/opt/llvm/lib/Support/regcomp.c:664:6: warning: invalid case style for variable 'count2' [readability-identifier-naming]
        int count2;
            ^~~~~~~
            Count2
/home/jonas/opt/llvm/lib/Support/regcomp.c:665:8: warning: invalid case style for variable 'pos' [readability-identifier-naming]
        sopno pos;
              ^~~~
              Pos
/home/jonas/opt/llvm/lib/Support/regcomp.c:666:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:667:8: warning: invalid case style for variable 'subno' [readability-identifier-naming]
        sopno subno;
              ^~~~~~
              Subno
/home/jonas/opt/llvm/lib/Support/regcomp.c:676:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                c = BACKSL | GETNEXT();
                    ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:680:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if (p->g->cflags&REG_NEWLINE)
                    ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:680:32: warning: statement should be inside braces [readability-braces-around-statements]
                if (p->g->cflags&REG_NEWLINE)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/regcomp.c:682:7: warning: statement should be inside braces [google-readability-braces-around-statements]
                else
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/regcomp.c:688:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'{':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:18: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                         ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:691:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'(':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:18: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                         ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:694:22: warning: statement should be inside braces [readability-braces-around-statements]
                if (subno < NPAREN)
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/regcomp.c:698:36: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (MORE() && !SEETWO('\\', ')'))
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:707:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|')':        /* should not get here -- must be user */
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:708:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'}':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:18: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                         ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:711:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'1':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:18: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                         ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:712:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'2':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:713:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'3':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:714:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'4':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:715:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'5':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:716:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'6':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:717:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'7':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:718:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'8':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:719:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        case BACKSL|'9':
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:17: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:720:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                i = (c&~BACKSL) - '0';
                     ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:720:10: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
                i = (c&~BACKSL) - '0';
                       ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:720:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                i = (c&~BACKSL) - '0';
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:668:18: note: expanded from macro 'BACKSL'
#       define  BACKSL  (1<<CHAR_BIT)
                         ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:730:9: warning: statement should be inside braces [hicpp-braces-around-statements]
                } else
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regcomp.c:754:10: warning: statement should be inside braces [hicpp-braces-around-statements]
                        } else          /* single number with comma */
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:756:9: warning: statement should be inside braces [hicpp-braces-around-statements]
                } else          /* just a single number */
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regcomp.c:760:40: warning: statement should be inside braces [google-readability-braces-around-statements]
                        while (MORE() && !SEETWO('\\', '}'))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:765:22: warning: statement should be inside braces [google-readability-braces-around-statements]
        } else if (c == '$')    /* $ (but not \$) ends it */
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:775:1: warning: invalid case style for function 'p_count' [readability-identifier-naming]
p_count(struct parse *p)
^~~~~~~~
pCount
/home/jonas/opt/llvm/lib/Support/regcomp.c:777:6: warning: invalid case style for variable 'count' [readability-identifier-naming]
        int count = 0;
            ^~~~~
            Count
/home/jonas/opt/llvm/lib/Support/regcomp.c:778:6: warning: invalid case style for variable 'ndigits' [readability-identifier-naming]
        int ndigits = 0;
            ^~~~~~~
            Ndigits
/home/jonas/opt/llvm/lib/Support/regcomp.c:796:1: warning: invalid case style for function 'p_bracket' [readability-identifier-naming]
p_bracket(struct parse *p)
^~~~~~~~~~
pBracket
/home/jonas/opt/llvm/lib/Support/regcomp.c:798:8: warning: invalid case style for variable 'cs' [readability-identifier-naming]
        cset *cs;
              ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:799:6: warning: invalid case style for variable 'invert' [readability-identifier-naming]
        int invert = 0;
            ^~~~~~
            Invert
/home/jonas/opt/llvm/lib/Support/regcomp.c:818:15: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (EAT('^'))
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:820:15: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (EAT(']'))
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:822:20: warning: statement should be inside braces [google-readability-braces-around-statements]
        else if (EAT('-'))
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:824:54: warning: statement should be inside braces [google-readability-braces-around-statements]
        while (MORE() && PEEK() != ']' && !SEETWO('-', ']'))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:826:15: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (EAT('-'))
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:835:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (p->g->cflags&REG_ICASE) {
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:836:7: warning: invalid case style for variable 'i' [readability-identifier-naming]
                int i;
                    ^~
                    I
/home/jonas/opt/llvm/lib/Support/regcomp.c:837:7: warning: invalid case style for variable 'ci' [readability-identifier-naming]
                int ci;
                    ^~~
                    Ci
/home/jonas/opt/llvm/lib/Support/regcomp.c:839:44: warning: statement should be inside braces [google-readability-braces-around-statements]
                for (i = p->g->csetsize - 1; i >= 0; i--)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:842:17: warning: statement should be inside braces [google-readability-braces-around-statements]
                                if (ci != i)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:845:26: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (cs->multis != NULL)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/regcomp.c:849:7: warning: invalid case style for variable 'i' [readability-identifier-naming]
                int i;
                    ^~
                    I
/home/jonas/opt/llvm/lib/Support/regcomp.c:851:44: warning: statement should be inside braces [readability-braces-around-statements]
                for (i = p->g->csetsize - 1; i >= 0; i--)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:852:20: warning: statement should be inside braces [google-readability-braces-around-statements]
                        if (CHIN(cs, i))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:854:8: warning: statement should be inside braces [google-readability-braces-around-statements]
                        else
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:856:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if (p->g->cflags&REG_NEWLINE)
                    ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:856:32: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (p->g->cflags&REG_NEWLINE)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/regcomp.c:858:26: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (cs->multis != NULL)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/regcomp.c:867:8: warning: statement should be inside braces [hicpp-braces-around-statements]
        } else
              ^
               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:875:1: warning: invalid case style for function 'p_b_term' [readability-identifier-naming]
p_b_term(struct parse *p, cset *cs)
^~~~~~~~~
pBTerm
/home/jonas/opt/llvm/lib/Support/regcomp.c:875:33: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
p_b_term(struct parse *p, cset *cs)
                                ^~~
                                Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:877:7: warning: invalid case style for variable 'c' [readability-identifier-naming]
        char c;
             ^~
             C
/home/jonas/opt/llvm/lib/Support/regcomp.c:878:7: warning: invalid case style for variable 'start' [readability-identifier-naming]
        char start, finish;
             ^~~~~~
             Start
/home/jonas/opt/llvm/lib/Support/regcomp.c:878:14: warning: invalid case style for variable 'finish' [readability-identifier-naming]
        char start, finish;
                    ^~~~~~~
                    Finish
/home/jonas/opt/llvm/lib/Support/regcomp.c:879:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:920:17: warning: statement should be inside braces [google-readability-braces-around-statements]
                        if (EAT('-'))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:922:8: warning: statement should be inside braces [google-readability-braces-around-statements]
                        else
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:924:9: warning: statement should be inside braces [readability-braces-around-statements]
                } else
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/regcomp.c:928:36: warning: statement should be inside braces [readability-braces-around-statements]
                for (i = start; i <= finish; i++)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:938:1: warning: invalid case style for function 'p_b_cclass' [readability-identifier-naming]
p_b_cclass(struct parse *p, cset *cs)
^~~~~~~~~~~
pBCclass
/home/jonas/opt/llvm/lib/Support/regcomp.c:938:35: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
p_b_cclass(struct parse *p, cset *cs)
                                  ^~~
                                  Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:940:8: warning: invalid case style for variable 'sp' [readability-identifier-naming]
        char *sp = p->next;
              ^~
              Sp
/home/jonas/opt/llvm/lib/Support/regcomp.c:941:17: warning: invalid case style for variable 'cp' [readability-identifier-naming]
        struct cclass *cp;
                       ^~~
                       Cp
/home/jonas/opt/llvm/lib/Support/regcomp.c:942:9: warning: invalid case style for variable 'len' [readability-identifier-naming]
        size_t len;
               ^~~~
               Len
/home/jonas/opt/llvm/lib/Support/regcomp.c:943:14: warning: invalid case style for variable 'u' [readability-identifier-naming]
        const char *u;
                    ^~
                    U
/home/jonas/opt/llvm/lib/Support/regcomp.c:944:7: warning: invalid case style for variable 'c' [readability-identifier-naming]
        char c;
             ^~
             C
/home/jonas/opt/llvm/lib/Support/regcomp.c:946:40: warning: statement should be inside braces [hicpp-braces-around-statements]
        while (MORE() && isalpha((uch)PEEK()))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:949:45: warning: statement should be inside braces [hicpp-braces-around-statements]
        for (cp = cclasses; cp->name != NULL; cp++)
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/regcomp.c:950:64: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (strncmp(cp->name, sp, len) == 0 && cp->name[len] == '\0')
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/regcomp.c:959:28: warning: statement should be inside braces [readability-braces-around-statements]
        while ((c = *u++) != '\0')
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/regcomp.c:961:54: warning: statement should be inside braces [google-readability-braces-around-statements]
        for (u = cp->multis; *u != '\0'; u += strlen(u) + 1)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:971:1: warning: invalid case style for function 'p_b_eclass' [readability-identifier-naming]
p_b_eclass(struct parse *p, cset *cs)
^~~~~~~~~~~
pBEclass
/home/jonas/opt/llvm/lib/Support/regcomp.c:971:26: warning: invalid case style for parameter 'p' [readability-identifier-naming]
p_b_eclass(struct parse *p, cset *cs)
                         ^~
                         P
/home/jonas/opt/llvm/lib/Support/regcomp.c:971:35: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
p_b_eclass(struct parse *p, cset *cs)
                                  ^~~
                                  Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:973:7: warning: invalid case style for variable 'c' [readability-identifier-naming]
        char c;
             ^~
             C
/home/jonas/opt/llvm/lib/Support/regcomp.c:983:1: warning: invalid case style for function 'p_b_symbol' [readability-identifier-naming]
p_b_symbol(struct parse *p)
^~~~~~~~~~~
pBSymbol
/home/jonas/opt/llvm/lib/Support/regcomp.c:985:7: warning: invalid case style for variable 'value' [readability-identifier-naming]
        char value;
             ^~~~~~
             Value
/home/jonas/opt/llvm/lib/Support/regcomp.c:988:24: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (!EATTWO('[', '.'))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1001:1: warning: invalid case style for function 'p_b_coll_elem' [readability-identifier-naming]
p_b_coll_elem(struct parse *p,
^~~~~~~~~~~~~~
pBCollElem
/home/jonas/opt/llvm/lib/Support/regcomp.c:1002:9: warning: invalid case style for parameter 'endc' [readability-identifier-naming]
    int endc)                   /* name ended by endc,']' */
        ^~~~~
        Endc
/home/jonas/opt/llvm/lib/Support/regcomp.c:1004:8: warning: invalid case style for variable 'sp' [readability-identifier-naming]
        char *sp = p->next;
              ^~
              Sp
/home/jonas/opt/llvm/lib/Support/regcomp.c:1005:16: warning: invalid case style for variable 'cp' [readability-identifier-naming]
        struct cname *cp;
                      ^~~
                      Cp
/home/jonas/opt/llvm/lib/Support/regcomp.c:1006:9: warning: invalid case style for variable 'len' [readability-identifier-naming]
        size_t len;
               ^~~~
               Len
/home/jonas/opt/llvm/lib/Support/regcomp.c:1008:38: warning: statement should be inside braces [google-readability-braces-around-statements]
        while (MORE() && !SEETWO(endc, ']'))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1015:43: warning: statement should be inside braces [google-readability-braces-around-statements]
        for (cp = cnames; cp->name != NULL; cp++)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1016:66: warning: statement should be inside braces [readability-braces-around-statements]
                if (strncmp(cp->name, sp, len) == 0 && strlen(cp->name) == len)
                                                                               ^
                                                                                {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1018:15: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (len == 1)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1028:15: warning: invalid case style for parameter 'ch' [readability-identifier-naming]
othercase(int ch)
              ^~~
              Ch
/home/jonas/opt/llvm/lib/Support/regcomp.c:1032:18: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (isupper(ch))
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1034:2: warning: do not use 'else' after 'return' [readability-else-after-return]
        else if (islower(ch))
        ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/regcomp.c:1034:23: warning: statement should be inside braces [google-readability-braces-around-statements]
        else if (islower(ch))
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1036:6: warning: statement should be inside braces [readability-braces-around-statements]
        else                    /* peculiar, but could happen */
            ^
             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1046:25: warning: invalid case style for parameter 'p' [readability-identifier-naming]
bothcases(struct parse *p, int ch)
                        ^~
                        P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1046:32: warning: invalid case style for parameter 'ch' [readability-identifier-naming]
bothcases(struct parse *p, int ch)
                               ^~~
                               Ch
/home/jonas/opt/llvm/lib/Support/regcomp.c:1048:8: warning: invalid case style for variable 'oldnext' [readability-identifier-naming]
        char *oldnext = p->next;
              ^~~~~~~
              Oldnext
/home/jonas/opt/llvm/lib/Support/regcomp.c:1049:8: warning: invalid case style for variable 'oldend' [readability-identifier-naming]
        char *oldend = p->end;
              ^~~~~~
              Oldend
/home/jonas/opt/llvm/lib/Support/regcomp.c:1050:7: warning: invalid case style for variable 'bracket' [readability-identifier-naming]
        char bracket[3];
             ^~~~~~~~
             Bracket
/home/jonas/opt/llvm/lib/Support/regcomp.c:1069:31: warning: invalid case style for parameter 'ch' [readability-identifier-naming]
ordinary(struct parse *p, int ch)
                              ^~~
                              Ch
/home/jonas/opt/llvm/lib/Support/regcomp.c:1071:9: warning: invalid case style for variable 'cap' [readability-identifier-naming]
        cat_t *cap = p->g->categories;
               ^~~
               Cap
/home/jonas/opt/llvm/lib/Support/regcomp.c:1073:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if ((p->g->cflags&REG_ICASE) && isalpha((uch)ch) && othercase(ch) != ch)
             ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1073:74: warning: statement should be inside braces [readability-braces-around-statements]
        if ((p->g->cflags&REG_ICASE) && isalpha((uch)ch) && othercase(ch) != ch)
                                                                                ^
                                                                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1077:20: warning: statement should be inside braces [readability-braces-around-statements]
                if (cap[ch] == 0)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1088:26: warning: invalid case style for parameter 'p' [readability-identifier-naming]
nonnewline(struct parse *p)
                         ^~
                         P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1090:8: warning: invalid case style for variable 'oldnext' [readability-identifier-naming]
        char *oldnext = p->next;
              ^~~~~~~
              Oldnext
/home/jonas/opt/llvm/lib/Support/regcomp.c:1091:8: warning: invalid case style for variable 'oldend' [readability-identifier-naming]
        char *oldend = p->end;
              ^~~~~~
              Oldend
/home/jonas/opt/llvm/lib/Support/regcomp.c:1092:7: warning: invalid case style for variable 'bracket' [readability-identifier-naming]
        char bracket[4];
             ^~~~~~~~
             Bracket
/home/jonas/opt/llvm/lib/Support/regcomp.c:1111:11: warning: invalid case style for parameter 'start' [readability-identifier-naming]
    sopno start,                /* operand from here to end of strip */
          ^~~~~~
          Start
/home/jonas/opt/llvm/lib/Support/regcomp.c:1112:9: warning: invalid case style for parameter 'from' [readability-identifier-naming]
    int from,                   /* repeated from this number */
        ^~~~~
        From
/home/jonas/opt/llvm/lib/Support/regcomp.c:1113:9: warning: invalid case style for parameter 'to' [readability-identifier-naming]
    int to)                     /* to this number of times (maybe INFINITY) */
        ^~~
        To
/home/jonas/opt/llvm/lib/Support/regcomp.c:1115:8: warning: invalid case style for variable 'finish' [readability-identifier-naming]
        sopno finish = HERE();
              ^~~~~~
              Finish
/home/jonas/opt/llvm/lib/Support/regcomp.c:1120:8: warning: invalid case style for variable 'copy' [readability-identifier-naming]
        sopno copy;
              ^~~~~
              Copy
/home/jonas/opt/llvm/lib/Support/regcomp.c:1122:20: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (p->error != 0)      /* head off possible runaway recursion */
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1180:22: warning: invalid case style for parameter 'p' [readability-identifier-naming]
seterr(struct parse *p, int e)
                     ^~
                     P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1180:29: warning: invalid case style for parameter 'e' [readability-identifier-naming]
seterr(struct parse *p, int e)
                            ^~
                            E
/home/jonas/opt/llvm/lib/Support/regcomp.c:1182:20: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (p->error == 0)      /* keep earliest error condition */
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1195:6: warning: invalid case style for variable 'no' [readability-identifier-naming]
        int no = p->g->ncsets++;
            ^~
            No
/home/jonas/opt/llvm/lib/Support/regcomp.c:1196:9: warning: invalid case style for variable 'nc' [readability-identifier-naming]
        size_t nc;
               ^~~
               Nc
/home/jonas/opt/llvm/lib/Support/regcomp.c:1197:9: warning: invalid case style for variable 'nbytes' [readability-identifier-naming]
        size_t nbytes;
               ^~~~~~~
               Nbytes
/home/jonas/opt/llvm/lib/Support/regcomp.c:1198:8: warning: invalid case style for variable 'cs' [readability-identifier-naming]
        cset *cs;
              ^~~
              Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:1199:9: warning: invalid case style for variable 'css' [readability-identifier-naming]
        size_t css = (size_t)p->g->csetsize;
               ^~~
               Css
/home/jonas/opt/llvm/lib/Support/regcomp.c:1200:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1203:9: warning: invalid case style for variable 'ptr' [readability-identifier-naming]
                void *ptr;
                      ^~~~
                      Ptr
/home/jonas/opt/llvm/lib/Support/regcomp.c:1207:36: warning: statement should be inside braces [readability-braces-around-statements]
                if (nc > SIZE_MAX / sizeof(cset))
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1213:19: warning: statement should be inside braces [readability-braces-around-statements]
                if (ptr == NULL)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1218:19: warning: statement should be inside braces [readability-braces-around-statements]
                if (ptr == NULL)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1222:27: warning: statement should be inside braces [google-readability-braces-around-statements]
                for (i = 0; i < no; i++)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1228:50: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (p->g->sets == NULL || p->g->setbits == NULL)
                                                        ^
                                                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1233:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        cs->mask = 1 << ((no) % CHAR_BIT);
                   ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1254:23: warning: invalid case style for parameter 'p' [readability-identifier-naming]
freeset(struct parse *p, cset *cs)
                      ^~
                      P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1254:32: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
freeset(struct parse *p, cset *cs)
                               ^~~
                               Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:1256:9: warning: invalid case style for variable 'i' [readability-identifier-naming]
        size_t i;
               ^~
               I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1257:8: warning: invalid case style for variable 'top' [readability-identifier-naming]
        cset *top = &p->g->sets[p->g->ncsets];
              ^~~
              Top
/home/jonas/opt/llvm/lib/Support/regcomp.c:1258:9: warning: invalid case style for variable 'css' [readability-identifier-naming]
        size_t css = (size_t)p->g->csetsize;
               ^~~
               Css
/home/jonas/opt/llvm/lib/Support/regcomp.c:1260:27: warning: statement should be inside braces [hicpp-braces-around-statements]
        for (i = 0; i < css; i++)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1262:18: warning: statement should be inside braces [readability-braces-around-statements]
        if (cs == top-1)        /* recover only the easy case */
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1276:25: warning: invalid case style for parameter 'p' [readability-identifier-naming]
freezeset(struct parse *p, cset *cs)
                        ^~
                        P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1276:34: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
freezeset(struct parse *p, cset *cs)
                                 ^~~
                                 Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:1278:6: warning: invalid case style for variable 'h' [readability-identifier-naming]
        uch h = cs->hash;
            ^
            H
/home/jonas/opt/llvm/lib/Support/regcomp.c:1279:9: warning: invalid case style for variable 'i' [readability-identifier-naming]
        size_t i;
               ^~
               I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1280:8: warning: invalid case style for variable 'top' [readability-identifier-naming]
        cset *top = &p->g->sets[p->g->ncsets];
              ^~~
              Top
/home/jonas/opt/llvm/lib/Support/regcomp.c:1281:8: warning: invalid case style for variable 'cs2' [readability-identifier-naming]
        cset *cs2;
              ^~~~
              Cs2
/home/jonas/opt/llvm/lib/Support/regcomp.c:1282:9: warning: invalid case style for variable 'css' [readability-identifier-naming]
        size_t css = (size_t)p->g->csetsize;
               ^~~
               Css
/home/jonas/opt/llvm/lib/Support/regcomp.c:1285:46: warning: statement should be inside braces [readability-braces-around-statements]
        for (cs2 = &p->g->sets[0]; cs2 < top; cs2++)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1288:29: warning: statement should be inside braces [readability-braces-around-statements]
                        for (i = 0; i < css; i++)
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1289:41: warning: statement should be inside braces [google-readability-braces-around-statements]
                                if (!!CHIN(cs2, i) != !!CHIN(cs, i))
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1291:17: warning: statement should be inside braces [hicpp-braces-around-statements]
                        if (i == css)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1307:23: warning: invalid case style for parameter 'p' [readability-identifier-naming]
firstch(struct parse *p, cset *cs)
                      ^~
                      P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1307:32: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
firstch(struct parse *p, cset *cs)
                               ^~~
                               Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:1309:9: warning: invalid case style for variable 'i' [readability-identifier-naming]
        size_t i;
               ^~
               I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1310:9: warning: invalid case style for variable 'css' [readability-identifier-naming]
        size_t css = (size_t)p->g->csetsize;
               ^~~
               Css
/home/jonas/opt/llvm/lib/Support/regcomp.c:1312:27: warning: statement should be inside braces [hicpp-braces-around-statements]
        for (i = 0; i < css; i++)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1313:19: warning: statement should be inside braces [readability-braces-around-statements]
                if (CHIN(cs, i))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1323:19: warning: invalid case style for parameter 'p' [readability-identifier-naming]
nch(struct parse *p, cset *cs)
                  ^~
                  P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1323:28: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
nch(struct parse *p, cset *cs)
                           ^~~
                           Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:1325:9: warning: invalid case style for variable 'i' [readability-identifier-naming]
        size_t i;
               ^~
               I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1326:9: warning: invalid case style for variable 'css' [readability-identifier-naming]
        size_t css = (size_t)p->g->csetsize;
               ^~~
               Css
/home/jonas/opt/llvm/lib/Support/regcomp.c:1327:6: warning: invalid case style for variable 'n' [readability-identifier-naming]
        int n = 0;
            ^
            N
/home/jonas/opt/llvm/lib/Support/regcomp.c:1329:27: warning: statement should be inside braces [google-readability-braces-around-statements]
        for (i = 0; i < css; i++)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1330:19: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (CHIN(cs, i))
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1339:31: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
mcadd( struct parse *p, cset *cs, const char *cp)
                              ^~~
                              Cs
/home/jonas/opt/llvm/lib/Support/regcomp.c:1339:47: warning: invalid case style for parameter 'cp' [readability-identifier-naming]
mcadd( struct parse *p, cset *cs, const char *cp)
                                              ^~~
                                              Cp
/home/jonas/opt/llvm/lib/Support/regcomp.c:1341:9: warning: invalid case style for variable 'oldend' [readability-identifier-naming]
        size_t oldend = cs->smultis;
               ^~~~~~
               Oldend
/home/jonas/opt/llvm/lib/Support/regcomp.c:1342:8: warning: invalid case style for variable 'np' [readability-identifier-naming]
        void *np;
              ^~~
              Np
/home/jonas/opt/llvm/lib/Support/regcomp.c:1347:18: warning: statement should be inside braces [google-readability-braces-around-statements]
                if (cs->multis)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1366:24: warning: invalid case style for parameter 'p' [readability-identifier-naming]
mcinvert(struct parse *p, cset *cs)
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1366:24: warning: parameter 'p' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1366:33: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
mcinvert(struct parse *p, cset *cs)
                                ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1366:33: warning: parameter 'cs' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1379:22: warning: invalid case style for parameter 'p' [readability-identifier-naming]
mccase(struct parse *p, cset *cs)
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1379:22: warning: parameter 'p' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1379:31: warning: invalid case style for parameter 'cs' [readability-identifier-naming]
mccase(struct parse *p, cset *cs)
                              ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1379:31: warning: parameter 'cs' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/regcomp.c:1388:26: warning: invalid case style for parameter 'g' [readability-identifier-naming]
isinsets(struct re_guts *g, int c)
                         ^~
                         G
/home/jonas/opt/llvm/lib/Support/regcomp.c:1388:33: warning: invalid case style for parameter 'c' [readability-identifier-naming]
isinsets(struct re_guts *g, int c)
                                ^~
                                C
/home/jonas/opt/llvm/lib/Support/regcomp.c:1390:7: warning: invalid case style for variable 'col' [readability-identifier-naming]
        uch *col;
             ^~~~
             Col
/home/jonas/opt/llvm/lib/Support/regcomp.c:1391:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1392:6: warning: invalid case style for variable 'ncols' [readability-identifier-naming]
        int ncols = (g->ncsets+(CHAR_BIT-1)) / CHAR_BIT;
            ^~~~~
            Ncols
/home/jonas/opt/llvm/lib/Support/regcomp.c:1393:11: warning: invalid case style for variable 'uc' [readability-identifier-naming]
        unsigned uc = (uch)c;
                 ^~
                 Uc
/home/jonas/opt/llvm/lib/Support/regcomp.c:1395:67: warning: statement should be inside braces [google-readability-braces-around-statements]
        for (i = 0, col = g->setbits; i < ncols; i++, col += g->csetsize)
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1396:20: warning: statement should be inside braces [readability-braces-around-statements]
                if (col[uc] != 0)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1405:26: warning: invalid case style for parameter 'g' [readability-identifier-naming]
samesets(struct re_guts *g, int c1, int c2)
                         ^~
                         G
/home/jonas/opt/llvm/lib/Support/regcomp.c:1405:33: warning: invalid case style for parameter 'c1' [readability-identifier-naming]
samesets(struct re_guts *g, int c1, int c2)
                                ^~~
                                C1
/home/jonas/opt/llvm/lib/Support/regcomp.c:1405:41: warning: invalid case style for parameter 'c2' [readability-identifier-naming]
samesets(struct re_guts *g, int c1, int c2)
                                        ^~~
                                        C2
/home/jonas/opt/llvm/lib/Support/regcomp.c:1407:7: warning: invalid case style for variable 'col' [readability-identifier-naming]
        uch *col;
             ^~~~
             Col
/home/jonas/opt/llvm/lib/Support/regcomp.c:1408:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1409:6: warning: invalid case style for variable 'ncols' [readability-identifier-naming]
        int ncols = (g->ncsets+(CHAR_BIT-1)) / CHAR_BIT;
            ^~~~~
            Ncols
/home/jonas/opt/llvm/lib/Support/regcomp.c:1410:11: warning: invalid case style for variable 'uc1' [readability-identifier-naming]
        unsigned uc1 = (uch)c1;
                 ^~~
                 Uc1
/home/jonas/opt/llvm/lib/Support/regcomp.c:1411:11: warning: invalid case style for variable 'uc2' [readability-identifier-naming]
        unsigned uc2 = (uch)c2;
                 ^~~
                 Uc2
/home/jonas/opt/llvm/lib/Support/regcomp.c:1413:67: warning: statement should be inside braces [readability-braces-around-statements]
        for (i = 0, col = g->setbits; i < ncols; i++, col += g->csetsize)
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1414:28: warning: statement should be inside braces [hicpp-braces-around-statements]
                if (col[uc1] != col[uc2])
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1423:26: warning: invalid case style for parameter 'p' [readability-identifier-naming]
categorize(struct parse *p, struct re_guts *g)
                         ^~
                         P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1423:45: warning: invalid case style for parameter 'g' [readability-identifier-naming]
categorize(struct parse *p, struct re_guts *g)
                                            ^~
                                            G
/home/jonas/opt/llvm/lib/Support/regcomp.c:1425:9: warning: invalid case style for variable 'cats' [readability-identifier-naming]
        cat_t *cats = g->categories;
               ^~~~
               Cats
/home/jonas/opt/llvm/lib/Support/regcomp.c:1426:6: warning: invalid case style for variable 'c' [readability-identifier-naming]
        int c;
            ^~
            C
/home/jonas/opt/llvm/lib/Support/regcomp.c:1427:6: warning: invalid case style for variable 'c2' [readability-identifier-naming]
        int c2;
            ^~~
            C2
/home/jonas/opt/llvm/lib/Support/regcomp.c:1428:8: warning: invalid case style for variable 'cat' [readability-identifier-naming]
        cat_t cat;
              ^~~~
              Cat
/home/jonas/opt/llvm/lib/Support/regcomp.c:1431:20: warning: statement should be inside braces [readability-braces-around-statements]
        if (p->error != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1434:40: warning: statement should be inside braces [hicpp-braces-around-statements]
        for (c = CHAR_MIN; c <= CHAR_MAX; c++)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1438:40: warning: statement should be inside braces [google-readability-braces-around-statements]
                        for (c2 = c+1; c2 <= CHAR_MAX; c2++)
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1439:45: warning: statement should be inside braces [readability-braces-around-statements]
                                if (cats[c2] == 0 && samesets(g, c, c2))
                                                                        ^
                                                                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1449:11: warning: invalid case style for parameter 'start' [readability-identifier-naming]
    sopno start,                /* from here */
          ^~~~~~
          Start
/home/jonas/opt/llvm/lib/Support/regcomp.c:1450:11: warning: invalid case style for parameter 'finish' [readability-identifier-naming]
    sopno finish)               /* to this less one */
          ^~~~~~~
          Finish
/home/jonas/opt/llvm/lib/Support/regcomp.c:1452:8: warning: invalid case style for variable 'ret' [readability-identifier-naming]
        sopno ret = HERE();
              ^~~
              Ret
/home/jonas/opt/llvm/lib/Support/regcomp.c:1453:8: warning: invalid case style for variable 'len' [readability-identifier-naming]
        sopno len = finish - start;
              ^~~
              Len
/home/jonas/opt/llvm/lib/Support/regcomp.c:1456:15: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (len == 0)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1474:22: warning: invalid case style for parameter 'p' [readability-identifier-naming]
doemit(struct parse *p, sop op, size_t opnd)
                     ^~
                     P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1474:29: warning: invalid case style for parameter 'op' [readability-identifier-naming]
doemit(struct parse *p, sop op, size_t opnd)
                            ^~~
                            Op
/home/jonas/opt/llvm/lib/Support/regcomp.c:1474:40: warning: invalid case style for parameter 'opnd' [readability-identifier-naming]
doemit(struct parse *p, sop op, size_t opnd)
                                       ^~~~~
                                       Opnd
/home/jonas/opt/llvm/lib/Support/regcomp.c:1477:20: warning: statement should be inside braces [readability-braces-around-statements]
        if (p->error != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1484:26: warning: statement should be inside braces [readability-braces-around-statements]
        if (p->slen >= p->ssize)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1496:31: warning: invalid case style for parameter 'op' [readability-identifier-naming]
doinsert(struct parse *p, sop op, size_t opnd, sopno pos)
                              ^~~
                              Op
/home/jonas/opt/llvm/lib/Support/regcomp.c:1496:42: warning: invalid case style for parameter 'opnd' [readability-identifier-naming]
doinsert(struct parse *p, sop op, size_t opnd, sopno pos)
                                         ^~~~~
                                         Opnd
/home/jonas/opt/llvm/lib/Support/regcomp.c:1496:54: warning: invalid case style for parameter 'pos' [readability-identifier-naming]
doinsert(struct parse *p, sop op, size_t opnd, sopno pos)
                                                     ^~~~
                                                     Pos
/home/jonas/opt/llvm/lib/Support/regcomp.c:1498:8: warning: invalid case style for variable 'sn' [readability-identifier-naming]
        sopno sn;
              ^~~
              Sn
/home/jonas/opt/llvm/lib/Support/regcomp.c:1499:6: warning: invalid case style for variable 's' [readability-identifier-naming]
        sop s;
            ^~
            S
/home/jonas/opt/llvm/lib/Support/regcomp.c:1500:6: warning: invalid case style for variable 'i' [readability-identifier-naming]
        int i;
            ^~
            I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1503:20: warning: statement should be inside braces [readability-braces-around-statements]
        if (p->error != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1531:21: warning: invalid case style for parameter 'p' [readability-identifier-naming]
dofwd(struct parse *p, sopno pos, sop value)
                    ^~
                    P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1531:30: warning: invalid case style for parameter 'pos' [readability-identifier-naming]
dofwd(struct parse *p, sopno pos, sop value)
                             ^~~~
                             Pos
/home/jonas/opt/llvm/lib/Support/regcomp.c:1531:39: warning: invalid case style for parameter 'value' [readability-identifier-naming]
dofwd(struct parse *p, sopno pos, sop value)
                                      ^~~~~~
                                      Value
/home/jonas/opt/llvm/lib/Support/regcomp.c:1534:20: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (p->error != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1545:32: warning: invalid case style for parameter 'size' [readability-identifier-naming]
enlarge(struct parse *p, sopno size)
                               ^~~~~
                               Size
/home/jonas/opt/llvm/lib/Support/regcomp.c:1547:7: warning: invalid case style for variable 'sp' [readability-identifier-naming]
        sop *sp;
             ^~~
             Sp
/home/jonas/opt/llvm/lib/Support/regcomp.c:1549:23: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (p->ssize >= size)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1570:44: warning: invalid case style for parameter 'g' [readability-identifier-naming]
stripsnug(struct parse *p, struct re_guts *g)
                                           ^~
                                           G
/home/jonas/opt/llvm/lib/Support/regcomp.c:1596:24: warning: invalid case style for parameter 'p' [readability-identifier-naming]
findmust(struct parse *p, struct re_guts *g)
                       ^~
                       P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1596:43: warning: invalid case style for parameter 'g' [readability-identifier-naming]
findmust(struct parse *p, struct re_guts *g)
                                          ^~
                                          G
/home/jonas/opt/llvm/lib/Support/regcomp.c:1598:7: warning: invalid case style for variable 'scan' [readability-identifier-naming]
        sop *scan;
             ^~~~~
             Scan
/home/jonas/opt/llvm/lib/Support/regcomp.c:1599:7: warning: invalid case style for variable 'start' [readability-identifier-naming]
        sop *start = 0; /* start initialized in the default case, after that */
             ^~~~~
             Start
/home/jonas/opt/llvm/lib/Support/regcomp.c:1600:7: warning: invalid case style for variable 'newstart' [readability-identifier-naming]
        sop *newstart = 0; /* newstart was initialized in the OCHAR case */
             ^~~~~~~~
             Newstart
/home/jonas/opt/llvm/lib/Support/regcomp.c:1601:8: warning: invalid case style for variable 'newlen' [readability-identifier-naming]
        sopno newlen;
              ^~~~~~~
              Newlen
/home/jonas/opt/llvm/lib/Support/regcomp.c:1602:6: warning: invalid case style for variable 's' [readability-identifier-naming]
        sop s;
            ^~
            S
/home/jonas/opt/llvm/lib/Support/regcomp.c:1603:8: warning: invalid case style for variable 'cp' [readability-identifier-naming]
        char *cp;
              ^~~
              Cp
/home/jonas/opt/llvm/lib/Support/regcomp.c:1604:8: warning: invalid case style for variable 'i' [readability-identifier-naming]
        sopno i;
              ^~
              I
/home/jonas/opt/llvm/lib/Support/regcomp.c:1607:20: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (p->error != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1617:20: warning: statement should be inside braces [google-readability-braces-around-statements]
                        if (newlen == 0)                /* new sequence */
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1649:19: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (g->mlen == 0)               /* there isn't one */
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1661:17: warning: Dereference of null pointer [clang-analyzer-core.NullDereference]
                while (OP(s = *scan++) != OCHAR)
                              ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1607:6: note: Assuming the condition is false
        if (p->error != 0)
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1607:2: note: Taking false branch
        if (p->error != 0)
        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1615:3: note: Control jumps to the 'default' case at line 1639
                switch (OP(s)) {
                ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1640:8: note: Assuming the condition is false
                        if (newlen > g->mlen) {         /* ends one */
                            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1640:4: note: Taking false branch
                        if (newlen > g->mlen) {         /* ends one */
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1645:4: note:  Execution continues on line 1647
                        break;
                        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1613:2: note: Loop condition is false.  Exiting loop
        do {
        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1649:6: note: Assuming the condition is false
        if (g->mlen == 0)               /* there isn't one */
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1649:2: note: Taking false branch
        if (g->mlen == 0)               /* there isn't one */
        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1654:6: note: Assuming the condition is false
        if (g->must == NULL) {          /* argh; just forget it */
            ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1654:2: note: Taking false branch
        if (g->must == NULL) {          /* argh; just forget it */
        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1660:2: note: Loop condition is true.  Entering loop body
        for (i = g->mlen; i > 0; i--) {
        ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1661:18: note: Null pointer value stored to 'scan'
                while (OP(s = *scan++) != OCHAR)
                               ^
../lib/Support/regex2.h:73:17: note: expanded from macro 'OP'
#define OP(n)   ((n)&OPRMASK)
                  ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1661:17: note: Dereference of null pointer
                while (OP(s = *scan++) != OCHAR)
                              ^
../lib/Support/regex2.h:73:17: note: expanded from macro 'OP'
#define OP(n)   ((n)&OPRMASK)
                  ^
/home/jonas/opt/llvm/lib/Support/regcomp.c:1661:35: warning: statement should be inside braces [readability-braces-around-statements]
                while (OP(s = *scan++) != OCHAR)
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1674:25: warning: invalid case style for parameter 'p' [readability-identifier-naming]
pluscount(struct parse *p, struct re_guts *g)
                        ^~
                        P
/home/jonas/opt/llvm/lib/Support/regcomp.c:1674:44: warning: invalid case style for parameter 'g' [readability-identifier-naming]
pluscount(struct parse *p, struct re_guts *g)
                                           ^~
                                           G
/home/jonas/opt/llvm/lib/Support/regcomp.c:1676:7: warning: invalid case style for variable 'scan' [readability-identifier-naming]
        sop *scan;
             ^~~~~
             Scan
/home/jonas/opt/llvm/lib/Support/regcomp.c:1677:6: warning: invalid case style for variable 's' [readability-identifier-naming]
        sop s;
            ^~
            S
/home/jonas/opt/llvm/lib/Support/regcomp.c:1678:8: warning: invalid case style for variable 'plusnest' [readability-identifier-naming]
        sopno plusnest = 0;
              ^~~~~~~~
              Plusnest
/home/jonas/opt/llvm/lib/Support/regcomp.c:1679:8: warning: invalid case style for variable 'maxnest' [readability-identifier-naming]
        sopno maxnest = 0;
              ^~~~~~~
              Maxnest
/home/jonas/opt/llvm/lib/Support/regcomp.c:1681:20: warning: statement should be inside braces [readability-braces-around-statements]
        if (p->error != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1692:27: warning: statement should be inside braces [google-readability-braces-around-statements]
                        if (plusnest > maxnest)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/regcomp.c:1698:20: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (plusnest != 0)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:39:10: warning: inclusion of deprecated C++ header 'stdlib.h'; consider using 'cstdlib' instead [hicpp-deprecated-headers]
#include <stdlib.h>
         ^~~~~~~~~~
         <cstdlib>
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:42:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sys;
^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:45:28: warning: invalid case style for parameter 'recursive' [readability-identifier-naming]
MutexImpl::MutexImpl( bool recursive)
                           ^~~~~~~~~~
                           Recursive
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:49:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  pthread_mutex_t* mutex =
  ^~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:49:20: warning: invalid case style for variable 'mutex' [readability-identifier-naming]
  pthread_mutex_t* mutex =
                   ^~~~~
                   Mutex
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:52:23: warning: invalid case style for variable 'attr' [readability-identifier-naming]
  pthread_mutexattr_t attr;
                      ^~~~~
                      Attr
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:55:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_mutexattr_init(&attr);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:56:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(errorcode == 0); (void)errorcode;
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:60:7: warning: invalid case style for variable 'kind' [readability-identifier-naming]
  int kind = ( recursive  ? PTHREAD_MUTEX_RECURSIVE : PTHREAD_MUTEX_NORMAL );
      ^~~~
      Kind
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:62:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(errorcode == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:66:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(errorcode == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:70:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(errorcode == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:79:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
  ^~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:79:20: warning: invalid case style for variable 'mutex' [readability-identifier-naming]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
                   ^~~~~
                   Mutex
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:80:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(mutex != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:82:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(mutex);
  ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:82:3: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:88:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
  ^~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:88:20: warning: invalid case style for variable 'mutex' [readability-identifier-naming]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
                   ^~~~~
                   Mutex
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:89:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(mutex != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:91:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_mutex_lock(mutex);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:98:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
  ^~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:98:20: warning: invalid case style for variable 'mutex' [readability-identifier-naming]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
                   ^~~~~
                   Mutex
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:99:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(mutex != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:101:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_mutex_unlock(mutex);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:108:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
  ^~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:108:20: warning: invalid case style for variable 'mutex' [readability-identifier-naming]
  pthread_mutex_t* mutex = static_cast<pthread_mutex_t*>(data_);
                   ^~~~~
                   Mutex
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:109:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(mutex != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:111:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_mutex_trylock(mutex);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:115:2: warning: namespace 'llvm' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace llvm
/home/jonas/opt/llvm/lib/Support/Mutex.cpp:41:11: note: namespace 'llvm' starts here
namespace llvm {
          ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:15:1: warning: #includes are not sorted properly [llvm-include-order]
#include "llvm/Support/RWMutex.h"
^        ~~~~~~~~~~~~~~~~~~~~~~~~
         "llvm/Config/config.h"
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:45:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:46:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sys;
^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:52:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_rwlock_t* rwlock =
  ^~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:52:21: warning: invalid case style for variable 'rwlock' [readability-identifier-naming]
  pthread_rwlock_t* rwlock =
                    ^~~~~~
                    Rwlock
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:61:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_rwlock_init(rwlock, nullptr);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:63:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(errorcode == 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:72:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
  ^~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:72:21: warning: invalid case style for variable 'rwlock' [readability-identifier-naming]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
                    ^~~~~~
                    Rwlock
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:73:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(rwlock != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:75:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  free(rwlock);
  ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:75:3: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc]
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:79:14: warning: invalid case style for function 'reader_acquire' [readability-identifier-naming]
RWMutexImpl::reader_acquire()
             ^~~~~~~~~~~~~~~
             readerAcquire
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:81:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
  ^~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:81:21: warning: invalid case style for variable 'rwlock' [readability-identifier-naming]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
                    ^~~~~~
                    Rwlock
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:82:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(rwlock != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:84:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_rwlock_rdlock(rwlock);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:89:14: warning: invalid case style for function 'reader_release' [readability-identifier-naming]
RWMutexImpl::reader_release()
             ^~~~~~~~~~~~~~~
             readerRelease
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:91:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
  ^~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:91:21: warning: invalid case style for variable 'rwlock' [readability-identifier-naming]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
                    ^~~~~~
                    Rwlock
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:92:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(rwlock != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:94:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_rwlock_unlock(rwlock);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:99:14: warning: invalid case style for function 'writer_acquire' [readability-identifier-naming]
RWMutexImpl::writer_acquire()
             ^~~~~~~~~~~~~~~
             writerAcquire
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:101:3: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
  ^~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:101:21: warning: invalid case style for variable 'rwlock' [readability-identifier-naming]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
                    ^~~~~~
                    Rwlock
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:102:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(rwlock != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:104:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_rwlock_wrlock(rwlock);
      ^~~~~~~~~
      Errorcode
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:109:14: warning: invalid case style for function 'writer_release' [readability-identifier-naming]
RWMutexImpl::writer_release()
             ^~~~~~~~~~~~~~~
             writerRelease
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:111:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
  ^~~~~~~~~~~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:111:21: warning: invalid case style for variable 'rwlock' [readability-identifier-naming]
  pthread_rwlock_t* rwlock = static_cast<pthread_rwlock_t*>(data_);
                    ^~~~~~
                    Rwlock
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:112:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(rwlock != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/RWMutex.cpp:114:7: warning: invalid case style for variable 'errorcode' [readability-identifier-naming]
  int errorcode = pthread_rwlock_unlock(rwlock);
      ^~~~~~~~~
      Errorcode
upport/VersionTuple.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpS2Zkwi.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpI7Vupd.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/WithColor.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpjWoVM7.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/YAMLParser.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpzvkNdp.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpa2hJaL.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/raw_os_ostream.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpY8hWpj.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/raw_ostream.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpHBYwTb.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/regcomp.c
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpUjdeLP.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/regerror.c
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpBOi7Eh.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/regexec.c
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpbroiKp.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/regfree.c
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpc_2fR1.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/regstrlcpy.c
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpbMQ_bM.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/xxhash.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpzA8Ac8.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Atomic.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp37GqN4.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/DynamicLibrary.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpoh6iYI.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Errno.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpkM0ZQc.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Host.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpTFgJSQ.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Memory.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp43WgeQ.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Mutex.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpcQ3oiV.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Path.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpVFld92.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Process.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpipRGY8.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Program.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpO9Zhjz.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/RWMutex.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpD26rS4.yaml -p=/home/jonas/opt/llvm /home//home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:649:3: warning: function 'llvm::yaml::IO::IO' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  IO(void *Ctxt = nullptr);
  ^        ~~~~
           Context
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:40:5: note: the definition seen here
IO::IO(void *Context) : Ctxt(Context) {}
    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:649:3: note: differing parameters are named here: ('Ctxt'), in definition: ('Context')
  IO(void *Ctxt = nullptr);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1238:8: warning: function 'llvm::yaml::Input::preflightElement' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool preflightElement(unsigned index, void *&) override;
       ^                         ~~~~~~
                                 Index
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:223:13: note: the definition seen here
bool Input::preflightElement(unsigned Index, void *&SaveInfo) {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1238:8: note: differing parameters are named here: ('index'), in definition: ('Index')
  bool preflightElement(unsigned index, void *&) override;
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1253:8: warning: function 'llvm::yaml::Input::setError' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void setError(const Twine &message) override;
       ^                     ~~~~~~~~
                             Message
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:408:13: note: the definition seen here
void Input::setError(const Twine &Message) {
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1253:8: note: differing parameters are named here: ('message'), in definition: ('Message')
  void setError(const Twine &message) override;
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1331:33: warning: function 'llvm::yaml::Input::createHNodes' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  std::unique_ptr<Input::HNode> createHNodes(Node *node);
                                ^                  ~~~~~
                                                   N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:354:38: note: the definition seen here
std::unique_ptr<Input::HNode> Input::createHNodes(Node *N) {
                                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1331:33: note: differing parameters are named here: ('node'), in definition: ('N')
  std::unique_ptr<Input::HNode> createHNodes(Node *node);
                                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1362:3: warning: function 'llvm::yaml::Output::Output' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  Output(raw_ostream &, void *Ctxt = nullptr, int WrapColumn = 70);
  ^                           ~~~~
                              context
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:420:9: note: the definition seen here
Output::Output(raw_ostream &yout, void *context, int WrapColumn)
        ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1362:3: note: differing parameters are named here: ('Ctxt'), in definition: ('context')
  Output(raw_ostream &, void *Ctxt = nullptr, int WrapColumn = 70);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1376:8: warning: function 'llvm::yaml::Output::preflightKey' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool preflightKey(const char *key, bool, bool, bool &, void *&) override;
       ^                        ~~~~
                                Key
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:471:14: note: the definition seen here
bool Output::preflightKey(const char *Key, bool Required, bool SameAsDefault,
             ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLTraits.h:1376:8: note: differing parameters are named here: ('key'), in definition: ('Key')
  bool preflightKey(const char *key, bool, bool, bool &, void *&) override;
       ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:33:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:34:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace yaml;
^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:56:1: warning: constructor does not initialize these fields: ScalarMatchFound [cppcoreguidelines-pro-type-member-init]
Input::Input(StringRef InputContent, void *Ctxt,
^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:59:7: warning: implicit conversion 'SourceMgr::DiagHandlerTy' (aka 'void (*)(const llvm::SMDiagnostic &, void *)') -> bool [readability-implicit-bool-conversion]
  if (DiagHandler)
      ^          ~
                  != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:59:19: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (DiagHandler)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:64:1: warning: constructor does not initialize these fields: ScalarMatchFound [cppcoreguidelines-pro-type-member-init]
Input::Input(MemoryBufferRef Input, void *Ctxt,
^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:67:7: warning: implicit conversion 'SourceMgr::DiagHandlerTy' (aka 'void (*)(const llvm::SMDiagnostic &, void *)') -> bool [readability-implicit-bool-conversion]
  if (DiagHandler)
      ^          ~
                  != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:67:19: warning: statement should be inside braces [readability-braces-around-statements]
  if (DiagHandler)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:90:10: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
    if (!N) {
        ~^~
         == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:91:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(Strm->failed() && "Root is NULL iff parsing failed");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:113:10: warning: implicit conversion 'llvm::yaml::Input::HNode *' -> bool [readability-implicit-bool-conversion]
  return CurrentNode ? CurrentNode->_node : nullptr;
         ^
                     != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:117:15: warning: invalid case style for variable 'foundTag' [readability-identifier-naming]
  std::string foundTag = CurrentNode->_node->getVerbatimTag();
              ^~~~~~~~
              FoundTag
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:127:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:130:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  MapHNode *MN = dyn_cast_or_null<MapHNode>(CurrentNode);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:131:7: warning: implicit conversion 'llvm::yaml::Input::MapHNode *' -> bool [readability-implicit-bool-conversion]
  if (MN) {
      ^ ~
         != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:137:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
  MapHNode *MN = dyn_cast<MapHNode>(CurrentNode);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:139:8: warning: implicit conversion 'llvm::yaml::Input::MapHNode *' -> bool [readability-implicit-bool-conversion]
  if (!MN) {
      ~^~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:143:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto &P : MN->Mapping)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:148:62: warning: all parameters should be named in a function [readability-named-parameter]
bool Input::preflightKey(const char *Key, bool Required, bool, bool &UseDefault,
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:151:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:156:8: warning: implicit conversion 'llvm::yaml::Input::HNode *' -> bool [readability-implicit-bool-conversion]
  if (!CurrentNode) {
      ~^~~~~~~~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:157:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Required)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:162:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  MapHNode *MN = dyn_cast<MapHNode>(CurrentNode);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:163:8: warning: implicit conversion 'llvm::yaml::Input::MapHNode *' -> bool [readability-implicit-bool-conversion]
  if (!MN) {
      ~^~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:164:51: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Required || !isa<EmptyHNode>(CurrentNode))
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:168:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  MN->ValidKeys.push_back(Key);
                          ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:170:8: warning: implicit conversion 'llvm::yaml::Input::HNode *' -> bool [readability-implicit-bool-conversion]
  if (!Value) {
      ~^~~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:171:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Required)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:173:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:182:33: warning: invalid case style for parameter 'saveInfo' [readability-identifier-naming]
void Input::postflightKey(void *saveInfo) {
                                ^~~~~~~~~
                                SaveInfo
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:183:17: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  CurrentNode = reinterpret_cast<HNode *>(saveInfo);
                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:187:10: warning: statement should be inside braces [readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:190:3: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
  MapHNode *MN = dyn_cast_or_null<MapHNode>(CurrentNode);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:191:8: warning: implicit conversion 'llvm::yaml::Input::MapHNode *' -> bool [readability-implicit-bool-conversion]
  if (!MN)
      ~^~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:191:11: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!MN)
          ^
           {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:206:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode))
      ^~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:206:64: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:208:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (isa<EmptyHNode>(CurrentNode))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:211:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (ScalarHNode *SN = dyn_cast<ScalarHNode>(CurrentNode)) {
      ^~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:212:29: warning: statement should be inside braces [readability-braces-around-statements]
    if (isNull(SN->value()))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:224:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:226:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
      ^~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:235:17: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  CurrentNode = reinterpret_cast<HNode *>(SaveInfo);
                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:240:43: warning: invalid case style for parameter 'index' [readability-identifier-naming]
bool Input::preflightFlowElement(unsigned index, void *&SaveInfo) {
                                          ^~~~~~
                                          Index
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:241:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:243:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
      ^~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:252:17: warning: do not use reinterpret_cast [cppcoreguidelines-pro-type-reinterpret-cast]
  CurrentNode = reinterpret_cast<HNode *>(SaveInfo);
                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:262:50: warning: all parameters should be named in a function [readability-named-parameter]
bool Input::matchEnumScalar(const char *Str, bool) {
                                                 ^
                                                  /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:263:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (ScalarMatchFound)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:265:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
  if (ScalarHNode *SN = dyn_cast<ScalarHNode>(CurrentNode)) {
      ^~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:275:24: warning: statement should be inside braces [readability-braces-around-statements]
  if (ScalarMatchFound)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:289:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
      ^~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:298:46: warning: all parameters should be named in a function [readability-named-parameter]
bool Input::bitSetMatch(const char *Str, bool) {
                                             ^
                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:299:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:301:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
      ^~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:304:11: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
      if (ScalarHNode *SN = dyn_cast<ScalarHNode>(N.get())) {
          ^~~~~~~~~~~
          auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:321:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:323:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
  if (SequenceHNode *SQ = dyn_cast<SequenceHNode>(CurrentNode)) {
      ^~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:324:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(BitValuesUsed.size() == SQ->Entries.size());
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:325:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0; i < SQ->Entries.size(); ++i) {
                  ^      ~                         ~~
                  I      I                         I
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:334:51: warning: all parameters should be named in a function [readability-named-parameter]
void Input::scalarString(StringRef &S, QuotingType) {
                                                  ^
                                                   /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:335:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (ScalarHNode *SN = dyn_cast<ScalarHNode>(CurrentNode)) {
      ^~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:344:29: warning: invalid case style for parameter 'hnode' [readability-identifier-naming]
void Input::setError(HNode *hnode, const Twine &message) {
                            ^~~~~~
                            Hnode
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:344:49: warning: invalid case style for parameter 'message' [readability-identifier-naming]
void Input::setError(HNode *hnode, const Twine &message) {
                                                ^~~~~~~~
                                                Message
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:345:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(hnode && "HNode must not be NULL");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:349:28: warning: invalid case style for parameter 'node' [readability-identifier-naming]
void Input::setError(Node *node, const Twine &message) {
                           ^~~~~
                           Node
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:349:47: warning: invalid case style for parameter 'message' [readability-identifier-naming]
void Input::setError(Node *node, const Twine &message) {
                                              ^~~~~~~~
                                              Message
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:356:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  if (ScalarNode *SN = dyn_cast<ScalarNode>(N)) {
      ^~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:363:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (BlockScalarNode *BSN = dyn_cast<BlockScalarNode>(N)) {
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:363:14: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
  } else if (BlockScalarNode *BSN = dyn_cast<BlockScalarNode>(N)) {
             ^~~~~~~~~~~~~~~
             auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:366:14: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  } else if (SequenceNode *SQ = dyn_cast<SequenceNode>(N)) {
             ^~~~~~~~~~~~
             auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:370:14: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EC)
             ^
              {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:375:14: warning: use auto when initializing with a template cast to avoid duplicating the type name [hicpp-use-auto]
  } else if (MappingNode *Map = dyn_cast<MappingNode>(N)) {
             ^~~~~~~~~~~
             auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:376:10: warning: invalid case style for variable 'mapHNode' [readability-identifier-naming]
    auto mapHNode = llvm::make_unique<MapHNode>(N);
         ^~~~~~~~
         MapHNode
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:379:7: warning: use auto when initializing with a template cast to avoid duplicating the type name [modernize-use-auto]
      ScalarNode *Key = dyn_cast<ScalarNode>(KeyNode);
      ^~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:381:12: warning: implicit conversion 'llvm::yaml::ScalarNode *' -> bool [readability-implicit-bool-conversion]
      if (!Key || !Value) {
          ~^~~
          ( == nullptr)
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:381:20: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
      if (!Key || !Value) {
                  ~^~~~~~
                  ( == nullptr)
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:382:14: warning: implicit conversion 'llvm::yaml::ScalarNode *' -> bool [readability-implicit-bool-conversion]
        if (!Key)
            ~^~~~
             == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:382:18: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (!Key)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:384:14: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
        if (!Value)
            ~^~~~~~
             == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:384:20: warning: statement should be inside braces [readability-braces-around-statements]
        if (!Value)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:395:14: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EC)
             ^
              {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:420:29: warning: invalid case style for parameter 'yout' [readability-identifier-naming]
Output::Output(raw_ostream &yout, void *context, int WrapColumn)
                            ^~~~~
                            Yout
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:420:41: warning: invalid case style for parameter 'context' [readability-identifier-naming]
Output::Output(raw_ostream &yout, void *context, int WrapColumn)
                                        ^~~~~~~~
                                        Context
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:468:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  report_fatal_error("invalid call");
  ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:472:52: warning: all parameters should be named in a function [readability-named-parameter]
                          bool &UseDefault, void *&) {
                                                   ^
                                                    /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:487:34: warning: all parameters should be named in a function [readability-named-parameter]
void Output::postflightKey(void *) {
                                 ^
                                  /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:513:41: warning: invalid case style for parameter 'index' [readability-identifier-naming]
bool Output::preflightDocument(unsigned index) {
                                        ^~~~~~
                                        Index
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:514:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (index > 0)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:536:39: warning: all parameters should be named in a function [readability-named-parameter]
bool Output::preflightElement(unsigned, void *&) {
                                      ^        ~
                                       /*unused*/  /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:540:38: warning: all parameters should be named in a function [readability-named-parameter]
void Output::postflightElement(void *) {
                                     ^
                                      /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:557:43: warning: all parameters should be named in a function [readability-named-parameter]
bool Output::preflightFlowElement(unsigned, void *&) {
                                          ^        ~
                                           /*unused*/  /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:558:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NeedFlowSequenceComma)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:560:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (WrapColumn && Column > WrapColumn) {
      ^~~~~~~~~~
      ( != 0)
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:562:14: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (int i = 0; i < ColumnAtFlowStart; ++i)
             ^      ~                        ~~
             I      I                        I
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:562:48: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (int i = 0; i < ColumnAtFlowStart; ++i)
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:570:42: warning: all parameters should be named in a function [readability-named-parameter]
void Output::postflightFlowElement(void *) {
                                         ^
                                          /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:588:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EnumerationMatchFound)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:595:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!EnumerationMatchFound)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:609:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (NeedBitValueComma)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:635:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  unsigned i = 0;
           ^
           I
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:636:12: warning: invalid case style for variable 'j' [readability-identifier-naming]
  unsigned j = 0;
           ^
           J
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:640:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  const char *const Quote = MustQuote == QuotingType::Single ? "'" : "\"";
                            ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:655:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      output(StringRef(&Base[i], j - i));  // "flush".
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:661:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  output(StringRef(&Base[i], j - i));
                    ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:666:27: warning: statement should be inside braces [readability-braces-around-statements]
  if (!StateStack.empty())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:674:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  for (line_iterator Lines(*Buffer, false); !Lines.is_at_end(); ++Lines) {
                     ^
../include/llvm/Support/LineIterator.h:47:26: note: default parameter was declared here
                         char CommentMarker = '\0');
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:683:36: warning: invalid case style for parameter 'message' [readability-identifier-naming]
void Output::setError(const Twine &message) {
                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:683:36: warning: parameter 'message' is unused [misc-unused-parameters]
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:692:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (StateStack.size() < 2)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:694:42: warning: statement should be inside braces [readability-braces-around-statements]
  if (StateStack.back() != inMapFirstKey)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:699:31: warning: invalid case style for parameter 's' [readability-identifier-naming]
void Output::output(StringRef s) {
                              ^~
                              S
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:704:44: warning: invalid case style for parameter 's' [readability-identifier-naming]
void Output::outputUpToEndOfLine(StringRef s) {
                                           ^~
                                           S
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:708:70: warning: statement should be inside braces [google-readability-braces-around-statements]
                             StateStack.back() != inFlowMapOtherKey))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:722:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!NeedsNewLine)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:728:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(StateStack.size() > 0);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:728:10: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
  assert(StateStack.size() > 0);
         ^~~~~~~~~~~~~~~~~~~~~~
         !StateStack.empty()
/usr/include/assert.h:93:27: note: expanded from macro 'assert'
     (static_cast <bool> (expr)                                         \
                          ^
../include/llvm/ADT/SmallVector.h:56:23: note: method 'SmallVectorBase'::empty() defined here
  LLVM_NODISCARD bool empty() const { return !Size; }
                      ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:742:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0; i < Indent; ++i) {
                ^      ~             ~~
                I      I             I
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:751:34: warning: invalid case style for parameter 'key' [readability-identifier-naming]
void Output::paddedKey(StringRef key) {
                                 ^~~~
                                 Key
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:754:15: warning: invalid case style for variable 'spaces' [readability-identifier-naming]
  const char *spaces = "                ";
              ^~~~~~
              Spaces
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:755:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (key.size() < strlen(spaces))
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:756:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    output(&spaces[key.size()]);
            ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:757:7: warning: statement should be inside braces [hicpp-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:762:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (StateStack.back() == inFlowMapOtherKey)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:764:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (WrapColumn && Column > WrapColumn) {
      ^~~~~~~~~~
      ( != 0)
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:766:51: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (int I = 0; I < ColumnAtMapFlowStart; ++I)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:779:56: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<bool>::output(const bool &Val, void *, raw_ostream &Out) {
                                                       ^
                                                        /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:783:61: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<bool>::input(StringRef Scalar, void *, bool &Val) {
                                                            ^
                                                             /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:786:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:787:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (Scalar.equals("false")) {
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:794:66: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<StringRef>::output(const StringRef &Val, void *,
                                                                 ^
                                                                  /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:799:66: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<StringRef>::input(StringRef Scalar, void *,
                                                                 ^
                                                                  /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:802:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:805:70: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<std::string>::output(const std::string &Val, void *,
                                                                     ^
                                                                      /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:810:68: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<std::string>::input(StringRef Scalar, void *,
                                                                   ^
                                                                    /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:813:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:816:62: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<uint8_t>::output(const uint8_t &Val, void *,
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:823:64: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<uint8_t>::input(StringRef Scalar, void *, uint8_t &Val) {
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:824:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long n;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:824:22: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned long long n;
                     ^~
                     N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:825:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, n))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:827:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (n > 0xFF)
               ^
                {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:830:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:833:64: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<uint16_t>::output(const uint16_t &Val, void *,
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:838:65: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<uint16_t>::input(StringRef Scalar, void *,
                                                                ^
                                                                 /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:840:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long n;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:840:22: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned long long n;
                     ^~
                     N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:841:42: warning: statement should be inside braces [readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, n))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:843:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (n > 0xFFFF)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:846:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:849:64: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<uint32_t>::output(const uint32_t &Val, void *,
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:854:65: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<uint32_t>::input(StringRef Scalar, void *,
                                                                ^
                                                                 /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:856:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long n;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:856:22: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned long long n;
                     ^~
                     N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:857:42: warning: statement should be inside braces [readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, n))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:859:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (n > 0xFFFFFFFFUL)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:862:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:865:64: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<uint64_t>::output(const uint64_t &Val, void *,
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:870:65: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<uint64_t>::input(StringRef Scalar, void *,
                                                                ^
                                                                 /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:872:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long N;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:873:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, N))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:876:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:879:60: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<int8_t>::output(const int8_t &Val, void *, raw_ostream &Out) {
                                                           ^
                                                            /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:885:63: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<int8_t>::input(StringRef Scalar, void *, int8_t &Val) {
                                                              ^
                                                               /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:886:3: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
  long long N;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:887:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsSignedInteger(Scalar, 0, N))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:889:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((N > 127) || (N < -128))
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:892:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:895:62: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<int16_t>::output(const int16_t &Val, void *,
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:900:64: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<int16_t>::input(StringRef Scalar, void *, int16_t &Val) {
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:901:3: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
  long long N;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:902:40: warning: statement should be inside braces [readability-braces-around-statements]
  if (getAsSignedInteger(Scalar, 0, N))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:904:42: warning: statement should be inside braces [hicpp-braces-around-statements]
  if ((N > INT16_MAX) || (N < INT16_MIN))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:907:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:910:62: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<int32_t>::output(const int32_t &Val, void *,
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:915:64: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<int32_t>::input(StringRef Scalar, void *, int32_t &Val) {
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:916:3: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
  long long N;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:917:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsSignedInteger(Scalar, 0, N))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:919:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((N > INT32_MAX) || (N < INT32_MIN))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:922:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:925:62: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<int64_t>::output(const int64_t &Val, void *,
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:930:64: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<int64_t>::input(StringRef Scalar, void *, int64_t &Val) {
                                                               ^
                                                                /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:931:3: warning: consider replacing 'long long' with 'int64' [google-runtime-int]
  long long N;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:932:40: warning: statement should be inside braces [readability-braces-around-statements]
  if (getAsSignedInteger(Scalar, 0, N))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:935:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:938:60: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<double>::output(const double &Val, void *, raw_ostream &Out) {
                                                           ^
                                                            /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:942:63: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<double>::input(StringRef Scalar, void *, double &Val) {
                                                              ^
                                                               /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:943:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (to_float(Scalar, Val))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:944:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:948:58: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<float>::output(const float &Val, void *, raw_ostream &Out) {
                                                         ^
                                                          /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:952:62: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<float>::input(StringRef Scalar, void *, float &Val) {
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:953:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (to_float(Scalar, Val))
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:954:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:958:56: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<Hex8>::output(const Hex8 &Val, void *, raw_ostream &Out) {
                                                       ^
                                                        /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:963:61: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<Hex8>::input(StringRef Scalar, void *, Hex8 &Val) {
                                                            ^
                                                             /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:964:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long n;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:964:22: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned long long n;
                     ^~
                     N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:965:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, n))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:967:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (n > 0xFF)
               ^
                {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:970:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:973:58: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<Hex16>::output(const Hex16 &Val, void *, raw_ostream &Out) {
                                                         ^
                                                          /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:978:62: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<Hex16>::input(StringRef Scalar, void *, Hex16 &Val) {
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:979:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long n;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:979:22: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned long long n;
                     ^~
                     N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:980:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, n))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:982:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (n > 0xFFFF)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:985:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:988:58: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<Hex32>::output(const Hex32 &Val, void *, raw_ostream &Out) {
                                                         ^
                                                          /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:993:62: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<Hex32>::input(StringRef Scalar, void *, Hex32 &Val) {
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:994:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long n;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:994:22: warning: invalid case style for variable 'n' [readability-identifier-naming]
  unsigned long long n;
                     ^~
                     N
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:995:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, n))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:997:24: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (n > 0xFFFFFFFFUL)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:1000:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:1003:58: warning: all parameters should be named in a function [readability-named-parameter]
void ScalarTraits<Hex64>::output(const Hex64 &Val, void *, raw_ostream &Out) {
                                                         ^
                                                          /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:1008:62: warning: all parameters should be named in a function [readability-named-parameter]
StringRef ScalarTraits<Hex64>::input(StringRef Scalar, void *, Hex64 &Val) {
                                                             ^
                                                              /*unused*/
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:1009:3: warning: consider replacing 'unsigned long long' with 'uint64' [google-runtime-int]
  unsigned long long Num;
  ^
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:1010:44: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getAsUnsignedInteger(Scalar, 0, Num))
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/YAMLTraits.cpp:1013:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/Process.cpp:17:1: warning: #includes are not sorted properly [llvm-include-order]
#include "llvm/Config/llvm-config.h"
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
         "llvm/Config/config.h"
/home/jonas/opt/llvm/lib/Support/Process.cpp:23:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Process.cpp:24:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sys;
^
/home/jonas/opt/llvm/lib/Support/Process.cpp:31:32: warning: invalid case style for function 'FindInEnvPath' [readability-identifier-naming]
Optional<std::string> Process::FindInEnvPath(StringRef EnvName,
                               ^~~~~~~~~~~~~~
                               findInEnvPath
/home/jonas/opt/llvm/lib/Support/Process.cpp:36:32: warning: invalid case style for function 'FindInEnvPath' [readability-identifier-naming]
Optional<std::string> Process::FindInEnvPath(StringRef EnvName,
                               ^~~~~~~~~~~~~~
                               findInEnvPath
/home/jonas/opt/llvm/lib/Support/Process.cpp:39:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!path::is_absolute(FileName));
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Process.cpp:39:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  assert(!path::is_absolute(FileName));
          ^
../include/llvm/Support/Path.h:432:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/Process.cpp:42:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!OptPath.hasValue())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/Process.cpp:47:41: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  SplitString(OptPath.getValue(), Dirs, EnvPathSeparatorStr);
                                        ^
/home/jonas/opt/llvm/lib/Support/Process.cpp:50:21: warning: statement should be inside braces [readability-braces-around-statements]
    if (Dir.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Process.cpp:53:81: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (any_of(IgnoreList, [&](StringRef S) { return fs::equivalent(S, Dir); }))
                                                                                ^
                                                                                 {
/home/jonas/opt/llvm/lib/Support/Process.cpp:57:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    path::append(FilePath, FileName);
    ^
../include/llvm/Support/Path.h:178:42: note: default parameter was declared here
                                         const Twine &b = "",
                                         ^
/home/jonas/opt/llvm/lib/Support/Process.cpp:81:19: warning: invalid case style for variable 'colorcodes' [readability-identifier-naming]
static const char colorcodes[2][2][8][10] = {
                  ^~~~~~~~~~~
                  Colorcodes
/home/jonas/opt/llvm/lib/Support/Process.cpp:88:13: warning: invalid case style for variable 'coreFilesPrevented' [readability-identifier-naming]
static bool coreFilesPrevented = !LLVM_ENABLE_CRASH_DUMPS;
            ^~~~~~~~~~~~~~~~~~
            CoreFilesPrevented
/home/jonas/opt/llvm/lib/Support/Process.cpp:90:15: warning: invalid case style for function 'AreCoreFilesPrevented' [readability-identifier-naming]
bool Process::AreCoreFilesPrevented() { return coreFilesPrevented; }
              ^~~~~~~~~~~~~~~~~~~~~~
              areCoreFilesPrevented
../include/llvm/ADT/DenseMap.h:545:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    ::new (&TheBucket->getSecond()) ValueT(std::forward<ValueArgs>(Values)...);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1275:15: note: default parameter was declared here
    KeyStatus(bool Required = false) : Required(Required) {}
              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:214:3: warning: function 'llvm::vfs::recursive_directory_iterator::recursive_directory_iterator' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  recursive_directory_iterator(FileSystem &FS, const Twine &Path,
  ^                                        ~~~
                                           FS_
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2155:36: note: the definition seen here
vfs::recursive_directory_iterator::recursive_directory_iterator(
                                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:214:3: note: differing parameters are named here: ('FS'), in definition: ('FS_')
  recursive_directory_iterator(FileSystem &FS, const Twine &Path,
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:318:3: warning: function 'llvm::vfs::OverlayFileSystem::OverlayFileSystem' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  OverlayFileSystem(IntrusiveRefCntPtr<FileSystem> Base);
  ^                                                ~~~~~
                                                   BaseFS
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:334:20: note: the definition seen here
OverlayFileSystem::OverlayFileSystem(IntrusiveRefCntPtr<FileSystem> BaseFS) {
                   ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:318:3: note: differing parameters are named here: ('Base'), in definition: ('BaseFS')
  OverlayFileSystem(IntrusiveRefCntPtr<FileSystem> Base);
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:396:8: warning: function 'llvm::vfs::InMemoryFileSystem::addFile' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool addFile(const Twine &Path, time_t ModificationTime,
       ^                    ~~~~~
                            P
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:628:26: note: the definition seen here
bool InMemoryFileSystem::addFile(const Twine &P, time_t ModificationTime,
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:396:8: note: differing parameters are named here: ('Path'), in definition: ('P')
  bool addFile(const Twine &Path, time_t ModificationTime,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:413:8: warning: function 'llvm::vfs::InMemoryFileSystem::addFile' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool addFile(const Twine &Path, time_t ModificationTime,
       ^                    ~~~~~
                            P
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:719:26: note: the definition seen here
bool InMemoryFileSystem::addFile(const Twine &P, time_t ModificationTime,
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:413:8: note: differing parameters are named here: ('Path'), in definition: ('P')
  bool addFile(const Twine &Path, time_t ModificationTime,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:431:8: warning: function 'llvm::vfs::InMemoryFileSystem::addHardLink' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool addHardLink(const Twine &From, const Twine &To);
       ^                        ~~~~~              ~~~
                                FromPath           ToPath
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:786:26: note: the definition seen here
bool InMemoryFileSystem::addHardLink(const Twine &FromPath,
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:431:8: note: differing parameters are named here: ('From', 'To'), in definition: ('FromPath', 'ToPath')
  bool addHardLink(const Twine &From, const Twine &To);
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:439:8: warning: function 'llvm::vfs::InMemoryFileSystem::addFileNoOwn' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  bool addFileNoOwn(const Twine &Path, time_t ModificationTime,
       ^                         ~~~~~
                                 P
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:729:26: note: the definition seen here
bool InMemoryFileSystem::addFileNoOwn(const Twine &P, time_t ModificationTime,
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:439:8: note: differing parameters are named here: ('Path'), in definition: ('P')
  bool addFileNoOwn(const Twine &Path, time_t ModificationTime,
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:467:19: warning: function 'llvm::vfs::InMemoryFileSystem::setCurrentWorkingDirectory' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  std::error_code setCurrentWorkingDirectory(const Twine &Path) override;
                  ^                                       ~~~~~
                                                          P
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:886:37: note: the definition seen here
std::error_code InMemoryFileSystem::setCurrentWorkingDirectory(const Twine &P) {
                                    ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/VirtualFileSystem.h:467:19: note: differing parameters are named here: ('Path'), in definition: ('P')
  std::error_code setCurrentWorkingDirectory(const Twine &Path) override;
                  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:57:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:58:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::vfs;
^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:89:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(isStatusKnown() && Other.isStatusKnown());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:117:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!F)
         ^
          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:124:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (llvm::sys::path::is_absolute(Path))
      ^
../include/llvm/Support/Path.h:432:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:124:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (llvm::sys::path::is_absolute(Path))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:128:19: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!WorkingDir)
                  ^
                   {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:134:54: warning: parameter 'Path' is unused [misc-unused-parameters]
std::error_code FileSystem::getRealPath(const Twine &Path,
                                                     ^~~~~
                                                      /*Path*/
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:135:64: warning: parameter 'Output' is unused [misc-unused-parameters]
                                        SmallVectorImpl<char> &Output) const {
                                                               ^~~~~~~
                                                                /*Output*/
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:150:3: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
  using namespace llvm::sys;
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:152:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  for (StringRef Comp : llvm::make_range(path::begin(Path), path::end(Path)))
                                         ^
../include/llvm/Support/Path.h:102:38: note: default parameter was declared here
const_iterator begin(StringRef path, Style style = Style::native);
                                     ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:152:78: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (StringRef Comp : llvm::make_range(path::begin(Path), path::end(Path)))
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:153:36: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (isTraversalComponent(Comp))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:166:7: warning: class 'RealFile' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
class RealFile : public File {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:177:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(FD >= 0 && "Invalid or inactive file descriptor");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:194:25: warning: Call to virtual function during destruction [clang-analyzer-optin.cplusplus.VirtualCall]
RealFile::~RealFile() { close(); }
                        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:194:25: note: This destructor of an object of type '~RealFile' has not returned when the virtual method was called
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:194:25: note: Call to virtual function during destruction
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:197:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(FD != -1 && "cannot stat closed file");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:200:62: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (std::error_code EC = sys::fs::status(FD, RealStatus))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:204:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return S;
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:208:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return RealName.empty() ? S.getName().str() : RealName;
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:214:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(FD != -1 && "cannot get buffer for closed file");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:231:34: warning: function '(anonymous namespace)::RealFileSystem::openFileForRead' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  ErrorOr<std::unique_ptr<File>> openFileForRead(const Twine &Path) override;
                                 ^                            ~~~~~
                                                              Name
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:254:17: note: the definition seen here
RealFileSystem::openFileForRead(const Twine &Name) {
                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:231:34: note: differing parameters are named here: ('Path'), in definition: ('Name')
  ErrorOr<std::unique_ptr<File>> openFileForRead(const Twine &Path) override;
                                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:248:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code EC = sys::fs::status(Path, RealStatus))
                           ^
../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:248:62: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (std::error_code EC = sys::fs::status(Path, RealStatus))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:250:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Status::copyWithNewName(RealStatus, Path.str());
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:258:75: warning: statement should be inside braces [hicpp-braces-around-statements]
          sys::fs::openFileForRead(Name, FD, sys::fs::OF_None, &RealName))
                                                                          ^
                                                                           {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:260:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::unique_ptr<File>(new RealFile(FD, Name.str(), RealName.str()));
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:265:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!CWDCache.empty())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:266:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return CWDCache;
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:268:61: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (std::error_code EC = llvm::sys::fs::current_path(Dir))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:271:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return CWDCache;
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:282:55: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto EC = llvm::sys::fs::set_current_path(Path))
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:288:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:294:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return llvm::sys::fs::real_path(Path, Output);
         ^
../include/llvm/Support/FileSystem.h:350:27: note: default parameter was declared here
                          bool expand_tilde = false);
                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:308:53: warning: non-const reference parameter 'EC', make it const or use a pointer [google-runtime-references]
  RealFSDirIter(const Twine &Path, std::error_code &EC) : Iter(Path, EC) {
                                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:308:59: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  RealFSDirIter(const Twine &Path, std::error_code &EC) : Iter(Path, EC) {
                                                          ^
../include/llvm/Support/FileSystem.h:1179:31: note: default parameter was declared here
                              bool follow_symlinks = true)
                              ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:309:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Iter != llvm::sys::fs::directory_iterator())
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:338:68: warning: the parameter 'FS' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
void OverlayFileSystem::pushOverlay(IntrusiveRefCntPtr<FileSystem> FS) {
                                    ~~~~~~~~~~~~~~~~~~             ^
                                    const                         &
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:349:78: warning: statement should be inside braces [readability-braces-around-statements]
    if (Status || Status.getError() != llvm::errc::no_such_file_or_directory)
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:360:78: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Result || Result.getError() != llvm::errc::no_such_file_or_directory)
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:374:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto &FS : FSList)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:375:67: warning: statement should be inside braces [readability-braces-around-statements]
    if (std::error_code EC = FS->setCurrentWorkingDirectory(Path))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:383:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (auto &FS : FSList)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:384:26: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (FS->exists(Path))
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:401:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(CurrentFS != Overlays.overlays_end() && "incrementing past end");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:406:55: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EC && EC != errc::no_such_file_or_directory)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:408:50: warning: statement should be inside braces [readability-braces-around-statements]
      if (CurrentDirIter != directory_iterator())
                                                 ^
                                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:415:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert((IsFirstTime || CurrentDirIter != directory_iterator()) &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:418:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!IsFirstTime)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:420:55: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!EC && CurrentDirIter == directory_iterator())
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:433:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef Name = llvm::sys::path::filename(CurrentEntry.path());
                       ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:434:41: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (SeenNames.insert(Name).second)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:441:62: warning: non-const reference parameter 'FS', make it const or use a pointer [google-runtime-references]
  OverlayFSDirIterImpl(const Twine &Path, OverlayFileSystem &FS,
                                                             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:442:41: warning: non-const reference parameter 'EC', make it const or use a pointer [google-runtime-references]
                       std::error_code &EC)
                                        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:468:7: warning: class 'InMemoryNode' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class InMemoryNode {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:474:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      : Kind(Kind), FileName(llvm::sys::path::filename(FileName)) {}
                             ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:501:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return (std::string(Indent, ' ') + Stat.getName() + "\n").str();
            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:520:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return std::string(Indent, ' ') + "HardLink to -> " +
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:543:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Node.getStatus(RequestedName);
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:547:26: warning: parameter 'Name' is unused [misc-unused-parameters]
  getBuffer(const Twine &Name, int64_t FileSize, bool RequiresNullTerminator,
                         ^~~~~
                          /*Name*/
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:547:40: warning: parameter 'FileSize' is unused [misc-unused-parameters]
  getBuffer(const Twine &Name, int64_t FileSize, bool RequiresNullTerminator,
                                       ^~~~~~~~~
                                        /*FileSize*/
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:548:18: warning: parameter 'IsVolatile' is unused [misc-unused-parameters]
            bool IsVolatile) override {
                 ^~~~~~~~~~~
                  /*IsVolatile*/
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:550:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return llvm::MemoryBuffer::getMemBuffer(
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:563:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [hicpp-explicit-conversions]
  InMemoryDirectory(Status Stat)
  ^~~~~~~~~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:574:28: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (I != Entries.end())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:591:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        (std::string(Indent, ' ') + Stat.getName() + "\n").str();
         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:592:38: warning: statement should be inside braces [readability-braces-around-statements]
    for (const auto &Entry : Entries)
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:604:60: warning: statement should be inside braces [readability-braces-around-statements]
  if (auto Dir = dyn_cast<detail::InMemoryDirectory>(Node))
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:606:56: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto File = dyn_cast<detail::InMemoryFile>(Node))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:608:60: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto Link = dyn_cast<detail::InMemoryHardLink>(Node))
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:640:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!EC);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:643:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (useNormalizedPaths())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:644:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    llvm::sys::path::remove_dots(Path, /*remove_dot_dot=*/true);
    ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:646:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Path.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:650:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  auto I = llvm::sys::path::begin(Path), E = sys::path::end(Path);
           ^
../include/llvm/Support/Path.h:102:38: note: default parameter was declared here
const_iterator begin(StringRef path, Style style = Style::native);
                                     ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:655:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!(HardLinkTarget && Buffer) && "HardLink cannot have a buffer");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:663:10: warning: implicit conversion 'detail::InMemoryNode *' -> bool [readability-implicit-bool-conversion]
    if (!Node) {
        ~^~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:667:13: warning: implicit conversion 'const detail::InMemoryFile *' -> bool [readability-implicit-bool-conversion]
        if (HardLinkTarget)
            ^             ~
                           != nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:667:28: warning: statement should be inside braces [readability-braces-around-statements]
        if (HardLinkTarget)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:668:17: warning: use std::make_unique instead [modernize-make-unique]
          Child.reset(new detail::InMemoryHardLink(P.str(), *HardLinkTarget));
               ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                       ~~
                = std::make_unique<detail::InMemoryHardLink>
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:668:23: warning: initializing non-owner argument of type 'std::unique_ptr<llvm::vfs::detail::InMemoryNode, std::default_delete<llvm::vfs::detail::InMemoryNode> >::pointer' (aka 'llvm::vfs::detail::InMemoryNode *') with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
          Child.reset(new detail::InMemoryHardLink(P.str(), *HardLinkTarget));
                      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:676:19: warning: use std::make_unique instead [modernize-make-unique]
            Child.reset(new detail::InMemoryDirectory(std::move(Stat)));
                 ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~            ~~
                  = std::make_unique<detail::InMemoryDirectory>
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:676:25: warning: initializing non-owner argument of type 'std::unique_ptr<llvm::vfs::detail::InMemoryNode, std::default_delete<llvm::vfs::detail::InMemoryNode> >::pointer' (aka 'llvm::vfs::detail::InMemoryNode *') with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
            Child.reset(new detail::InMemoryDirectory(std::move(Stat)));
                        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:678:19: warning: use std::make_unique instead [modernize-make-unique]
            Child.reset(
                 ~^~~~~~
                  = std::make_unique<detail::InMemoryFile>
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:679:17: warning: initializing non-owner argument of type 'std::unique_ptr<llvm::vfs::detail::InMemoryNode, std::default_delete<llvm::vfs::detail::InMemoryNode> >::pointer' (aka 'llvm::vfs::detail::InMemoryNode *') with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
                new detail::InMemoryFile(std::move(Stat), std::move(Buffer)));
                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:700:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert((isa<detail::InMemoryFile>(Node) ||
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:705:18: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (I != E)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:736:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                 llvm::MemoryBuffer::getMemBuffer(
                 ^
../include/llvm/Support/MemoryBuffer.h:111:16: note: default parameter was declared here
               bool RequiresNullTerminator = true);
               ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:738:18: warning: std::move of the variable 'User' of the trivially-copyable type 'Optional<uint32_t>' (aka 'Optional<unsigned int>') has no effect; remove std::move() [performance-move-const-arg]
                 std::move(User), std::move(Group), std::move(Type),
                 ^~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:738:35: warning: std::move of the variable 'Group' of the trivially-copyable type 'Optional<uint32_t>' (aka 'Optional<unsigned int>') has no effect; remove std::move() [performance-move-const-arg]
                 std::move(User), std::move(Group), std::move(Type),
                                  ^~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:738:53: warning: std::move of the variable 'Type' of the trivially-copyable type 'Optional<llvm::sys::fs::file_type>' has no effect; remove std::move() [performance-move-const-arg]
                 std::move(User), std::move(Group), std::move(Type),
                                                    ^~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:739:18: warning: std::move of the variable 'Perms' of the trivially-copyable type 'Optional<llvm::sys::fs::perms>' has no effect; remove std::move() [performance-move-const-arg]
                 std::move(Perms));
                 ^~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:750:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!EC);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:753:31: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FS.useNormalizedPaths())
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:754:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    llvm::sys::path::remove_dots(Path, /*remove_dot_dot=*/true);
    ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:756:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Path.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:757:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Dir;
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:759:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  auto I = llvm::sys::path::begin(Path), E = llvm::sys::path::end(Path);
           ^
../include/llvm/Support/Path.h:102:38: note: default parameter was declared here
const_iterator begin(StringRef path, Style style = Style::native);
                                     ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:763:10: warning: implicit conversion 'detail::InMemoryNode *' -> bool [readability-implicit-bool-conversion]
    if (!Node)
        ~^~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:763:15: warning: statement should be inside braces [readability-braces-around-statements]
    if (!Node)
              ^
               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:764:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return errc::no_such_file_or_directory;
             ^
../include/llvm/Support/ErrorOr.h:76:11: note: default parameter was declared here
          typename std::enable_if<std::is_error_code_enum<E>::value ||
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:768:18: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (I == E)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:769:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return File;
               ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:770:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return errc::no_such_file_or_directory;
             ^
../include/llvm/Support/ErrorOr.h:76:11: note: default parameter was declared here
          typename std::enable_if<std::is_error_code_enum<E>::value ||
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:775:18: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (I == E)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:776:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return &File->getResolvedFile();
               ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:777:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return errc::no_such_file_or_directory;
             ^
../include/llvm/Support/ErrorOr.h:76:11: note: default parameter was declared here
          typename std::enable_if<std::is_error_code_enum<E>::value ||
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:781:16: warning: statement should be inside braces [readability-braces-around-statements]
    if (I == E)
               ^
                {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:782:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Dir;
             ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:792:66: warning: statement should be inside braces [readability-braces-around-statements]
  if (!ToNode || FromNode || !isa<detail::InMemoryFile>(*ToNode))
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:800:12: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Node)
           ^
            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:801:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return detail::getNodeStatus(*Node, Path.str());
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:808:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!Node)
            ^
             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:813:55: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (auto *F = dyn_cast<detail::InMemoryFile>(*Node))
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:814:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return std::unique_ptr<File>(
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:832:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      llvm::sys::path::append(Path, I->second->getFileName());
      ^
../include/llvm/Support/Path.h:180:42: note: default parameter was declared here
                                         const Twine &d = "");
                                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:878:66: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (auto *DirNode = dyn_cast<detail::InMemoryDirectory>(*Node))
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:892:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!EC);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:895:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (useNormalizedPaths())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:896:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    llvm::sys::path::remove_dots(Path, /*remove_dot_dot=*/true);
    ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:898:21: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Path.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:907:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (!CWD || CWD->empty())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:910:38: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (auto EC = makeAbsolute(Output))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:912:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  llvm::sys::path::remove_dots(Output, /*remove_dot_dot=*/true);
  ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:928:7: warning: class 'Entry' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class Entry {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:963:12: warning: invalid case style for function 'contents_begin' [readability-identifier-naming]
  iterator contents_begin() { return Contents.begin(); }
           ^~~~~~~~~~~~~~~
           contentsBegin
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:964:12: warning: invalid case style for function 'contents_end' [readability-identifier-naming]
  iterator contents_end() { return Contents.end(); }
           ^~~~~~~~~~~~~
           contentsEnd
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1030:3: warning: function '(anonymous namespace)::VFSFromYamlDirIterImpl::VFSFromYamlDirIterImpl' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  VFSFromYamlDirIterImpl(const Twine &Path,
  ^                                   ~~~~~
                                      _Path
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2086:25: note: the definition seen here
VFSFromYamlDirIterImpl::VFSFromYamlDirIterImpl(
                        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1030:3: note: differing parameters are named here: ('Path'), in definition: ('_Path')
  VFSFromYamlDirIterImpl(const Twine &Path,
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1033:62: warning: non-const reference parameter 'ExternalFS', make it const or use a pointer [google-runtime-references]
                         bool IterateExternalFS, FileSystem &ExternalFS,
                                                             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1034:43: warning: non-const reference parameter 'EC', make it const or use a pointer [google-runtime-references]
                         std::error_code &EC);
                                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1140:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  RedirectingFileSystem(IntrusiveRefCntPtr<FileSystem> ExternalFS)
  ^~~~~~~~~~~~~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1153:20: warning: function '(anonymous namespace)::RedirectingFileSystem::lookupPath' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  ErrorOr<Entry *> lookupPath(const Twine &Path);
                   ^                       ~~~~~
                                           Path_
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1704:41: note: the definition seen here
ErrorOr<Entry *> RedirectingFileSystem::lookupPath(const Twine &Path_) {
                                        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1153:20: note: differing parameters are named here: ('Path'), in definition: ('Path_')
  ErrorOr<Entry *> lookupPath(const Twine &Path);
                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1177:66: warning: statement should be inside braces [readability-braces-around-statements]
      if (IsFallthrough && EC == errc::no_such_file_or_directory)
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1208:35: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (const auto &Root : Roots)
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1209:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      dumpEntry(Root.get());
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1212:45: note: default parameter was declared here
  LLVM_DUMP_METHOD void dumpEntry(Entry *E, int NumSpaces = 0) const {
                                            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1212:45: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
  LLVM_DUMP_METHOD void dumpEntry(Entry *E, int NumSpaces = 0) const {
                                            ^            ~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1214:14: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (int i = 0, e = NumSpaces; i < e; ++i)
             ^                     ~        ~~
             I                     I        I
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1214:21: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (int i = 0, e = NumSpaces; i < e; ++i)
                    ^                  ~~
                    E                  E
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1214:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (int i = 0, e = NumSpaces; i < e; ++i)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1221:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(DE && "Should be a directory");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1224:71: warning: statement should be inside braces [hicpp-braces-around-statements]
           llvm::make_range(DE->contents_begin(), DE->contents_end()))
                                                                      ^
                                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1238:52: warning: non-const reference parameter 'Result', make it const or use a pointer [google-runtime-references]
  bool parseScalarString(yaml::Node *N, StringRef &Result,
                                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1239:49: warning: non-const reference parameter 'Storage', make it const or use a pointer [google-runtime-references]
                         SmallVectorImpl<char> &Storage) {
                                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1242:10: warning: implicit conversion 'const llvm::yaml::ScalarNode *' -> bool [readability-implicit-bool-conversion]
    if (!S) {
        ~^~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1251:45: warning: non-const reference parameter 'Result', make it const or use a pointer [google-runtime-references]
  bool parseScalarBool(yaml::Node *N, bool &Result) {
                                            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1254:47: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!parseScalarString(N, Value, Storage))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1261:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (Value.equals_lower("false") || Value.equals_lower("off") ||
      ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1275:5: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [hicpp-explicit-conversions]
    KeyStatus(bool Required = false) : Required(Required) {}
    ^~~~~~~~~
    explicit 
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1275:15: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
    KeyStatus(bool Required = false) : Required(Required) {}
              ^            ~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1282:67: warning: non-const reference parameter 'Keys', make it const or use a pointer [google-runtime-references]
                                  DenseMap<StringRef, KeyStatus> &Keys) {
                                                                  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1283:10: warning: implicit conversion 'llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef, (anonymous namespace)::RedirectingFileSystemParser::KeyStatus, llvm::DenseMapInfo<llvm::StringRef>, llvm::detail::DenseMapPair<llvm::StringRef, (anonymous namespace)::RedirectingFileSystemParser::KeyStatus> >, llvm::StringRef, (anonymous namespace)::RedirectingFileSystemParser::KeyStatus, llvm::DenseMapInfo<llvm::StringRef>, llvm::detail::DenseMapPair<llvm::StringRef, (anonymous namespace)::RedirectingFileSystemParser::KeyStatus> >::size_type' (aka 'unsigned int') -> bool [readability-implicit-bool-conversion]
    if (!Keys.count(Key)) {
        ~^~~~           ~
                         == 0u
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1297:74: warning: non-const reference parameter 'Keys', make it const or use a pointer [google-runtime-references]
  bool checkMissingKeys(yaml::Node *Obj, DenseMap<StringRef, KeyStatus> &Keys) {
                                                                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1308:30: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                             Entry *ParentEntry = nullptr) {
                             ^                 ~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1309:10: warning: implicit conversion '(anonymous namespace)::Entry *' -> bool [readability-implicit-bool-conversion]
    if (!ParentEntry) { // Look for a existent root
        ~^~~~~~~~~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1321:13: warning: implicit conversion '(anonymous namespace)::RedirectingDirectoryEntry *' -> bool [readability-implicit-bool-conversion]
        if (DirContent && Name.equals(Content->getName()))
            ^~~~~~~~~~
            ( != nullptr)
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1321:59: warning: statement should be inside braces [readability-braces-around-statements]
        if (DirContent && Name.equals(Content->getName()))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1332:10: warning: implicit conversion '(anonymous namespace)::Entry *' -> bool [readability-implicit-bool-conversion]
    if (!ParentEntry) { // Add a new root to the overlay
        ~^~~~~~~~~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1344:26: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                         Entry *NewParentE = nullptr) {
                         ^                ~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1349:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(DE && "Must be a directory");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1353:25: warning: statement should be inside braces [readability-braces-around-statements]
      if (!Name.empty())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1356:71: warning: statement should be inside braces [readability-braces-around-statements]
           llvm::make_range(DE->contents_begin(), DE->contents_end()))
                                                                      ^
                                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1362:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(FE && "Must be a file");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1363:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(NewParentE && "Parent entry must exist");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1375:10: warning: implicit conversion 'llvm::yaml::MappingNode *' -> bool [readability-implicit-bool-conversion]
    if (!M) {
        ~^~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:55: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!parseScalarString(I.getKey(), Key, Buffer))
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:62: warning: statement should be inside braces [readability-braces-around-statements]
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1411:61: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarString(I.getValue(), Value, Buffer))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1419:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          Path = sys::path::remove_leading_dotslash(Path);
                 ^
../include/llvm/Support/Path.h:444:51: note: default parameter was declared here
StringRef remove_leading_dotslash(StringRef path, Style style = Style::native);
                                                  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1420:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          sys::path::remove_dots(Path, /*remove_dot_dot=*/true);
          ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1426:61: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarString(I.getValue(), Value, Buffer))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1428:29: warning: statement should be inside braces [readability-braces-around-statements]
        if (Value == "file")
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1430:39: warning: statement should be inside braces [readability-braces-around-statements]
        else if (Value == "directory")
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1444:14: warning: implicit conversion 'llvm::yaml::SequenceNode *' -> bool [readability-implicit-bool-conversion]
        if (!Contents) {
            ~^~~~~~~~~
             == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1452:61: warning: statement should be inside braces [hicpp-braces-around-statements]
                  parseEntry(&I, FS, /*IsRootEntry*/ false))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1454:15: warning: statement should be inside braces [readability-braces-around-statements]
          else
              ^
               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1464:61: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarString(I.getValue(), Value, Buffer))
                                                            ^
                                                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1470:11: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
          assert(!FullPath.empty() &&
          ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1472:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          llvm::sys::path::append(FullPath, Value);
          ^
../include/llvm/Support/Path.h:178:42: note: default parameter was declared here
                                         const Twine &b = "",
                                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1480:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          FullPath = sys::path::remove_leading_dotslash(FullPath);
                     ^
../include/llvm/Support/Path.h:444:51: note: default parameter was declared here
StringRef remove_leading_dotslash(StringRef path, Style style = Style::native);
                                                  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1481:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          sys::path::remove_dots(FullPath, /*remove_dot_dot=*/true);
          ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1486:49: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarBool(I.getValue(), Val))
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1495:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Stream.failed())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1503:36: warning: statement should be inside braces [readability-braces-around-statements]
    if (!checkMissingKeys(N, Keys))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1507:14: warning: The left operand of '==' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
    if (Kind == EK_Directory &&
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1375:9: note: Assuming 'M' is non-null
    if (!M) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1375:5: note: Taking false branch
    if (!M) {
    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is false
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking false branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:18: note: Assuming the condition is false
      } else if (Key == "external-contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:14: note: Taking false branch
      } else if (Key == "external-contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:18: note: Assuming the condition is true
      } else if (Key == "use-external-name") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:14: note: Taking true branch
      } else if (Key == "use-external-name") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1486:9: note: Taking false branch
        if (!parseScalarBool(I.getValue(), Val))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1488:27: note: '?' condition is false
        UseExternalName = Val ? RedirectingFileEntry::NK_External
                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is false
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking false branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:18: note: Assuming the condition is false
      } else if (Key == "external-contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:14: note: Taking false branch
      } else if (Key == "external-contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:18: note: Assuming the condition is true
      } else if (Key == "use-external-name") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:14: note: Taking true branch
      } else if (Key == "use-external-name") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1486:9: note: Taking false branch
        if (!parseScalarBool(I.getValue(), Val))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1488:27: note: '?' condition is false
        UseExternalName = Val ? RedirectingFileEntry::NK_External
                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is false
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking false branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:18: note: Assuming the condition is false
      } else if (Key == "external-contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:14: note: Taking false branch
      } else if (Key == "external-contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:18: note: Assuming the condition is true
      } else if (Key == "use-external-name") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:14: note: Taking true branch
      } else if (Key == "use-external-name") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1486:9: note: Taking false branch
        if (!parseScalarBool(I.getValue(), Val))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1488:27: note: '?' condition is false
        UseExternalName = Val ? RedirectingFileEntry::NK_External
                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is true
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking true branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1437:9: note: Taking false branch
        if (HasContents) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1444:13: note: Assuming 'Contents' is non-null
        if (!Contents) {
            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1444:9: note: Taking false branch
        if (!Contents) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1451:11: note: Taking true branch
          if (std::unique_ptr<Entry> E =
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1451:11: note: Taking true branch
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1451:11: note: Taking true branch
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1452:19: note: Calling 'RedirectingFileSystemParser::parseEntry'
                  parseEntry(&I, FS, /*IsRootEntry*/ false))
                  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1375:9: note: Assuming 'M' is non-null
    if (!M) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1375:5: note: Taking false branch
    if (!M) {
    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1396:5: note: 'Kind' declared without an initial value
    EntryKind Kind;
    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is false
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking false branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:18: note: Assuming the condition is false
      } else if (Key == "external-contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:14: note: Taking false branch
      } else if (Key == "external-contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:18: note: Assuming the condition is true
      } else if (Key == "use-external-name") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:14: note: Taking true branch
      } else if (Key == "use-external-name") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1486:9: note: Taking false branch
        if (!parseScalarBool(I.getValue(), Val))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1488:27: note: '?' condition is false
        UseExternalName = Val ? RedirectingFileEntry::NK_External
                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is false
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking false branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:18: note: Assuming the condition is false
      } else if (Key == "external-contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:14: note: Taking false branch
      } else if (Key == "external-contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:18: note: Assuming the condition is true
      } else if (Key == "use-external-name") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1484:14: note: Taking true branch
      } else if (Key == "use-external-name") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1486:9: note: Taking false branch
        if (!parseScalarBool(I.getValue(), Val))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1488:27: note: '?' condition is false
        UseExternalName = Val ? RedirectingFileEntry::NK_External
                          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1403:7: note: Taking false branch
      if (!parseScalarString(I.getKey(), Key, Buffer))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1406:7: note: Taking false branch
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:11: note: Assuming the condition is false
      if (Key == "name") {
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1410:7: note: Taking false branch
      if (Key == "name") {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:18: note: Assuming the condition is false
      } else if (Key == "type") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1425:14: note: Taking false branch
      } else if (Key == "type") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:18: note: Assuming the condition is false
      } else if (Key == "contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1436:14: note: Taking false branch
      } else if (Key == "contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:18: note: Assuming the condition is true
      } else if (Key == "external-contents") {
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1457:14: note: Taking true branch
      } else if (Key == "external-contents") {
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1458:9: note: Taking false branch
        if (HasContents) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1464:9: note: Taking false branch
        if (!parseScalarString(I.getValue(), Value, Buffer))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1468:13: note: Assuming the condition is false
        if (FS->IsRelativeOverlay) {
            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1468:9: note: Taking false branch
        if (FS->IsRelativeOverlay) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1477:13: note: Assuming the condition is false
        if (FS->UseCanonicalizedPaths) {
            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1477:9: note: Taking false branch
        if (FS->UseCanonicalizedPaths) {
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1495:9: note: Assuming the condition is false
    if (Stream.failed())
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1495:5: note: Taking false branch
    if (Stream.failed())
    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1499:5: note: Taking false branch
    if (!HasContents) {
    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1503:9: note: Assuming the condition is false
    if (!checkMissingKeys(N, Keys))
        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1503:5: note: Taking false branch
    if (!checkMissingKeys(N, Keys))
    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1507:14: note: The left operand of '==' is a garbage value
    if (Kind == EK_Directory &&
             ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1513:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (IsRootEntry && !sys::path::is_absolute(Name)) {
                        ^
../include/llvm/Support/Path.h:432:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1514:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
      assert(NameValueNode && "Name presence should be checked earlier");
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1522:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t RootPathLen = sys::path::root_path(Trimmed).size();
                         ^
../include/llvm/Support/Path.h:262:37: note: default parameter was declared here
StringRef root_path(StringRef path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1524:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
           sys::path::is_separator(Trimmed.back()))
           ^
../include/llvm/Support/Path.h:340:31: note: default parameter was declared here
bool is_separator(char value, Style style = Style::native);
                              ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1524:52: warning: statement should be inside braces [readability-braces-around-statements]
           sys::path::is_separator(Trimmed.back()))
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1527:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef LastComponent = sys::path::filename(Trimmed);
                              ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1543:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef Parent = sys::path::parent_path(Trimmed);
                       ^
../include/llvm/Support/Path.h:286:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style = Style::native);
                                      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1544:24: warning: statement should be inside braces [readability-braces-around-statements]
    if (Parent.empty())
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1548:42: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    for (sys::path::reverse_iterator I = sys::path::rbegin(Parent),
                                         ^
../include/llvm/Support/Path.h:112:41: note: default parameter was declared here
reverse_iterator rbegin(StringRef path, Style style = Style::native);
                                        ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1562:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  RedirectingFileSystemParser(yaml::Stream &S) : Stream(S) {}
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1562:45: warning: non-const reference parameter 'S', make it const or use a pointer [google-runtime-references]
  RedirectingFileSystemParser(yaml::Stream &S) : Stream(S) {}
                                            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1567:10: warning: implicit conversion 'llvm::yaml::MappingNode *' -> bool [readability-implicit-bool-conversion]
    if (!Top) {
        ~^~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1588:58: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!parseScalarString(I.getKey(), Key, KeyBuffer))
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1591:62: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!checkDuplicateOrUnknownKey(I.getKey(), Key, Keys))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1596:14: warning: implicit conversion 'llvm::yaml::SequenceNode *' -> bool [readability-implicit-bool-conversion]
        if (!Roots) {
            ~^~~~~~
             == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1603:60: warning: statement should be inside braces [hicpp-braces-around-statements]
                  parseEntry(&I, FS, /*IsRootEntry*/ true))
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1605:15: warning: statement should be inside braces [readability-braces-around-statements]
          else
              ^
               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1611:70: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarString(I.getValue(), VersionString, Storage))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1627:63: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (!parseScalarBool(I.getValue(), FS->CaseSensitive))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1630:67: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarBool(I.getValue(), FS->IsRelativeOverlay))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1633:66: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarBool(I.getValue(), FS->UseExternalNames))
                                                                 ^
                                                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1636:63: warning: statement should be inside braces [readability-braces-around-statements]
        if (!parseScalarBool(I.getValue(), FS->IsFallthrough))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1643:25: warning: statement should be inside braces [readability-braces-around-statements]
    if (Stream.failed())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1646:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!checkMissingKeys(Top, Keys))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1652:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (auto &E : RootEntries)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1653:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      uniqueOverlayTree(FS, E.get());
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1344:26: note: default parameter was declared here
                         Entry *NewParentE = nullptr) {
                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1667:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  yaml::Stream Stream(Buffer->getMemBufferRef(), SM);
               ^
../include/llvm/Support/YAMLParser.h:90:52: note: default parameter was declared here
  Stream(MemoryBufferRef InputBuffer, SourceMgr &, bool ShowColors = true,
                                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1672:30: warning: implicit conversion 'yaml::Node *' -> bool [readability-implicit-bool-conversion]
  if (DI == Stream.end() || !Root) {
                            ~^~~~~
                            ( == nullptr)
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1673:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SM.PrintMessage(SMLoc(), SourceMgr::DK_Error, "expected root node");
    ^
../include/llvm/Support/SourceMgr.h:200:21: note: default parameter was declared here
                    bool ShowColors = true) const;
                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1691:38: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SmallString<256> OverlayAbsDir = sys::path::parent_path(YAMLFilePath);
                                     ^
../include/llvm/Support/Path.h:286:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style = Style::native);
                                      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1693:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(!EC && "Overlay dir final path must be absolute");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1698:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (!P.parse(Root, FS.get()))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1704:65: warning: invalid case style for parameter 'Path_' [readability-identifier-naming]
ErrorOr<Entry *> RedirectingFileSystem::lookupPath(const Twine &Path_) {
                                                                ^~~~~~
                                                                Path
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1709:47: warning: statement should be inside braces [readability-braces-around-statements]
  if (std::error_code EC = makeAbsolute(Path))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1716:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Path = sys::path::remove_leading_dotslash(Path);
           ^
../include/llvm/Support/Path.h:444:51: note: default parameter was declared here
StringRef remove_leading_dotslash(StringRef path, Style style = Style::native);
                                                  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1717:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    sys::path::remove_dots(Path, /*remove_dot_dot=*/true);
    ^
../include/llvm/Support/Path.h:453:18: note: default parameter was declared here
                 Style style = Style::native);
                 ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1720:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Path.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1723:37: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  sys::path::const_iterator Start = sys::path::begin(Path);
                                    ^
../include/llvm/Support/Path.h:102:38: note: default parameter was declared here
const_iterator begin(StringRef path, Style style = Style::native);
                                     ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1727:78: warning: statement should be inside braces [readability-braces-around-statements]
    if (Result || Result.getError() != llvm::errc::no_such_file_or_directory)
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1737:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!isTraversalComponent(*Start) &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1752:56: warning: statement should be inside braces [readability-braces-around-statements]
                      : !Start->equals_lower(FromName))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1760:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return From;
             ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1765:8: warning: implicit conversion '(anonymous namespace)::RedirectingDirectoryEntry *' -> bool [readability-implicit-bool-conversion]
  if (!DE)
      ~^~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1765:11: warning: statement should be inside braces [readability-braces-around-statements]
  if (!DE)
          ^
           {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1771:78: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Result || Result.getError() != llvm::errc::no_such_file_or_directory)
                                                                             ^
                                                                              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1779:14: warning: parameter 'ExternalStatus' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
  Status S = ExternalStatus;
             ^~~~~~~~~~~~~~~
             std::move()
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1780:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (!UseExternalNames)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1787:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(E != nullptr);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1790:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
    assert(!S || S->getName() == F->getExternalContentsPath());
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1791:11: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (S)
          ^
           {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1792:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return getRedirectedFileStatus(Path, F->useExternalName(UseExternalNames),
             ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1795:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else { // directory
    ^~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1797:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Status::copyWithNewName(DE->getStatus(), Path.str());
           ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1824:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ErrorOr<Status> status() override { return S; }
                                             ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1850:8: warning: implicit conversion '(anonymous namespace)::RedirectingFileEntry *' -> bool [readability-implicit-bool-conversion]
  if (!F) // FIXME: errc::not_a_file?
      ~^~
       == nullptr
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1850:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!F) // FIXME: errc::not_a_file?
         ^
          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1854:15: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Result)
              ^
               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1858:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (!ExternalStatus)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1864:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::unique_ptr<File>(
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1878:68: warning: non-const reference parameter 'Path', make it const or use a pointer [google-runtime-references]
static void getVFSEntries(Entry *SrcE, SmallVectorImpl<StringRef> &Path,
                                                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1879:58: warning: non-const reference parameter 'Entries', make it const or use a pointer [google-runtime-references]
                          SmallVectorImpl<YAMLVFSEntry> &Entries) {
                                                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1883:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(DE && "Must be a directory");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1893:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Kind == EK_File && "Must be a EK_File");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1895:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(FE && "Must be a file");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1897:26: warning: statement should be inside braces [readability-braces-around-statements]
  for (auto &Comp : Path)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1898:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    llvm::sys::path::append(VPath, Comp);
    ^
../include/llvm/Support/Path.h:180:42: note: default parameter was declared here
                                         const Twine &d = "");
                                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1911:28: warning: Potential leak of memory pointed to by 'VFS' [clang-analyzer-cplusplus.NewDeleteLeaks]
  ErrorOr<Entry *> RootE = VFS->lookupPath("/");
                           ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1908:32: note: Calling 'RedirectingFileSystem::create'
  RedirectingFileSystem *VFS = RedirectingFileSystem::create(
                               ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1672:7: note: Left side of '||' is false
  if (DI == Stream.end() || !Root) {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1672:29: note: Assuming 'Root' is non-null
  if (DI == Stream.end() || !Root) {
                            ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1672:3: note: Taking false branch
  if (DI == Stream.end() || !Root) {
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1680:7: note: Memory is allocated
      new RedirectingFileSystem(std::move(ExternalFS)));
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1682:7: note: Assuming the condition is false
  if (!YAMLFilePath.empty()) {
      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1682:3: note: Taking false branch
  if (!YAMLFilePath.empty()) {
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1698:3: note: Taking false branch
  if (!P.parse(Root, FS.get()))
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1908:32: note: Returned allocated memory
  RedirectingFileSystem *VFS = RedirectingFileSystem::create(
                               ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1911:28: note: Potential leak of memory pointed to by 'VFS'
  ErrorOr<Entry *> RootE = VFS->lookupPath("/");
                           ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1912:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!RootE)
             ^
              {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1924:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return UniqueID(std::numeric_limits<uint64_t>::max(), ID);
         ^~~~~~~~~~~~                                     ~~
         {                                                }
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1928:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(sys::path::is_absolute(VirtualPath) && "virtual path not absolute");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1928:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  assert(sys::path::is_absolute(VirtualPath) && "virtual path not absolute");
         ^
../include/llvm/Support/Path.h:432:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1929:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(sys::path::is_absolute(RealPath) && "real path not absolute");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1929:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  assert(sys::path::is_absolute(RealPath) && "real path not absolute");
         ^
../include/llvm/Support/Path.h:432:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1930:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!pathHasTraversal(VirtualPath) && "path traversal is not supported");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1949:3: warning: single-argument constructors must be marked explicit to avoid unintentional implicit conversions [google-explicit-constructor]
  JSONWriter(llvm::raw_ostream &OS) : OS(OS) {}
  ^~~~~~~~~~
  explicit 
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1959:3: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
  using namespace llvm::sys;
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1962:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  auto IParent = path::begin(Parent), EParent = path::end(Parent);
                 ^
../include/llvm/Support/Path.h:102:38: note: default parameter was declared here
const_iterator begin(StringRef path, Style style = Style::native);
                                     ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1963:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  for (auto IChild = path::begin(Path), EChild = path::end(Path);
                     ^
../include/llvm/Support/Path.h:102:38: note: default parameter was declared here
const_iterator begin(StringRef path, Style style = Style::native);
                                     ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1965:29: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (*IParent != *IChild)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1973:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!Parent.empty());
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1974:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(containedIn(Parent, Path));
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:1985:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS.indent(Indent + 2) << "'name': \"" << llvm::yaml::escape(Name) << "\",\n";
                                           ^
../include/llvm/Support/YAMLParser.h:80:37: note: default parameter was declared here
std::string escape(StringRef Input, bool EscapePrintable = true);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2001:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  OS.indent(Indent + 2) << "'name': \"" << llvm::yaml::escape(VPath) << "\",\n";
                                           ^
../include/llvm/Support/YAMLParser.h:80:37: note: default parameter was declared here
std::string escape(StringRef Input, bool EscapePrintable = true);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2003:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                        << llvm::yaml::escape(RPath) << "\"\n";
                           ^
../include/llvm/Support/YAMLParser.h:80:37: note: default parameter was declared here
std::string escape(StringRef Input, bool EscapePrintable = true);
                                    ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2012:3: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
  using namespace llvm::sys;
  ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2016:34: warning: statement should be inside braces [readability-braces-around-statements]
  if (IsCaseSensitive.hasValue())
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2019:35: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (UseExternalNames.hasValue())
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2032:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    startDirectory(path::parent_path(Entry.VPath));
                   ^
../include/llvm/Support/Path.h:286:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style = Style::native);
                                      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2037:7: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
      assert(RPath.substr(0, OverlayDirLen) == OverlayDir &&
      ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2042:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    writeEntry(path::filename(Entry.VPath), RPath);
               ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2045:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef Dir = path::parent_path(Entry.VPath);
                      ^
../include/llvm/Support/Path.h:286:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style = Style::native);
                                      ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2046:34: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Dir == DirStack.back())
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2059:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
        assert(RPath.substr(0, OverlayDirLen) == OverlayDir &&
        ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2063:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      writeEntry(path::filename(Entry.VPath), RPath);
                 ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2087:18: warning: invalid case style for parameter '_Path' [readability-identifier-naming]
    const Twine &_Path, RedirectingDirectoryEntry::iterator Begin,
                 ^~~~~~
                 Path
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2100:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!(IsExternalFSCurrent && ExternalDirIter == directory_iterator()) &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2108:53: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (EC && EC != errc::no_such_file_or_directory)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2121:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((IsFirstTime || Current != End) && "cannot iterate past end");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2122:20: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!IsFirstTime)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2126:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    llvm::sys::path::append(PathStr, (*Current)->getName());
    ^
../include/llvm/Support/Path.h:178:42: note: default parameter was declared here
                                         const Twine &b = "",
                                         ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2146:43: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (EC || CurrentEntry.path().empty())
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2148:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef Name = llvm::sys::path::filename(CurrentEntry.path());
                     ^
../include/llvm/Support/Path.h:300:36: note: default parameter was declared here
StringRef filename(StringRef path, Style style = Style::native);
                                   ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2149:39: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (SeenNames.insert(Name).second)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2156:17: warning: invalid case style for parameter 'FS_' [readability-identifier-naming]
    FileSystem &FS_, const Twine &Path, std::error_code &EC)
                ^~~~
                Fs
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2167:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(FS && State && !State->Stack.empty() && "incrementing past end");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2168:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!State->Stack.top()->path().empty() && "non-canonical end iterator");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2171:31: warning: statement should be inside braces [readability-braces-around-statements]
  if (State->HasNoPushRequest)
                              ^
                               {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2183:75: warning: statement should be inside braces [readability-braces-around-statements]
  while (!State->Stack.empty() && State->Stack.top().increment(EC) == End)
                                                                          ^
                                                                           {
/home/jonas/opt/llvm/lib/Support/VirtualFileSystem.cpp:2186:28: warning: statement should be inside braces [readability-braces-around-statements]
  if (State->Stack.empty())
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/Host.cpp:15:1: warning: #includes are not sorted properly [llvm-include-order]
#include "llvm/Support/TargetParser.h"
^        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         "llvm/ADT/SmallSet.h"
/home/jonas/opt/llvm/lib/Support/Host.cpp:26:10: warning: inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead [hicpp-deprecated-headers]
#include <assert.h>
         ^~~~~~~~~~
         <cassert>
/home/jonas/opt/llvm/lib/Support/Host.cpp:27:10: warning: inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead [hicpp-deprecated-headers]
#include <string.h>
         ^~~~~~~~~~
         <cstring>
/home/jonas/opt/llvm/lib/Support/Host.cpp:54:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Host.cpp:72:15: warning: invalid case style for variable 'generic' [readability-identifier-naming]
  const char *generic = "generic";
              ^~~~~~~
              Generic
/home/jonas/opt/llvm/lib/Support/Host.cpp:81:40: warning: use nullptr [hicpp-use-nullptr]
  StringRef::const_iterator CPUStart = 0;
                                       ^~
                                       nullptr
/home/jonas/opt/llvm/lib/Support/Host.cpp:86:42: warning: use nullptr [modernize-use-nullptr]
  while (CIP < CPUInfoEnd && CPUStart == 0) {
                                         ^~
                                         nullptr
/home/jonas/opt/llvm/lib/Support/Host.cpp:87:42: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CIP < CPUInfoEnd && *CIP == '\n')
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Host.cpp:96:68: warning: statement should be inside braces [hicpp-braces-around-statements]
          while (CIP < CPUInfoEnd && (*CIP == ' ' || *CIP == '\t'))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/Host.cpp:101:70: warning: statement should be inside braces [hicpp-braces-around-statements]
            while (CIP < CPUInfoEnd && (*CIP == ' ' || *CIP == '\t'))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:107:72: warning: statement should be inside braces [hicpp-braces-around-statements]
                                          *CIP != ',' && *CIP != '\n'))
                                                                       ^
                                                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:116:21: warning: use nullptr [hicpp-use-nullptr]
    if (CPUStart == 0)
                    ^~
                    nullptr
/home/jonas/opt/llvm/lib/Support/Host.cpp:116:23: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (CPUStart == 0)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:117:47: warning: statement should be inside braces [hicpp-braces-around-statements]
      while (CIP < CPUInfoEnd && *CIP != '\n')
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Host.cpp:121:19: warning: use nullptr [hicpp-use-nullptr]
  if (CPUStart == 0)
                  ^~
                  nullptr
/home/jonas/opt/llvm/lib/Support/Host.cpp:121:21: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (CPUStart == 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:154:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ProcCpuinfoContent.split(Lines, "\n");
  ^
../include/llvm/ADT/StringRef.h:783:16: note: default parameter was declared here
               bool KeepEmpty = true) const;
               ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:160:48: warning: statement should be inside braces [readability-braces-around-statements]
    if (Lines[I].startswith("CPU implementer"))
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/Host.cpp:161:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Implementer = Lines[I].substr(15).ltrim("\t :");
                    ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:162:41: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (Lines[I].startswith("Hardware"))
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/Host.cpp:163:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Hardware = Lines[I].substr(8).ltrim("\t :");
                 ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:169:70: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Hardware.endswith("MSM8994") || Hardware.endswith("MSM8996"))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:174:56: warning: statement should be inside braces [hicpp-braces-around-statements]
    for (unsigned I = 0, E = Lines.size(); I != E; ++I)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:175:43: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (Lines[I].startswith("CPU part"))
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Host.cpp:179:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return StringSwitch<const char *>(Lines[I].substr(8).ltrim("\t :"))
                                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:202:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return StringSwitch<const char *>(Lines[I].substr(8).ltrim("\t :"))
                                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:214:29: warning: statement should be inside braces [readability-braces-around-statements]
  if (Implementer == "0x51") // Qualcomm Technologies, Inc.
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Host.cpp:216:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    for (unsigned I = 0, E = Lines.size(); I != E; ++I)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:217:43: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (Lines[I].startswith("CPU part"))
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Host.cpp:221:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        return StringSwitch<const char *>(Lines[I].substr(8).ltrim("\t :"))
                                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:239:25: warning: statement should be inside braces [readability-braces-around-statements]
    for (auto I : Lines)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Host.cpp:240:42: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (I.consume_front("CPU variant"))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Host.cpp:245:25: warning: statement should be inside braces [hicpp-braces-around-statements]
    for (auto I : Lines)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Host.cpp:246:39: warning: statement should be inside braces [readability-braces-around-statements]
      if (I.consume_front("CPU part"))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:249:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    unsigned Exynos = (Variant << 12) | Part;
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:272:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  ProcCpuinfoContent.split(Lines, "\n");
  ^
../include/llvm/ADT/StringRef.h:782:37: note: default parameter was declared here
               StringRef Separator, int MaxSplit = -1,
                                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:276:54: warning: statement should be inside braces [readability-braces-around-statements]
  for (unsigned I = 0, E = Lines.size(); I != E; ++I)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:278:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      size_t Pos = Lines[I].find(":");
                   ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:280:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        Lines[I].drop_front(Pos + 1).split(CPUFeatures, ' ');
        ^
../include/llvm/ADT/StringRef.h:799:63: note: default parameter was declared here
    void split(SmallVectorImpl<StringRef> &A, char Separator, int MaxSplit = -1,
                                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:290:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (CPUFeatures[I] == "vx")
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Host.cpp:297:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      size_t Pos = Lines[I].find("machine = ");
                   ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:302:47: warning: statement should be inside braces [readability-braces-around-statements]
          if (Id >= 3906 && HaveVectorSupport)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Host.cpp:304:47: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (Id >= 2964 && HaveVectorSupport)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Host.cpp:306:26: warning: statement should be inside braces [hicpp-braces-around-statements]
          if (Id >= 2827)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Host.cpp:308:26: warning: statement should be inside braces [readability-braces-around-statements]
          if (Id >= 2817)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Host.cpp:323:11: warning: invalid case style for variable 'insns' [readability-identifier-naming]
  uint8_t insns[40] __attribute__ ((aligned (8))) =
          ^~~~~~
          Insns
/home/jonas/opt/llvm/lib/Support/Host.cpp:335:10: warning: invalid case style for class 'bpf_prog_load_attr' [readability-identifier-naming]
  struct bpf_prog_load_attr {
         ^~~~~~~~~~~~~~~~~~
         BpfProgLoadAttr
/home/jonas/opt/llvm/lib/Support/Host.cpp:336:14: warning: invalid case style for member 'prog_type' [readability-identifier-naming]
    uint32_t prog_type;
             ^~~~~~~~~~
             ProgType
/home/jonas/opt/llvm/lib/Support/Host.cpp:337:14: warning: invalid case style for member 'insn_cnt' [readability-identifier-naming]
    uint32_t insn_cnt;
             ^~~~~~~~~
             InsnCnt
/home/jonas/opt/llvm/lib/Support/Host.cpp:338:14: warning: invalid case style for member 'insns' [readability-identifier-naming]
    uint64_t insns;
             ^~~~~~
             Insns
/home/jonas/opt/llvm/lib/Support/Host.cpp:339:14: warning: invalid case style for member 'license' [readability-identifier-naming]
    uint64_t license;
             ^~~~~~~~
             License
/home/jonas/opt/llvm/lib/Support/Host.cpp:340:14: warning: invalid case style for member 'log_level' [readability-identifier-naming]
    uint32_t log_level;
             ^~~~~~~~~~
             LogLevel
/home/jonas/opt/llvm/lib/Support/Host.cpp:341:14: warning: invalid case style for member 'log_size' [readability-identifier-naming]
    uint32_t log_size;
             ^~~~~~~~~
             LogSize
/home/jonas/opt/llvm/lib/Support/Host.cpp:342:14: warning: invalid case style for member 'log_buf' [readability-identifier-naming]
    uint64_t log_buf;
             ^~~~~~~~
             LogBuf
/home/jonas/opt/llvm/lib/Support/Host.cpp:343:14: warning: invalid case style for member 'kern_version' [readability-identifier-naming]
    uint32_t kern_version;
             ^~~~~~~~~~~~~
             KernVersion
/home/jonas/opt/llvm/lib/Support/Host.cpp:344:14: warning: invalid case style for member 'prog_flags' [readability-identifier-naming]
    uint32_t prog_flags;
             ^~~~~~~~~~~
             ProgFlags
/home/jonas/opt/llvm/lib/Support/Host.cpp:345:5: warning: invalid case style for variable 'attr' [readability-identifier-naming]
  } attr = {};
    ^~~~
    Attr
/home/jonas/opt/llvm/lib/Support/Host.cpp:348:16: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  attr.insns = (uint64_t)insns;
               ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:348:16: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Host.cpp:349:18: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  attr.license = (uint64_t)"DUMMY";
                 ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:349:18: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Host.cpp:351:7: warning: invalid case style for variable 'fd' [readability-identifier-naming]
  int fd = syscall(321 /* __NR_bpf */, 5 /* BPF_PROG_LOAD */, &attr, sizeof(attr));
      ^~
      Fd
/home/jonas/opt/llvm/lib/Support/Host.cpp:351:12: warning: do not call c-style vararg functions [hicpp-vararg]
  int fd = syscall(321 /* __NR_bpf */, 5 /* BPF_PROG_LOAD */, &attr, sizeof(attr));
           ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:405:41: warning: invalid case style for parameter 'value' [readability-identifier-naming]
static bool getX86CpuIDAndInfo(unsigned value, unsigned *rEAX, unsigned *rEBX,
                                        ^~~~~~
                                        Value
/home/jonas/opt/llvm/lib/Support/Host.cpp:405:58: warning: invalid case style for parameter 'rEAX' [readability-identifier-naming]
static bool getX86CpuIDAndInfo(unsigned value, unsigned *rEAX, unsigned *rEBX,
                                                         ^~~~~
                                                         REax
/home/jonas/opt/llvm/lib/Support/Host.cpp:405:58: warning: pointer parameter 'rEAX' can be pointer to const [readability-non-const-parameter]
static bool getX86CpuIDAndInfo(unsigned value, unsigned *rEAX, unsigned *rEBX,
                                               ~~~~~~~~  ^
                                               const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:405:74: warning: invalid case style for parameter 'rEBX' [readability-identifier-naming]
static bool getX86CpuIDAndInfo(unsigned value, unsigned *rEAX, unsigned *rEBX,
                                                                         ^~~~~
                                                                         REbx
/home/jonas/opt/llvm/lib/Support/Host.cpp:405:74: warning: pointer parameter 'rEBX' can be pointer to const [readability-non-const-parameter]
static bool getX86CpuIDAndInfo(unsigned value, unsigned *rEAX, unsigned *rEBX,
                                                               ~~~~~~~~  ^
                                                               const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:406:42: warning: invalid case style for parameter 'rECX' [readability-identifier-naming]
                               unsigned *rECX, unsigned *rEDX) {
                                         ^~~~~
                                         REcx
/home/jonas/opt/llvm/lib/Support/Host.cpp:406:42: warning: pointer parameter 'rECX' can be pointer to const [readability-non-const-parameter]
                               unsigned *rECX, unsigned *rEDX) {
                               ~~~~~~~~  ^
                               const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:406:58: warning: invalid case style for parameter 'rEDX' [readability-identifier-naming]
                               unsigned *rECX, unsigned *rEDX) {
                                                         ^~~~~
                                                         REdx
/home/jonas/opt/llvm/lib/Support/Host.cpp:406:58: warning: pointer parameter 'rEDX' can be pointer to const [readability-non-const-parameter]
                               unsigned *rECX, unsigned *rEDX) {
                                               ~~~~~~~~  ^
                                               const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:411:3: warning: do not use inline assembler in safety-critical code [hicpp-no-assembler]
  __asm__("movq\t%%rbx, %%rsi\n\t"
  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:444:43: warning: invalid case style for parameter 'value' [readability-identifier-naming]
static bool getX86CpuIDAndInfoEx(unsigned value, unsigned subleaf,
                                          ^~~~~~
                                          Value
/home/jonas/opt/llvm/lib/Support/Host.cpp:444:59: warning: invalid case style for parameter 'subleaf' [readability-identifier-naming]
static bool getX86CpuIDAndInfoEx(unsigned value, unsigned subleaf,
                                                          ^~~~~~~~
                                                          Subleaf
/home/jonas/opt/llvm/lib/Support/Host.cpp:445:44: warning: invalid case style for parameter 'rEAX' [readability-identifier-naming]
                                 unsigned *rEAX, unsigned *rEBX, unsigned *rECX,
                                           ^~~~~
                                           REax
/home/jonas/opt/llvm/lib/Support/Host.cpp:445:44: warning: pointer parameter 'rEAX' can be pointer to const [readability-non-const-parameter]
                                 unsigned *rEAX, unsigned *rEBX, unsigned *rECX,
                                 ~~~~~~~~  ^
                                 const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:445:60: warning: invalid case style for parameter 'rEBX' [readability-identifier-naming]
                                 unsigned *rEAX, unsigned *rEBX, unsigned *rECX,
                                                           ^~~~~
                                                           REbx
/home/jonas/opt/llvm/lib/Support/Host.cpp:445:60: warning: pointer parameter 'rEBX' can be pointer to const [readability-non-const-parameter]
                                 unsigned *rEAX, unsigned *rEBX, unsigned *rECX,
                                                 ~~~~~~~~  ^
                                                 const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:445:76: warning: invalid case style for parameter 'rECX' [readability-identifier-naming]
                                 unsigned *rEAX, unsigned *rEBX, unsigned *rECX,
                                                                           ^~~~~
                                                                           REcx
/home/jonas/opt/llvm/lib/Support/Host.cpp:445:76: warning: pointer parameter 'rECX' can be pointer to const [readability-non-const-parameter]
                                 unsigned *rEAX, unsigned *rEBX, unsigned *rECX,
                                                                 ~~~~~~~~  ^
                                                                 const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:446:44: warning: invalid case style for parameter 'rEDX' [readability-identifier-naming]
                                 unsigned *rEDX) {
                                           ^~~~~
                                           REdx
/home/jonas/opt/llvm/lib/Support/Host.cpp:446:44: warning: pointer parameter 'rEDX' can be pointer to const [readability-non-const-parameter]
                                 unsigned *rEDX) {
                                 ~~~~~~~~  ^
                                 const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:451:3: warning: do not use inline assembler in safety-critical code [hicpp-no-assembler]
  __asm__("movq\t%%rbx, %%rsi\n\t"
  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:481:34: warning: invalid case style for parameter 'rEAX' [readability-identifier-naming]
static bool getX86XCR0(unsigned *rEAX, unsigned *rEDX) {
                                 ^~~~~
                                 REax
/home/jonas/opt/llvm/lib/Support/Host.cpp:481:34: warning: pointer parameter 'rEAX' can be pointer to const [readability-non-const-parameter]
static bool getX86XCR0(unsigned *rEAX, unsigned *rEDX) {
                       ~~~~~~~~  ^
                       const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:481:50: warning: invalid case style for parameter 'rEDX' [readability-identifier-naming]
static bool getX86XCR0(unsigned *rEAX, unsigned *rEDX) {
                                                 ^~~~~
                                                 REdx
/home/jonas/opt/llvm/lib/Support/Host.cpp:481:50: warning: pointer parameter 'rEDX' can be pointer to const [readability-non-const-parameter]
static bool getX86XCR0(unsigned *rEAX, unsigned *rEDX) {
                                       ~~~~~~~~  ^
                                       const 
/home/jonas/opt/llvm/lib/Support/Host.cpp:486:3: warning: do not use inline assembler in safety-critical code [hicpp-no-assembler]
  __asm__(".byte 0x0f, 0x01, 0xd0" : "=a"(*rEAX), "=d"(*rEDX) : "c"(0));
  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:500:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  *Family = (EAX >> 8) & 0xf; // Bits 8 - 11
            ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:500:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  *Family = (EAX >> 8) & 0xf; // Bits 8 - 11
             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:501:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  *Model = (EAX >> 4) & 0xf;  // Bits 4 - 7
           ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:501:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  *Model = (EAX >> 4) & 0xf;  // Bits 4 - 7
            ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:503:24: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (*Family == 0xf)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:505:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      *Family += (EAX >> 20) & 0xff; // Bits 20 - 27
                 ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:505:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      *Family += (EAX >> 20) & 0xff; // Bits 20 - 27
                  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:507:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    *Model += ((EAX >> 16) & 0xf) << 4; // Bits 16 - 19
              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:507:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    *Model += ((EAX >> 16) & 0xf) << 4; // Bits 16 - 19
               ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:507:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    *Model += ((EAX >> 16) & 0xf) << 4; // Bits 16 - 19
                ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:513:42: warning: invalid case style for parameter 'Brand_id' [readability-identifier-naming]
                                unsigned Brand_id, unsigned Features,
                                         ^~~~~~~~~
                                         BrandId
/home/jonas/opt/llvm/lib/Support/Host.cpp:514:42: warning: parameter 'Features2' is unused [misc-unused-parameters]
                                unsigned Features2, unsigned Features3,
                                ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/Host.cpp:516:21: warning: statement should be inside braces [readability-braces-around-statements]
  if (Brand_id != 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:526:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (Features & (1 << X86::FEATURE_MMX)) {
        ^~~~~~~~                          ~
        (                                 ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:526:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:526:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (Features & (1 << X86::FEATURE_MMX)) {
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:682:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_AVX512VBMI)) {
          ^~~~~~~~                                 ~
          (                                        ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:682:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:682:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_AVX512VBMI)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:688:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_AVX512VL)) {
          ^~~~~~~~                               ~
          (                                      ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:688:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:688:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_AVX512VL)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:694:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_AVX512ER)) {
          ^~~~~~~~                               ~
          (                                      ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:694:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:694:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_AVX512ER)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:699:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features3 & (1 << (X86::FEATURE_CLFLUSHOPT - 64))) {
          ^~~~~~~~~                                        ~
          (                                                ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:699:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:699:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features3 & (1 << (X86::FEATURE_CLFLUSHOPT - 64))) {
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:700:13: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
        if (Features3 & (1 << (X86::FEATURE_SHA - 64))) {
            ^~~~~~~~~                                 ~
            (                                         ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:700:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:700:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (Features3 & (1 << (X86::FEATURE_SHA - 64))) {
                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:708:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features3 & (1 << (X86::FEATURE_ADX - 64))) {
          ^~~~~~~~~                                 ~
          (                                         ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:708:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:708:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features3 & (1 << (X86::FEATURE_ADX - 64))) {
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:713:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_AVX2)) {
          ^~~~~~~~                           ~
          (                                  ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:713:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:713:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_AVX2)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:718:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_AVX)) {
          ^~~~~~~~                          ~
          (                                 ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:718:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:718:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_AVX)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:723:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_SSE4_2)) {
          ^~~~~~~~                             ~
          (                                    ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:723:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:723:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_SSE4_2)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:724:13: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
        if (Features3 & (1 << (X86::FEATURE_MOVBE - 64))) {
            ^~~~~~~~~                                   ~
            (                                           ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:724:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:724:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (Features3 & (1 << (X86::FEATURE_MOVBE - 64))) {
                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:732:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_SSE4_1)) {
          ^~~~~~~~                             ~
          (                                    ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:732:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:732:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_SSE4_1)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:737:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_SSSE3)) {
          ^~~~~~~~                            ~
          (                                   ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:737:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:737:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_SSSE3)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:738:13: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
        if (Features3 & (1 << (X86::FEATURE_MOVBE - 64))) {
            ^~~~~~~~~                                   ~
            (                                           ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:738:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:738:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (Features3 & (1 << (X86::FEATURE_MOVBE - 64))) {
                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:746:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features3 & (1 << (X86::FEATURE_EM64T - 64))) {
          ^~~~~~~~~                                   ~
          (                                           ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:746:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:746:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features3 & (1 << (X86::FEATURE_EM64T - 64))) {
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:751:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_SSE3)) {
          ^~~~~~~~                           ~
          (                                  ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:751:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:751:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_SSE3)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:755:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_SSE2)) {
          ^~~~~~~~                           ~
          (                                  ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:755:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:755:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_SSE2)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:759:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_SSE)) {
          ^~~~~~~~                          ~
          (                                 ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:759:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:759:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_SSE)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:763:11: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (Features & (1 << X86::FEATURE_MMX)) {
          ^~~~~~~~                          ~
          (                                 ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:763:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:763:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (Features & (1 << X86::FEATURE_MMX)) {
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:772:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (Features3 & (1 << (X86::FEATURE_EM64T - 64))) {
        ^~~~~~~~~                                   ~
        (                                           ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:772:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:772:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (Features3 & (1 << (X86::FEATURE_EM64T - 64))) {
                     ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:776:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (Features & (1 << X86::FEATURE_SSE3)) {
        ^~~~~~~~                           ~
        (                                  ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:776:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:776:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (Features & (1 << X86::FEATURE_SSE3)) {
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:818:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (Features & (1 << X86::FEATURE_SSE)) {
        ^~~~~~~~                          ~
        (                                 ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:818:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:818:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (Features & (1 << X86::FEATURE_SSE)) {
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:825:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (Features & (1 << X86::FEATURE_SSE3)) {
        ^~~~~~~~                           ~
        (                                  ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:825:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:825:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (Features & (1 << X86::FEATURE_SSE3)) {
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:887:8: warning: invalid case style for variable 'setFeature' [readability-identifier-naming]
  auto setFeature = [&](unsigned F) {
       ^~~~~~~~~~
       SetFeature
/home/jonas/opt/llvm/lib/Support/Host.cpp:888:16: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (F < 32)
               ^
                {
/home/jonas/opt/llvm/lib/Support/Host.cpp:889:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Features |= 1 << F;
                  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:890:21: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (F < 64)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:891:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Features2 |= 1 << (F - 32);
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:892:21: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (F < 96)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:893:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      Features3 |= 1 << (F - 64);
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:894:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/Host.cpp:898:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((EDX >> 15) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:898:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:898:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((EDX >> 15) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:898:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((EDX >> 15) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:900:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((EDX >> 23) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:900:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:900:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((EDX >> 23) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:900:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((EDX >> 23) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:902:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((EDX >> 25) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:902:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:902:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((EDX >> 25) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:902:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((EDX >> 25) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:904:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((EDX >> 26) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:904:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:904:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((EDX >> 26) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:904:23: warning: statement should be inside braces [readability-braces-around-statements]
  if ((EDX >> 26) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:907:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 0) & 1)
      ^             ~
      (             ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:907:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:907:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 0) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:907:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 0) & 1)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:909:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 1) & 1)
      ^             ~
      (             ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:909:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:909:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 1) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:909:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 1) & 1)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:911:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 9) & 1)
      ^             ~
      (             ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:911:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:911:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 9) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:911:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 9) & 1)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:913:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 12) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:913:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:913:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 12) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:913:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 12) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:915:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 19) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:915:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:915:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 19) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:915:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 19) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:917:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 20) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:917:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:917:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 20) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:917:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 20) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:919:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 23) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:919:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:919:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 23) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:919:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 23) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:921:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 25) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:921:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:921:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 25) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:921:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 25) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:924:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if ((ECX >> 22) & 1)
      ^              ~
      (              ) != 0u
/home/jonas/opt/llvm/lib/Support/Host.cpp:924:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:924:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ECX >> 22) & 1)
       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:924:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((ECX >> 22) & 1)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:930:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  const unsigned AVXBits = (1 << 27) | (1 << 28);
                           ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:930:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  const unsigned AVXBits = (1 << 27) | (1 << 28);
                            ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:930:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  const unsigned AVXBits = (1 << 27) | (1 << 28);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:932:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                ((EAX & 0x6) == 0x6);
                  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:933:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  bool HasAVX512Save = HasAVX && ((EAX & 0xe0) == 0xe0);
                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:935:14: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasAVX)
             ^
              {
/home/jonas/opt/llvm/lib/Support/Host.cpp:941:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 3) & 1))
                  ^               ~
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:941:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 3) & 1))
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:941:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 3) & 1))
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:941:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 3) & 1))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Host.cpp:943:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 5) & 1) && HasAVX)
                  ^
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:943:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 5) & 1) && HasAVX)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:943:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 5) & 1) && HasAVX)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:943:46: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 5) & 1) && HasAVX)
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/Host.cpp:945:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 9) & 1))
                  ^               ~
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:945:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 9) & 1))
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:945:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 9) & 1))
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:945:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 9) & 1))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Host.cpp:947:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:947:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:947:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:947:54: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:949:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:949:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:949:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:949:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:951:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 19) & 1))
                  ^                ~
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:951:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 19) & 1))
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:951:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 19) & 1))
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:951:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 19) & 1))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:953:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:953:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:953:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:953:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:955:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 23) & 1))
                  ^                ~
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:955:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 23) & 1))
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:955:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 23) & 1))
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:955:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 23) & 1))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:957:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:957:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:957:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:957:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:959:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:959:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:959:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:959:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:961:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:961:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:961:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:961:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:963:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 29) & 1))
                  ^                ~
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:963:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 29) & 1))
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:963:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 29) & 1))
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:963:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 29) & 1))
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:965:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:965:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:965:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:965:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:967:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:967:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:967:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:967:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:970:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 1) & 1) && HasAVX512Save)
                  ^
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:970:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 1) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:970:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 1) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:970:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 1) & 1) && HasAVX512Save)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:972:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 6) & 1) && HasAVX512Save)
                  ^
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:972:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 6) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:972:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 6) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:972:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 6) & 1) && HasAVX512Save)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:974:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 8) & 1))
                  ^               ~
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:974:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 8) & 1))
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:974:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 8) & 1))
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:974:36: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 8) & 1))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Host.cpp:976:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 10) & 1) && HasAVX)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:976:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 10) & 1) && HasAVX)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:976:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 10) & 1) && HasAVX)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:976:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 10) & 1) && HasAVX)
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Host.cpp:978:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:978:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:978:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:978:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:980:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:980:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:980:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:980:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:982:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save)
                  ^
                  (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:982:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:982:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:982:54: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save)
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/Host.cpp:985:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EDX >> 2) & 1) && HasAVX512Save)
                  ^
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:985:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EDX >> 2) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:985:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EDX >> 2) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:985:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EDX >> 2) & 1) && HasAVX512Save)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:987:19: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasLeaf7 && ((EDX >> 3) & 1) && HasAVX512Save)
                  ^
                  (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:987:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EDX >> 3) & 1) && HasAVX512Save)
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:987:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasLeaf7 && ((EDX >> 3) & 1) && HasAVX512Save)
                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:987:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasLeaf7 && ((EDX >> 3) & 1) && HasAVX512Save)
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Host.cpp:995:22: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasExtLeaf1 && ((ECX >> 6) & 1))
                     ^               ~
                     (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:995:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((ECX >> 6) & 1))
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:995:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((ECX >> 6) & 1))
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:995:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasExtLeaf1 && ((ECX >> 6) & 1))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/Host.cpp:997:22: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasExtLeaf1 && ((ECX >> 11) & 1))
                     ^                ~
                     (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:997:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((ECX >> 11) & 1))
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:997:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((ECX >> 11) & 1))
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:997:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasExtLeaf1 && ((ECX >> 11) & 1))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:999:22: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasExtLeaf1 && ((ECX >> 16) & 1))
                     ^                ~
                     (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:999:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((ECX >> 16) & 1))
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:999:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((ECX >> 16) & 1))
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:999:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasExtLeaf1 && ((ECX >> 16) & 1))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1002:22: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (HasExtLeaf1 && ((EDX >> 29) & 1))
                     ^                ~
                     (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1002:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((EDX >> 29) & 1))
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1002:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (HasExtLeaf1 && ((EDX >> 29) & 1))
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1002:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (HasExtLeaf1 && ((EDX >> 29) & 1))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1019:26: warning: statement should be inside braces [google-readability-braces-around-statements]
  if(!isCpuIdSupported())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1022:75: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (getX86CpuIDAndInfo(0, &MaxLeaf, &Vendor, &ECX, &EDX) || MaxLeaf < 1)
                                                                          ^
                                                                           {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1026:12: warning: invalid case style for variable 'Brand_id' [readability-identifier-naming]
  unsigned Brand_id = EBX & 0xff;
           ^~~~~~~~
           BrandId
/home/jonas/opt/llvm/lib/Support/Host.cpp:1026:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  unsigned Brand_id = EBX & 0xff;
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1137:29: warning: invalid case style for variable 'strs' [readability-identifier-naming]
  SmallVector<StringRef, 8> strs;
                            ^~~~~
                            Strs
/home/jonas/opt/llvm/lib/Support/Host.cpp:1144:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Line = Line.trim();
           ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1145:72: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Line.startswith("physical id") && !Line.startswith("core id"))
                                                                       ^
                                                                        {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1148:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    auto Name = Data.first.trim();
                ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1149:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    auto Val = Data.second.trim();
               ^
../include/llvm/ADT/StringRef.h:855:20: note: default parameter was declared here
    StringRef trim(StringRef Chars = " \t\n\v\f\r") const {
                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1202:3: warning: uninitialized record type: 'text' [cppcoreguidelines-pro-type-member-init]
  union {
  ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1203:14: warning: invalid case style for member 'u' [readability-identifier-naming]
    unsigned u[3];
             ^~
             U
/home/jonas/opt/llvm/lib/Support/Host.cpp:1204:10: warning: invalid case style for member 'c' [readability-identifier-naming]
    char c[12];
         ^~
         C
/home/jonas/opt/llvm/lib/Support/Host.cpp:1205:5: warning: invalid case style for variable 'text' [readability-identifier-naming]
  } text;
    ^~~~~
    Text
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:40: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:45: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                            ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:52: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                                   ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:57: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                                          ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:64: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                                               ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:69: warning: do not access members of unions; use (boost::)variant instead [cppcoreguidelines-pro-type-union-access]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                                                    ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1207:71: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  if (getX86CpuIDAndInfo(0, &MaxLevel, text.u + 0, text.u + 2, text.u + 1) ||
                                                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1208:20: warning: statement should be inside braces [google-readability-braces-around-statements]
      MaxLevel < 1)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1213:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["cmov"]   = (EDX >> 15) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1213:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1213:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["cmov"]   = (EDX >> 15) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1214:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["mmx"]    = (EDX >> 23) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1214:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1214:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["mmx"]    = (EDX >> 23) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1215:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sse"]    = (EDX >> 25) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1215:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1215:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse"]    = (EDX >> 25) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1216:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sse2"]   = (EDX >> 26) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1216:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1216:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse2"]   = (EDX >> 26) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1218:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sse3"]   = (ECX >>  0) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1218:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1218:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse3"]   = (ECX >>  0) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1219:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["pclmul"] = (ECX >>  1) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1219:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1219:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["pclmul"] = (ECX >>  1) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1220:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["ssse3"]  = (ECX >>  9) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1220:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1220:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["ssse3"]  = (ECX >>  9) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1221:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["cx16"]   = (ECX >> 13) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1221:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1221:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["cx16"]   = (ECX >> 13) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1222:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sse4.1"] = (ECX >> 19) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1222:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1222:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse4.1"] = (ECX >> 19) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1223:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sse4.2"] = (ECX >> 20) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1223:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1223:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse4.2"] = (ECX >> 20) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1224:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["movbe"]  = (ECX >> 22) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1224:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1224:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["movbe"]  = (ECX >> 22) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1225:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["popcnt"] = (ECX >> 23) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1225:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1225:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["popcnt"] = (ECX >> 23) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1226:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["aes"]    = (ECX >> 25) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1226:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1226:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["aes"]    = (ECX >> 25) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1227:24: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["rdrnd"]  = (ECX >> 30) & 1;
                       ^              ~
                       ((             ) != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1227:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/Host.cpp:1227:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rdrnd"]  = (ECX >> 30) & 1;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1232:21: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  bool HasAVXSave = ((ECX >> 27) & 1) && ((ECX >> 28) & 1) &&
                    ^
                    (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1232:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  bool HasAVXSave = ((ECX >> 27) & 1) && ((ECX >> 28) & 1) &&
                     ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1232:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  bool HasAVXSave = ((ECX >> 27) & 1) && ((ECX >> 28) & 1) &&
                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1232:42: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  bool HasAVXSave = ((ECX >> 27) & 1) && ((ECX >> 28) & 1) &&
                                         ^
                                         (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1232:43: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  bool HasAVXSave = ((ECX >> 27) & 1) && ((ECX >> 28) & 1) &&
                                          ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1232:44: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  bool HasAVXSave = ((ECX >> 27) & 1) && ((ECX >> 28) & 1) &&
                                           ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1233:50: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                    !getX86XCR0(&EAX, &EDX) && ((EAX & 0x6) == 0x6);
                                                 ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1235:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  bool HasAVX512Save = HasAVXSave && ((EAX & 0xe0) == 0xe0);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1238:23: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["fma"]   = ((ECX >> 12) & 1) && HasAVXSave;
                      ^
                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1238:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["fma"]   = ((ECX >> 12) & 1) && HasAVXSave;
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1238:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["fma"]   = ((ECX >> 12) & 1) && HasAVXSave;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1240:23: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["xsave"] = ((ECX >> 26) & 1) && HasAVXSave;
                      ^
                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1240:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsave"] = ((ECX >> 26) & 1) && HasAVXSave;
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1240:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsave"] = ((ECX >> 26) & 1) && HasAVXSave;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1241:23: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["f16c"]  = ((ECX >> 29) & 1) && HasAVXSave;
                      ^
                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1241:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["f16c"]  = ((ECX >> 29) & 1) && HasAVXSave;
                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1241:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["f16c"]  = ((ECX >> 29) & 1) && HasAVXSave;
                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1248:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sahf"]   = HasExtLeaf1 && ((ECX >>  0) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1248:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sahf"]   = HasExtLeaf1 && ((ECX >>  0) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1248:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sahf"]   = HasExtLeaf1 && ((ECX >>  0) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1249:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["lzcnt"]  = HasExtLeaf1 && ((ECX >>  5) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1249:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["lzcnt"]  = HasExtLeaf1 && ((ECX >>  5) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1249:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["lzcnt"]  = HasExtLeaf1 && ((ECX >>  5) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1250:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sse4a"]  = HasExtLeaf1 && ((ECX >>  6) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1250:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse4a"]  = HasExtLeaf1 && ((ECX >>  6) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1250:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sse4a"]  = HasExtLeaf1 && ((ECX >>  6) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1251:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["prfchw"] = HasExtLeaf1 && ((ECX >>  8) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1251:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["prfchw"] = HasExtLeaf1 && ((ECX >>  8) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1251:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["prfchw"] = HasExtLeaf1 && ((ECX >>  8) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1252:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["xop"]    = HasExtLeaf1 && ((ECX >> 11) & 1) && HasAVXSave;
                                      ^
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1252:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xop"]    = HasExtLeaf1 && ((ECX >> 11) & 1) && HasAVXSave;
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1252:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xop"]    = HasExtLeaf1 && ((ECX >> 11) & 1) && HasAVXSave;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1253:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["lwp"]    = HasExtLeaf1 && ((ECX >> 15) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1253:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["lwp"]    = HasExtLeaf1 && ((ECX >> 15) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1253:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["lwp"]    = HasExtLeaf1 && ((ECX >> 15) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1254:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["fma4"]   = HasExtLeaf1 && ((ECX >> 16) & 1) && HasAVXSave;
                                      ^
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1254:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["fma4"]   = HasExtLeaf1 && ((ECX >> 16) & 1) && HasAVXSave;
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1254:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["fma4"]   = HasExtLeaf1 && ((ECX >> 16) & 1) && HasAVXSave;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1255:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["tbm"]    = HasExtLeaf1 && ((ECX >> 21) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1255:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["tbm"]    = HasExtLeaf1 && ((ECX >> 21) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1255:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["tbm"]    = HasExtLeaf1 && ((ECX >> 21) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1256:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["mwaitx"] = HasExtLeaf1 && ((ECX >> 29) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1256:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["mwaitx"] = HasExtLeaf1 && ((ECX >> 29) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1256:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["mwaitx"] = HasExtLeaf1 && ((ECX >> 29) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1258:39: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["64bit"]  = HasExtLeaf1 && ((EDX >> 29) & 1);
                                      ^                ~
                                      (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1258:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["64bit"]  = HasExtLeaf1 && ((EDX >> 29) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1258:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["64bit"]  = HasExtLeaf1 && ((EDX >> 29) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1264:41: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["clzero"]   = HasExtLeaf8 && ((EBX >> 0) & 1);
                                        ^               ~
                                        (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1264:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["clzero"]   = HasExtLeaf8 && ((EBX >> 0) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1264:43: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["clzero"]   = HasExtLeaf8 && ((EBX >> 0) & 1);
                                          ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1265:41: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["wbnoinvd"] = HasExtLeaf8 && ((EBX >> 9) & 1);
                                        ^               ~
                                        (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1265:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["wbnoinvd"] = HasExtLeaf8 && ((EBX >> 9) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1265:43: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["wbnoinvd"] = HasExtLeaf8 && ((EBX >> 9) & 1);
                                          ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1270:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["fsgsbase"]   = HasLeaf7 && ((EBX >>  0) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1270:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["fsgsbase"]   = HasLeaf7 && ((EBX >>  0) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1270:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["fsgsbase"]   = HasLeaf7 && ((EBX >>  0) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1271:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sgx"]        = HasLeaf7 && ((EBX >>  2) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1271:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sgx"]        = HasLeaf7 && ((EBX >>  2) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1271:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sgx"]        = HasLeaf7 && ((EBX >>  2) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1272:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["bmi"]        = HasLeaf7 && ((EBX >>  3) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1272:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["bmi"]        = HasLeaf7 && ((EBX >>  3) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1272:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["bmi"]        = HasLeaf7 && ((EBX >>  3) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1274:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx2"]       = HasLeaf7 && ((EBX >>  5) & 1) && HasAVXSave;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1274:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx2"]       = HasLeaf7 && ((EBX >>  5) & 1) && HasAVXSave;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1274:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx2"]       = HasLeaf7 && ((EBX >>  5) & 1) && HasAVXSave;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1275:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["bmi2"]       = HasLeaf7 && ((EBX >>  8) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1275:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["bmi2"]       = HasLeaf7 && ((EBX >>  8) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1275:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["bmi2"]       = HasLeaf7 && ((EBX >>  8) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1276:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["invpcid"]    = HasLeaf7 && ((EBX >> 10) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1276:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["invpcid"]    = HasLeaf7 && ((EBX >> 10) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1276:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["invpcid"]    = HasLeaf7 && ((EBX >> 10) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1277:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["rtm"]        = HasLeaf7 && ((EBX >> 11) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1277:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rtm"]        = HasLeaf7 && ((EBX >> 11) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1277:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rtm"]        = HasLeaf7 && ((EBX >> 11) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1279:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512f"]    = HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1279:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512f"]    = HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1279:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512f"]    = HasLeaf7 && ((EBX >> 16) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1280:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512dq"]   = HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1280:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512dq"]   = HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1280:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512dq"]   = HasLeaf7 && ((EBX >> 17) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1281:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["rdseed"]     = HasLeaf7 && ((EBX >> 18) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1281:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rdseed"]     = HasLeaf7 && ((EBX >> 18) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1281:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rdseed"]     = HasLeaf7 && ((EBX >> 18) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1282:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["adx"]        = HasLeaf7 && ((EBX >> 19) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1282:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["adx"]        = HasLeaf7 && ((EBX >> 19) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1282:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["adx"]        = HasLeaf7 && ((EBX >> 19) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1283:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512ifma"] = HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1283:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512ifma"] = HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1283:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512ifma"] = HasLeaf7 && ((EBX >> 21) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1284:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["clflushopt"] = HasLeaf7 && ((EBX >> 23) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1284:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["clflushopt"] = HasLeaf7 && ((EBX >> 23) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1284:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["clflushopt"] = HasLeaf7 && ((EBX >> 23) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1285:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["clwb"]       = HasLeaf7 && ((EBX >> 24) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1285:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["clwb"]       = HasLeaf7 && ((EBX >> 24) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1285:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["clwb"]       = HasLeaf7 && ((EBX >> 24) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1286:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512pf"]   = HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1286:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512pf"]   = HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1286:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512pf"]   = HasLeaf7 && ((EBX >> 26) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1287:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512er"]   = HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1287:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512er"]   = HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1287:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512er"]   = HasLeaf7 && ((EBX >> 27) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1288:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512cd"]   = HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1288:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512cd"]   = HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1288:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512cd"]   = HasLeaf7 && ((EBX >> 28) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1289:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["sha"]        = HasLeaf7 && ((EBX >> 29) & 1);
                                       ^                ~
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1289:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sha"]        = HasLeaf7 && ((EBX >> 29) & 1);
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1289:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["sha"]        = HasLeaf7 && ((EBX >> 29) & 1);
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1290:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512bw"]   = HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1290:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512bw"]   = HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1290:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512bw"]   = HasLeaf7 && ((EBX >> 30) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1291:40: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512vl"]   = HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save;
                                       ^
                                       (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1291:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vl"]   = HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save;
                                        ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1291:42: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vl"]   = HasLeaf7 && ((EBX >> 31) & 1) && HasAVX512Save;
                                         ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1293:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["prefetchwt1"]     = HasLeaf7 && ((ECX >>  0) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1293:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["prefetchwt1"]     = HasLeaf7 && ((ECX >>  0) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1293:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["prefetchwt1"]     = HasLeaf7 && ((ECX >>  0) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1294:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512vbmi"]      = HasLeaf7 && ((ECX >>  1) & 1) && HasAVX512Save;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1294:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vbmi"]      = HasLeaf7 && ((ECX >>  1) & 1) && HasAVX512Save;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1294:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vbmi"]      = HasLeaf7 && ((ECX >>  1) & 1) && HasAVX512Save;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1295:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["pku"]             = HasLeaf7 && ((ECX >>  4) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1295:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["pku"]             = HasLeaf7 && ((ECX >>  4) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1295:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["pku"]             = HasLeaf7 && ((ECX >>  4) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1296:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["waitpkg"]         = HasLeaf7 && ((ECX >>  5) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1296:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["waitpkg"]         = HasLeaf7 && ((ECX >>  5) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1296:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["waitpkg"]         = HasLeaf7 && ((ECX >>  5) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1297:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512vbmi2"]     = HasLeaf7 && ((ECX >>  6) & 1) && HasAVX512Save;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1297:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vbmi2"]     = HasLeaf7 && ((ECX >>  6) & 1) && HasAVX512Save;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1297:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vbmi2"]     = HasLeaf7 && ((ECX >>  6) & 1) && HasAVX512Save;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1298:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["shstk"]           = HasLeaf7 && ((ECX >>  7) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1298:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["shstk"]           = HasLeaf7 && ((ECX >>  7) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1298:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["shstk"]           = HasLeaf7 && ((ECX >>  7) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1299:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["gfni"]            = HasLeaf7 && ((ECX >>  8) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1299:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["gfni"]            = HasLeaf7 && ((ECX >>  8) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1299:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["gfni"]            = HasLeaf7 && ((ECX >>  8) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1300:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["vaes"]            = HasLeaf7 && ((ECX >>  9) & 1) && HasAVXSave;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1300:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["vaes"]            = HasLeaf7 && ((ECX >>  9) & 1) && HasAVXSave;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1300:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["vaes"]            = HasLeaf7 && ((ECX >>  9) & 1) && HasAVXSave;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1301:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["vpclmulqdq"]      = HasLeaf7 && ((ECX >> 10) & 1) && HasAVXSave;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1301:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["vpclmulqdq"]      = HasLeaf7 && ((ECX >> 10) & 1) && HasAVXSave;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1301:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["vpclmulqdq"]      = HasLeaf7 && ((ECX >> 10) & 1) && HasAVXSave;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1302:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512vnni"]      = HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1302:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vnni"]      = HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1302:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vnni"]      = HasLeaf7 && ((ECX >> 11) & 1) && HasAVX512Save;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1303:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512bitalg"]    = HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1303:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512bitalg"]    = HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1303:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512bitalg"]    = HasLeaf7 && ((ECX >> 12) & 1) && HasAVX512Save;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1304:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["avx512vpopcntdq"] = HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save;
                                            ^
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1304:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vpopcntdq"] = HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save;
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1304:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["avx512vpopcntdq"] = HasLeaf7 && ((ECX >> 14) & 1) && HasAVX512Save;
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1305:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["rdpid"]           = HasLeaf7 && ((ECX >> 22) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1305:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rdpid"]           = HasLeaf7 && ((ECX >> 22) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1305:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["rdpid"]           = HasLeaf7 && ((ECX >> 22) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1306:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["cldemote"]        = HasLeaf7 && ((ECX >> 25) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1306:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["cldemote"]        = HasLeaf7 && ((ECX >> 25) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1306:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["cldemote"]        = HasLeaf7 && ((ECX >> 25) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1307:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["movdiri"]         = HasLeaf7 && ((ECX >> 27) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1307:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["movdiri"]         = HasLeaf7 && ((ECX >> 27) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1307:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["movdiri"]         = HasLeaf7 && ((ECX >> 27) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1308:45: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["movdir64b"]       = HasLeaf7 && ((ECX >> 28) & 1);
                                            ^                ~
                                            (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1308:46: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["movdir64b"]       = HasLeaf7 && ((ECX >> 28) & 1);
                                             ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1308:47: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["movdir64b"]       = HasLeaf7 && ((ECX >> 28) & 1);
                                              ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1320:37: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["pconfig"] = HasLeaf7 && ((EDX >> 18) & 1);
                                    ^                ~
                                    (                 != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1320:38: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["pconfig"] = HasLeaf7 && ((EDX >> 18) & 1);
                                     ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1320:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["pconfig"] = HasLeaf7 && ((EDX >> 18) & 1);
                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1326:38: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["xsaveopt"] = HasLeafD && ((EAX >> 0) & 1) && HasAVXSave;
                                     ^
                                     (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1326:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsaveopt"] = HasLeafD && ((EAX >> 0) & 1) && HasAVXSave;
                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1326:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsaveopt"] = HasLeafD && ((EAX >> 0) & 1) && HasAVXSave;
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1327:38: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["xsavec"]   = HasLeafD && ((EAX >> 1) & 1) && HasAVXSave;
                                     ^
                                     (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1327:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsavec"]   = HasLeafD && ((EAX >> 1) & 1) && HasAVXSave;
                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1327:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsavec"]   = HasLeafD && ((EAX >> 1) & 1) && HasAVXSave;
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1328:38: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["xsaves"]   = HasLeafD && ((EAX >> 3) & 1) && HasAVXSave;
                                     ^
                                     (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1328:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsaves"]   = HasLeafD && ((EAX >> 3) & 1) && HasAVXSave;
                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1328:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["xsaves"]   = HasLeafD && ((EAX >> 3) & 1) && HasAVXSave;
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1333:38: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  Features["ptwrite"] = HasLeaf14 && ((EBX >> 4) & 1);
                                     ^               ~
                                     (                != 0u)
/home/jonas/opt/llvm/lib/Support/Host.cpp:1333:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["ptwrite"] = HasLeaf14 && ((EBX >> 4) & 1);
                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1333:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  Features["ptwrite"] = HasLeaf14 && ((EBX >> 4) & 1);
                                       ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1408:58: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::string TargetTripleString = updateTripleOSVersion(LLVM_HOST_TRIPLE);
                                                         ^
include/llvm/Config/llvm-config.h:33:26: note: expanded from macro 'LLVM_HOST_TRIPLE'
#define LLVM_HOST_TRIPLE "x86_64-unknown-linux-gnu"
                         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/Host.cpp:1411:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (sizeof(void *) == 8 && PT.isArch32Bit())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Host.cpp:1413:47: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (sizeof(void *) == 4 && PT.isArch64Bit())
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Valgrind.cpp:48:17: warning: invalid case style for function 'RunningOnValgrind' [readability-identifier-naming]
bool llvm::sys::RunningOnValgrind() {
                ^~~~~~~~~~~~~~~~~~
                runningOnValgrind
/home/jonas/opt/llvm/lib/Support/Valgrind.cpp:52:17: warning: invalid case style for function 'ValgrindDiscardTranslations' [readability-identifier-naming]
void llvm::sys::ValgrindDiscardTranslations(const void *Addr, size_t Len) {
                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
                valgrindDiscardTranslations
/home/jonas/opt/llvm/lib/Support/Valgrind.cpp:52:57: warning: parameter 'Addr' is unused [misc-unused-parameters]
void llvm::sys::ValgrindDiscardTranslations(const void *Addr, size_t Len) {
                                                        ^~~~~
                                                         /*Addr*/
/home/jonas/opt/llvm/lib/Support/Valgrind.cpp:52:70: warning: parameter 'Len' is unused [misc-unused-parameters]
void llvm::sys::ValgrindDiscardTranslations(const void *Addr, size_t Len) {
                                                                     ^~~~
                                                                      /*Len*/
/home/jonas/opt/llvm/lib/Support/Threading.cpp:20:10: warning: inclusion of deprecated C++ header 'errno.h'; consider using 'cerrno' instead [hicpp-deprecated-headers]
#include <errno.h>
         ^~~~~~~~~
         <cerrno>
/home/jonas/opt/llvm/lib/Support/Threading.cpp:21:10: warning: inclusion of deprecated C++ header 'stdlib.h'; consider using 'cstdlib' instead [modernize-deprecated-headers]
#include <stdlib.h>
         ^~~~~~~~~~
         <cstdlib>
/home/jonas/opt/llvm/lib/Support/Threading.cpp:22:10: warning: inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead [modernize-deprecated-headers]
#include <string.h>
         ^~~~~~~~~~
         <cstring>
/home/jonas/opt/llvm/lib/Support/Threading.cpp:24:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Threading.cpp:31:12: warning: invalid case style for function 'llvm_is_multithreaded' [readability-identifier-naming]
bool llvm::llvm_is_multithreaded() {
           ^~~~~~~~~~~~~~~~~~~~~~
           llvmIsMultithreaded
/home/jonas/opt/llvm/lib/Support/Threading.cpp:63:16: warning: invalid case style for function 'heavyweight_hardware_concurrency' [readability-identifier-naming]
unsigned llvm::heavyweight_hardware_concurrency() {
               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               heavyweightHardwareConcurrency
/home/jonas/opt/llvm/lib/Support/Threading.cpp:71:25: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (NumPhysical == -1)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Threading.cpp:76:16: warning: invalid case style for function 'hardware_concurrency' [readability-identifier-naming]
unsigned llvm::hardware_concurrency() {
               ^~~~~~~~~~~~~~~~~~~~~
               hardwareConcurrency
/home/jonas/opt/llvm/lib/Support/Threading.cpp:79:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (sched_getaffinity(0, sizeof(Set), &Set))
      ^                                      ~
                                              != 0
/home/jonas/opt/llvm/lib/Support/Threading.cpp:79:47: warning: statement should be inside braces [readability-braces-around-statements]
  if (sched_getaffinity(0, sizeof(Set), &Set))
                                              ^
                                               {
/home/jonas/opt/llvm/lib/Support/Threading.cpp:83:58: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (unsigned Val = std::thread::hardware_concurrency())
                                                         ^
                                                          {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/TargetRegistry.h:643:24: warning: function 'llvm::TargetRegistry::lookupTarget' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  static const Target *lookupTarget(const std::string &Triple,
                       ^                               ~~~~~~~
                                                       TT
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:63:31: note: the definition seen here
const Target *TargetRegistry::lookupTarget(const std::string &TT,
                              ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/TargetRegistry.h:643:24: note: differing parameters are named here: ('Triple'), in definition: ('TT')
  static const Target *lookupTarget(const std::string &Triple,
                       ^
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:16:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:46:37: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Type != Triple::UnknownArch)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:52:10: warning: implicit conversion 'const llvm::Target *' -> bool [readability-implicit-bool-conversion]
    if (!TheTarget) {
        ~^~~~~~~~~~
         == nullptr
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:79:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  auto J = std::find_if(std::next(I), targets().end(), ArchMatch);
                        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_iterator_base_funcs.h:213:30: note: default parameter was declared here
    next(_InputIterator __x, typename
                             ^
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:81:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Error = std::string("Cannot choose between targets \"") + I->Name +
            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:89:22: warning: invalid case style for function 'RegisterTarget' [readability-identifier-naming]
void TargetRegistry::RegisterTarget(Target &T, const char *Name,
                     ^~~~~~~~~~~~~~~
                     registerTarget
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:94:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Name && ShortDesc && ArchMatchFn &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:99:7: warning: implicit conversion 'const char *' -> bool [readability-implicit-bool-conversion]
  if (T.Name)
      ^     ~
             != nullptr
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:99:14: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (T.Name)
             ^
              {
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:113:12: warning: invalid case style for function 'TargetArraySortFn' [readability-identifier-naming]
static int TargetArraySortFn(const std::pair<StringRef, const Target *> *LHS,
           ^~~~~~~~~~~~~~~~~~
           targetArraySortFn
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:122:13: warning: use emplace_back instead of push_back [hicpp-use-emplace]
    Targets.push_back(std::make_pair(T.getName(), &T));
            ^~~~~~~~~~~~~~~~~~~~~~~~~               ~~
            emplace_back
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:128:17: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (unsigned i = 0, e = Targets.size(); i != e; ++i) {
                ^                          ~         ~~
                I                          I         I
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:128:24: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (unsigned i = 0, e = Targets.size(); i != e; ++i) {
                       ^                        ~~
                       E                        E
/home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp:133:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Targets.empty())
                      ^
                       {
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:128:3: warning: function 'llvm::yaml::Node::Node' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  Node(unsigned int Type, std::unique_ptr<Document> &, StringRef Anchor,
  ^                                                              ~~~~~~~
                                                                 A
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1802:7: note: the definition seen here
Node::Node(unsigned int Type, std::unique_ptr<Document> &D, StringRef A,
      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:128:3: note: differing parameters are named here: ('Anchor', 'Tag'), in definition: ('A', 'T')
  Node(unsigned int Type, std::unique_ptr<Document> &, StringRef Anchor,
  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:168:8: warning: function 'llvm::yaml::Node::setError' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  void setError(const Twine &Message, Token &Location) const;
       ^                     ~~~~~~~~        ~~~~~~~~~
                             Msg             Tok
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1870:12: note: the definition seen here
void Node::setError(const Twine &Msg, Token &Tok) const {
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:168:8: note: differing parameters are named here: ('Message', 'Location'), in definition: ('Msg', 'Tok')
  void setError(const Twine &Message, Token &Location) const;
       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:238:13: warning: function 'llvm::yaml::ScalarNode::unescapeDoubleQuoted' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  StringRef unescapeDoubleQuoted(StringRef UnquotedValue,
            ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1911:23: note: the definition seen here
StringRef ScalarNode::unescapeDoubleQuoted( StringRef UnquotedValue
                      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:238:13: note: differing parameters are named here: ('Start'), in definition: ('i')
  StringRef unescapeDoubleQuoted(StringRef UnquotedValue,
            ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:525:3: warning: function 'llvm::yaml::Document::Document' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  Document(Stream &ParentStream);
  ^                ~~~~~~~~~~~~~
                   S
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2258:11: note: the definition seen here
Document::Document(Stream &S) : stream(S), Root(nullptr) {
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:525:3: note: differing parameters are named here: ('ParentStream'), in definition: ('S')
  Document(Stream &ParentStream);
  ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:41:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:42:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace yaml;
^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:64:21: warning: statement should be inside braces [readability-braces-around-statements]
  if (Input.empty())
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:72:39: warning: statement should be inside braces [readability-braces-around-statements]
         && uint8_t(Input[3]) == 0xFF)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:74:59: warning: statement should be inside braces [readability-braces-around-statements]
      if (Input[1] == 0 && Input[2] == 0 && Input[3] != 0)
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:78:44: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Input.size() >= 2 && Input[1] != 0)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:85:25: warning: statement should be inside braces [google-readability-braces-around-statements]
       && Input[3] == 0)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:88:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Input.size() >= 2 && uint8_t(Input[1]) == 0xFE)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:92:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Input.size() >= 2 && uint8_t(Input[1]) == 0xFF)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:98:37: warning: statement should be inside braces [google-readability-braces-around-statements]
       && uint8_t(Input[2]) == 0xBF)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:104:76: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Input.size() >= 4 && Input[1] == 0 && Input[2] == 0 && Input[3] == 0)
                                                                           ^
                                                                            {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:107:42: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Input.size() >= 2 && Input[1] == 0)
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:180:8: warning: constructor does not initialize these fields: Column, Line, FlowLevel, IsRequired [cppcoreguidelines-pro-type-member-init]
struct SimpleKey {
       ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:187:3: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
  bool operator ==(const SimpleKey &Other) {
  ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:204:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((*Position & 0x80) == 0) {
       ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:210:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*Position & 0xE0) == 0xC0) &&
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:211:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*(Position + 1) & 0xC0) == 0x80)) {
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:212:14: warning: invalid case style for variable 'codepoint' [readability-identifier-naming]
    uint32_t codepoint = ((*Position & 0x1F) << 6) |
             ^~~~~~~~~
             Codepoint
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:212:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x1F) << 6) |
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:212:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x1F) << 6) |
                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:212:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x1F) << 6) |
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:213:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                          (*(Position + 1) & 0x3F);
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:214:27: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (codepoint >= 0x80)
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:220:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*Position & 0xF0) == 0xE0) &&
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:221:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*(Position + 1) & 0xC0) == 0x80) &&
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:222:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*(Position + 2) & 0xC0) == 0x80)) {
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:223:14: warning: invalid case style for variable 'codepoint' [readability-identifier-naming]
    uint32_t codepoint = ((*Position & 0x0F) << 12) |
             ^~~~~~~~~
             Codepoint
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:223:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x0F) << 12) |
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:223:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x0F) << 12) |
                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:223:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x0F) << 12) |
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:224:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                         ((*(Position + 1) & 0x3F) << 6) |
                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:224:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                         ((*(Position + 1) & 0x3F) << 6) |
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:225:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                          (*(Position + 2) & 0x3F);
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:229:52: warning: statement should be inside braces [google-readability-braces-around-statements]
        (codepoint < 0xD800 || codepoint > 0xDFFF))
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:235:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*Position & 0xF8) == 0xF0) &&
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:236:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*(Position + 1) & 0xC0) == 0x80) &&
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:237:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*(Position + 2) & 0xC0) == 0x80) &&
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:238:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ((*(Position + 3) & 0xC0) == 0x80)) {
        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:239:14: warning: invalid case style for variable 'codepoint' [readability-identifier-naming]
    uint32_t codepoint = ((*Position & 0x07) << 18) |
             ^~~~~~~~~
             Codepoint
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:239:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x07) << 18) |
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:239:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x07) << 18) |
                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:239:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint32_t codepoint = ((*Position & 0x07) << 18) |
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:240:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                         ((*(Position + 1) & 0x3F) << 12) |
                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:240:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                         ((*(Position + 1) & 0x3F) << 12) |
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:241:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                         ((*(Position + 2) & 0x3F) << 6) |
                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:241:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                         ((*(Position + 2) & 0x3F) << 6) |
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:242:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                          (*(Position + 3) & 0x3F);
                           ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:243:55: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (codepoint >= 0x10000 && codepoint <= 0x10FFFF)
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:255:3: warning: function 'llvm::yaml::Scanner::Scanner' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,
  ^                                   ~~~
                                      sm
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:757:10: note: the definition seen here
Scanner::Scanner(StringRef Input, SourceMgr &sm, bool ShowColors,
         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:255:3: note: differing parameters are named here: ('SM'), in definition: ('sm')
  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,
  ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:255:39: warning: non-const reference parameter 'SM', make it const or use a pointer [google-runtime-references]
  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:255:43: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,
                                          ^              ~~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:256:11: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
          std::error_code *EC = nullptr);
          ^                  ~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:257:46: warning: invalid case style for parameter 'SM_' [readability-identifier-naming]
  Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors = true,
                                             ^~~~
                                             Sm
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:257:46: warning: non-const reference parameter 'SM_', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:257:51: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
  Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors = true,
                                                  ^              ~~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:258:11: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
          std::error_code *EC = nullptr);
          ^                  ~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:267:19: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                  ArrayRef<SMRange> Ranges = None) {
                  ^                       ~~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:271:59: warning: parameter 'Position' is unused [misc-unused-parameters]
  void setError(const Twine &Message, StringRef::iterator Position) {
                                                          ^~~~~~~~~
                                                           /*Position*/
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:272:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Current >= End)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:276:9: warning: implicit conversion 'std::error_code *' -> bool [readability-implicit-bool-conversion]
    if (EC)
        ^ ~
           != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:276:12: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (EC)
           ^
            {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:281:17: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Failed)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:282:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      printError(SMLoc::getFromPointer(Current), SourceMgr::DK_Error, Message);
      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:267:19: note: default parameter was declared here
                  ArrayRef<SMRange> Ranges = None) {
                  ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:299:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef(Current, End - Current);
           ^~~~~~~~~~~~~~~~~               ~~
           {                               }
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:339:23: warning: invalid case style for function 'skip_nb_char' [readability-identifier-naming]
  StringRef::iterator skip_nb_char(StringRef::iterator Position);
                      ^~~~~~~~~~~~~
                      skipNbChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:347:23: warning: invalid case style for function 'skip_b_break' [readability-identifier-naming]
  StringRef::iterator skip_b_break(StringRef::iterator Position);
                      ^~~~~~~~~~~~~
                      skipBBreak
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:355:23: warning: invalid case style for function 'skip_s_space' [readability-identifier-naming]
  StringRef::iterator skip_s_space(StringRef::iterator Position);
                      ^~~~~~~~~~~~~
                      skipSSpace
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:363:23: warning: invalid case style for function 'skip_s_white' [readability-identifier-naming]
  StringRef::iterator skip_s_white(StringRef::iterator Position);
                      ^~~~~~~~~~~~~
                      skipSWhite
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:371:23: warning: invalid case style for function 'skip_ns_char' [readability-identifier-naming]
  StringRef::iterator skip_ns_char(StringRef::iterator Position);
                      ^~~~~~~~~~~~~
                      skipNsChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:380:23: warning: invalid case style for function 'skip_while' [readability-identifier-naming]
  StringRef::iterator skip_while( SkipWhileFunc Func
                      ^~~~~~~~~~~
                      skipWhile
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:390:8: warning: invalid case style for function 'scan_ns_uri_char' [readability-identifier-naming]
  void scan_ns_uri_char();
       ^~~~~~~~~~~~~~~~~
       scanNsUriChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:491:36: warning: non-const reference parameter 'ChompingIndicator', make it const or use a pointer [google-runtime-references]
  bool scanBlockScalarHeader(char &ChompingIndicator, unsigned &IndentIndicator,
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:491:65: warning: non-const reference parameter 'IndentIndicator', make it const or use a pointer [google-runtime-references]
  bool scanBlockScalarHeader(char &ChompingIndicator, unsigned &IndentIndicator,
                                                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:492:36: warning: non-const reference parameter 'IsDone', make it const or use a pointer [google-runtime-references]
                             bool &IsDone);
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:497:40: warning: non-const reference parameter 'BlockIndent', make it const or use a pointer [google-runtime-references]
  bool findBlockScalarIndent(unsigned &BlockIndent, unsigned BlockExitIndent,
                                       ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:498:40: warning: non-const reference parameter 'LineBreaks', make it const or use a pointer [google-runtime-references]
                             unsigned &LineBreaks, bool &IsDone);
                                       ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:498:58: warning: non-const reference parameter 'IsDone', make it const or use a pointer [google-runtime-references]
                             unsigned &LineBreaks, bool &IsDone);
                                                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:504:36: warning: non-const reference parameter 'IsDone', make it const or use a pointer [google-runtime-references]
                             bool &IsDone);
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:567:48: warning: non-const reference parameter 'Result', make it const or use a pointer [google-runtime-references]
                      , SmallVectorImpl<char> &Result) {
                                               ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:569:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    Result.push_back(UnicodeScalarValue & 0x7F);
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:571:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xC0 | ((UnicodeScalarValue & 0x7C0) >> 6);
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:571:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xC0 | ((UnicodeScalarValue & 0x7C0) >> 6);
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:571:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xC0 | ((UnicodeScalarValue & 0x7C0) >> 6);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:572:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | (UnicodeScalarValue & 0x3F);
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:572:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | (UnicodeScalarValue & 0x3F);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:576:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xE0 | ((UnicodeScalarValue & 0xF000) >> 12);
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:576:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xE0 | ((UnicodeScalarValue & 0xF000) >> 12);
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:576:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xE0 | ((UnicodeScalarValue & 0xF000) >> 12);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:577:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((UnicodeScalarValue & 0xFC0) >> 6);
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:577:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((UnicodeScalarValue & 0xFC0) >> 6);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:577:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((UnicodeScalarValue & 0xFC0) >> 6);
                                  ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:578:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | (UnicodeScalarValue & 0x3F);
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:578:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | (UnicodeScalarValue & 0x3F);
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:583:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xF0 | ((UnicodeScalarValue & 0x1F0000) >> 18);
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:583:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xF0 | ((UnicodeScalarValue & 0x1F0000) >> 18);
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:583:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FirstByte = 0xF0 | ((UnicodeScalarValue & 0x1F0000) >> 18);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:584:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((UnicodeScalarValue & 0x3F000) >> 12);
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:584:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((UnicodeScalarValue & 0x3F000) >> 12);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:584:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t SecondByte = 0x80 | ((UnicodeScalarValue & 0x3F000) >> 12);
                                  ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:585:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | ((UnicodeScalarValue & 0xFC0) >> 6);
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:585:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | ((UnicodeScalarValue & 0xFC0) >> 6);
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:585:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t ThirdByte = 0x80 | ((UnicodeScalarValue & 0xFC0) >> 6);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:586:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FourthByte = 0x80 | (UnicodeScalarValue & 0x3F);
                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:586:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    uint8_t FourthByte = 0x80 | (UnicodeScalarValue & 0x3F);
                                 ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:596:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Scanner scanner(Input, SM);
          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:255:43: note: default parameter was declared here
  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:596:11: warning: invalid case style for variable 'scanner' [readability-identifier-naming]
  Scanner scanner(Input, SM);
          ^~~~~~~~
          Scanner
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:670:39: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (T.Kind == Token::TK_StreamEnd)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:672:5: warning: do not use 'else' after 'break' [readability-else-after-return]
    else if (T.Kind == Token::TK_Error)
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:672:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (T.Kind == Token::TK_Error)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:680:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Scanner scanner(Input, SM);
          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:255:43: note: default parameter was declared here
  Scanner(StringRef Input, SourceMgr &SM, bool ShowColors = true,
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:680:11: warning: invalid case style for variable 'scanner' [readability-identifier-naming]
  Scanner scanner(Input, SM);
          ^~~~~~~~
          Scanner
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:683:39: warning: statement should be inside braces [readability-braces-around-statements]
    if (T.Kind == Token::TK_StreamEnd)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:685:5: warning: do not use 'else' after 'break' [readability-else-after-return]
    else if (T.Kind == Token::TK_Error)
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:685:40: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (T.Kind == Token::TK_Error)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:693:28: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (StringRef::iterator i = Input.begin(), e = Input.end(); i != e; ++i) {
                           ^                                   ~         ~~
                           I                                   I         I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:693:47: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (StringRef::iterator i = Input.begin(), e = Input.end(); i != e; ++i) {
                                              ^                     ~~
                                              E                     E
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:694:20: warning: statement should be inside braces [readability-braces-around-statements]
    if (*i == '\\')
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:696:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (*i == '"')
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:698:22: warning: statement should be inside braces [readability-braces-around-statements]
    else if (*i == 0)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:700:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (*i == 0x07)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:702:25: warning: statement should be inside braces [readability-braces-around-statements]
    else if (*i == 0x08)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:704:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (*i == 0x09)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:706:25: warning: statement should be inside braces [readability-braces-around-statements]
    else if (*i == 0x0A)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:708:25: warning: statement should be inside braces [readability-braces-around-statements]
    else if (*i == 0x0B)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:710:25: warning: statement should be inside braces [hicpp-braces-around-statements]
    else if (*i == 0x0C)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:712:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (*i == 0x0D)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:714:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    else if (*i == 0x1B)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:716:14: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
    else if ((unsigned char)*i < 0x20) { // Control characters not handled above.
             ^~~~~~~~~~~~~~~~
             static_cast<unsigned char>( )
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:717:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      std::string HexStr = utohexstr(*i);
                           ^
../include/llvm/ADT/StringExtras.h:125:42: note: default parameter was declared here
inline std::string utohexstr(uint64_t X, bool LowerCase = false) {
                                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:718:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      EscapedInput += "\\x" + std::string(2 - HexStr.size(), '0') + HexStr;
                              ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:719:16: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    } else if (*i & 0x80) { // UTF-8 multiple code unit subsequence.
               ^        ~
               (        ) != 0
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:719:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:730:44: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (UnicodeScalarValue.first == 0x85)
                                           ^
                                            {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:732:49: warning: statement should be inside braces [hicpp-braces-around-statements]
      else if (UnicodeScalarValue.first == 0xA0)
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:734:51: warning: statement should be inside braces [hicpp-braces-around-statements]
      else if (UnicodeScalarValue.first == 0x2028)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:736:51: warning: statement should be inside braces [google-readability-braces-around-statements]
      else if (UnicodeScalarValue.first == 0x2029)
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:739:68: warning: statement should be inside braces [google-readability-braces-around-statements]
               sys::unicode::isPrintable(UnicodeScalarValue.first))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:742:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        std::string HexStr = utohexstr(UnicodeScalarValue.first);
                             ^
../include/llvm/ADT/StringExtras.h:125:42: note: default parameter was declared here
inline std::string utohexstr(uint64_t X, bool LowerCase = false) {
                                         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:743:32: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (HexStr.size() <= 2)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:744:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          EscapedInput += "\\x" + std::string(2 - HexStr.size(), '0') + HexStr;
                                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:745:37: warning: statement should be inside braces [readability-braces-around-statements]
        else if (HexStr.size() <= 4)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:746:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          EscapedInput += "\\u" + std::string(4 - HexStr.size(), '0') + HexStr;
                                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:747:37: warning: statement should be inside braces [google-readability-braces-around-statements]
        else if (HexStr.size() <= 8)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:748:35: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          EscapedInput += "\\U" + std::string(8 - HexStr.size(), '0') + HexStr;
                                  ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:529:47: note: default parameter was declared here
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
                                              ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:751:11: warning: statement should be inside braces [google-readability-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:757:1: warning: constructor does not initialize these fields: Current, End, Indent, Column, Line, FlowLevel, IsStartOfStream, IsSimpleKeyAllowed, Failed [cppcoreguidelines-pro-type-member-init]
Scanner::Scanner(StringRef Input, SourceMgr &sm, bool ShowColors,
^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:757:46: warning: invalid case style for parameter 'sm' [readability-identifier-naming]
Scanner::Scanner(StringRef Input, SourceMgr &sm, bool ShowColors,
                                             ^~~
                                             Sm
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:763:1: warning: constructor does not initialize these fields: Current, End, Indent, Column, Line, FlowLevel, IsStartOfStream, IsSimpleKeyAllowed, Failed [cppcoreguidelines-pro-type-member-init]
Scanner::Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors,
^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:763:53: warning: invalid case style for parameter 'SM_' [readability-identifier-naming]
Scanner::Scanner(MemoryBufferRef Buffer, SourceMgr &SM_, bool ShowColors,
                                                    ^~~~
                                                    Sm
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:781:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      MemoryBuffer::getMemBuffer(Buffer);
      ^
../include/llvm/Support/MemoryBuffer.h:114:37: note: default parameter was declared here
  getMemBuffer(MemoryBufferRef Ref, bool RequiresNullTerminator = true);
                                    ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:797:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(!TokenQueue.empty() &&
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:803:39: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!is_contained(SimpleKeys, SK))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:805:5: warning: do not use 'else' after 'break' [readability-else-after-return]
    else
    ^~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:805:9: warning: statement should be inside braces [google-readability-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:814:27: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!TokenQueue.empty())
                          ^
                           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:819:26: warning: statement should be inside braces [readability-braces-around-statements]
  if (TokenQueue.empty())
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:825:30: warning: invalid case style for function 'skip_nb_char' [readability-identifier-naming]
StringRef::iterator Scanner::skip_nb_char(StringRef::iterator Position) {
                             ^~~~~~~~~~~~~
                             skipNbChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:826:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Position == End)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:830:51: warning: statement should be inside braces [google-readability-braces-around-statements]
      || (*Position >= 0x20 && *Position <= 0x7E))
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:834:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
  if (uint8_t(*Position) & 0x80) {
      ^~~~~~~                  ~
      (                        ) != 0
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:834:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:835:17: warning: invalid case style for variable 'u8d' [readability-identifier-naming]
    UTF8Decoded u8d = decodeUTF8(Position);
                ^~~
                U8d
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:844:40: warning: statement should be inside braces [readability-braces-around-statements]
            && u8d.first <= 0x10FFFF)))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:850:30: warning: invalid case style for function 'skip_b_break' [readability-identifier-naming]
StringRef::iterator Scanner::skip_b_break(StringRef::iterator Position) {
                             ^~~~~~~~~~~~~
                             skipBBreak
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:851:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Position == End)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:854:56: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Position + 1 != End && *(Position + 1) == 0x0A)
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:859:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Position == 0x0A)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:864:30: warning: invalid case style for function 'skip_s_space' [readability-identifier-naming]
StringRef::iterator Scanner::skip_s_space(StringRef::iterator Position) {
                             ^~~~~~~~~~~~~
                             skipSSpace
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:865:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Position == End)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:867:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Position == ' ')
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:872:30: warning: invalid case style for function 'skip_s_white' [readability-identifier-naming]
StringRef::iterator Scanner::skip_s_white(StringRef::iterator Position) {
                             ^~~~~~~~~~~~~
                             skipSWhite
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:873:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Position == End)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:875:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Position == ' ' || *Position == '\t')
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:880:30: warning: invalid case style for function 'skip_ns_char' [readability-identifier-naming]
StringRef::iterator Scanner::skip_ns_char(StringRef::iterator Position) {
                             ^~~~~~~~~~~~~
                             skipNsChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:881:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Position == End)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:883:45: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Position == ' ' || *Position == '\t')
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:888:30: warning: invalid case style for function 'skip_while' [readability-identifier-naming]
StringRef::iterator Scanner::skip_while( SkipWhileFunc Func
                             ^~~~~~~~~~~
                             skipWhile
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:891:25: warning: invalid case style for variable 'i' [readability-identifier-naming]
    StringRef::iterator i = (this->*Func)(Position);
                        ^
                        I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:892:23: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (i == Position)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:905:13: warning: invalid case style for function 'is_ns_hex_digit' [readability-identifier-naming]
static bool is_ns_hex_digit(const char C) {
            ^~~~~~~~~~~~~~~~
            isNsHexDigit
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:911:13: warning: invalid case style for function 'is_ns_word_char' [readability-identifier-naming]
static bool is_ns_word_char(const char C) {
            ^~~~~~~~~~~~~~~~
            isNsWordChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:917:15: warning: invalid case style for function 'scan_ns_uri_char' [readability-identifier-naming]
void Scanner::scan_ns_uri_char() {
              ^~~~~~~~~~~~~~~~~
              scanNsUriChar
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:919:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Current == End)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:926:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        || StringRef(Current, 1).find_first_of("#;/?:@&=+$,_.!~*'()[]")
           ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:930:11: warning: statement should be inside braces [hicpp-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:936:24: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Expected >= 0x80)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:937:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    report_fatal_error("Not dealing with this yet");
    ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:938:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Current == End)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:940:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (uint8_t(*Current) >= 0x80)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:941:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    report_fatal_error("Not dealing with this yet");
    ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:953:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Current <= End && "Skipped past the end");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:957:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Position == End)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:965:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Next == Current)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:988:45: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (SmallVectorImpl<SimpleKey>::iterator i = SimpleKeys.begin();
                                            ^
                                            I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:991:25: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (i->IsRequired)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:995:11: warning: statement should be inside braces [hicpp-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1001:73: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!SimpleKeys.empty() && (SimpleKeys.end() - 1)->FlowLevel == Level)
                                                                        ^
                                                                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1008:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FlowLevel != 0)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1024:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (FlowLevel)
      ^        ~
                != 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1024:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (FlowLevel)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1039:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*Current != '#')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1045:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I == Current)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1061:25: warning: invalid case style for variable 'i' [readability-identifier-naming]
    StringRef::iterator i = skip_b_break(Current);
                        ^
                        I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1062:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (i == Current)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1068:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!FlowLevel)
        ~^~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1068:20: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!FlowLevel)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1124:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if(Name == "TAG") {
    ^~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1175:7: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (FlowLevel)
      ^        ~
                != 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1175:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (FlowLevel)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1204:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!FlowLevel)
      ~^~~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1204:18: warning: statement should be inside braces [readability-braces-around-statements]
  if (!FlowLevel)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1208:25: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  IsSimpleKeyAllowed = !FlowLevel;
                       ~^~~~~~~~~~
                       ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1226:27: warning: invalid case style for variable 'i' [readability-identifier-naming]
    TokenQueueT::iterator i, e;
                          ^~
                          I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1226:30: warning: invalid case style for variable 'e' [readability-identifier-naming]
    TokenQueueT::iterator i, e;
                             ^~
                             E
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1228:23: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (i == SK.Tok)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1231:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(i != e && "SimpleKey not in token queue!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1239:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!FlowLevel)
        ~^~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1239:20: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!FlowLevel)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1241:27: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    IsSimpleKeyAllowed = !FlowLevel;
                         ~^~~~~~~~~~
                         ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1261:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Position - 1 >= First);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1265:35: warning: statement should be inside braces [readability-braces-around-statements]
  while (I >= First && *I == '\\') --I;
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1277:48: warning: statement should be inside braces [readability-braces-around-statements]
      while (Current != End && *Current != '"')
                                               ^
                                                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1291:9: warning: do not use 'else' after 'continue' [readability-else-after-return]
      } else if (*Current == '\'')
        ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1291:35: warning: statement should be inside braces [google-readability-braces-around-statements]
      } else if (*Current == '\'')
                                  ^
                                   {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1293:27: warning: invalid case style for variable 'i' [readability-identifier-naming]
      StringRef::iterator i = skip_nb_char(Current);
                          ^
                          I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1296:26: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (i == Current)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1302:22: warning: statement should be inside braces [hicpp-braces-around-statements]
        if (i == End)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1332:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Indent >= -1 && "Indent must be >= -1 !");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1333:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto]
  unsigned indent = static_cast<unsigned>(Indent + 1);
  ^~~~~~~~
  auto
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1333:12: warning: invalid case style for variable 'indent' [readability-identifier-naming]
  unsigned indent = static_cast<unsigned>(Indent + 1);
           ^~~~~~
           Indent
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1335:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (*Current == '#')
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1339:13: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      if (  FlowLevel && *Current == ':'
            ^~~~~~~~~
            ( != 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1347:17: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
          || (  FlowLevel
                ^~~~~~~~~
                ( != 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1348:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          && (StringRef(Current, 1).find_first_of(",:?[]{}")
              ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1349:36: warning: statement should be inside braces [hicpp-braces-around-statements]
              != StringRef::npos)))
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1352:27: warning: invalid case style for variable 'i' [readability-identifier-naming]
      StringRef::iterator i = skip_nb_char(Current);
                          ^
                          I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1353:24: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (i == Current)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1360:34: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!isBlankOrBreak(Current))
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1366:27: warning: invalid case style for variable 'i' [readability-identifier-naming]
      StringRef::iterator i = skip_s_white(Tmp);
                          ^
                          I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1368:13: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
        if (LeadingBlanks && (Column < indent) && *Tmp == '\t') {
            ^~~~~~~~~~~~~
            ( != 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1376:14: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
        if (!LeadingBlanks)
            ~^~~~~~~~~~~~~~
             == 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1376:28: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (!LeadingBlanks)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1384:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!FlowLevel && Column < indent)
        ~^~~~~~~~~
        ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1384:39: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!FlowLevel && Column < indent)
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1414:28: warning: statement should be inside braces [google-readability-braces-around-statements]
        || *Current == ':')
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1416:25: warning: invalid case style for variable 'i' [readability-identifier-naming]
    StringRef::iterator i = skip_ns_char(Current);
                        ^
                        I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1417:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (i == Current)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1456:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (ChompingIndicator == '-') // Strip all line breaks.
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1458:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ChompingIndicator == '+') // Keep all line breaks.
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1480:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ChompingIndicator == ' ')
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1553:22: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (I == Current)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1559:40: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (skip_nb_char(Current) == Current)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1578:36: warning: parameter 'IsLiteral' is unused [misc-unused-parameters]
bool Scanner::scanBlockScalar(bool IsLiteral) {
                                   ^~~~~~~~~~
                                    /*IsLiteral*/
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1580:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(*Current == '|' || *Current == '>');
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1586:70: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!scanBlockScalarHeader(ChompingIndicator, BlockIndent, IsDone))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1588:14: warning: statement should be inside braces [readability-braces-around-statements]
  if (IsDone)
             ^
              {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1592:47: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
  unsigned BlockExitIndent = Indent < 0 ? 0 : (unsigned)Indent;
                                              ^~~~~~~~~~~~~~~~~
                                              static_cast<unsigned>()
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1596:40: warning: statement should be inside braces [readability-braces-around-statements]
                               IsDone))
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1603:70: warning: statement should be inside braces [readability-braces-around-statements]
    if (!scanBlockScalarIndent(BlockIndent, BlockExitIndent, IsDone))
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1605:16: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (IsDone)
               ^
                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1618:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Current == End)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1621:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!consumeLineBreakIfPresent())
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1626:26: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (Current == End && !LineBreaks)
                        ~^~~~~~~~~~~
                        ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1626:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Current == End && !LineBreaks)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1632:8: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (!FlowLevel)
      ~^~~~~~~~~~
       == 0u
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1632:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!FlowLevel)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1647:49: warning: statement should be inside braces [readability-braces-around-statements]
  if (Current == End || isBlankOrBreak(Current)); // An empty tag.
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1651:23: warning: statement should be inside braces [readability-braces-around-statements]
    if (!consume('>'))
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1672:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (IsStartOfStream)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1677:22: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Current == End)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1684:38: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Column == 0 && *Current == '%')
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1691:62: warning: statement should be inside braces [readability-braces-around-statements]
      && (Current + 3 == End || isBlankOrBreak(Current + 3)))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1698:62: warning: statement should be inside braces [readability-braces-around-statements]
      && (Current + 3 == End || isBlankOrBreak(Current + 3)))
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1701:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == '[')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1704:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*Current == '{')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1707:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == ']')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1710:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == '}')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1713:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == ',')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1716:54: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == '-' && isBlankOrBreak(Current + 1))
                                                     ^
                                                      {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1719:27: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (*Current == '?' && (FlowLevel || isBlankOrBreak(Current + 1)))
                          ^~~~~~~~~
                          ( != 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1719:69: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == '?' && (FlowLevel || isBlankOrBreak(Current + 1)))
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1722:27: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (*Current == ':' && (FlowLevel || isBlankOrBreak(Current + 1)))
                          ^~~~~~~~~
                          ( != 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1722:69: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Current == ':' && (FlowLevel || isBlankOrBreak(Current + 1)))
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1725:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Current == '*')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1728:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Current == '&')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1731:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (*Current == '!')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1734:27: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (*Current == '|' && !FlowLevel)
                         ~^~~~~~~~~~
                         ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1734:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Current == '|' && !FlowLevel)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1737:27: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
  if (*Current == '>' && !FlowLevel)
                         ~^~~~~~~~~~
                         ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1737:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (*Current == '>' && !FlowLevel)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1740:24: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*Current == '\'')
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1743:23: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (*Current == '"')
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1749:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        || FirstChar.find_first_of("-?:,[]{}#&*!|>'\"%@`") != StringRef::npos)
           ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1751:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      || (!FlowLevel && (*Current == '?' || *Current == ':')
          ~^~~~~~~~~
          ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1753:12: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
      || (!FlowLevel && *Current == ':'
          ~^~~~~~~~~
          ( == 0u)
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1756:56: warning: statement should be inside braces [google-readability-braces-around-statements]
                      && !isBlankOrBreak(Current + 2)))
                                                       ^
                                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1783:18: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (CurrentDoc)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1784:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    report_fatal_error("Can only iterate over the stream once");
    ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1789:14: warning: use std::make_unique instead [modernize-make-unique]
  CurrentDoc.reset(new Document(*this));
            ~^~~~~~~~~~~~~~~~~~~~    ~~
             = std::make_unique<Document>
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1789:20: warning: initializing non-owner argument of type 'std::unique_ptr<llvm::yaml::Document, std::default_delete<llvm::yaml::Document> >::pointer' (aka 'llvm::yaml::Document *') with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  CurrentDoc.reset(new Document(*this));
                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1790:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return document_iterator(CurrentDoc);
         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1794:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return document_iterator();
         ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1798:26: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (document_iterator i = begin(), e = end(); i != e; ++i)
                         ^                       ~         ~~
                         I                       I         I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1798:39: warning: invalid case style for variable 'e' [readability-identifier-naming]
  for (document_iterator i = begin(), e = end(); i != e; ++i)
                                      ^               ~~
                                      E               E
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1798:62: warning: statement should be inside braces [hicpp-braces-around-statements]
  for (document_iterator i = begin(), e = end(); i != e; ++i)
                                                             ^
                                                              {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1813:9: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (Raw.find_last_of('!') == 0) {
        ^
../include/llvm/ADT/StringRef.h:421:33: note: default parameter was declared here
    size_t find_last_of(char C, size_t From = npos) const {
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1815:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Ret += Raw.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1817:7: warning: do not use 'else' after 'return' [readability-else-after-return]
    } else if (Raw.startswith("!!")) {
      ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1819:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Ret += Raw.substr(2);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1822:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef TagHandle = Raw.substr(0, Raw.find_last_of('!') + 1);
                                          ^
../include/llvm/ADT/StringRef.h:421:33: note: default parameter was declared here
    size_t find_last_of(char C, size_t From = npos) const {
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1823:7: warning: use auto when declaring iterators [hicpp-use-auto]
      std::map<StringRef, StringRef>::const_iterator It =
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      auto
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1825:40: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (It != Doc->getTagMap().end())
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1833:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Ret += Raw.substr(Raw.find_last_of('!') + 1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1833:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Ret += Raw.substr(Raw.find_last_of('!') + 1);
                        ^
../include/llvm/ADT/StringRef.h:421:33: note: default parameter was declared here
    size_t find_last_of(char C, size_t From = npos) const {
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1840:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "tag:yaml.org,2002:null";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1843:5: warning: missing username/bug in TODO [google-readability-todo]
    // TODO: Tag resolution.
    ^~~~~~~~~~~~~~~~~~~~~~~~
    // TODO(jonas): Tag resolution.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1844:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "tag:yaml.org,2002:str";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1846:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "tag:yaml.org,2002:map";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1848:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return "tag:yaml.org,2002:seq";
           ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1851:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return "";
         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/basic_string.h:514:39: note: default parameter was declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
                                      ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1879:3: warning: missing username/bug in TODO [google-readability-todo]
  // TODO: Handle newlines properly. We need to remove leading whitespace.
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  // TODO(jonas): Handle newlines properly. We need to remove leading whitespace.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1884:26: warning: invalid case style for variable 'i' [readability-identifier-naming]
    StringRef::size_type i = UnquotedValue.find_first_of("\\\r\n");
                         ^
                         I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1884:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef::size_type i = UnquotedValue.find_first_of("\\\r\n");
                             ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1885:30: warning: statement should be inside braces [readability-braces-around-statements]
    if (i != StringRef::npos)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1888:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (Value[0] == '\'') { // Single quoted.
    ^~~~~~~~
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1891:26: warning: invalid case style for variable 'i' [readability-identifier-naming]
    StringRef::size_type i = UnquotedValue.find('\'');
                         ^
                         I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1891:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef::size_type i = UnquotedValue.find('\'');
                             ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1896:40: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      for (; i != StringRef::npos; i = UnquotedValue.find('\'')) {
                                       ^
../include/llvm/ADT/StringRef.h:298:25: note: default parameter was declared here
    size_t find(char C, size_t From = 0) const {
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1900:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        UnquotedValue = UnquotedValue.substr(i + 2);
                        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1903:14: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
      return StringRef(Storage.begin(), Storage.size());
             ^~~~~~~~~~~~~~~~~                        ~~
             {                                        }
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1912:66: warning: invalid case style for parameter 'i' [readability-identifier-naming]
                                          , StringRef::size_type i
                                                                 ^
                                                                 I
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1918:36: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  for (; i != StringRef::npos; i = UnquotedValue.find_first_of("\\\r\n")) {
                                   ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1923:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    UnquotedValue = UnquotedValue.substr(i);
                    ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1925:5: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
    assert(!UnquotedValue.empty() && "Can't be empty!");
    ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1933:69: warning: statement should be inside braces [google-readability-braces-around-statements]
          && (UnquotedValue[1] == '\r' || UnquotedValue[1] == '\n'))
                                                                    ^
                                                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1934:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        UnquotedValue = UnquotedValue.substr(1);
                        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1935:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      UnquotedValue = UnquotedValue.substr(1);
                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1938:37: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (UnquotedValue.size() == 1)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1939:9: warning: missing username/bug in TODO [google-readability-todo]
        // TODO: Report error.
        ^~~~~~~~~~~~~~~~~~~~~~
        // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1941:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      UnquotedValue = UnquotedValue.substr(1);
                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1953:71: warning: statement should be inside braces [google-readability-braces-around-statements]
            && (UnquotedValue[1] == '\r' || UnquotedValue[1] == '\n'))
                                                                      ^
                                                                       {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:1954:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          UnquotedValue = UnquotedValue.substr(1);
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2011:40: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (UnquotedValue.size() < 3)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2012:13: warning: missing username/bug in TODO [google-readability-todo]
            // TODO: Report error.
            ^~~~~~~~~~~~~~~~~~~~~~
            // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2015:79: warning: statement should be inside braces [readability-braces-around-statements]
          if (UnquotedValue.substr(1, 2).getAsInteger(16, UnicodeScalarValue))
                                                                              ^
                                                                               {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2016:13: warning: missing username/bug in TODO [google-readability-todo]
            // TODO: Report error.
            ^~~~~~~~~~~~~~~~~~~~~~
            // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2019:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          UnquotedValue = UnquotedValue.substr(2);
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2023:40: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (UnquotedValue.size() < 5)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2024:13: warning: missing username/bug in TODO [google-readability-todo]
            // TODO: Report error.
            ^~~~~~~~~~~~~~~~~~~~~~
            // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2027:79: warning: statement should be inside braces [readability-braces-around-statements]
          if (UnquotedValue.substr(1, 4).getAsInteger(16, UnicodeScalarValue))
                                                                              ^
                                                                               {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2028:13: warning: missing username/bug in TODO [google-readability-todo]
            // TODO: Report error.
            ^~~~~~~~~~~~~~~~~~~~~~
            // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2031:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          UnquotedValue = UnquotedValue.substr(4);
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2035:40: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (UnquotedValue.size() < 9)
                                       ^
                                        {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2036:13: warning: missing username/bug in TODO [google-readability-todo]
            // TODO: Report error.
            ^~~~~~~~~~~~~~~~~~~~~~
            // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2039:79: warning: statement should be inside braces [google-readability-braces-around-statements]
          if (UnquotedValue.substr(1, 8).getAsInteger(16, UnicodeScalarValue))
                                                                              ^
                                                                               {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2040:13: warning: missing username/bug in TODO [google-readability-todo]
            // TODO: Report error.
            ^~~~~~~~~~~~~~~~~~~~~~
            // TODO(jonas): Report error.
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2043:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          UnquotedValue = UnquotedValue.substr(8);
                          ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2047:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      UnquotedValue = UnquotedValue.substr(1);
                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2051:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef(Storage.begin(), Storage.size());
         ^~~~~~~~~~~~~~~~~                        ~~
         {                                        }
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2055:7: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
  if (Key)
      ^  ~
          != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2055:11: warning: statement should be inside braces [readability-braces-around-statements]
  if (Key)
          ^
           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2059:12: warning: invalid case style for variable 't' [readability-identifier-naming]
    Token &t = peekNext();
           ^
           T
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2063:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Key = new (getAllocator()) NullNode(Doc);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2065:33: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (t.Kind == Token::TK_Key)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2070:10: warning: invalid case style for variable 't' [readability-identifier-naming]
  Token &t = peekNext();
         ^
         T
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2072:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Key = new (getAllocator()) NullNode(Doc);
                     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2080:7: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
  if (Value)
      ^    ~
            != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2080:13: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (Value)
            ^
             {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2083:16: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (failed())
               ^
                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2084:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Value = new (getAllocator()) NullNode(Doc);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2088:12: warning: invalid case style for variable 't' [readability-identifier-naming]
    Token &t = peekNext();
           ^
           T
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2094:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Value = new (getAllocator()) NullNode(Doc);
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2099:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return Value = new (getAllocator()) NullNode(Doc);
                         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2105:10: warning: invalid case style for variable 't' [readability-identifier-naming]
  Token &t = peekNext();
         ^
         T
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2107:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return Value = new (getAllocator()) NullNode(Doc);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2120:7: warning: implicit conversion 'llvm::yaml::KeyValueNode *' -> bool [readability-implicit-bool-conversion]
  if (CurrentEntry) {
      ^           ~
                   != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2131:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'llvm::yaml::KeyValueNode *' [cppcoreguidelines-owning-memory]
    CurrentEntry = new (getAllocator()) KeyValueNode(Doc);
    ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2131:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    CurrentEntry = new (getAllocator()) KeyValueNode(Doc);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2176:7: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
  if (CurrentEntry)
      ^           ~
                   != nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2176:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (CurrentEntry)
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2184:12: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
      if (!CurrentEntry) { // An error occurred.
          ~^~~~~~~~~~~~~
           == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2207:12: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
      if (!CurrentEntry) { // An error occurred.
          ~^~~~~~~~~~~~~
           == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2249:12: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
      if (!CurrentEntry) {
          ~^~~~~~~~~~~~~
           == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2263:25: warning: statement should be inside braces [readability-braces-around-statements]
  if (parseDirectives())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2266:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (T.Kind == Token::TK_DocumentStart)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2271:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (stream.scanner->failed())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2273:8: warning: implicit conversion 'llvm::yaml::Node *' -> bool [readability-implicit-bool-conversion]
  if (!Root)
      ~^~~~~
       == nullptr
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2273:13: warning: statement should be inside braces [readability-braces-around-statements]
  if (!Root)
            ^
             {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2277:37: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (T.Kind == Token::TK_StreamEnd)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2311:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator) AliasNode(stream.CurrentDoc, T.Range.substr(1));
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2311:61: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator) AliasNode(stream.CurrentDoc, T.Range.substr(1));
                                                            ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2337:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator) SequenceNode( stream.CurrentDoc
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2338:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                                           , AnchorInfo.Range.substr(1)
                                             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2343:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2345:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                  , AnchorInfo.Range.substr(1)
                    ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2350:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2352:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                 , AnchorInfo.Range.substr(1)
                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2357:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2359:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                  , AnchorInfo.Range.substr(1)
                    ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2364:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2366:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                 , AnchorInfo.Range.substr(1)
                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2371:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2373:19: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                , AnchorInfo.Range.substr(1)
                  ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2379:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef StrCopy = NullTerminatedStr.copy(NodeAllocator).drop_back();
                        ^
../include/llvm/ADT/StringRef.h:654:25: note: default parameter was declared here
    StringRef drop_back(size_t N = 1) const {
                        ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2380:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2381:44: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        BlockScalarNode(stream.CurrentDoc, AnchorInfo.Range.substr(1),
                                           ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2386:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator)
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2388:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
                 , AnchorInfo.Range.substr(1)
                   ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2395:5: warning: missing username/bug in TODO [google-readability-todo]
    // TODO: Properly handle tags. "[!!str ]" should resolve to !!str "", not
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // TODO(jonas): Properly handle tags. "[!!str ]" should resolve to !!str "", not
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2397:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    return new (NodeAllocator) NullNode(stream.CurrentDoc);
               ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/YAMLParser.h:137:22: note: default parameter was declared here
                     size_t Alignment = 16) noexcept {
                     ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2406:8: warning: invalid case style for variable 'isDirective' [readability-identifier-naming]
  bool isDirective = false;
       ^~~~~~~~~~~
       IsDirective
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2415:11: warning: statement should be inside braces [readability-braces-around-statements]
    } else
          ^
           {
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2429:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  T = T.substr(T.find_first_of(" \t")).ltrim(" \t");
      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2429:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  T = T.substr(T.find_first_of(" \t")).ltrim(" \t");
               ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2430:27: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::size_t HandleEnd = T.find_first_of(" \t");
                          ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/YAMLParser.cpp:2432:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef TagPrefix = T.substr(HandleEnd).ltrim(" \t");
                        ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Program.cpp:18:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Program.cpp:19:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace sys;
^
/home/jonas/opt/llvm/lib/Support/Program.cpp:26:13: warning: invalid case style for function 'Execute' [readability-identifier-naming]
static bool Execute(ProcessInfo &PI, StringRef Program,
            ^~~~~~~~
            execute
/home/jonas/opt/llvm/lib/Support/Program.cpp:26:34: warning: non-const reference parameter 'PI', make it const or use a pointer [google-runtime-references]
static bool Execute(ProcessInfo &PI, StringRef Program,
                                 ^
/home/jonas/opt/llvm/lib/Support/Program.cpp:31:10: warning: invalid case style for function 'ExecuteAndWait' [readability-identifier-naming]
int sys::ExecuteAndWait(StringRef Program, ArrayRef<StringRef> Args,
         ^~~~~~~~~~~~~~~
         executeAndWait
/home/jonas/opt/llvm/lib/Support/Program.cpp:36:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Redirects.empty() || Redirects.size() == 3);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Program.cpp:39:9: warning: implicit conversion 'bool *' -> bool [readability-implicit-bool-conversion]
    if (ExecutionFailed)
        ^              ~
                        != nullptr
/home/jonas/opt/llvm/lib/Support/Program.cpp:39:25: warning: statement should be inside braces [readability-braces-around-statements]
    if (ExecutionFailed)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Program.cpp:46:7: warning: implicit conversion 'bool *' -> bool [readability-implicit-bool-conversion]
  if (ExecutionFailed)
      ^              ~
                      != nullptr
/home/jonas/opt/llvm/lib/Support/Program.cpp:46:23: warning: statement should be inside braces [readability-braces-around-statements]
  if (ExecutionFailed)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Program.cpp:52:18: warning: invalid case style for function 'ExecuteNoWait' [readability-identifier-naming]
ProcessInfo sys::ExecuteNoWait(StringRef Program, ArrayRef<StringRef> Args,
                 ^~~~~~~~~~~~~~
                 executeNoWait
/home/jonas/opt/llvm/lib/Support/Program.cpp:57:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(Redirects.empty() || Redirects.size() == 3);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Program.cpp:59:7: warning: implicit conversion 'bool *' -> bool [readability-implicit-bool-conversion]
  if (ExecutionFailed)
      ^              ~
                      != nullptr
/home/jonas/opt/llvm/lib/Support/Program.cpp:59:23: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (ExecutionFailed)
                      ^
                       {
/home/jonas/opt/llvm/lib/Support/Program.cpp:61:72: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!Execute(PI, Program, Args, Env, Redirects, MemoryLimit, ErrMsg))
                                                                       ^
                                                                        {
/home/jonas/opt/llvm/lib/Support/Program.cpp:62:9: warning: implicit conversion 'bool *' -> bool [readability-implicit-bool-conversion]
    if (ExecutionFailed)
        ^              ~
                        != nullptr
/home/jonas/opt/llvm/lib/Support/Program.cpp:62:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (ExecutionFailed)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Program.cpp:72:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (const char *A : Args)
                            ^
                             {
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:31:9: warning: implicit conversion 'const unsigned int *' -> bool [readability-implicit-bool-conversion]
    if (Desc.SubUnitsIdxBegin)
        ^                    ~
                              != nullptr
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:31:31: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (Desc.SubUnitsIdxBegin)
                              ^
                               {
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:40:10: warning: implicit conversion 'const unsigned int *' -> bool [readability-implicit-bool-conversion]
    if (!Desc.SubUnitsIdxBegin)
        ~^~~~                 ~
                               == nullptr
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:40:32: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!Desc.SubUnitsIdxBegin)
                               ^
                                {
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:44:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      uint64_t OtherMask = Masks[Desc.SubUnitsIdxBegin[U]];
                                 ^
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:64:10: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (!ResourceCycles)
        ~^~~~~~~~~~~~~~~
         == 0u
/home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp:64:25: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!ResourceCycles)
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:26:1: warning: #includes are not sorted properly [llvm-include-order]
#include "llvm/Support/Program.h"
^        ~~~~~~~~~~~~~~~~~~~~~~~~
         "llvm/Support/Options.h"
/home/jonas/opt/llvm/lib/Support/Signals.cpp:37:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:59:11: warning: invalid case style for function 'RunSignalHandlers' [readability-identifier-naming]
void sys::RunSignalHandlers() {
          ^~~~~~~~~~~~~~~~~~
          runSignalHandlers
/home/jonas/opt/llvm/lib/Support/Signals.cpp:60:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (size_t I = 0; I < MaxSignalHandlerCallbacks; ++I) {
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & RunMe : CallBacksToRun)
/home/jonas/opt/llvm/lib/Support/Signals.cpp:61:19: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    auto &RunMe = CallBacksToRun[I];
                  ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:64:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (!RunMe.Flag.compare_exchange_strong(Expected, Desired))
         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/atomic:338:11: note: default parameter was declared here
                               memory_order __m = memory_order_seq_cst) noexcept
                               ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:64:64: warning: statement should be inside braces [readability-braces-around-statements]
    if (!RunMe.Flag.compare_exchange_strong(Expected, Desired))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:69:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    RunMe.Flag.store(CallbackAndCookie::Status::Empty);
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/atomic:238:22: note: default parameter was declared here
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
                     ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:76:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (size_t I = 0; I < MaxSignalHandlerCallbacks; ++I) {
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      (auto & SetMe : CallBacksToRun)
/home/jonas/opt/llvm/lib/Support/Signals.cpp:77:19: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    auto &SetMe = CallBacksToRun[I];
                  ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:80:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (!SetMe.Flag.compare_exchange_strong(Expected, Desired))
         ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/atomic:338:11: note: default parameter was declared here
                               memory_order __m = memory_order_seq_cst) noexcept
                               ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:80:64: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (!SetMe.Flag.compare_exchange_strong(Expected, Desired))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:84:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    SetMe.Flag.store(CallbackAndCookie::Status::Initialized);
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/atomic:238:22: note: default parameter was declared here
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
                     ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:87:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  report_fatal_error("too many signal callbacks already registered");
  ^
../include/llvm/Support/ErrorHandling.h:73:49: note: default parameter was declared here
                                                bool gen_crash_diag = true);
                                                ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:93:48: warning: non-const reference parameter 'StrPool', make it const or use a pointer [google-runtime-references]
                                  StringSaver &StrPool);
                                               ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:97:24: warning: invalid case style for function 'format_ptr' [readability-identifier-naming]
static FormattedNumber format_ptr(void *PC) {
                       ^~~~~~~~~~~
                       formatPtr
/home/jonas/opt/llvm/lib/Support/Signals.cpp:100:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return format_hex((uint64_t)PC, PtrWidth);
         ^
../include/llvm/Support/Format.h:187:35: note: default parameter was declared here
                                  bool Upper = false) {
                                  ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:100:21: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
  return format_hex((uint64_t)PC, PtrWidth);
                    ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:100:21: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Signals.cpp:107:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (DisableSymbolicationFlag)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:111:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (Argv0.find("llvm-symbolizer") != std::string::npos)
      ^
../include/llvm/ADT/StringRef.h:346:32: note: default parameter was declared here
    size_t find(StringRef Str, size_t From = 0) const;
                               ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:111:58: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (Argv0.find("llvm-symbolizer") != std::string::npos)
                                                         ^
                                                          {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:120:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef Parent = llvm::sys::path::parent_path(Argv0);
                       ^
../include/llvm/Support/Path.h:286:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style = Style::native);
                                      ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:121:25: warning: statement should be inside braces [hicpp-braces-around-statements]
    if (!Parent.empty())
                        ^
                         {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:124:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (!LLVMSymbolizerPathOrErr)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:125:31: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    LLVMSymbolizerPathOrErr = sys::findProgramByName("llvm-symbolizer");
                              ^
../include/llvm/Support/Program.h:70:37: note: default parameter was declared here
  findProgramByName(StringRef Name, ArrayRef<StringRef> Paths = {});
                                    ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:126:32: warning: statement should be inside braces [readability-braces-around-statements]
  if (!LLVMSymbolizerPathOrErr)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:134:23: warning: C-style casts are discouraged; use constructor call syntax [google-readability-casting]
                    : (std::string)Argv0;
                      ^~~~~~~~~~~~~~~~~~~
                      std::string()
/home/jonas/opt/llvm/lib/Support/Signals.cpp:137:29: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::vector<const char *> Modules(Depth, nullptr);
                            ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:428:7: note: default parameter was declared here
             const allocator_type& __a = allocator_type())
             ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:138:25: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::vector<intptr_t> Offsets(Depth, 0);
                        ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:428:7: note: default parameter was declared here
             const allocator_type& __a = allocator_type())
             ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:140:67: warning: statement should be inside braces [google-readability-braces-around-statements]
                             MainExecutableName.c_str(), StrPool))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:146:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  FileRemover InputRemover(InputFile.c_str());
              ^
../include/llvm/Support/FileUtilities.h:46:49: note: default parameter was declared here
    explicit FileRemover(const Twine& filename, bool deleteIt = true)
                                                ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:147:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  FileRemover OutputRemover(OutputFile.c_str());
              ^
../include/llvm/Support/FileUtilities.h:46:49: note: default parameter was declared here
    explicit FileRemover(const Twine& filename, bool deleteIt = true)
                                                ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:150:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    raw_fd_ostream Input(InputFD, true);
                   ^
../include/llvm/Support/raw_ostream.h:422:44: note: default parameter was declared here
  raw_fd_ostream(int fd, bool shouldClose, bool unbuffered=false);
                                           ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:151:14: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (int i = 0; i < Depth; i++) {
             ^      ~          ~~~
             I      I          I
/home/jonas/opt/llvm/lib/Support/Signals.cpp:152:11: warning: implicit conversion '__gnu_cxx::__alloc_traits<std::allocator<const char *>, const char *>::value_type' (aka 'const char *') -> bool [readability-implicit-bool-conversion]
      if (Modules[i])
          ^         ~
                     != nullptr
/home/jonas/opt/llvm/lib/Support/Signals.cpp:152:22: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (Modules[i])
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:153:39: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
        Input << Modules[i] << " " << (void*)Offsets[i] << "\n";
                                      ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:153:39: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
/home/jonas/opt/llvm/lib/Support/Signals.cpp:168:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      sys::ExecuteAndWait(LLVMSymbolizerPath, Args, None, Redirects);
      ^
../include/llvm/Support/Program.h:107:7: note: default parameter was declared here
      unsigned SecondsToWait = 0, ///< If non-zero, this specifies the amount
      ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:169:22: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (RunResult != 0)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:174:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  auto OutputBuf = MemoryBuffer::getFile(OutputFile.c_str());
                   ^
../include/llvm/Support/MemoryBuffer.h:82:47: note: default parameter was declared here
          bool RequiresNullTerminator = true, bool IsVolatile = false);
                                              ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:175:18: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!OutputBuf)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:179:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  Output.split(Lines, "\n");
  ^
../include/llvm/ADT/StringRef.h:782:37: note: default parameter was declared here
               StringRef Separator, int MaxSplit = -1,
                                    ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:181:7: warning: invalid case style for variable 'frame_no' [readability-identifier-naming]
  int frame_no = 0;
      ^~~~~~~~
      FrameNo
/home/jonas/opt/llvm/lib/Support/Signals.cpp:182:12: warning: invalid case style for variable 'i' [readability-identifier-naming]
  for (int i = 0; i < Depth; i++) {
           ^      ~          ~~~
           I      I          I
/home/jonas/opt/llvm/lib/Support/Signals.cpp:183:10: warning: implicit conversion '__gnu_cxx::__alloc_traits<std::allocator<const char *>, const char *>::value_type' (aka 'const char *') -> bool [readability-implicit-bool-conversion]
    if (!Modules[i]) {
        ~^~~~~~~   ~
                    == nullptr
/home/jonas/opt/llvm/lib/Support/Signals.cpp:184:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      OS << '#' << frame_no++ << ' ' << format_ptr(StackTrace[i]) << '\n';
                                                   ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:190:34: warning: statement should be inside braces [readability-braces-around-statements]
      if (CurLine == Lines.end())
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:193:32: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (FunctionName.empty())
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:195:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      OS << '#' << frame_no++ << ' ' << format_ptr(StackTrace[i]) << ' ';
                                                   ^
/home/jonas/opt/llvm/lib/Support/Signals.cpp:196:42: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!FunctionName.startswith("??"))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:198:34: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (CurLine == Lines.end())
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:201:42: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (!FileLineInfo.startswith("??"))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:203:11: warning: statement should be inside braces [readability-braces-around-statements]
      else
          ^
           {
/home/jonas/opt/llvm/lib/Support/Signals.cpp:204:43: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
        OS << "(" << Modules[i] << '+' << format_hex(Offsets[i], 0) << ")";
                                          ^
../include/llvm/Support/Format.h:187:35: note: default parameter was declared here
                                  bool Upper = false) {
                                  ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:308:17: warning: function 'llvm::sys::fs::create_directories' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
std::error_code create_directories(const Twine &path,
                ^                               ~~~~~
                                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:915:17: note: the definition seen here
std::error_code create_directories(const Twine &Path, bool IgnoreExisting,
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:308:17: note: differing parameters are named here: ('path'), in definition: ('Path')
std::error_code create_directories(const Twine &path,
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:612:17: warning: function 'llvm::sys::fs::is_other' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
std::error_code is_other(const Twine &path, bool &result);
                ^                     ~~~~~       ~~~~~~~
                                      Path        Result
/home/jonas/opt/llvm/lib/Support/Path.cpp:1080:17: note: the definition seen here
std::error_code is_other(const Twine &Path, bool &Result) {
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:612:17: note: differing parameters are named here: ('path', 'result'), in definition: ('Path', 'Result')
std::error_code is_other(const Twine &path, bool &result);
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:765:17: warning: function 'llvm::sys::fs::createUniqueFile' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
std::error_code createUniqueFile(const Twine &Model, int &ResultFD,
                ^                                         ~~~~~~~~~
                                                          ResultFd
/home/jonas/opt/llvm/lib/Support/Path.cpp:766:17: note: the definition seen here
std::error_code createUniqueFile(const Twine &Model, int &ResultFd,
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:765:17: note: differing parameters are named here: ('ResultFD'), in definition: ('ResultFd')
std::error_code createUniqueFile(const Twine &Model, int &ResultFD,
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:87:27: warning: function 'llvm::sys::path::rbegin' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  friend reverse_iterator rbegin(StringRef path, Style style);
                          ^                ~~~~~
                                           Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:321:18: note: the definition seen here
reverse_iterator rbegin(StringRef Path, Style style) {
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:87:27: note: differing parameters are named here: ('path'), in definition: ('Path')
  friend reverse_iterator rbegin(StringRef path, Style style);
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:88:27: warning: function 'llvm::sys::path::rend' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  friend reverse_iterator rend(StringRef path);
                          ^              ~~~~~
                                         Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:329:18: note: the definition seen here
reverse_iterator rend(StringRef Path) {
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:88:27: note: differing parameters are named here: ('path'), in definition: ('Path')
  friend reverse_iterator rend(StringRef path);
                          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:112:18: warning: function 'llvm::sys::path::rbegin' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
reverse_iterator rbegin(StringRef path, Style style = Style::native);
                 ^                ~~~~~
                                  Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:321:18: note: the definition seen here
reverse_iterator rbegin(StringRef Path, Style style) {
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:112:18: note: differing parameters are named here: ('path'), in definition: ('Path')
reverse_iterator rbegin(StringRef path, Style style = Style::native);
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:117:18: warning: function 'llvm::sys::path::rend' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
reverse_iterator rend(StringRef path);
                 ^              ~~~~~
                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:329:18: note: the definition seen here
reverse_iterator rend(StringRef Path) {
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:117:18: note: differing parameters are named here: ('path'), in definition: ('Path')
reverse_iterator rend(StringRef path);
                 ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:217:6: warning: function 'llvm::sys::path::native' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
void native(SmallVectorImpl<char> &path, Style style = Style::native);
     ^                             ~~~~~
                                   Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:557:6: note: the definition seen here
void native(SmallVectorImpl<char> &Path, Style style) {
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:217:6: note: differing parameters are named here: ('path'), in definition: ('Path')
void native(SmallVectorImpl<char> &path, Style style = Style::native);
     ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:444:11: warning: function 'llvm::sys::path::remove_leading_dotslash' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
StringRef remove_leading_dotslash(StringRef path, Style style = Style::native);
          ^                                 ~~~~~
                                            Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:703:11: note: the definition seen here
StringRef remove_leading_dotslash(StringRef Path, Style style) {
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:444:11: note: differing parameters are named here: ('path'), in definition: ('Path')
StringRef remove_leading_dotslash(StringRef path, Style style = Style::native);
          ^
../lib/Support/Unix/Path.inc:262:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (pwd && llvm::sys::path::is_absolute(pwd) &&
             ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:688:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style) {
                                    ^
../lib/Support/Unix/Path.inc:518:46: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      PathStr.take_until([](char c) { return path::is_separator(c); });
                                             ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:618:31: note: default parameter was declared here
bool is_separator(char value, Style style) {
                              ^
../lib/Support/Unix/Path.inc:548:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  llvm::sys::path::append(Path, Storage);
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:481:29: note: default parameter was declared here
            const Twine &c, const Twine &d) {
                            ^
../lib/Support/Unix/Path.inc:713:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  path::append(path_null, ".");
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:58: note: default parameter was declared here
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                                         ^
../lib/Support/Unix/Path.inc:747:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    It.CurrentEntry.replace_filename(Name, direntType(CurDir));
    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1089:40: note: default parameter was declared here
                                       basic_file_status Status) {
                                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:32:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm;
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:33:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace llvm::support::endian;
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:40:16: warning: invalid case style for function 'real_style' [readability-identifier-naming]
  inline Style real_style(Style style) {
               ^~~~~~~~~~~
               realStyle
/home/jonas/opt/llvm/lib/Support/Path.cpp:40:33: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  inline Style real_style(Style style) {
                                ^~~~~~
                                Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:48:39: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  inline const char *separators(Style style) {
                                      ^~~~~~
                                      Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:49:45: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (real_style(style) == Style::windows)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:54:15: warning: invalid case style for function 'preferred_separator' [readability-identifier-naming]
  inline char preferred_separator(Style style) {
              ^~~~~~~~~~~~~~~~~~~~
              preferredSeparator
/home/jonas/opt/llvm/lib/Support/Path.cpp:54:41: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  inline char preferred_separator(Style style) {
                                        ^~~~~~
                                        Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:55:45: warning: statement should be inside braces [readability-braces-around-statements]
    if (real_style(style) == Style::windows)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:60:13: warning: invalid case style for function 'find_first_component' [readability-identifier-naming]
  StringRef find_first_component(StringRef path, Style style) {
            ^~~~~~~~~~~~~~~~~~~~~
            findFirstComponent
/home/jonas/opt/llvm/lib/Support/Path.cpp:60:44: warning: invalid case style for parameter 'path' [readability-identifier-naming]
  StringRef find_first_component(StringRef path, Style style) {
                                           ^~~~~
                                           Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:60:56: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  StringRef find_first_component(StringRef path, Style style) {
                                                       ^~~~~~
                                                       Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:67:22: warning: statement should be inside braces [readability-braces-around-statements]
    if (path.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Path.cpp:73:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
          std::isalpha(static_cast<unsigned char>(path[0])) && path[1] == ':')
          ^~~
          (                                                 != 0)
/home/jonas/opt/llvm/lib/Support/Path.cpp:73:79: warning: statement should be inside braces [google-readability-braces-around-statements]
          std::isalpha(static_cast<unsigned char>(path[0])) && path[1] == ':')
                                                                              ^
                                                                               {
/home/jonas/opt/llvm/lib/Support/Path.cpp:81:14: warning: invalid case style for variable 'end' [readability-identifier-naming]
      size_t end = path.find_first_of(separators(style), 2);
             ^~~
             End
/home/jonas/opt/llvm/lib/Support/Path.cpp:86:38: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (is_separator(path[0], style))
                                     ^
                                      {
/home/jonas/opt/llvm/lib/Support/Path.cpp:90:12: warning: invalid case style for variable 'end' [readability-identifier-naming]
    size_t end = path.find_first_of(separators(style));
           ^~~
           End
/home/jonas/opt/llvm/lib/Support/Path.cpp:90:18: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    size_t end = path.find_first_of(separators(style));
                 ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:96:10: warning: invalid case style for function 'filename_pos' [readability-identifier-naming]
  size_t filename_pos(StringRef str, Style style) {
         ^~~~~~~~~~~~~
         filenamePos
/home/jonas/opt/llvm/lib/Support/Path.cpp:96:33: warning: invalid case style for parameter 'str' [readability-identifier-naming]
  size_t filename_pos(StringRef str, Style style) {
                                ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/Path.cpp:96:44: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  size_t filename_pos(StringRef str, Style style) {
                                           ^~~~~~
                                           Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:97:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    if (str.size() > 0 && is_separator(str[str.size() - 1], style))
        ^~~~~~~~~~~~~~
        !str.empty()
../include/llvm/ADT/StringRef.h:133:10: note: method 'StringRef'::empty() defined here
    bool empty() const { return Length == 0; }
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:97:68: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (str.size() > 0 && is_separator(str[str.size() - 1], style))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:100:12: warning: invalid case style for variable 'pos' [readability-identifier-naming]
    size_t pos = str.find_last_of(separators(style), str.size() - 1);
           ^~~
           Pos
/home/jonas/opt/llvm/lib/Support/Path.cpp:103:34: warning: statement should be inside braces [readability-braces-around-statements]
      if (pos == StringRef::npos)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Path.cpp:107:77: warning: statement should be inside braces [readability-braces-around-statements]
    if (pos == StringRef::npos || (pos == 1 && is_separator(str[0], style)))
                                                                            ^
                                                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:115:10: warning: invalid case style for function 'root_dir_start' [readability-identifier-naming]
  size_t root_dir_start(StringRef str, Style style) {
         ^~~~~~~~~~~~~~~
         rootDirStart
/home/jonas/opt/llvm/lib/Support/Path.cpp:115:35: warning: invalid case style for parameter 'str' [readability-identifier-naming]
  size_t root_dir_start(StringRef str, Style style) {
                                  ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/Path.cpp:115:46: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  size_t root_dir_start(StringRef str, Style style) {
                                             ^~~~~~
                                             Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:118:74: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (str.size() > 2 && str[1] == ':' && is_separator(str[2], style))
                                                                         ^
                                                                          {
/home/jonas/opt/llvm/lib/Support/Path.cpp:129:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    if (str.size() > 0 && is_separator(str[0], style))
        ^~~~~~~~~~~~~~
        !str.empty()
../include/llvm/ADT/StringRef.h:133:10: note: method 'StringRef'::empty() defined here
    bool empty() const { return Length == 0; }
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:129:55: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (str.size() > 0 && is_separator(str[0], style))
                                                      ^
                                                       {
/home/jonas/opt/llvm/lib/Support/Path.cpp:138:10: warning: invalid case style for function 'parent_path_end' [readability-identifier-naming]
  size_t parent_path_end(StringRef path, Style style) {
         ^~~~~~~~~~~~~~~~
         parentPathEnd
/home/jonas/opt/llvm/lib/Support/Path.cpp:138:36: warning: invalid case style for parameter 'path' [readability-identifier-naming]
  size_t parent_path_end(StringRef path, Style style) {
                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/Path.cpp:138:48: warning: invalid case style for parameter 'style' [readability-identifier-naming]
  size_t parent_path_end(StringRef path, Style style) {
                                               ^~~~~~
                                               Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:139:12: warning: invalid case style for variable 'end_pos' [readability-identifier-naming]
    size_t end_pos = filename_pos(path, style);
           ^~~~~~~
           EndPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:141:10: warning: invalid case style for variable 'filename_was_sep' [readability-identifier-naming]
    bool filename_was_sep =
         ^~~~~~~~~~~~~~~~
         FilenameWasSep
/home/jonas/opt/llvm/lib/Support/Path.cpp:142:9: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
        path.size() > 0 && is_separator(path[end_pos], style);
        ^~~~~~~~~~~~~~~
        !path.empty()
../include/llvm/ADT/StringRef.h:133:10: note: method 'StringRef'::empty() defined here
    bool empty() const { return Length == 0; }
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:145:12: warning: invalid case style for variable 'root_dir_pos' [readability-identifier-naming]
    size_t root_dir_pos = root_dir_start(path, style);
           ^~~~~~~~~~~~
           RootDirPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:148:51: warning: statement should be inside braces [readability-braces-around-statements]
           is_separator(path[end_pos - 1], style))
                                                  ^
                                                   {
/home/jonas/opt/llvm/lib/Support/Path.cpp:169:45: warning: non-const reference parameter 'ResultFD', make it const or use a pointer [google-runtime-references]
createUniqueEntity(const Twine &Model, int &ResultFD,
                                            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:170:43: warning: non-const reference parameter 'ResultPath', make it const or use a pointer [google-runtime-references]
                   SmallVectorImpl<char> &ResultPath, bool MakeAbsolute,
                                          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:172:20: warning: declaring a parameter with a default argument is disallowed [fuchsia-default-arguments]
                   sys::fs::OpenFlags Flags = sys::fs::OF_None) {
                   ^                       ~~~~~~~~~~~~~~~~~~~~
/home/jonas/opt/llvm/lib/Support/Path.cpp:178:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    if (!sys::path::is_absolute(Twine(ModelStorage))) {
         ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:432:37: note: default parameter was declared here
bool is_absolute(const Twine &path, Style style = Style::native);
                                    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:181:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      sys::path::append(TDir, Twine(ModelStorage));
      ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/Path.h:179:42: note: default parameter was declared here
                                         const Twine &c = "",
                                         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:188:14: warning: slicing object from type 'SmallString<128>' to 'SmallVectorImpl<char>' discards 128 bytes of state [cppcoreguidelines-slicing]
  ResultPath = ModelStorage;
             ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:200:19: warning: invalid case style for variable 'i' [readability-identifier-naming]
    for (unsigned i = 0, e = ModelStorage.size(); i != e; ++i) {
                  ^                               ~         ~~
                  I                               I         I
/home/jonas/opt/llvm/lib/Support/Path.cpp:200:26: warning: invalid case style for variable 'e' [readability-identifier-naming]
    for (unsigned i = 0, e = ModelStorage.size(); i != e; ++i) {
                         ^                             ~~
                         E                             E
/home/jonas/opt/llvm/lib/Support/Path.cpp:201:34: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (ModelStorage[i] == '%')
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Path.cpp:203:13: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
            "0123456789abcdef"[sys::Process::GetRandomNumber() & 15];
            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:203:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            "0123456789abcdef"[sys::Process::GetRandomNumber() & 15];
                               ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:214:70: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (EC == errc::file_exists || EC == errc::permission_denied)
                                                                     ^
                                                                      {
/home/jonas/opt/llvm/lib/Support/Path.cpp:219:14: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
      return std::error_code();
             ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:224:49: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (EC == errc::no_such_file_or_directory)
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/Path.cpp:226:14: warning: statement should be inside braces [hicpp-braces-around-statements]
      if (EC)
             ^
              {
/home/jonas/opt/llvm/lib/Support/Path.cpp:232:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      EC = sys::fs::create_directory(ResultPath.begin(), false);
           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:319:34: note: default parameter was declared here
                                 perms Perms = owner_all | group_all);
                                 ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:234:37: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (EC == errc::file_exists)
                                    ^
                                     {
/home/jonas/opt/llvm/lib/Support/Path.cpp:250:32: warning: invalid case style for parameter 'path' [readability-identifier-naming]
const_iterator begin(StringRef path, Style style) {
                               ^~~~~
                               Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:250:44: warning: invalid case style for parameter 'style' [readability-identifier-naming]
const_iterator begin(StringRef path, Style style) {
                                           ^~~~~~
                                           Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:251:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  const_iterator i;
                 ^~
                 I
/home/jonas/opt/llvm/lib/Support/Path.cpp:259:30: warning: invalid case style for parameter 'path' [readability-identifier-naming]
const_iterator end(StringRef path) {
                             ^~~~~
                             Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:260:18: warning: invalid case style for variable 'i' [readability-identifier-naming]
  const_iterator i;
                 ^~
                 I
/home/jonas/opt/llvm/lib/Support/Path.cpp:266:1: warning: cannot overload 'operator++' [fuchsia-overloaded-operator]
const_iterator &const_iterator::operator++() {
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:267:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(Position < Path.size() && "Tried to increment past end!");
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:280:8: warning: invalid case style for variable 'was_net' [readability-identifier-naming]
  bool was_net = Component.size() > 2 && is_separator(Component[0], S) &&
       ^~~~~~~
       WasNet
/home/jonas/opt/llvm/lib/Support/Path.cpp:307:10: warning: invalid case style for variable 'end_pos' [readability-identifier-naming]
  size_t end_pos = Path.find_first_of(separators(S), Position);
         ^~~~~~~
         EndPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:313:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool const_iterator::operator==(const const_iterator &RHS) const {
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:317:1: warning: cannot overload 'operator-' [fuchsia-overloaded-operator]
ptrdiff_t const_iterator::operator-(const const_iterator &RHS) const {
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:321:47: warning: invalid case style for parameter 'style' [readability-identifier-naming]
reverse_iterator rbegin(StringRef Path, Style style) {
                                              ^~~~~~
                                              Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:337:1: warning: cannot overload 'operator++' [fuchsia-overloaded-operator]
reverse_iterator &reverse_iterator::operator++() {
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:338:10: warning: invalid case style for variable 'root_dir_pos' [readability-identifier-naming]
  size_t root_dir_pos = root_dir_start(Path, S);
         ^~~~~~~~~~~~
         RootDirPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:341:10: warning: invalid case style for variable 'end_pos' [readability-identifier-naming]
  size_t end_pos = Position;
         ^~~~~~~
         EndPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:343:45: warning: statement should be inside braces [readability-braces-around-statements]
         is_separator(Path[end_pos - 1], S))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:356:10: warning: invalid case style for variable 'start_pos' [readability-identifier-naming]
  size_t start_pos = filename_pos(Path.substr(0, end_pos), S);
         ^~~~~~~~~
         StartPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:362:1: warning: cannot overload 'operator==' [fuchsia-overloaded-operator]
bool reverse_iterator::operator==(const reverse_iterator &RHS) const {
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:367:1: warning: cannot overload 'operator-' [fuchsia-overloaded-operator]
ptrdiff_t reverse_iterator::operator-(const reverse_iterator &RHS) const {
^
/home/jonas/opt/llvm/lib/Support/Path.cpp:371:11: warning: invalid case style for function 'root_path' [readability-identifier-naming]
StringRef root_path(StringRef path, Style style) {
          ^~~~~~~~~~
          rootPath
/home/jonas/opt/llvm/lib/Support/Path.cpp:371:31: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef root_path(StringRef path, Style style) {
                              ^~~~~
                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:371:43: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef root_path(StringRef path, Style style) {
                                          ^~~~~~
                                          Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:372:18: warning: invalid case style for variable 'b' [readability-identifier-naming]
  const_iterator b = begin(path, style), pos = b, e = end(path);
                 ^                             ~~
                 B                             B
/home/jonas/opt/llvm/lib/Support/Path.cpp:372:42: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  const_iterator b = begin(path, style), pos = b, e = end(path);
                                         ^~~
                                         Pos
/home/jonas/opt/llvm/lib/Support/Path.cpp:372:51: warning: invalid case style for variable 'e' [readability-identifier-naming]
  const_iterator b = begin(path, style), pos = b, e = end(path);
                                                  ^
                                                  E
/home/jonas/opt/llvm/lib/Support/Path.cpp:374:10: warning: invalid case style for variable 'has_net' [readability-identifier-naming]
    bool has_net =
         ^~~~~~~
         HasNet
/home/jonas/opt/llvm/lib/Support/Path.cpp:376:10: warning: invalid case style for variable 'has_drive' [readability-identifier-naming]
    bool has_drive = (real_style(style) == Style::windows) && b->endswith(":");
         ^~~~~~~~~
         HasDrive
/home/jonas/opt/llvm/lib/Support/Path.cpp:382:9: warning: do not use 'else' after 'return' [readability-else-after-return]
      } else {
        ^~~~~~
/home/jonas/opt/llvm/lib/Support/Path.cpp:394:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:397:11: warning: invalid case style for function 'root_name' [readability-identifier-naming]
StringRef root_name(StringRef path, Style style) {
          ^~~~~~~~~~
          rootName
/home/jonas/opt/llvm/lib/Support/Path.cpp:397:31: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef root_name(StringRef path, Style style) {
                              ^~~~~
                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:397:43: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef root_name(StringRef path, Style style) {
                                          ^~~~~~
                                          Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:398:18: warning: invalid case style for variable 'b' [readability-identifier-naming]
  const_iterator b = begin(path, style), e = end(path);
                 ^
                 B
/home/jonas/opt/llvm/lib/Support/Path.cpp:398:42: warning: invalid case style for variable 'e' [readability-identifier-naming]
  const_iterator b = begin(path, style), e = end(path);
                                         ^
                                         E
/home/jonas/opt/llvm/lib/Support/Path.cpp:400:10: warning: invalid case style for variable 'has_net' [readability-identifier-naming]
    bool has_net =
         ^~~~~~~
         HasNet
/home/jonas/opt/llvm/lib/Support/Path.cpp:402:10: warning: invalid case style for variable 'has_drive' [readability-identifier-naming]
    bool has_drive = (real_style(style) == Style::windows) && b->endswith(":");
         ^~~~~~~~~
         HasDrive
/home/jonas/opt/llvm/lib/Support/Path.cpp:411:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:414:11: warning: invalid case style for function 'root_directory' [readability-identifier-naming]
StringRef root_directory(StringRef path, Style style) {
          ^~~~~~~~~~~~~~~
          rootDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:414:36: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef root_directory(StringRef path, Style style) {
                                   ^~~~~
                                   Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:414:48: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef root_directory(StringRef path, Style style) {
                                               ^~~~~~
                                               Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:415:18: warning: invalid case style for variable 'b' [readability-identifier-naming]
  const_iterator b = begin(path, style), pos = b, e = end(path);
                 ^                             ~~
                 B                             B
/home/jonas/opt/llvm/lib/Support/Path.cpp:415:42: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  const_iterator b = begin(path, style), pos = b, e = end(path);
                                         ^~~
                                         Pos
/home/jonas/opt/llvm/lib/Support/Path.cpp:415:51: warning: invalid case style for variable 'e' [readability-identifier-naming]
  const_iterator b = begin(path, style), pos = b, e = end(path);
                                                  ^
                                                  E
/home/jonas/opt/llvm/lib/Support/Path.cpp:417:10: warning: invalid case style for variable 'has_net' [readability-identifier-naming]
    bool has_net =
         ^~~~~~~
         HasNet
/home/jonas/opt/llvm/lib/Support/Path.cpp:419:10: warning: invalid case style for variable 'has_drive' [readability-identifier-naming]
    bool has_drive = (real_style(style) == Style::windows) && b->endswith(":");
         ^~~~~~~~~
         HasDrive
/home/jonas/opt/llvm/lib/Support/Path.cpp:434:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return StringRef();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:437:11: warning: invalid case style for function 'relative_path' [readability-identifier-naming]
StringRef relative_path(StringRef path, Style style) {
          ^~~~~~~~~~~~~~
          relativePath
/home/jonas/opt/llvm/lib/Support/Path.cpp:437:35: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef relative_path(StringRef path, Style style) {
                                  ^~~~~
                                  Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:437:47: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef relative_path(StringRef path, Style style) {
                                              ^~~~~~
                                              Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:438:13: warning: invalid case style for variable 'root' [readability-identifier-naming]
  StringRef root = root_path(path, style);
            ^~~~
            Root
/home/jonas/opt/llvm/lib/Support/Path.cpp:439:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return path.substr(root.size());
         ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:442:36: warning: invalid case style for parameter 'path' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, Style style, const Twine &a,
                                   ^~~~~
                                   Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:442:48: warning: invalid case style for parameter 'style' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, Style style, const Twine &a,
                                               ^~~~~~
                                               Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:442:68: warning: invalid case style for parameter 'a' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, Style style, const Twine &a,
                                                                   ^~
                                                                   A
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:26: warning: invalid case style for parameter 'b' [readability-identifier-naming]
            const Twine &b, const Twine &c, const Twine &d) {
                         ^~
                         B
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:42: warning: invalid case style for parameter 'c' [readability-identifier-naming]
            const Twine &b, const Twine &c, const Twine &d) {
                                         ^~
                                         C
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:58: warning: invalid case style for parameter 'd' [readability-identifier-naming]
            const Twine &b, const Twine &c, const Twine &d) {
                                                         ^~
                                                         D
/home/jonas/opt/llvm/lib/Support/Path.cpp:444:19: warning: invalid case style for variable 'a_storage' [readability-identifier-naming]
  SmallString<32> a_storage;
                  ^~~~~~~~~~
                  AStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:445:19: warning: invalid case style for variable 'b_storage' [readability-identifier-naming]
  SmallString<32> b_storage;
                  ^~~~~~~~~~
                  BStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:446:19: warning: invalid case style for variable 'c_storage' [readability-identifier-naming]
  SmallString<32> c_storage;
                  ^~~~~~~~~~
                  CStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:447:19: warning: invalid case style for variable 'd_storage' [readability-identifier-naming]
  SmallString<32> d_storage;
                  ^~~~~~~~~~
                  DStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:449:29: warning: invalid case style for variable 'components' [readability-identifier-naming]
  SmallVector<StringRef, 4> components;
                            ^~~~~~~~~~~
                            Components
/home/jonas/opt/llvm/lib/Support/Path.cpp:450:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!a.isTriviallyEmpty()) components.push_back(a.toStringRef(a_storage));
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:451:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!b.isTriviallyEmpty()) components.push_back(b.toStringRef(b_storage));
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:452:29: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!c.isTriviallyEmpty()) components.push_back(c.toStringRef(c_storage));
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:453:29: warning: statement should be inside braces [readability-braces-around-statements]
  if (!d.isTriviallyEmpty()) components.push_back(d.toStringRef(d_storage));
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:455:14: warning: invalid case style for variable 'component' [readability-identifier-naming]
  for (auto &component : components) {
             ^~~~~~~~~
             Component
/home/jonas/opt/llvm/lib/Support/Path.cpp:456:10: warning: invalid case style for variable 'path_has_sep' [readability-identifier-naming]
    bool path_has_sep =
         ^~~~~~~~~~~~
         PathHasSep
/home/jonas/opt/llvm/lib/Support/Path.cpp:460:14: warning: invalid case style for variable 'loc' [readability-identifier-naming]
      size_t loc = component.find_first_not_of(separators(style));
             ^~~
             Loc
/home/jonas/opt/llvm/lib/Support/Path.cpp:460:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      size_t loc = component.find_first_not_of(separators(style));
                   ^
../include/llvm/ADT/StringRef.h:416:47: note: default parameter was declared here
    size_t find_first_not_of(StringRef Chars, size_t From = 0) const;
                                              ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:461:17: warning: invalid case style for variable 'c' [readability-identifier-naming]
      StringRef c = component.substr(loc);
                ^
                C
/home/jonas/opt/llvm/lib/Support/Path.cpp:461:21: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      StringRef c = component.substr(loc);
                    ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:468:10: warning: invalid case style for variable 'component_has_sep' [readability-identifier-naming]
    bool component_has_sep =
         ^~~~~~~~~~~~~~~~~
         ComponentHasSep
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:36: warning: invalid case style for parameter 'path' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                   ^~~~~
                                   Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:55: warning: invalid case style for parameter 'a' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                                      ^~
                                                      A
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:71: warning: invalid case style for parameter 'b' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                                                      ^~
                                                                      B
/home/jonas/opt/llvm/lib/Support/Path.cpp:481:26: warning: invalid case style for parameter 'c' [readability-identifier-naming]
            const Twine &c, const Twine &d) {
                         ^~
                         C
/home/jonas/opt/llvm/lib/Support/Path.cpp:481:42: warning: invalid case style for parameter 'd' [readability-identifier-naming]
            const Twine &c, const Twine &d) {
                                         ^~
                                         D
/home/jonas/opt/llvm/lib/Support/Path.cpp:485:36: warning: invalid case style for parameter 'path' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, const_iterator begin,
                                   ^~~~~
                                   Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:485:57: warning: invalid case style for parameter 'begin' [readability-identifier-naming]
void append(SmallVectorImpl<char> &path, const_iterator begin,
                                                        ^~~~~~
                                                        Begin
/home/jonas/opt/llvm/lib/Support/Path.cpp:486:28: warning: invalid case style for parameter 'end' [readability-identifier-naming]
            const_iterator end, Style style) {
                           ^~~~
                           End
/home/jonas/opt/llvm/lib/Support/Path.cpp:486:39: warning: invalid case style for parameter 'style' [readability-identifier-naming]
            const_iterator end, Style style) {
                                      ^~~~~~
                                      Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:487:32: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (; begin != end; ++begin)
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Path.cpp:488:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    path::append(path, style, *begin);
    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:45: note: default parameter was declared here
            const Twine &b, const Twine &c, const Twine &d) {
                                            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:491:11: warning: invalid case style for function 'parent_path' [readability-identifier-naming]
StringRef parent_path(StringRef path, Style style) {
          ^~~~~~~~~~~~
          parentPath
/home/jonas/opt/llvm/lib/Support/Path.cpp:491:33: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef parent_path(StringRef path, Style style) {
                                ^~~~~
                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:491:45: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef parent_path(StringRef path, Style style) {
                                            ^~~~~~
                                            Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:492:10: warning: invalid case style for variable 'end_pos' [readability-identifier-naming]
  size_t end_pos = parent_path_end(path, style);
         ^~~~~~~
         EndPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:493:34: warning: statement should be inside braces [readability-braces-around-statements]
  if (end_pos == StringRef::npos)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Path.cpp:494:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:495:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/Path.cpp:495:7: warning: statement should be inside braces [readability-braces-around-statements]
  else
      ^
       {
/home/jonas/opt/llvm/lib/Support/Path.cpp:499:6: warning: invalid case style for function 'remove_filename' [readability-identifier-naming]
void remove_filename(SmallVectorImpl<char> &path, Style style) {
     ^~~~~~~~~~~~~~~~
     removeFilename
/home/jonas/opt/llvm/lib/Support/Path.cpp:499:45: warning: invalid case style for parameter 'path' [readability-identifier-naming]
void remove_filename(SmallVectorImpl<char> &path, Style style) {
                                            ^~~~~
                                            Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:499:57: warning: invalid case style for parameter 'style' [readability-identifier-naming]
void remove_filename(SmallVectorImpl<char> &path, Style style) {
                                                        ^~~~~~
                                                        Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:500:10: warning: invalid case style for variable 'end_pos' [readability-identifier-naming]
  size_t end_pos = parent_path_end(StringRef(path.begin(), path.size()), style);
         ^~~~~~~
         EndPos
/home/jonas/opt/llvm/lib/Support/Path.cpp:501:34: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (end_pos != StringRef::npos)
                                 ^
                                  {
/home/jonas/opt/llvm/lib/Support/Path.cpp:505:6: warning: invalid case style for function 'replace_extension' [readability-identifier-naming]
void replace_extension(SmallVectorImpl<char> &path, const Twine &extension,
     ^~~~~~~~~~~~~~~~~~
     replaceExtension
/home/jonas/opt/llvm/lib/Support/Path.cpp:505:47: warning: invalid case style for parameter 'path' [readability-identifier-naming]
void replace_extension(SmallVectorImpl<char> &path, const Twine &extension,
                                              ^~~~~
                                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:505:66: warning: invalid case style for parameter 'extension' [readability-identifier-naming]
void replace_extension(SmallVectorImpl<char> &path, const Twine &extension,
                                                                 ^~~~~~~~~~
                                                                 Extension
/home/jonas/opt/llvm/lib/Support/Path.cpp:506:30: warning: invalid case style for parameter 'style' [readability-identifier-naming]
                       Style style) {
                             ^~~~~~
                             Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:507:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p(path.begin(), path.size());
            ^~
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:508:19: warning: invalid case style for variable 'ext_storage' [readability-identifier-naming]
  SmallString<32> ext_storage;
                  ^~~~~~~~~~~~
                  ExtStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:509:13: warning: invalid case style for variable 'ext' [readability-identifier-naming]
  StringRef ext = extension.toStringRef(ext_storage);
            ^
note: this fix will not be applied because it overlaps with another fix
/home/jonas/opt/llvm/lib/Support/Path.cpp:512:10: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  size_t pos = p.find_last_of('.');
         ^~~
         Pos
/home/jonas/opt/llvm/lib/Support/Path.cpp:512:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t pos = p.find_last_of('.');
               ^
../include/llvm/ADT/StringRef.h:421:33: note: default parameter was declared here
    size_t find_last_of(char C, size_t From = npos) const {
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:513:63: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (pos != StringRef::npos && pos >= filename_pos(p, style))
                                                              ^
                                                               {
/home/jonas/opt/llvm/lib/Support/Path.cpp:517:7: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
  if (ext.size() > 0 && ext[0] != '.')
      ^~~~~~~~~~~~~~
      !ext.empty()
../include/llvm/ADT/StringRef.h:133:10: note: method 'StringRef'::empty() defined here
    bool empty() const { return Length == 0; }
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:517:39: warning: statement should be inside braces [readability-braces-around-statements]
  if (ext.size() > 0 && ext[0] != '.')
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/Path.cpp:524:6: warning: invalid case style for function 'replace_path_prefix' [readability-identifier-naming]
void replace_path_prefix(SmallVectorImpl<char> &Path,
     ^~~~~~~~~~~~~~~~~~~~
     replacePathPrefix
/home/jonas/opt/llvm/lib/Support/Path.cpp:526:32: warning: invalid case style for parameter 'style' [readability-identifier-naming]
                         Style style) {
                               ^~~~~~
                               Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:527:46: warning: statement should be inside braces [readability-braces-around-statements]
  if (OldPrefix.empty() && NewPrefix.empty())
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/Path.cpp:531:39: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!OrigPath.startswith(OldPrefix))
                                      ^
                                       {
/home/jonas/opt/llvm/lib/Support/Path.cpp:540:23: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef RelPath = OrigPath.substr(OldPrefix.size());
                      ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:542:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  path::append(NewPath, style, NewPrefix);
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:13: note: default parameter was declared here
            const Twine &b, const Twine &c, const Twine &d) {
            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:543:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  path::append(NewPath, style, RelPath);
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:29: note: default parameter was declared here
            const Twine &b, const Twine &c, const Twine &d) {
                            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:547:26: warning: invalid case style for parameter 'path' [readability-identifier-naming]
void native(const Twine &path, SmallVectorImpl<char> &result, Style style) {
                         ^~~~~
                         Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:547:55: warning: invalid case style for parameter 'result' [readability-identifier-naming]
void native(const Twine &path, SmallVectorImpl<char> &result, Style style) {
                                                      ^~~~~~~
                                                      Result
/home/jonas/opt/llvm/lib/Support/Path.cpp:547:69: warning: invalid case style for parameter 'style' [readability-identifier-naming]
void native(const Twine &path, SmallVectorImpl<char> &result, Style style) {
                                                                    ^~~~~~
                                                                    Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:548:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert((!path.isSingleStringRef() ||
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:557:48: warning: invalid case style for parameter 'style' [readability-identifier-naming]
void native(SmallVectorImpl<char> &Path, Style style) {
                                               ^~~~~~
                                               Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:558:20: warning: statement should be inside braces [readability-braces-around-statements]
  if (Path.empty())
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:566:12: warning: slicing object from type 'SmallString<128>' to 'SmallVectorImpl<char>' discards 128 bytes of state [cppcoreguidelines-slicing]
      Path = PathHome;
           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:572:36: warning: statement should be inside braces [google-readability-braces-around-statements]
        if (PN < PE && *PN == '\\')
                                   ^
                                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:574:13: warning: statement should be inside braces [readability-braces-around-statements]
        else
            ^
             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:581:13: warning: invalid case style for function 'convert_to_slash' [readability-identifier-naming]
std::string convert_to_slash(StringRef path, Style style) {
            ^~~~~~~~~~~~~~~~~
            convertToSlash
/home/jonas/opt/llvm/lib/Support/Path.cpp:581:40: warning: invalid case style for parameter 'path' [readability-identifier-naming]
std::string convert_to_slash(StringRef path, Style style) {
                                       ^~~~~
                                       Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:581:52: warning: invalid case style for parameter 'style' [readability-identifier-naming]
std::string convert_to_slash(StringRef path, Style style) {
                                                   ^~~~~~
                                                   Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:582:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (real_style(style) != Style::windows)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Path.cpp:585:15: warning: invalid case style for variable 's' [readability-identifier-naming]
  std::string s = path.str();
              ^
              S
/home/jonas/opt/llvm/lib/Support/Path.cpp:590:30: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef filename(StringRef path, Style style) { return *rbegin(path, style); }
                             ^~~~~                               ~~~~~
                             Path                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:590:42: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef filename(StringRef path, Style style) { return *rbegin(path, style); }
                                         ^~~~~~                        ~~~~~~
                                         Style                         Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:592:26: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef stem(StringRef path, Style style) {
                         ^~~~~
                         Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:592:38: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef stem(StringRef path, Style style) {
                                     ^~~~~~
                                     Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:593:13: warning: invalid case style for variable 'fname' [readability-identifier-naming]
  StringRef fname = filename(path, style);
            ^~~~~
            Fname
/home/jonas/opt/llvm/lib/Support/Path.cpp:594:10: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  size_t pos = fname.find_last_of('.');
         ^~~
         Pos
/home/jonas/opt/llvm/lib/Support/Path.cpp:594:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t pos = fname.find_last_of('.');
               ^
../include/llvm/ADT/StringRef.h:421:33: note: default parameter was declared here
    size_t find_last_of(char C, size_t From = npos) const {
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:595:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (pos == StringRef::npos)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Path.cpp:597:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/Path.cpp:599:46: warning: statement should be inside braces [readability-braces-around-statements]
        (fname.size() == 2 && fname == ".."))
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/Path.cpp:601:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/Path.cpp:605:31: warning: invalid case style for parameter 'path' [readability-identifier-naming]
StringRef extension(StringRef path, Style style) {
                              ^~~~~
                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:605:43: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef extension(StringRef path, Style style) {
                                          ^~~~~~
                                          Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:606:13: warning: invalid case style for variable 'fname' [readability-identifier-naming]
  StringRef fname = filename(path, style);
            ^~~~~
            Fname
/home/jonas/opt/llvm/lib/Support/Path.cpp:607:10: warning: invalid case style for variable 'pos' [readability-identifier-naming]
  size_t pos = fname.find_last_of('.');
         ^~~
         Pos
/home/jonas/opt/llvm/lib/Support/Path.cpp:607:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  size_t pos = fname.find_last_of('.');
               ^
../include/llvm/ADT/StringRef.h:421:33: note: default parameter was declared here
    size_t find_last_of(char C, size_t From = npos) const {
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:608:30: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (pos == StringRef::npos)
                             ^
                              {
/home/jonas/opt/llvm/lib/Support/Path.cpp:609:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return StringRef();
           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:610:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  else
  ^~~~
/home/jonas/opt/llvm/lib/Support/Path.cpp:612:46: warning: statement should be inside braces [hicpp-braces-around-statements]
        (fname.size() == 2 && fname == ".."))
                                             ^
                                              {
/home/jonas/opt/llvm/lib/Support/Path.cpp:614:9: warning: statement should be inside braces [hicpp-braces-around-statements]
    else
        ^
         {
/home/jonas/opt/llvm/lib/Support/Path.cpp:615:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      return fname.substr(pos);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:618:6: warning: invalid case style for function 'is_separator' [readability-identifier-naming]
bool is_separator(char value, Style style) {
     ^~~~~~~~~~~~~
     isSeparator
/home/jonas/opt/llvm/lib/Support/Path.cpp:618:24: warning: invalid case style for parameter 'value' [readability-identifier-naming]
bool is_separator(char value, Style style) {
                       ^~~~~~
                       Value
/home/jonas/opt/llvm/lib/Support/Path.cpp:618:37: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool is_separator(char value, Style style) {
                                    ^~~~~~
                                    Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:619:20: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (value == '/')
                   ^
                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:621:43: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (real_style(style) == Style::windows)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Path.cpp:626:11: warning: invalid case style for function 'get_separator' [readability-identifier-naming]
StringRef get_separator(Style style) {
          ^~~~~~~~~~~~~~
          getSeparator
/home/jonas/opt/llvm/lib/Support/Path.cpp:626:31: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef get_separator(Style style) {
                              ^~~~~~
                              Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:627:43: warning: statement should be inside braces [readability-braces-around-statements]
  if (real_style(style) == Style::windows)
                                          ^
                                           {
/home/jonas/opt/llvm/lib/Support/Path.cpp:632:6: warning: invalid case style for function 'has_root_name' [readability-identifier-naming]
bool has_root_name(const Twine &path, Style style) {
     ^~~~~~~~~~~~~~
     hasRootName
/home/jonas/opt/llvm/lib/Support/Path.cpp:632:33: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_root_name(const Twine &path, Style style) {
                                ^~~~~
                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:632:45: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_root_name(const Twine &path, Style style) {
                                            ^~~~~~
                                            Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:633:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:634:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:639:6: warning: invalid case style for function 'has_root_directory' [readability-identifier-naming]
bool has_root_directory(const Twine &path, Style style) {
     ^~~~~~~~~~~~~~~~~~~
     hasRootDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:639:38: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_root_directory(const Twine &path, Style style) {
                                     ^~~~~
                                     Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:639:50: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_root_directory(const Twine &path, Style style) {
                                                 ^~~~~~
                                                 Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:640:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:641:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:646:6: warning: invalid case style for function 'has_root_path' [readability-identifier-naming]
bool has_root_path(const Twine &path, Style style) {
     ^~~~~~~~~~~~~~
     hasRootPath
/home/jonas/opt/llvm/lib/Support/Path.cpp:646:33: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_root_path(const Twine &path, Style style) {
                                ^~~~~
                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:646:45: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_root_path(const Twine &path, Style style) {
                                            ^~~~~~
                                            Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:647:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:648:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:653:6: warning: invalid case style for function 'has_relative_path' [readability-identifier-naming]
bool has_relative_path(const Twine &path, Style style) {
     ^~~~~~~~~~~~~~~~~~
     hasRelativePath
/home/jonas/opt/llvm/lib/Support/Path.cpp:653:37: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_relative_path(const Twine &path, Style style) {
                                    ^~~~~
                                    Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:653:49: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_relative_path(const Twine &path, Style style) {
                                                ^~~~~~
                                                Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:654:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:655:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:660:6: warning: invalid case style for function 'has_filename' [readability-identifier-naming]
bool has_filename(const Twine &path, Style style) {
     ^~~~~~~~~~~~~
     hasFilename
/home/jonas/opt/llvm/lib/Support/Path.cpp:660:32: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_filename(const Twine &path, Style style) {
                               ^~~~~
                               Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:660:44: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_filename(const Twine &path, Style style) {
                                           ^~~~~~
                                           Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:661:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:662:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:667:6: warning: invalid case style for function 'has_parent_path' [readability-identifier-naming]
bool has_parent_path(const Twine &path, Style style) {
     ^~~~~~~~~~~~~~~~
     hasParentPath
/home/jonas/opt/llvm/lib/Support/Path.cpp:667:35: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_parent_path(const Twine &path, Style style) {
                                  ^~~~~
                                  Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:667:47: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_parent_path(const Twine &path, Style style) {
                                              ^~~~~~
                                              Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:668:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:669:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:674:6: warning: invalid case style for function 'has_stem' [readability-identifier-naming]
bool has_stem(const Twine &path, Style style) {
     ^~~~~~~~~
     hasStem
/home/jonas/opt/llvm/lib/Support/Path.cpp:674:28: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_stem(const Twine &path, Style style) {
                           ^~~~~
                           Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:674:40: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_stem(const Twine &path, Style style) {
                                       ^~~~~~
                                       Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:675:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:676:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:681:6: warning: invalid case style for function 'has_extension' [readability-identifier-naming]
bool has_extension(const Twine &path, Style style) {
     ^~~~~~~~~~~~~~
     hasExtension
/home/jonas/opt/llvm/lib/Support/Path.cpp:681:33: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool has_extension(const Twine &path, Style style) {
                                ^~~~~
                                Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:681:45: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool has_extension(const Twine &path, Style style) {
                                            ^~~~~~
                                            Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:682:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:683:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:688:6: warning: invalid case style for function 'is_absolute' [readability-identifier-naming]
bool is_absolute(const Twine &path, Style style) {
     ^~~~~~~~~~~~
     isAbsolute
/home/jonas/opt/llvm/lib/Support/Path.cpp:688:31: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool is_absolute(const Twine &path, Style style) {
                              ^~~~~
                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:688:43: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool is_absolute(const Twine &path, Style style) {
                                          ^~~~~~
                                          Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:689:20: warning: invalid case style for variable 'path_storage' [readability-identifier-naming]
  SmallString<128> path_storage;
                   ^~~~~~~~~~~~~
                   PathStorage
/home/jonas/opt/llvm/lib/Support/Path.cpp:690:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p = path.toStringRef(path_storage);
            ^
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:692:8: warning: invalid case style for variable 'rootDir' [readability-identifier-naming]
  bool rootDir = has_root_directory(p, style);
       ^~~~~~~
       RootDir
/home/jonas/opt/llvm/lib/Support/Path.cpp:693:8: warning: invalid case style for variable 'rootName' [readability-identifier-naming]
  bool rootName =
       ^~~~~~~~
       RootName
/home/jonas/opt/llvm/lib/Support/Path.cpp:699:6: warning: invalid case style for function 'is_relative' [readability-identifier-naming]
bool is_relative(const Twine &path, Style style) {
     ^~~~~~~~~~~~
     isRelative
/home/jonas/opt/llvm/lib/Support/Path.cpp:699:31: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool is_relative(const Twine &path, Style style) {
                              ^~~~~
                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:699:43: warning: invalid case style for parameter 'style' [readability-identifier-naming]
bool is_relative(const Twine &path, Style style) {
                                          ^~~~~~
                                          Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:703:11: warning: invalid case style for function 'remove_leading_dotslash' [readability-identifier-naming]
StringRef remove_leading_dotslash(StringRef Path, Style style) {
          ^~~~~~~~~~~~~~~~~~~~~~~~
          removeLeadingDotslash
/home/jonas/opt/llvm/lib/Support/Path.cpp:703:57: warning: invalid case style for parameter 'style' [readability-identifier-naming]
StringRef remove_leading_dotslash(StringRef Path, Style style) {
                                                        ^~~~~~
                                                        Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:706:12: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    Path = Path.substr(2);
           ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:707:12: warning: the 'empty' method should be used to check for emptiness instead of 'size' [readability-container-size-empty]
    while (Path.size() > 0 && is_separator(Path[0], style))
           ^~~~~~~~~~~~~~~
           !Path.empty()
../include/llvm/ADT/StringRef.h:133:10: note: method 'StringRef'::empty() defined here
    bool empty() const { return Length == 0; }
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:707:60: warning: statement should be inside braces [readability-braces-around-statements]
    while (Path.size() > 0 && is_separator(Path[0], style))
                                                           ^
                                                            {
/home/jonas/opt/llvm/lib/Support/Path.cpp:708:14: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      Path = Path.substr(1);
             ^
../include/llvm/ADT/StringRef.h:598:36: note: default parameter was declared here
    StringRef substr(size_t Start, size_t N = npos) const {
                                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:713:25: warning: invalid case style for function 'remove_dots' [readability-identifier-naming]
static SmallString<256> remove_dots(StringRef path, bool remove_dot_dot,
                        ^~~~~~~~~~~~
                        removeDots
/home/jonas/opt/llvm/lib/Support/Path.cpp:713:47: warning: invalid case style for parameter 'path' [readability-identifier-naming]
static SmallString<256> remove_dots(StringRef path, bool remove_dot_dot,
                                              ^~~~~
                                              Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:713:58: warning: invalid case style for parameter 'remove_dot_dot' [readability-identifier-naming]
static SmallString<256> remove_dots(StringRef path, bool remove_dot_dot,
                                                         ^~~~~~~~~~~~~~~
                                                         RemoveDotDot
/home/jonas/opt/llvm/lib/Support/Path.cpp:714:43: warning: invalid case style for parameter 'style' [readability-identifier-naming]
                                    Style style) {
                                          ^~~~~~
                                          Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:715:30: warning: invalid case style for variable 'components' [readability-identifier-naming]
  SmallVector<StringRef, 16> components;
                             ^~~~~~~~~~~
                             Components
/home/jonas/opt/llvm/lib/Support/Path.cpp:718:13: warning: invalid case style for variable 'rel' [readability-identifier-naming]
  StringRef rel = path::relative_path(path, style);
            ^~~
            Rel
/home/jonas/opt/llvm/lib/Support/Path.cpp:721:18: warning: statement should be inside braces [readability-braces-around-statements]
    if (C == ".")
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/Path.cpp:729:42: warning: statement should be inside braces [google-readability-braces-around-statements]
      if (path::is_absolute(path, style))
                                         ^
                                          {
/home/jonas/opt/llvm/lib/Support/Path.cpp:735:20: warning: invalid case style for variable 'buffer' [readability-identifier-naming]
  SmallString<256> buffer = path::root_path(path, style);
                   ^~~~~~
                   Buffer
/home/jonas/opt/llvm/lib/Support/Path.cpp:736:33: warning: statement should be inside braces [google-readability-braces-around-statements]
  for (StringRef C : components)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/Path.cpp:737:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    path::append(buffer, style, C);
    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:443:13: note: default parameter was declared here
            const Twine &b, const Twine &c, const Twine &d) {
            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:741:6: warning: invalid case style for function 'remove_dots' [readability-identifier-naming]
bool remove_dots(SmallVectorImpl<char> &path, bool remove_dot_dot,
     ^~~~~~~~~~~~
     removeDots
/home/jonas/opt/llvm/lib/Support/Path.cpp:741:41: warning: invalid case style for parameter 'path' [readability-identifier-naming]
bool remove_dots(SmallVectorImpl<char> &path, bool remove_dot_dot,
                                        ^~~~~
                                        Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:741:52: warning: invalid case style for parameter 'remove_dot_dot' [readability-identifier-naming]
bool remove_dots(SmallVectorImpl<char> &path, bool remove_dot_dot,
                                                   ^~~~~~~~~~~~~~~
                                                   RemoveDotDot
/home/jonas/opt/llvm/lib/Support/Path.cpp:742:24: warning: invalid case style for parameter 'style' [readability-identifier-naming]
                 Style style) {
                       ^~~~~~
                       Style
/home/jonas/opt/llvm/lib/Support/Path.cpp:743:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p(path.data(), path.size());
            ^~
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:745:20: warning: invalid case style for variable 'result' [readability-identifier-naming]
  SmallString<256> result = remove_dots(p, remove_dot_dot, style);
                   ^~~~~~
                   Result
/home/jonas/opt/llvm/lib/Support/Path.cpp:746:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (result == path)
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Path.cpp:757:41: warning: twine variables are prone to use-after-free bugs [llvm-twine-local]
std::error_code getUniqueID(const Twine Path, UniqueID &Result) {
                                        ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:759:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::error_code EC = status(Path, Status);
                       ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:760:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/Path.cpp:763:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:769:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return createUniqueEntity(Model, ResultFd, ResultPath, false, Mode, FS_File);
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:172:20: note: default parameter was declared here
                   sys::fs::OpenFlags Flags = sys::fs::OF_None) {
                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:772:66: warning: non-const reference parameter 'ResultFd', make it const or use a pointer [google-runtime-references]
static std::error_code createUniqueFile(const Twine &Model, int &ResultFd,
                                                                 ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:773:64: warning: non-const reference parameter 'ResultPath', make it const or use a pointer [google-runtime-references]
                                        SmallVectorImpl<char> &ResultPath,
                                                               ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:784:10: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/Path.cpp:792:46: warning: non-const reference parameter 'ResultFD', make it const or use a pointer [google-runtime-references]
createTemporaryFile(const Twine &Model, int &ResultFD,
                                             ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:793:50: warning: non-const reference parameter 'ResultPath', make it const or use a pointer [google-runtime-references]
                    llvm::SmallVectorImpl<char> &ResultPath, FSEntity Type) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:796:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(P.find_first_of(separators(Style::native)) == StringRef::npos &&
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:796:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  assert(P.find_first_of(separators(Style::native)) == StringRef::npos &&
         ^
../include/llvm/ADT/StringRef.h:404:43: note: default parameter was declared here
    size_t find_first_of(StringRef Chars, size_t From = 0) const;
                                          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:799:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return createUniqueEntity(P.begin(), ResultFD, ResultPath, true,
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:172:20: note: default parameter was declared here
                   sys::fs::OpenFlags Flags = sys::fs::OF_None) {
                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:804:65: warning: non-const reference parameter 'ResultFD', make it const or use a pointer [google-runtime-references]
createTemporaryFile(const Twine &Prefix, StringRef Suffix, int &ResultFD,
                                                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:805:50: warning: non-const reference parameter 'ResultPath', make it const or use a pointer [google-runtime-references]
                    llvm::SmallVectorImpl<char> &ResultPath, FSEntity Type) {
                                                 ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:821:10: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC)
         ^
          {
/home/jonas/opt/llvm/lib/Support/Path.cpp:834:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return createUniqueEntity(Prefix + "-%%%%%%", Dummy, ResultPath, true, 0,
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:172:20: note: default parameter was declared here
                   sys::fs::OpenFlags Flags = sys::fs::OF_None) {
                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:842:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return createUniqueEntity(Model, Dummy, ResultPath, false, 0, FS_Name);
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:172:20: note: default parameter was declared here
                   sys::fs::OpenFlags Flags = sys::fs::OF_None) {
                   ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:852:24: warning: invalid case style for function 'make_absolute' [readability-identifier-naming]
static std::error_code make_absolute(const Twine &current_directory,
                       ^~~~~~~~~~~~~~
                       makeAbsolute
/home/jonas/opt/llvm/lib/Support/Path.cpp:852:51: warning: invalid case style for parameter 'current_directory' [readability-identifier-naming]
static std::error_code make_absolute(const Twine &current_directory,
                                                  ^~~~~~~~~~~~~~~~~~
                                                  CurrentDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:853:61: warning: invalid case style for parameter 'path' [readability-identifier-naming]
                                     SmallVectorImpl<char> &path,
                                                            ^~~~~
                                                            Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:853:61: warning: non-const reference parameter 'path', make it const or use a pointer [google-runtime-references]
/home/jonas/opt/llvm/lib/Support/Path.cpp:854:43: warning: invalid case style for parameter 'use_current_directory' [readability-identifier-naming]
                                     bool use_current_directory) {
                                          ^~~~~~~~~~~~~~~~~~~~~~
                                          UseCurrentDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:855:13: warning: invalid case style for variable 'p' [readability-identifier-naming]
  StringRef p(path.data(), path.size());
            ^~
            P
/home/jonas/opt/llvm/lib/Support/Path.cpp:857:8: warning: invalid case style for variable 'rootDirectory' [readability-identifier-naming]
  bool rootDirectory = path::has_root_directory(p);
       ^~~~~~~~~~~~~
       RootDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:857:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  bool rootDirectory = path::has_root_directory(p);
                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:639:44: note: default parameter was declared here
bool has_root_directory(const Twine &path, Style style) {
                                           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:858:8: warning: invalid case style for variable 'rootName' [readability-identifier-naming]
  bool rootName =
       ^~~~~~~~
       RootName
/home/jonas/opt/llvm/lib/Support/Path.cpp:859:56: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      (real_style(Style::native) != Style::windows) || path::has_root_name(p);
                                                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:632:39: note: default parameter was declared here
bool has_root_name(const Twine &path, Style style) {
                                      ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:862:33: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (rootName && rootDirectory)
                                ^
                                 {
/home/jonas/opt/llvm/lib/Support/Path.cpp:863:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return std::error_code();
           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:866:20: warning: invalid case style for variable 'current_dir' [readability-identifier-naming]
  SmallString<128> current_dir;
                   ^~~~~~~~~~~~
                   CurrentDir
/home/jonas/opt/llvm/lib/Support/Path.cpp:867:29: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (use_current_directory)
                            ^
                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:869:28: warning: invalid case style for variable 'ec' [readability-identifier-naming]
  else if (std::error_code ec = current_path(current_dir))
                           ^~
                           Ec
/home/jonas/opt/llvm/lib/Support/Path.cpp:869:59: warning: statement should be inside braces [google-readability-braces-around-statements]
  else if (std::error_code ec = current_path(current_dir))
                                                          ^
                                                           {
/home/jonas/opt/llvm/lib/Support/Path.cpp:875:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    path::append(current_dir, p);
    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:58: note: default parameter was declared here
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                                         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:882:15: warning: invalid case style for variable 'cdrn' [readability-identifier-naming]
    StringRef cdrn = path::root_name(current_dir);
              ^~~~
              Cdrn
/home/jonas/opt/llvm/lib/Support/Path.cpp:882:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef cdrn = path::root_name(current_dir);
                     ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:397:37: note: default parameter was declared here
StringRef root_name(StringRef path, Style style) {
                                    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:883:22: warning: invalid case style for variable 'curDirRootName' [readability-identifier-naming]
    SmallString<128> curDirRootName(cdrn.begin(), cdrn.end());
                     ^~~~~~~~~~~~~~~
                     CurDirRootName
/home/jonas/opt/llvm/lib/Support/Path.cpp:884:5: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    path::append(curDirRootName, p);
    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:58: note: default parameter was declared here
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                                         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:891:15: warning: invalid case style for variable 'pRootName' [readability-identifier-naming]
    StringRef pRootName      = path::root_name(p);
              ^~~~~~~~~
              PRootName
/home/jonas/opt/llvm/lib/Support/Path.cpp:891:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef pRootName      = path::root_name(p);
                               ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:397:37: note: default parameter was declared here
StringRef root_name(StringRef path, Style style) {
                                    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:892:15: warning: invalid case style for variable 'bRootDirectory' [readability-identifier-naming]
    StringRef bRootDirectory = path::root_directory(current_dir);
              ^~~~~~~~~~~~~~
              BRootDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:892:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef bRootDirectory = path::root_directory(current_dir);
                               ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:414:42: note: default parameter was declared here
StringRef root_directory(StringRef path, Style style) {
                                         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:893:15: warning: invalid case style for variable 'bRelativePath' [readability-identifier-naming]
    StringRef bRelativePath  = path::relative_path(current_dir);
              ^~~~~~~~~~~~~
              BRelativePath
/home/jonas/opt/llvm/lib/Support/Path.cpp:893:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef bRelativePath  = path::relative_path(current_dir);
                               ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:437:41: note: default parameter was declared here
StringRef relative_path(StringRef path, Style style) {
                                        ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:894:15: warning: invalid case style for variable 'pRelativePath' [readability-identifier-naming]
    StringRef pRelativePath  = path::relative_path(p);
              ^~~~~~~~~~~~~
              PRelativePath
/home/jonas/opt/llvm/lib/Support/Path.cpp:894:32: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    StringRef pRelativePath  = path::relative_path(p);
                               ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:437:41: note: default parameter was declared here
StringRef relative_path(StringRef path, Style style) {
                                        ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:896:22: warning: invalid case style for variable 'res' [readability-identifier-naming]
    SmallString<128> res;
                     ^~~~
                     Res
/home/jonas/opt/llvm/lib/Support/Path.cpp:906:17: warning: invalid case style for function 'make_absolute' [readability-identifier-naming]
std::error_code make_absolute(const Twine &current_directory,
                ^~~~~~~~~~~~~~
                makeAbsolute
/home/jonas/opt/llvm/lib/Support/Path.cpp:906:44: warning: invalid case style for parameter 'current_directory' [readability-identifier-naming]
std::error_code make_absolute(const Twine &current_directory,
                                           ^~~~~~~~~~~~~~~~~~
                                           CurrentDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:907:54: warning: invalid case style for parameter 'path' [readability-identifier-naming]
                              SmallVectorImpl<char> &path) {
                                                     ^~~~~
                                                     Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:911:17: warning: invalid case style for function 'make_absolute' [readability-identifier-naming]
std::error_code make_absolute(SmallVectorImpl<char> &path) {
                ^~~~~~~~~~~~~~
                makeAbsolute
/home/jonas/opt/llvm/lib/Support/Path.cpp:911:54: warning: invalid case style for parameter 'path' [readability-identifier-naming]
std::error_code make_absolute(SmallVectorImpl<char> &path) {
                                                     ^~~~~
                                                     Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:915:17: warning: invalid case style for function 'create_directories' [readability-identifier-naming]
std::error_code create_directories(const Twine &Path, bool IgnoreExisting,
                ^~~~~~~~~~~~~~~~~~~
                createDirectories
/home/jonas/opt/llvm/lib/Support/Path.cpp:924:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (EC != errc::no_such_file_or_directory)
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:929:22: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  StringRef Parent = path::parent_path(P);
                     ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:491:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style) {
                                      ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:930:22: warning: statement should be inside braces [readability-braces-around-statements]
  if (Parent.empty())
                     ^
                      {
/home/jonas/opt/llvm/lib/Support/Path.cpp:933:64: warning: statement should be inside braces [google-readability-braces-around-statements]
  if ((EC = create_directories(Parent, IgnoreExisting, Perms)))
                                                               ^
                                                                {
/home/jonas/opt/llvm/lib/Support/Path.cpp:939:24: warning: invalid case style for function 'copy_file_internal' [readability-identifier-naming]
static std::error_code copy_file_internal(int ReadFD, int WriteFD) {
                       ^~~~~~~~~~~~~~~~~~~
                       copyFileInternal
/home/jonas/opt/llvm/lib/Support/Path.cpp:941:3: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  char *Buf = new char[BufSize];
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:941:3: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  char *Buf = new char[BufSize];
  ^~~~
  auto
/home/jonas/opt/llvm/lib/Support/Path.cpp:945:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (BytesRead <= 0)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Path.cpp:947:12: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
    while (BytesRead) {
           ^        ~
                     != 0
/home/jonas/opt/llvm/lib/Support/Path.cpp:949:28: warning: statement should be inside braces [readability-braces-around-statements]
      if (BytesWritten < 0)
                           ^
                            {
/home/jonas/opt/llvm/lib/Support/Path.cpp:953:26: warning: statement should be inside braces [readability-braces-around-statements]
    if (BytesWritten < 0)
                         ^
                          {
/home/jonas/opt/llvm/lib/Support/Path.cpp:956:3: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  delete[] Buf;
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:941:3: note: variable declared here
  char *Buf = new char[BufSize];
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:958:41: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BytesRead < 0 || BytesWritten < 0)
                                        ^
                                         {
/home/jonas/opt/llvm/lib/Support/Path.cpp:959:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return std::error_code(errno, std::generic_category());
           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:963:17: warning: invalid case style for function 'copy_file' [readability-identifier-naming]
std::error_code copy_file(const Twine &From, const Twine &To) {
                ^~~~~~~~~~
                copyFile
/home/jonas/opt/llvm/lib/Support/Path.cpp:965:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code EC = openFileForRead(From, ReadFD, OF_None))
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:1011:33: note: default parameter was declared here
                                SmallVectorImpl<char> *RealPath = nullptr);
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:965:67: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (std::error_code EC = openFileForRead(From, ReadFD, OF_None))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/Path.cpp:968:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
          openFileForWrite(To, WriteFD, CD_CreateAlways, OF_None)) {
          ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:929:45: note: default parameter was declared here
                 OpenFlags Flags = OF_None, unsigned Mode = 0666) {
                                            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:981:17: warning: invalid case style for function 'copy_file' [readability-identifier-naming]
std::error_code copy_file(const Twine &From, int ToFD) {
                ^~~~~~~~~~
                copyFile
/home/jonas/opt/llvm/lib/Support/Path.cpp:983:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code EC = openFileForRead(From, ReadFD, OF_None))
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:1011:33: note: default parameter was declared here
                                SmallVectorImpl<char> *RealPath = nullptr);
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:983:67: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (std::error_code EC = openFileForRead(From, ReadFD, OF_None))
                                                                  ^
                                                                   {
/home/jonas/opt/llvm/lib/Support/Path.cpp:993:25: warning: invalid case style for function 'md5_contents' [readability-identifier-naming]
ErrorOr<MD5::MD5Result> md5_contents(int FD) {
                        ^~~~~~~~~~~~~
                        md5Contents
/home/jonas/opt/llvm/lib/Support/Path.cpp:997:24: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  std::vector<uint8_t> Buf(BufSize);
                       ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/stl_vector.h:415:29: note: default parameter was declared here
      vector(size_type __n, const allocator_type& __a = allocator_type())
                            ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1001:24: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (BytesRead <= 0)
                       ^
                        {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1006:21: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (BytesRead < 0)
                    ^
                     {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1008:3: warning: uninitialized record type: 'Result' [cppcoreguidelines-pro-type-member-init]
  MD5::MD5Result Result;
  ^                    ~
                       {}
/home/jonas/opt/llvm/lib/Support/Path.cpp:1010:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Result;
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1013:25: warning: invalid case style for function 'md5_contents' [readability-identifier-naming]
ErrorOr<MD5::MD5Result> md5_contents(const Twine &Path) {
                        ^~~~~~~~~~~~~
                        md5Contents
/home/jonas/opt/llvm/lib/Support/Path.cpp:1015:17: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (auto EC = openFileForRead(Path, FD, OF_None))
                ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:1011:33: note: default parameter was declared here
                                SmallVectorImpl<char> *RealPath = nullptr);
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1015:52: warning: statement should be inside braces [readability-braces-around-statements]
  if (auto EC = openFileForRead(Path, FD, OF_None))
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1023:38: warning: invalid case style for parameter 'status' [readability-identifier-naming]
bool exists(const basic_file_status &status) {
                                     ^~~~~~~
                                     Status
/home/jonas/opt/llvm/lib/Support/Path.cpp:1027:6: warning: invalid case style for function 'status_known' [readability-identifier-naming]
bool status_known(const basic_file_status &s) {
     ^~~~~~~~~~~~~
     statusKnown
/home/jonas/opt/llvm/lib/Support/Path.cpp:1027:44: warning: invalid case style for parameter 's' [readability-identifier-naming]
bool status_known(const basic_file_status &s) {
                                           ^~
                                           S
/home/jonas/opt/llvm/lib/Support/Path.cpp:1031:11: warning: invalid case style for function 'get_file_type' [readability-identifier-naming]
file_type get_file_type(const Twine &Path, bool Follow) {
          ^~~~~~~~~~~~~~
          getFileType
/home/jonas/opt/llvm/lib/Support/Path.cpp:1032:15: warning: invalid case style for variable 'st' [readability-identifier-naming]
  file_status st;
              ^~~
              St
/home/jonas/opt/llvm/lib/Support/Path.cpp:1033:32: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (status(Path, st, Follow))
                               ^
                                {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1038:6: warning: invalid case style for function 'is_directory' [readability-identifier-naming]
bool is_directory(const basic_file_status &status) {
     ^~~~~~~~~~~~~
     isDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:1038:44: warning: invalid case style for parameter 'status' [readability-identifier-naming]
bool is_directory(const basic_file_status &status) {
                                           ^~~~~~~
                                           Status
/home/jonas/opt/llvm/lib/Support/Path.cpp:1042:17: warning: invalid case style for function 'is_directory' [readability-identifier-naming]
std::error_code is_directory(const Twine &path, bool &result) {
                ^~~~~~~~~~~~~
                isDirectory
/home/jonas/opt/llvm/lib/Support/Path.cpp:1042:43: warning: invalid case style for parameter 'path' [readability-identifier-naming]
std::error_code is_directory(const Twine &path, bool &result) {
                                          ^~~~~
                                          Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:1042:55: warning: invalid case style for parameter 'result' [readability-identifier-naming]
std::error_code is_directory(const Twine &path, bool &result) {
                                                      ^~~~~~~
                                                      Result
/home/jonas/opt/llvm/lib/Support/Path.cpp:1043:15: warning: invalid case style for variable 'st' [readability-identifier-naming]
  file_status st;
              ^~~
              St
/home/jonas/opt/llvm/lib/Support/Path.cpp:1044:23: warning: invalid case style for variable 'ec' [readability-identifier-naming]
  if (std::error_code ec = status(path, st))
                      ^~
                      Ec
/home/jonas/opt/llvm/lib/Support/Path.cpp:1044:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code ec = status(path, st))
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1044:45: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (std::error_code ec = status(path, st))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1047:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1050:6: warning: invalid case style for function 'is_regular_file' [readability-identifier-naming]
bool is_regular_file(const basic_file_status &status) {
     ^~~~~~~~~~~~~~~~
     isRegularFile
/home/jonas/opt/llvm/lib/Support/Path.cpp:1050:47: warning: invalid case style for parameter 'status' [readability-identifier-naming]
bool is_regular_file(const basic_file_status &status) {
                                              ^~~~~~~
                                              Status
/home/jonas/opt/llvm/lib/Support/Path.cpp:1054:17: warning: invalid case style for function 'is_regular_file' [readability-identifier-naming]
std::error_code is_regular_file(const Twine &path, bool &result) {
                ^~~~~~~~~~~~~~~~
                isRegularFile
/home/jonas/opt/llvm/lib/Support/Path.cpp:1054:46: warning: invalid case style for parameter 'path' [readability-identifier-naming]
std::error_code is_regular_file(const Twine &path, bool &result) {
                                             ^~~~~
                                             Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:1054:58: warning: invalid case style for parameter 'result' [readability-identifier-naming]
std::error_code is_regular_file(const Twine &path, bool &result) {
                                                         ^~~~~~~
                                                         Result
/home/jonas/opt/llvm/lib/Support/Path.cpp:1055:15: warning: invalid case style for variable 'st' [readability-identifier-naming]
  file_status st;
              ^~~
              St
/home/jonas/opt/llvm/lib/Support/Path.cpp:1056:23: warning: invalid case style for variable 'ec' [readability-identifier-naming]
  if (std::error_code ec = status(path, st))
                      ^~
                      Ec
/home/jonas/opt/llvm/lib/Support/Path.cpp:1056:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code ec = status(path, st))
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1056:45: warning: statement should be inside braces [readability-braces-around-statements]
  if (std::error_code ec = status(path, st))
                                            ^
                                             {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1059:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1062:6: warning: invalid case style for function 'is_symlink_file' [readability-identifier-naming]
bool is_symlink_file(const basic_file_status &status) {
     ^~~~~~~~~~~~~~~~
     isSymlinkFile
/home/jonas/opt/llvm/lib/Support/Path.cpp:1062:47: warning: invalid case style for parameter 'status' [readability-identifier-naming]
bool is_symlink_file(const basic_file_status &status) {
                                              ^~~~~~~
                                              Status
/home/jonas/opt/llvm/lib/Support/Path.cpp:1066:17: warning: invalid case style for function 'is_symlink_file' [readability-identifier-naming]
std::error_code is_symlink_file(const Twine &path, bool &result) {
                ^~~~~~~~~~~~~~~~
                isSymlinkFile
/home/jonas/opt/llvm/lib/Support/Path.cpp:1066:46: warning: invalid case style for parameter 'path' [readability-identifier-naming]
std::error_code is_symlink_file(const Twine &path, bool &result) {
                                             ^~~~~
                                             Path
/home/jonas/opt/llvm/lib/Support/Path.cpp:1066:58: warning: invalid case style for parameter 'result' [readability-identifier-naming]
std::error_code is_symlink_file(const Twine &path, bool &result) {
                                                         ^~~~~~~
                                                         Result
/home/jonas/opt/llvm/lib/Support/Path.cpp:1067:15: warning: invalid case style for variable 'st' [readability-identifier-naming]
  file_status st;
              ^~~
              St
/home/jonas/opt/llvm/lib/Support/Path.cpp:1068:23: warning: invalid case style for variable 'ec' [readability-identifier-naming]
  if (std::error_code ec = status(path, st, false))
                      ^~
                      Ec
/home/jonas/opt/llvm/lib/Support/Path.cpp:1068:52: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (std::error_code ec = status(path, st, false))
                                                   ^
                                                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1071:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1074:6: warning: invalid case style for function 'is_other' [readability-identifier-naming]
bool is_other(const basic_file_status &status) {
     ^~~~~~~~~
     isOther
/home/jonas/opt/llvm/lib/Support/Path.cpp:1074:40: warning: invalid case style for parameter 'status' [readability-identifier-naming]
bool is_other(const basic_file_status &status) {
                                       ^~~~~~~
                                       Status
/home/jonas/opt/llvm/lib/Support/Path.cpp:1080:17: warning: invalid case style for function 'is_other' [readability-identifier-naming]
std::error_code is_other(const Twine &Path, bool &Result) {
                ^~~~~~~~~
                isOther
/home/jonas/opt/llvm/lib/Support/Path.cpp:1082:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code EC = status(Path, FileStatus))
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1082:53: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (std::error_code EC = status(Path, FileStatus))
                                                    ^
                                                     {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1085:10: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
  return std::error_code();
         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1088:23: warning: invalid case style for function 'replace_filename' [readability-identifier-naming]
void directory_entry::replace_filename(const Twine &Filename, file_type Type,
                      ^~~~~~~~~~~~~~~~~
                      replaceFilename
/home/jonas/opt/llvm/lib/Support/Path.cpp:1090:30: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  SmallString<128> PathStr = path::parent_path(Path);
                             ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:491:39: note: default parameter was declared here
StringRef parent_path(StringRef path, Style style) {
                                      ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1091:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  path::append(PathStr, Filename);
  ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:480:58: note: default parameter was declared here
void append(SmallVectorImpl<char> &path, const Twine &a, const Twine &b,
                                                         ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1099:28: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (std::error_code EC = status(Path, Status))
                           ^
/home/jonas/opt/llvm/build_fast/../include/llvm/Support/FileSystem.h:623:24: note: default parameter was declared here
                       bool follow = true);
                       ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1099:49: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (std::error_code EC = status(Path, Status))
                                                ^
                                                 {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1102:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return Status.permissions();
         ^
../include/llvm/Support/ErrorOr.h:89:11: note: default parameter was declared here
          typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1121:11: warning: move constructors should be marked noexcept [hicpp-noexcept-move]
TempFile::TempFile(TempFile &&Other) { *this = std::move(Other); }
          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1122:21: warning: move assignment operators should be marked noexcept [hicpp-noexcept-move]
TempFile &TempFile::operator=(TempFile &&Other) {
                    ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1129:25: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
TempFile::~TempFile() { assert(Done); }
                        ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1138:16: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
    RemoveEC = fs::remove(TmpName);
               ^
/home/jonas/opt/llvm/build_fast/../lib/Support/Unix/Path.inc:343:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting) {
                                          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1143:17: warning: statement should be inside braces [google-readability-braces-around-statements]
  if (!RemoveEC)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1156:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  assert(!Done);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1182:18: warning: statement should be inside braces [google-readability-braces-around-statements]
    if (RenameEC)
                 ^
                  {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1183:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
      remove(TmpName);
      ^
/home/jonas/opt/llvm/build_fast/../lib/Support/Unix/Path.inc:343:43: note: default parameter was declared here
std::error_code remove(const Twine &path, bool IgnoreNonExisting) {
                                          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1188:17: warning: statement should be inside braces [hicpp-braces-around-statements]
  if (!RenameEC)
                ^
                 {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1201:3: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [hicpp-no-array-decay]
  assert(!Done);
  ^
/usr/include/assert.h:95:51: note: expanded from macro 'assert'
      : __assert_fail (#expr, __FILE__, __LINE__, __ASSERT_FUNCTION))
                                                  ^
/usr/include/assert.h:129:30: note: expanded from macro '__ASSERT_FUNCTION'
#   define __ASSERT_FUNCTION    __extension__ __PRETTY_FUNCTION__
                                ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1227:68: warning: statement should be inside braces [readability-braces-around-statements]
          createUniqueFile(Model, FD, ResultPath, Mode, OF_Delete))
                                                                   ^
                                                                    {
/home/jonas/opt/llvm/lib/Support/Path.cpp:1232:7: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  if (sys::RemoveFileOnSignal(ResultPath)) {
      ^
../include/llvm/Support/Signals.h:33:47: note: default parameter was declared here
  bool RemoveFileOnSignal(StringRef Filename, std::string* ErrMsg = nullptr);
                                              ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1239:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments]
  return std::move(Ret);
         ^
../include/llvm/Support/Error.h:476:12: note: default parameter was declared here
           typename std::enable_if<std::is_convertible<OtherT, T>::value>::type
           ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1241:2: warning: namespace 'fs' not terminated with a closing comment [llvm-namespace-comment]
}
 ^
  // namespace fs
/home/jonas/opt/llvm/lib/Support/Path.cpp:1119:11: note: namespace 'fs' starts here
namespace fs {
          ^
/home/jonas/opt/llvm/lib/Support/Path.cpp:1243:2: warning: namespace 'sys' ends with an unrecognized comment [llvm-namespace-comment]
} // end namsspace sys
 ^~~~~~~~~~~~~~~~~~~~~
  // namespace sys
/home/jonas/opt/llvm/lib/Support/Path.cpp:1118:11: note: namespace 'sys' starts here
namespace sys {
          ^
jonas/opt/llvm/lib/Support/Signals.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmp7g7uWo.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/TargetRegistry.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpkMyWa_.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/ThreadLocal.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpdvK1Hm.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Threading.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpC0S6Qc.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Valgrind.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpo5jy1m.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/lib/Support/Watchdog.cpp
clang-tidy-6.0 -header-filter=^/home/jonas/opt/llvm/.* -checks=* -export-fixes /tmp/tmpfTtvIF/tmpvodxm5.yaml -p=/home/jonas/opt/llvm /home/jonas/opt/llvm/tools/llvm-mca/lib/Support.cpp
Applying fixes ...
