/project/git/Source/kwsys/testCommandLineArguments1.cxx:83:16: warning: Null pointer passed as an argument to a 'nonnull' parameter [clang-analyzer-core.NonNullParamChecker]
               strcmp(valid_unused_args[cc], newArgv[cc]) != 0) {
               ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:35:7: note: Assuming the condition is false
  if (!arg.Parse()) {
      ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:35:3: note: Taking false branch
  if (!arg.Parse()) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:39:7: note: Assuming 'n' is equal to 24
  if (n != 24) {
      ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:39:3: note: Taking false branch
  if (n != 24) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:43:7: note: Assuming 'm' is non-null
  if (!m || strcmp(m, "test value") != 0) {
      ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:43:7: note: Left side of '||' is false
1 warning generated.

1 warning generated.

/project/git/Source/kwsys/testCommandLineArguments1.cxx:43:3: note: Taking false branch
  if (!m || strcmp(m, "test value") != 0) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:47:3: note: Taking true branch
  if (p != "1") {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:54:3: note: Taking true branch
  if (m) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:71:7: note: Assuming 'newArgc' is equal to 9
  if (newArgc != 9) {
      ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:71:3: note: Taking false branch
  if (newArgc != 9) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:75:3: note: Loop condition is true.  Entering loop body
  for (cc = 0; cc < newArgc; ++cc) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:79:5: note: Taking false branch
    if (cc >= 9) {
    ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:82:38: note: Left side of '&&' is false
    } else if (valid_unused_args[cc] &&
                                     ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:75:3: note: Loop condition is true.  Entering loop body
  for (cc = 0; cc < newArgc; ++cc) {
  ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:77:5: note: Calling 'operator<<<std::char_traits<char>>'
    std::cout << "Unused argument[" << cc << "] = [" << newArgv[cc] << "]"
    ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/ostream:558:11: note: Assuming '__s' is null
      if (!__s)
          ^
/usr/bin/../lib/gcc/x86_64-linux-gnu/7.3.0/../../../../include/c++/7.3.0/ostream:558:7: note: Taking true branch
      if (!__s)
      ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:77:5: note: Returning from 'operator<<<std::char_traits<char>>'
    std::cout << "Unused argument[" << cc << "] = [" << newArgv[cc] << "]"
    ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:79:5: note: Taking false branch
    if (cc >= 9) {
    ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:82:16: note: Left side of '&&' is true
    } else if (valid_unused_args[cc] &&
               ^
/project/git/Source/kwsys/testCommandLineArguments1.cxx:83:16: note: Null pointer passed as an argument to a 'nonnull' parameter
               strcmp(valid_unused_args[cc], newArgv[cc]) != 0) {
               ^
/project/git/Utilities/cmcurl/lib/urldata.h:1209:8: warning: Excessive padding in 'struct UrlState' (61 padding bytes, where 5 is optimal). 
Optimal fields order: 
conn_cache, 
lastconnect, 
headerbuff, 
headersize, 
buffer, 
ulbuf, 
current_speed, 
first_host, 
session, 
sessionage, 
scratch, 
prev_signal, 
resolver, 
most_recent_ftp_entrypath, 
crlf_conversions, 
pathbuffer, 
path, 
range, 
resume_from, 
rtsp_next_client_CSeq, 
rtsp_next_server_CSeq, 
rtsp_CSeq_recv, 
infilesize, 
drain, 
fread_func, 
in, 
stream_depends_on, 
keeps_speed, 
expiretime, 
authhost, 
authproxy, 
timeoutlist, 
timenode, 
digest, 
proxydigest, 
tempwrite, 
expires, 
first_remote_port, 
tempcount, 
os_errno, 
httpversion, 
stream_weight, 
multi_owned_by_easy, 
this_is_a_follow, 
refused_stream, 
errorbuf, 
allow_port, 
authproblem, 
ftp_trying_alternative, 
wildcardmatch, 
expect100header, 
prev_block_had_trailing_cr, 
slash_removed, 
use_range, 
rangestringalloc, 
done, 
stream_depends_e, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
struct UrlState {
       ^
project/git/Utilities/cmcurl/lib/urldata.h:1457:8: warning: Excessive padding in 'struct UserDefined' (120 padding bytes, where 0 is optimal). 
Optimal fields order: 
err, 
debugdata, 
errorbuffer, 
proxyport, 
out, 
in_set, 
writeheader, 
rtp_out, 
use_port, 
httpauth, 
proxyauth, 
socks5auth, 
followlocation, 
maxredirs, 
postfields, 
seek_func, 
postfieldsize, 
fwrite_func, 
fwrite_header, 
fwrite_rtp, 
fread_func_set, 
fprogress, 
fxferinfo, 
fdebug, 
ioctl_func, 
fsockopt, 
sockopt_client, 
fopensocket, 
opensocket_client, 
fclosesocket, 
closesocket_client, 
seek_client, 
convfromnetwork, 
convtonetwork, 
convfromutf8, 
progress_client, 
ioctl_client, 
timeout, 
connecttimeout, 
accepttimeout, 
happy_eyeballs_timeout, 
server_response_timeout, 
tftp_blksize, 
filesize, 
low_speed_limit, 
low_speed_time, 
max_send_speed, 
max_recv_speed, 
set_resume_from, 
headers, 
proxyheaders, 
httppost, 
quote, 
postquote, 
prequote, 
source_quote, 
source_prequote, 
source_postquote, 
telnet_options, 
resolve, 
connect_to, 
timevalue, 
httpversion, 
general_ssl, 
dns_cache_timeout, 
buffer_size, 
upload_buffer_size, 
private_data, 
http200aliases, 
ipver, 
max_filesize, 
ssh_keyfunc, 
ssh_keyfunc_userp, 
ssh_auth_types, 
new_file_perms, 
new_directory_perms, 
allowed_protocols, 
redir_protocols, 
mail_rcpt, 
rtspversion, 
chunk_bgn, 
chunk_end, 
fnmatch, 
fnmatch_data, 
gssapi_delegation, 
tcp_keepidle, 
tcp_keepintvl, 
maxconnects, 
expect_100_timeout, 
stream_depends_on, 
stream_dependents, 
resolver_start, 
resolver_start_client, 
ssl, 
proxy_ssl, 
mimepost, 
str, 
keep_post, 
localportrange, 
is_fread_set, 
is_fwrite_set, 
timecondition, 
httpreq, 
proxytype, 
ftp_filemethod, 
ftp_create_missing_dirs, 
use_netrc, 
use_ssl, 
ftpsslauth, 
ftp_ccc, 
scope_id, 
rtspreq, 
stream_weight, 
localport, 
free_referer, 
tftp_no_options, 
sep_headers, 
cookiesession, 
crlf, 
strip_path_slash, 
ssh_compression, 
get_filetime, 
tunnel_thru_httpproxy, 
prefer_ascii, 
ftp_append, 
ftp_list_only, 
ftp_use_port, 
hide_progress, 
http_fail_on_error, 
http_keep_sending_on_error, 
http_follow_location, 
http_transfer_encoding, 
allow_auth_to_other_hosts, 
include_header, 
http_set_referer, 
http_auto_referer, 
opt_no_body, 
upload, 
2 warnings generated.

verbose, 
krb, 
reuse_forbid, 
reuse_fresh, 
ftp_use_epsv, 
ftp_use_eprt, 
ftp_use_pret, 
no_signal, 
global_dns_cache, 
tcp_nodelay, 
ignorecl, 
ftp_skip_ip, 
connect_only, 
http_te_skip, 
http_ce_skip, 
proxy_transfer_mode, 
sasl_ir, 
wildcard_enabled, 
tcp_keepalive, 
tcp_fastopen, 
ssl_enable_npn, 
ssl_enable_alpn, 
path_as_is, 
pipewait, 
suppress_connect_headers, 
dns_shuffle_addresses, 
stream_depends_e, 
haproxyprotocol, 
abstract_unix_socket, 
disallow_username_in_url, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
struct UserDefined {
       ^

clang-tidy -header-filter=^/project/git/.* -checks=-*,clang-analyzer-* -export-fixes /tmp/tmpaBRDdi/tmpNNWfux.yaml -p=/project/git /project/git/Utilities/cmcurl/lib/file.c
/project/git/Utilities/cmcurl/lib/urldata.h:1209:8: warning: Excessive padding in 'struct UrlState' (61 padding bytes, where 5 is optimal). 
Optimal fields order: 
conn_cache, 
lastconnect, 
headerbuff, 
headersize, 
buffer, 
ulbuf, 
current_speed, 
first_host, 
session, 
sessionage, 
scratch, 
prev_signal, 
resolver, 
most_recent_ftp_entrypath, 
crlf_conversions, 
pathbuffer, 
path, 
range, 
resume_from, 
rtsp_next_client_CSeq, 
rtsp_next_server_CSeq, 
rtsp_CSeq_recv, 
infilesize, 
drain, 
fread_func, 
in, 
stream_depends_on, 
keeps_speed, 
expiretime, 
authhost, 
authproxy, 
timeoutlist, 
timenode, 
digest, 
proxydigest, 
tempwrite, 
expires, 
first_remote_port, 
tempcount, 
os_errno, 
httpversion, 
stream_weight, 
multi_owned_by_easy, 
this_is_a_follow, 
refused_stream, 
errorbuf, 
allow_port, 
authproblem, 
ftp_trying_alternative, 
wildcardmatch, 
expect100header, 
prev_block_had_trailing_cr, 
slash_removed, 
use_range, 
rangestringalloc, 
done, 
stream_depends_e, 
consider reordering the fields or adding explicit padding members [clang-analyzer-optin.performance.Padding]
struct UrlState {
       ^
/project/git/Tests/CMakeLib/testUTF8.cxx:11:3: warning: 3rd function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
  printf("[0x%02X,0x%02X,0x%02X,0x%02X]", static_cast<int>(d[0]),
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:93:3: note: Loop condition is false. Execution continues on line 98
  for (test_utf8_entry const* e = good_entry; e->n; ++e) {
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:98:3: note: Loop condition is true.  Entering loop body
  for (test_utf8_char const* c = bad_chars; (*c)[0]; ++c) {
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:99:5: note: Taking false branch
    if (!decode_bad(*c)) {
    ^
/project/git/Tests/CMakeLib/testUTF8.cxx:98:3: note: Loop condition is true.  Entering loop body
  for (test_utf8_char const* c = bad_chars; (*c)[0]; ++c) {
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:99:10: note: Calling 'decode_bad'
    if (!decode_bad(*c)) {
         ^
/project/git/Tests/CMakeLib/testUTF8.cxx:80:7: note: Assuming 'e' is null
  if (e) {
      ^
/project/git/Tests/CMakeLib/testUTF8.cxx:80:3: note: Taking false branch
  if (e) {
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:85:3: note: Calling 'report_bad'
  report_bad(true, s);
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:46:32: note: '?' condition is true
  printf("%s: decoding bad  ", passed ? "pass" : "FAIL");
                               ^
/project/git/Tests/CMakeLib/testUTF8.cxx:47:3: note: Calling 'test_utf8_char_print'
  test_utf8_char_print(c);
  ^
/project/git/Tests/CMakeLib/testUTF8.cxx:11:3: note: 3rd function call argument is an uninitialized value
  printf("[0x%02X,0x%02X,0x%02X,0x%02X]", static_cast<int>(d[0]),
  ^
/project/git/Source/cmServer.cxx:519:3: warning: Call to virtual function during construction [clang-analyzer-optin.cplusplus.VirtualCall]
  AddNewConnection(connection);
  ^
/project/git/Source/cmServer.cxx:519:3: note: This constructor of an object of type 'cmServerBase' has not returned when the virtual method was called
/project/git/Source/cmServer.cxx:519:3: note: Call to virtual function during construction
